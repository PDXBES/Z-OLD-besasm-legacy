//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SWI_2 {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SANDBOXDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SANDBOXDataSet : global::System.Data.DataSet {
        
        private SWSP_CULVERTDataTable tableSWSP_CULVERT;
        
        private SWSP_CULVERT_OPENING_TYPEDataTable tableSWSP_CULVERT_OPENING_TYPE;
        
        private SWSP_DITCHDataTable tableSWSP_DITCH;
        
        private SWSP_EVALUATORDataTable tableSWSP_EVALUATOR;
        
        private SWSP_FACING_TYPEDataTable tableSWSP_FACING_TYPE;
        
        private SWSP_GLOBAL_IDDataTable tableSWSP_GLOBAL_ID;
        
        private SWSP_MATERIAL_TYPEDataTable tableSWSP_MATERIAL_TYPE;
        
        private SWSP_PHOTODataTable tableSWSP_PHOTO;
        
        private SWSP_PIPEDataTable tableSWSP_PIPE;
        
        private SWSP_SHAPE_TYPEDataTable tableSWSP_SHAPE_TYPE;
        
        private SWSP_SUBWATERSHEDDataTable tableSWSP_SUBWATERSHED;
        
        private SWSP_SURVEY_PAGEDataTable tableSWSP_SURVEY_PAGE;
        
        private SWSP_SURVEY_PAGE_EVALUATORDataTable tableSWSP_SURVEY_PAGE_EVALUATOR;
        
        private SWSP_VIEWDataTable tableSWSP_VIEW;
        
        private SWSP_WATERSHEDDataTable tableSWSP_WATERSHED;
        
        private global::System.Data.DataRelation relationFK_CULVERT_CULVERT_OPENING_TYPE;
        
        private global::System.Data.DataRelation relationFK_CULVERT_FACING_TYPE;
        
        private global::System.Data.DataRelation relationFK_CULVERT_MATERIAL_TYPE;
        
        private global::System.Data.DataRelation relationFK_CULVERT_SHAPE_TYPE;
        
        private global::System.Data.DataRelation relationFK_CULVERT_SURVEY_PAGE;
        
        private global::System.Data.DataRelation relationFK_SWSP_CULVERT_SWSP_GLOBAL_ID;
        
        private global::System.Data.DataRelation relationFK_DITCH_FACING_TYPE;
        
        private global::System.Data.DataRelation relationFK_DITCH_MATERIAL_TYPE;
        
        private global::System.Data.DataRelation relationFK_DITCH_SURVEY_PAGE;
        
        private global::System.Data.DataRelation relationFK_SWSP_DITCH_SWSP_GLOBAL_ID;
        
        private global::System.Data.DataRelation relationFK_PHOTO_CULVERT;
        
        private global::System.Data.DataRelation relationFK_PHOTO_DITCH;
        
        private global::System.Data.DataRelation relationFK_PHOTO_PIPE;
        
        private global::System.Data.DataRelation relationFK_PIPE_MATERIAL_TYPE;
        
        private global::System.Data.DataRelation relationFK_PIPE_SHAPE_TYPE;
        
        private global::System.Data.DataRelation relationFK_PIPE_SURVEY_PAGE;
        
        private global::System.Data.DataRelation relationFK_SWSP_PIPE_SWSP_GLOBAL_ID;
        
        private global::System.Data.DataRelation relationFK_SUBWATERSHED_WATERSHED;
        
        private global::System.Data.DataRelation relationFK_SURVEY_PAGE_VIEW;
        
        private global::System.Data.DataRelation relationFK_SURVEY_PAGE_EVALUATOR_EVALUATOR;
        
        private global::System.Data.DataRelation relationFK_SURVEY_PAGE_EVALUATOR_SURVEY_PAGE;
        
        private global::System.Data.DataRelation relationFK_VIEW_SUBWATERSHED;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SANDBOXDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SANDBOXDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["SWSP_CULVERT"] != null)) {
                    base.Tables.Add(new SWSP_CULVERTDataTable(ds.Tables["SWSP_CULVERT"]));
                }
                if ((ds.Tables["SWSP_CULVERT_OPENING_TYPE"] != null)) {
                    base.Tables.Add(new SWSP_CULVERT_OPENING_TYPEDataTable(ds.Tables["SWSP_CULVERT_OPENING_TYPE"]));
                }
                if ((ds.Tables["SWSP_DITCH"] != null)) {
                    base.Tables.Add(new SWSP_DITCHDataTable(ds.Tables["SWSP_DITCH"]));
                }
                if ((ds.Tables["SWSP_EVALUATOR"] != null)) {
                    base.Tables.Add(new SWSP_EVALUATORDataTable(ds.Tables["SWSP_EVALUATOR"]));
                }
                if ((ds.Tables["SWSP_FACING_TYPE"] != null)) {
                    base.Tables.Add(new SWSP_FACING_TYPEDataTable(ds.Tables["SWSP_FACING_TYPE"]));
                }
                if ((ds.Tables["SWSP_GLOBAL_ID"] != null)) {
                    base.Tables.Add(new SWSP_GLOBAL_IDDataTable(ds.Tables["SWSP_GLOBAL_ID"]));
                }
                if ((ds.Tables["SWSP_MATERIAL_TYPE"] != null)) {
                    base.Tables.Add(new SWSP_MATERIAL_TYPEDataTable(ds.Tables["SWSP_MATERIAL_TYPE"]));
                }
                if ((ds.Tables["SWSP_PHOTO"] != null)) {
                    base.Tables.Add(new SWSP_PHOTODataTable(ds.Tables["SWSP_PHOTO"]));
                }
                if ((ds.Tables["SWSP_PIPE"] != null)) {
                    base.Tables.Add(new SWSP_PIPEDataTable(ds.Tables["SWSP_PIPE"]));
                }
                if ((ds.Tables["SWSP_SHAPE_TYPE"] != null)) {
                    base.Tables.Add(new SWSP_SHAPE_TYPEDataTable(ds.Tables["SWSP_SHAPE_TYPE"]));
                }
                if ((ds.Tables["SWSP_SUBWATERSHED"] != null)) {
                    base.Tables.Add(new SWSP_SUBWATERSHEDDataTable(ds.Tables["SWSP_SUBWATERSHED"]));
                }
                if ((ds.Tables["SWSP_SURVEY_PAGE"] != null)) {
                    base.Tables.Add(new SWSP_SURVEY_PAGEDataTable(ds.Tables["SWSP_SURVEY_PAGE"]));
                }
                if ((ds.Tables["SWSP_SURVEY_PAGE_EVALUATOR"] != null)) {
                    base.Tables.Add(new SWSP_SURVEY_PAGE_EVALUATORDataTable(ds.Tables["SWSP_SURVEY_PAGE_EVALUATOR"]));
                }
                if ((ds.Tables["SWSP_VIEW"] != null)) {
                    base.Tables.Add(new SWSP_VIEWDataTable(ds.Tables["SWSP_VIEW"]));
                }
                if ((ds.Tables["SWSP_WATERSHED"] != null)) {
                    base.Tables.Add(new SWSP_WATERSHEDDataTable(ds.Tables["SWSP_WATERSHED"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SWSP_CULVERTDataTable SWSP_CULVERT {
            get {
                return this.tableSWSP_CULVERT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SWSP_CULVERT_OPENING_TYPEDataTable SWSP_CULVERT_OPENING_TYPE {
            get {
                return this.tableSWSP_CULVERT_OPENING_TYPE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SWSP_DITCHDataTable SWSP_DITCH {
            get {
                return this.tableSWSP_DITCH;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SWSP_EVALUATORDataTable SWSP_EVALUATOR {
            get {
                return this.tableSWSP_EVALUATOR;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SWSP_FACING_TYPEDataTable SWSP_FACING_TYPE {
            get {
                return this.tableSWSP_FACING_TYPE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SWSP_GLOBAL_IDDataTable SWSP_GLOBAL_ID {
            get {
                return this.tableSWSP_GLOBAL_ID;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SWSP_MATERIAL_TYPEDataTable SWSP_MATERIAL_TYPE {
            get {
                return this.tableSWSP_MATERIAL_TYPE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SWSP_PHOTODataTable SWSP_PHOTO {
            get {
                return this.tableSWSP_PHOTO;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SWSP_PIPEDataTable SWSP_PIPE {
            get {
                return this.tableSWSP_PIPE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SWSP_SHAPE_TYPEDataTable SWSP_SHAPE_TYPE {
            get {
                return this.tableSWSP_SHAPE_TYPE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SWSP_SUBWATERSHEDDataTable SWSP_SUBWATERSHED {
            get {
                return this.tableSWSP_SUBWATERSHED;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SWSP_SURVEY_PAGEDataTable SWSP_SURVEY_PAGE {
            get {
                return this.tableSWSP_SURVEY_PAGE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SWSP_SURVEY_PAGE_EVALUATORDataTable SWSP_SURVEY_PAGE_EVALUATOR {
            get {
                return this.tableSWSP_SURVEY_PAGE_EVALUATOR;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SWSP_VIEWDataTable SWSP_VIEW {
            get {
                return this.tableSWSP_VIEW;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SWSP_WATERSHEDDataTable SWSP_WATERSHED {
            get {
                return this.tableSWSP_WATERSHED;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            SANDBOXDataSet cln = ((SANDBOXDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SWSP_CULVERT"] != null)) {
                    base.Tables.Add(new SWSP_CULVERTDataTable(ds.Tables["SWSP_CULVERT"]));
                }
                if ((ds.Tables["SWSP_CULVERT_OPENING_TYPE"] != null)) {
                    base.Tables.Add(new SWSP_CULVERT_OPENING_TYPEDataTable(ds.Tables["SWSP_CULVERT_OPENING_TYPE"]));
                }
                if ((ds.Tables["SWSP_DITCH"] != null)) {
                    base.Tables.Add(new SWSP_DITCHDataTable(ds.Tables["SWSP_DITCH"]));
                }
                if ((ds.Tables["SWSP_EVALUATOR"] != null)) {
                    base.Tables.Add(new SWSP_EVALUATORDataTable(ds.Tables["SWSP_EVALUATOR"]));
                }
                if ((ds.Tables["SWSP_FACING_TYPE"] != null)) {
                    base.Tables.Add(new SWSP_FACING_TYPEDataTable(ds.Tables["SWSP_FACING_TYPE"]));
                }
                if ((ds.Tables["SWSP_GLOBAL_ID"] != null)) {
                    base.Tables.Add(new SWSP_GLOBAL_IDDataTable(ds.Tables["SWSP_GLOBAL_ID"]));
                }
                if ((ds.Tables["SWSP_MATERIAL_TYPE"] != null)) {
                    base.Tables.Add(new SWSP_MATERIAL_TYPEDataTable(ds.Tables["SWSP_MATERIAL_TYPE"]));
                }
                if ((ds.Tables["SWSP_PHOTO"] != null)) {
                    base.Tables.Add(new SWSP_PHOTODataTable(ds.Tables["SWSP_PHOTO"]));
                }
                if ((ds.Tables["SWSP_PIPE"] != null)) {
                    base.Tables.Add(new SWSP_PIPEDataTable(ds.Tables["SWSP_PIPE"]));
                }
                if ((ds.Tables["SWSP_SHAPE_TYPE"] != null)) {
                    base.Tables.Add(new SWSP_SHAPE_TYPEDataTable(ds.Tables["SWSP_SHAPE_TYPE"]));
                }
                if ((ds.Tables["SWSP_SUBWATERSHED"] != null)) {
                    base.Tables.Add(new SWSP_SUBWATERSHEDDataTable(ds.Tables["SWSP_SUBWATERSHED"]));
                }
                if ((ds.Tables["SWSP_SURVEY_PAGE"] != null)) {
                    base.Tables.Add(new SWSP_SURVEY_PAGEDataTable(ds.Tables["SWSP_SURVEY_PAGE"]));
                }
                if ((ds.Tables["SWSP_SURVEY_PAGE_EVALUATOR"] != null)) {
                    base.Tables.Add(new SWSP_SURVEY_PAGE_EVALUATORDataTable(ds.Tables["SWSP_SURVEY_PAGE_EVALUATOR"]));
                }
                if ((ds.Tables["SWSP_VIEW"] != null)) {
                    base.Tables.Add(new SWSP_VIEWDataTable(ds.Tables["SWSP_VIEW"]));
                }
                if ((ds.Tables["SWSP_WATERSHED"] != null)) {
                    base.Tables.Add(new SWSP_WATERSHEDDataTable(ds.Tables["SWSP_WATERSHED"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSWSP_CULVERT = ((SWSP_CULVERTDataTable)(base.Tables["SWSP_CULVERT"]));
            if ((initTable == true)) {
                if ((this.tableSWSP_CULVERT != null)) {
                    this.tableSWSP_CULVERT.InitVars();
                }
            }
            this.tableSWSP_CULVERT_OPENING_TYPE = ((SWSP_CULVERT_OPENING_TYPEDataTable)(base.Tables["SWSP_CULVERT_OPENING_TYPE"]));
            if ((initTable == true)) {
                if ((this.tableSWSP_CULVERT_OPENING_TYPE != null)) {
                    this.tableSWSP_CULVERT_OPENING_TYPE.InitVars();
                }
            }
            this.tableSWSP_DITCH = ((SWSP_DITCHDataTable)(base.Tables["SWSP_DITCH"]));
            if ((initTable == true)) {
                if ((this.tableSWSP_DITCH != null)) {
                    this.tableSWSP_DITCH.InitVars();
                }
            }
            this.tableSWSP_EVALUATOR = ((SWSP_EVALUATORDataTable)(base.Tables["SWSP_EVALUATOR"]));
            if ((initTable == true)) {
                if ((this.tableSWSP_EVALUATOR != null)) {
                    this.tableSWSP_EVALUATOR.InitVars();
                }
            }
            this.tableSWSP_FACING_TYPE = ((SWSP_FACING_TYPEDataTable)(base.Tables["SWSP_FACING_TYPE"]));
            if ((initTable == true)) {
                if ((this.tableSWSP_FACING_TYPE != null)) {
                    this.tableSWSP_FACING_TYPE.InitVars();
                }
            }
            this.tableSWSP_GLOBAL_ID = ((SWSP_GLOBAL_IDDataTable)(base.Tables["SWSP_GLOBAL_ID"]));
            if ((initTable == true)) {
                if ((this.tableSWSP_GLOBAL_ID != null)) {
                    this.tableSWSP_GLOBAL_ID.InitVars();
                }
            }
            this.tableSWSP_MATERIAL_TYPE = ((SWSP_MATERIAL_TYPEDataTable)(base.Tables["SWSP_MATERIAL_TYPE"]));
            if ((initTable == true)) {
                if ((this.tableSWSP_MATERIAL_TYPE != null)) {
                    this.tableSWSP_MATERIAL_TYPE.InitVars();
                }
            }
            this.tableSWSP_PHOTO = ((SWSP_PHOTODataTable)(base.Tables["SWSP_PHOTO"]));
            if ((initTable == true)) {
                if ((this.tableSWSP_PHOTO != null)) {
                    this.tableSWSP_PHOTO.InitVars();
                }
            }
            this.tableSWSP_PIPE = ((SWSP_PIPEDataTable)(base.Tables["SWSP_PIPE"]));
            if ((initTable == true)) {
                if ((this.tableSWSP_PIPE != null)) {
                    this.tableSWSP_PIPE.InitVars();
                }
            }
            this.tableSWSP_SHAPE_TYPE = ((SWSP_SHAPE_TYPEDataTable)(base.Tables["SWSP_SHAPE_TYPE"]));
            if ((initTable == true)) {
                if ((this.tableSWSP_SHAPE_TYPE != null)) {
                    this.tableSWSP_SHAPE_TYPE.InitVars();
                }
            }
            this.tableSWSP_SUBWATERSHED = ((SWSP_SUBWATERSHEDDataTable)(base.Tables["SWSP_SUBWATERSHED"]));
            if ((initTable == true)) {
                if ((this.tableSWSP_SUBWATERSHED != null)) {
                    this.tableSWSP_SUBWATERSHED.InitVars();
                }
            }
            this.tableSWSP_SURVEY_PAGE = ((SWSP_SURVEY_PAGEDataTable)(base.Tables["SWSP_SURVEY_PAGE"]));
            if ((initTable == true)) {
                if ((this.tableSWSP_SURVEY_PAGE != null)) {
                    this.tableSWSP_SURVEY_PAGE.InitVars();
                }
            }
            this.tableSWSP_SURVEY_PAGE_EVALUATOR = ((SWSP_SURVEY_PAGE_EVALUATORDataTable)(base.Tables["SWSP_SURVEY_PAGE_EVALUATOR"]));
            if ((initTable == true)) {
                if ((this.tableSWSP_SURVEY_PAGE_EVALUATOR != null)) {
                    this.tableSWSP_SURVEY_PAGE_EVALUATOR.InitVars();
                }
            }
            this.tableSWSP_VIEW = ((SWSP_VIEWDataTable)(base.Tables["SWSP_VIEW"]));
            if ((initTable == true)) {
                if ((this.tableSWSP_VIEW != null)) {
                    this.tableSWSP_VIEW.InitVars();
                }
            }
            this.tableSWSP_WATERSHED = ((SWSP_WATERSHEDDataTable)(base.Tables["SWSP_WATERSHED"]));
            if ((initTable == true)) {
                if ((this.tableSWSP_WATERSHED != null)) {
                    this.tableSWSP_WATERSHED.InitVars();
                }
            }
            this.relationFK_CULVERT_CULVERT_OPENING_TYPE = this.Relations["FK_CULVERT_CULVERT_OPENING_TYPE"];
            this.relationFK_CULVERT_FACING_TYPE = this.Relations["FK_CULVERT_FACING_TYPE"];
            this.relationFK_CULVERT_MATERIAL_TYPE = this.Relations["FK_CULVERT_MATERIAL_TYPE"];
            this.relationFK_CULVERT_SHAPE_TYPE = this.Relations["FK_CULVERT_SHAPE_TYPE"];
            this.relationFK_CULVERT_SURVEY_PAGE = this.Relations["FK_CULVERT_SURVEY_PAGE"];
            this.relationFK_SWSP_CULVERT_SWSP_GLOBAL_ID = this.Relations["FK_SWSP_CULVERT_SWSP_GLOBAL_ID"];
            this.relationFK_DITCH_FACING_TYPE = this.Relations["FK_DITCH_FACING_TYPE"];
            this.relationFK_DITCH_MATERIAL_TYPE = this.Relations["FK_DITCH_MATERIAL_TYPE"];
            this.relationFK_DITCH_SURVEY_PAGE = this.Relations["FK_DITCH_SURVEY_PAGE"];
            this.relationFK_SWSP_DITCH_SWSP_GLOBAL_ID = this.Relations["FK_SWSP_DITCH_SWSP_GLOBAL_ID"];
            this.relationFK_PHOTO_CULVERT = this.Relations["FK_PHOTO_CULVERT"];
            this.relationFK_PHOTO_DITCH = this.Relations["FK_PHOTO_DITCH"];
            this.relationFK_PHOTO_PIPE = this.Relations["FK_PHOTO_PIPE"];
            this.relationFK_PIPE_MATERIAL_TYPE = this.Relations["FK_PIPE_MATERIAL_TYPE"];
            this.relationFK_PIPE_SHAPE_TYPE = this.Relations["FK_PIPE_SHAPE_TYPE"];
            this.relationFK_PIPE_SURVEY_PAGE = this.Relations["FK_PIPE_SURVEY_PAGE"];
            this.relationFK_SWSP_PIPE_SWSP_GLOBAL_ID = this.Relations["FK_SWSP_PIPE_SWSP_GLOBAL_ID"];
            this.relationFK_SUBWATERSHED_WATERSHED = this.Relations["FK_SUBWATERSHED_WATERSHED"];
            this.relationFK_SURVEY_PAGE_VIEW = this.Relations["FK_SURVEY_PAGE_VIEW"];
            this.relationFK_SURVEY_PAGE_EVALUATOR_EVALUATOR = this.Relations["FK_SURVEY_PAGE_EVALUATOR_EVALUATOR"];
            this.relationFK_SURVEY_PAGE_EVALUATOR_SURVEY_PAGE = this.Relations["FK_SURVEY_PAGE_EVALUATOR_SURVEY_PAGE"];
            this.relationFK_VIEW_SUBWATERSHED = this.Relations["FK_VIEW_SUBWATERSHED"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SANDBOXDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SANDBOXDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSWSP_CULVERT = new SWSP_CULVERTDataTable();
            base.Tables.Add(this.tableSWSP_CULVERT);
            this.tableSWSP_CULVERT_OPENING_TYPE = new SWSP_CULVERT_OPENING_TYPEDataTable();
            base.Tables.Add(this.tableSWSP_CULVERT_OPENING_TYPE);
            this.tableSWSP_DITCH = new SWSP_DITCHDataTable();
            base.Tables.Add(this.tableSWSP_DITCH);
            this.tableSWSP_EVALUATOR = new SWSP_EVALUATORDataTable();
            base.Tables.Add(this.tableSWSP_EVALUATOR);
            this.tableSWSP_FACING_TYPE = new SWSP_FACING_TYPEDataTable();
            base.Tables.Add(this.tableSWSP_FACING_TYPE);
            this.tableSWSP_GLOBAL_ID = new SWSP_GLOBAL_IDDataTable();
            base.Tables.Add(this.tableSWSP_GLOBAL_ID);
            this.tableSWSP_MATERIAL_TYPE = new SWSP_MATERIAL_TYPEDataTable();
            base.Tables.Add(this.tableSWSP_MATERIAL_TYPE);
            this.tableSWSP_PHOTO = new SWSP_PHOTODataTable();
            base.Tables.Add(this.tableSWSP_PHOTO);
            this.tableSWSP_PIPE = new SWSP_PIPEDataTable();
            base.Tables.Add(this.tableSWSP_PIPE);
            this.tableSWSP_SHAPE_TYPE = new SWSP_SHAPE_TYPEDataTable();
            base.Tables.Add(this.tableSWSP_SHAPE_TYPE);
            this.tableSWSP_SUBWATERSHED = new SWSP_SUBWATERSHEDDataTable();
            base.Tables.Add(this.tableSWSP_SUBWATERSHED);
            this.tableSWSP_SURVEY_PAGE = new SWSP_SURVEY_PAGEDataTable();
            base.Tables.Add(this.tableSWSP_SURVEY_PAGE);
            this.tableSWSP_SURVEY_PAGE_EVALUATOR = new SWSP_SURVEY_PAGE_EVALUATORDataTable();
            base.Tables.Add(this.tableSWSP_SURVEY_PAGE_EVALUATOR);
            this.tableSWSP_VIEW = new SWSP_VIEWDataTable();
            base.Tables.Add(this.tableSWSP_VIEW);
            this.tableSWSP_WATERSHED = new SWSP_WATERSHEDDataTable();
            base.Tables.Add(this.tableSWSP_WATERSHED);
            this.relationFK_CULVERT_CULVERT_OPENING_TYPE = new global::System.Data.DataRelation("FK_CULVERT_CULVERT_OPENING_TYPE", new global::System.Data.DataColumn[] {
                        this.tableSWSP_CULVERT_OPENING_TYPE.culvert_opening_type_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSWSP_CULVERT.culvert_openingColumn}, false);
            this.Relations.Add(this.relationFK_CULVERT_CULVERT_OPENING_TYPE);
            this.relationFK_CULVERT_FACING_TYPE = new global::System.Data.DataRelation("FK_CULVERT_FACING_TYPE", new global::System.Data.DataColumn[] {
                        this.tableSWSP_FACING_TYPE.facing_type_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSWSP_CULVERT.facingColumn}, false);
            this.Relations.Add(this.relationFK_CULVERT_FACING_TYPE);
            this.relationFK_CULVERT_MATERIAL_TYPE = new global::System.Data.DataRelation("FK_CULVERT_MATERIAL_TYPE", new global::System.Data.DataColumn[] {
                        this.tableSWSP_MATERIAL_TYPE.material_type_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSWSP_CULVERT.materialColumn}, false);
            this.Relations.Add(this.relationFK_CULVERT_MATERIAL_TYPE);
            this.relationFK_CULVERT_SHAPE_TYPE = new global::System.Data.DataRelation("FK_CULVERT_SHAPE_TYPE", new global::System.Data.DataColumn[] {
                        this.tableSWSP_SHAPE_TYPE.shape_type_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSWSP_CULVERT.shapeColumn}, false);
            this.Relations.Add(this.relationFK_CULVERT_SHAPE_TYPE);
            this.relationFK_CULVERT_SURVEY_PAGE = new global::System.Data.DataRelation("FK_CULVERT_SURVEY_PAGE", new global::System.Data.DataColumn[] {
                        this.tableSWSP_SURVEY_PAGE.survey_page_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSWSP_CULVERT.survey_page_idColumn}, false);
            this.Relations.Add(this.relationFK_CULVERT_SURVEY_PAGE);
            this.relationFK_SWSP_CULVERT_SWSP_GLOBAL_ID = new global::System.Data.DataRelation("FK_SWSP_CULVERT_SWSP_GLOBAL_ID", new global::System.Data.DataColumn[] {
                        this.tableSWSP_GLOBAL_ID.global_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSWSP_CULVERT.global_idColumn}, false);
            this.Relations.Add(this.relationFK_SWSP_CULVERT_SWSP_GLOBAL_ID);
            this.relationFK_DITCH_FACING_TYPE = new global::System.Data.DataRelation("FK_DITCH_FACING_TYPE", new global::System.Data.DataColumn[] {
                        this.tableSWSP_FACING_TYPE.facing_type_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSWSP_DITCH.facingColumn}, false);
            this.Relations.Add(this.relationFK_DITCH_FACING_TYPE);
            this.relationFK_DITCH_MATERIAL_TYPE = new global::System.Data.DataRelation("FK_DITCH_MATERIAL_TYPE", new global::System.Data.DataColumn[] {
                        this.tableSWSP_MATERIAL_TYPE.material_type_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSWSP_DITCH.materialColumn}, false);
            this.Relations.Add(this.relationFK_DITCH_MATERIAL_TYPE);
            this.relationFK_DITCH_SURVEY_PAGE = new global::System.Data.DataRelation("FK_DITCH_SURVEY_PAGE", new global::System.Data.DataColumn[] {
                        this.tableSWSP_SURVEY_PAGE.survey_page_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSWSP_DITCH.survey_page_idColumn}, false);
            this.Relations.Add(this.relationFK_DITCH_SURVEY_PAGE);
            this.relationFK_SWSP_DITCH_SWSP_GLOBAL_ID = new global::System.Data.DataRelation("FK_SWSP_DITCH_SWSP_GLOBAL_ID", new global::System.Data.DataColumn[] {
                        this.tableSWSP_GLOBAL_ID.global_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSWSP_DITCH.global_idColumn}, false);
            this.Relations.Add(this.relationFK_SWSP_DITCH_SWSP_GLOBAL_ID);
            this.relationFK_PHOTO_CULVERT = new global::System.Data.DataRelation("FK_PHOTO_CULVERT", new global::System.Data.DataColumn[] {
                        this.tableSWSP_CULVERT.global_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSWSP_PHOTO.global_idColumn}, false);
            this.Relations.Add(this.relationFK_PHOTO_CULVERT);
            this.relationFK_PHOTO_DITCH = new global::System.Data.DataRelation("FK_PHOTO_DITCH", new global::System.Data.DataColumn[] {
                        this.tableSWSP_DITCH.global_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSWSP_PHOTO.global_idColumn}, false);
            this.Relations.Add(this.relationFK_PHOTO_DITCH);
            this.relationFK_PHOTO_PIPE = new global::System.Data.DataRelation("FK_PHOTO_PIPE", new global::System.Data.DataColumn[] {
                        this.tableSWSP_PIPE.global_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSWSP_PHOTO.global_idColumn}, false);
            this.Relations.Add(this.relationFK_PHOTO_PIPE);
            this.relationFK_PIPE_MATERIAL_TYPE = new global::System.Data.DataRelation("FK_PIPE_MATERIAL_TYPE", new global::System.Data.DataColumn[] {
                        this.tableSWSP_MATERIAL_TYPE.material_type_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSWSP_PIPE.materialColumn}, false);
            this.Relations.Add(this.relationFK_PIPE_MATERIAL_TYPE);
            this.relationFK_PIPE_SHAPE_TYPE = new global::System.Data.DataRelation("FK_PIPE_SHAPE_TYPE", new global::System.Data.DataColumn[] {
                        this.tableSWSP_SHAPE_TYPE.shape_type_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSWSP_PIPE.shapeColumn}, false);
            this.Relations.Add(this.relationFK_PIPE_SHAPE_TYPE);
            this.relationFK_PIPE_SURVEY_PAGE = new global::System.Data.DataRelation("FK_PIPE_SURVEY_PAGE", new global::System.Data.DataColumn[] {
                        this.tableSWSP_SURVEY_PAGE.survey_page_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSWSP_PIPE.survey_page_idColumn}, false);
            this.Relations.Add(this.relationFK_PIPE_SURVEY_PAGE);
            this.relationFK_SWSP_PIPE_SWSP_GLOBAL_ID = new global::System.Data.DataRelation("FK_SWSP_PIPE_SWSP_GLOBAL_ID", new global::System.Data.DataColumn[] {
                        this.tableSWSP_GLOBAL_ID.global_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSWSP_PIPE.global_idColumn}, false);
            this.Relations.Add(this.relationFK_SWSP_PIPE_SWSP_GLOBAL_ID);
            this.relationFK_SUBWATERSHED_WATERSHED = new global::System.Data.DataRelation("FK_SUBWATERSHED_WATERSHED", new global::System.Data.DataColumn[] {
                        this.tableSWSP_WATERSHED.watershed_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSWSP_SUBWATERSHED.watershed_idColumn}, false);
            this.Relations.Add(this.relationFK_SUBWATERSHED_WATERSHED);
            this.relationFK_SURVEY_PAGE_VIEW = new global::System.Data.DataRelation("FK_SURVEY_PAGE_VIEW", new global::System.Data.DataColumn[] {
                        this.tableSWSP_VIEW.view_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSWSP_SURVEY_PAGE.view_idColumn}, false);
            this.Relations.Add(this.relationFK_SURVEY_PAGE_VIEW);
            this.relationFK_SURVEY_PAGE_EVALUATOR_EVALUATOR = new global::System.Data.DataRelation("FK_SURVEY_PAGE_EVALUATOR_EVALUATOR", new global::System.Data.DataColumn[] {
                        this.tableSWSP_EVALUATOR.evaluator_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSWSP_SURVEY_PAGE_EVALUATOR.evaluator_idColumn}, false);
            this.Relations.Add(this.relationFK_SURVEY_PAGE_EVALUATOR_EVALUATOR);
            this.relationFK_SURVEY_PAGE_EVALUATOR_SURVEY_PAGE = new global::System.Data.DataRelation("FK_SURVEY_PAGE_EVALUATOR_SURVEY_PAGE", new global::System.Data.DataColumn[] {
                        this.tableSWSP_SURVEY_PAGE.survey_page_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSWSP_SURVEY_PAGE_EVALUATOR.survey_page_idColumn}, false);
            this.Relations.Add(this.relationFK_SURVEY_PAGE_EVALUATOR_SURVEY_PAGE);
            this.relationFK_VIEW_SUBWATERSHED = new global::System.Data.DataRelation("FK_VIEW_SUBWATERSHED", new global::System.Data.DataColumn[] {
                        this.tableSWSP_SUBWATERSHED.subwatershed_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSWSP_VIEW.subwatershed_idColumn}, false);
            this.Relations.Add(this.relationFK_VIEW_SUBWATERSHED);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSWSP_CULVERT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSWSP_CULVERT_OPENING_TYPE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSWSP_DITCH() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSWSP_EVALUATOR() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSWSP_FACING_TYPE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSWSP_GLOBAL_ID() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSWSP_MATERIAL_TYPE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSWSP_PHOTO() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSWSP_PIPE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSWSP_SHAPE_TYPE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSWSP_SUBWATERSHED() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSWSP_SURVEY_PAGE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSWSP_SURVEY_PAGE_EVALUATOR() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSWSP_VIEW() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSWSP_WATERSHED() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SANDBOXDataSet ds = new SANDBOXDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SWSP_CULVERTRowChangeEventHandler(object sender, SWSP_CULVERTRowChangeEvent e);
        
        public delegate void SWSP_CULVERT_OPENING_TYPERowChangeEventHandler(object sender, SWSP_CULVERT_OPENING_TYPERowChangeEvent e);
        
        public delegate void SWSP_DITCHRowChangeEventHandler(object sender, SWSP_DITCHRowChangeEvent e);
        
        public delegate void SWSP_EVALUATORRowChangeEventHandler(object sender, SWSP_EVALUATORRowChangeEvent e);
        
        public delegate void SWSP_FACING_TYPERowChangeEventHandler(object sender, SWSP_FACING_TYPERowChangeEvent e);
        
        public delegate void SWSP_GLOBAL_IDRowChangeEventHandler(object sender, SWSP_GLOBAL_IDRowChangeEvent e);
        
        public delegate void SWSP_MATERIAL_TYPERowChangeEventHandler(object sender, SWSP_MATERIAL_TYPERowChangeEvent e);
        
        public delegate void SWSP_PHOTORowChangeEventHandler(object sender, SWSP_PHOTORowChangeEvent e);
        
        public delegate void SWSP_PIPERowChangeEventHandler(object sender, SWSP_PIPERowChangeEvent e);
        
        public delegate void SWSP_SHAPE_TYPERowChangeEventHandler(object sender, SWSP_SHAPE_TYPERowChangeEvent e);
        
        public delegate void SWSP_SUBWATERSHEDRowChangeEventHandler(object sender, SWSP_SUBWATERSHEDRowChangeEvent e);
        
        public delegate void SWSP_SURVEY_PAGERowChangeEventHandler(object sender, SWSP_SURVEY_PAGERowChangeEvent e);
        
        public delegate void SWSP_SURVEY_PAGE_EVALUATORRowChangeEventHandler(object sender, SWSP_SURVEY_PAGE_EVALUATORRowChangeEvent e);
        
        public delegate void SWSP_VIEWRowChangeEventHandler(object sender, SWSP_VIEWRowChangeEvent e);
        
        public delegate void SWSP_WATERSHEDRowChangeEventHandler(object sender, SWSP_WATERSHEDRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SWSP_CULVERTDataTable : global::System.Data.TypedTableBase<SWSP_CULVERTRow> {
            
            private global::System.Data.DataColumn columnculvert_id;
            
            private global::System.Data.DataColumn columnglobal_id;
            
            private global::System.Data.DataColumn columnsurvey_page_id;
            
            private global::System.Data.DataColumn columnnode;
            
            private global::System.Data.DataColumn columnfacing;
            
            private global::System.Data.DataColumn columnculvert_opening;
            
            private global::System.Data.DataColumn columnshape;
            
            private global::System.Data.DataColumn columnfull_diam_in;
            
            private global::System.Data.DataColumn columnunobstructed_height_in;
            
            private global::System.Data.DataColumn columnmaterial;
            
            private global::System.Data.DataColumn columncomment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_CULVERTDataTable() {
                this.TableName = "SWSP_CULVERT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_CULVERTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SWSP_CULVERTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn culvert_idColumn {
                get {
                    return this.columnculvert_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn global_idColumn {
                get {
                    return this.columnglobal_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn survey_page_idColumn {
                get {
                    return this.columnsurvey_page_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nodeColumn {
                get {
                    return this.columnnode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn facingColumn {
                get {
                    return this.columnfacing;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn culvert_openingColumn {
                get {
                    return this.columnculvert_opening;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn shapeColumn {
                get {
                    return this.columnshape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn full_diam_inColumn {
                get {
                    return this.columnfull_diam_in;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unobstructed_height_inColumn {
                get {
                    return this.columnunobstructed_height_in;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn materialColumn {
                get {
                    return this.columnmaterial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn commentColumn {
                get {
                    return this.columncomment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_CULVERTRow this[int index] {
                get {
                    return ((SWSP_CULVERTRow)(this.Rows[index]));
                }
            }
            
            public event SWSP_CULVERTRowChangeEventHandler SWSP_CULVERTRowChanging;
            
            public event SWSP_CULVERTRowChangeEventHandler SWSP_CULVERTRowChanged;
            
            public event SWSP_CULVERTRowChangeEventHandler SWSP_CULVERTRowDeleting;
            
            public event SWSP_CULVERTRowChangeEventHandler SWSP_CULVERTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSWSP_CULVERTRow(SWSP_CULVERTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_CULVERTRow AddSWSP_CULVERTRow(SWSP_GLOBAL_IDRow parentSWSP_GLOBAL_IDRowByFK_SWSP_CULVERT_SWSP_GLOBAL_ID, SWSP_SURVEY_PAGERow parentSWSP_SURVEY_PAGERowByFK_CULVERT_SURVEY_PAGE, string node, SWSP_FACING_TYPERow parentSWSP_FACING_TYPERowByFK_CULVERT_FACING_TYPE, SWSP_CULVERT_OPENING_TYPERow parentSWSP_CULVERT_OPENING_TYPERowByFK_CULVERT_CULVERT_OPENING_TYPE, SWSP_SHAPE_TYPERow parentSWSP_SHAPE_TYPERowByFK_CULVERT_SHAPE_TYPE, double full_diam_in, double unobstructed_height_in, SWSP_MATERIAL_TYPERow parentSWSP_MATERIAL_TYPERowByFK_CULVERT_MATERIAL_TYPE, string comment) {
                SWSP_CULVERTRow rowSWSP_CULVERTRow = ((SWSP_CULVERTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        node,
                        null,
                        null,
                        null,
                        full_diam_in,
                        unobstructed_height_in,
                        null,
                        comment};
                if ((parentSWSP_GLOBAL_IDRowByFK_SWSP_CULVERT_SWSP_GLOBAL_ID != null)) {
                    columnValuesArray[1] = parentSWSP_GLOBAL_IDRowByFK_SWSP_CULVERT_SWSP_GLOBAL_ID[0];
                }
                if ((parentSWSP_SURVEY_PAGERowByFK_CULVERT_SURVEY_PAGE != null)) {
                    columnValuesArray[2] = parentSWSP_SURVEY_PAGERowByFK_CULVERT_SURVEY_PAGE[0];
                }
                if ((parentSWSP_FACING_TYPERowByFK_CULVERT_FACING_TYPE != null)) {
                    columnValuesArray[4] = parentSWSP_FACING_TYPERowByFK_CULVERT_FACING_TYPE[0];
                }
                if ((parentSWSP_CULVERT_OPENING_TYPERowByFK_CULVERT_CULVERT_OPENING_TYPE != null)) {
                    columnValuesArray[5] = parentSWSP_CULVERT_OPENING_TYPERowByFK_CULVERT_CULVERT_OPENING_TYPE[0];
                }
                if ((parentSWSP_SHAPE_TYPERowByFK_CULVERT_SHAPE_TYPE != null)) {
                    columnValuesArray[6] = parentSWSP_SHAPE_TYPERowByFK_CULVERT_SHAPE_TYPE[0];
                }
                if ((parentSWSP_MATERIAL_TYPERowByFK_CULVERT_MATERIAL_TYPE != null)) {
                    columnValuesArray[9] = parentSWSP_MATERIAL_TYPERowByFK_CULVERT_MATERIAL_TYPE[0];
                }
                rowSWSP_CULVERTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSWSP_CULVERTRow);
                return rowSWSP_CULVERTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_CULVERTRow FindByculvert_id(int culvert_id) {
                return ((SWSP_CULVERTRow)(this.Rows.Find(new object[] {
                            culvert_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SWSP_CULVERTDataTable cln = ((SWSP_CULVERTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SWSP_CULVERTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnculvert_id = base.Columns["culvert_id"];
                this.columnglobal_id = base.Columns["global_id"];
                this.columnsurvey_page_id = base.Columns["survey_page_id"];
                this.columnnode = base.Columns["node"];
                this.columnfacing = base.Columns["facing"];
                this.columnculvert_opening = base.Columns["culvert_opening"];
                this.columnshape = base.Columns["shape"];
                this.columnfull_diam_in = base.Columns["full_diam_in"];
                this.columnunobstructed_height_in = base.Columns["unobstructed_height_in"];
                this.columnmaterial = base.Columns["material"];
                this.columncomment = base.Columns["comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnculvert_id = new global::System.Data.DataColumn("culvert_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnculvert_id);
                this.columnglobal_id = new global::System.Data.DataColumn("global_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnglobal_id);
                this.columnsurvey_page_id = new global::System.Data.DataColumn("survey_page_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsurvey_page_id);
                this.columnnode = new global::System.Data.DataColumn("node", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnode);
                this.columnfacing = new global::System.Data.DataColumn("facing", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfacing);
                this.columnculvert_opening = new global::System.Data.DataColumn("culvert_opening", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnculvert_opening);
                this.columnshape = new global::System.Data.DataColumn("shape", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnshape);
                this.columnfull_diam_in = new global::System.Data.DataColumn("full_diam_in", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfull_diam_in);
                this.columnunobstructed_height_in = new global::System.Data.DataColumn("unobstructed_height_in", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunobstructed_height_in);
                this.columnmaterial = new global::System.Data.DataColumn("material", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmaterial);
                this.columncomment = new global::System.Data.DataColumn("comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncomment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnculvert_id}, true));
                this.columnculvert_id.AutoIncrement = true;
                this.columnculvert_id.AutoIncrementSeed = -1;
                this.columnculvert_id.AutoIncrementStep = -1;
                this.columnculvert_id.AllowDBNull = false;
                this.columnculvert_id.ReadOnly = true;
                this.columnculvert_id.Unique = true;
                this.columnglobal_id.AllowDBNull = false;
                this.columnsurvey_page_id.AllowDBNull = false;
                this.columnnode.MaxLength = 10;
                this.columncomment.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_CULVERTRow NewSWSP_CULVERTRow() {
                return ((SWSP_CULVERTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SWSP_CULVERTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SWSP_CULVERTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SWSP_CULVERTRowChanged != null)) {
                    this.SWSP_CULVERTRowChanged(this, new SWSP_CULVERTRowChangeEvent(((SWSP_CULVERTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SWSP_CULVERTRowChanging != null)) {
                    this.SWSP_CULVERTRowChanging(this, new SWSP_CULVERTRowChangeEvent(((SWSP_CULVERTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SWSP_CULVERTRowDeleted != null)) {
                    this.SWSP_CULVERTRowDeleted(this, new SWSP_CULVERTRowChangeEvent(((SWSP_CULVERTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SWSP_CULVERTRowDeleting != null)) {
                    this.SWSP_CULVERTRowDeleting(this, new SWSP_CULVERTRowChangeEvent(((SWSP_CULVERTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSWSP_CULVERTRow(SWSP_CULVERTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SANDBOXDataSet ds = new SANDBOXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SWSP_CULVERTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SWSP_CULVERT_OPENING_TYPEDataTable : global::System.Data.TypedTableBase<SWSP_CULVERT_OPENING_TYPERow> {
            
            private global::System.Data.DataColumn columnculvert_opening_type_id;
            
            private global::System.Data.DataColumn columnculvert_opening;
            
            private global::System.Data.DataColumn columndescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_CULVERT_OPENING_TYPEDataTable() {
                this.TableName = "SWSP_CULVERT_OPENING_TYPE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_CULVERT_OPENING_TYPEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SWSP_CULVERT_OPENING_TYPEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn culvert_opening_type_idColumn {
                get {
                    return this.columnculvert_opening_type_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn culvert_openingColumn {
                get {
                    return this.columnculvert_opening;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_CULVERT_OPENING_TYPERow this[int index] {
                get {
                    return ((SWSP_CULVERT_OPENING_TYPERow)(this.Rows[index]));
                }
            }
            
            public event SWSP_CULVERT_OPENING_TYPERowChangeEventHandler SWSP_CULVERT_OPENING_TYPERowChanging;
            
            public event SWSP_CULVERT_OPENING_TYPERowChangeEventHandler SWSP_CULVERT_OPENING_TYPERowChanged;
            
            public event SWSP_CULVERT_OPENING_TYPERowChangeEventHandler SWSP_CULVERT_OPENING_TYPERowDeleting;
            
            public event SWSP_CULVERT_OPENING_TYPERowChangeEventHandler SWSP_CULVERT_OPENING_TYPERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSWSP_CULVERT_OPENING_TYPERow(SWSP_CULVERT_OPENING_TYPERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_CULVERT_OPENING_TYPERow AddSWSP_CULVERT_OPENING_TYPERow(string culvert_opening, string description) {
                SWSP_CULVERT_OPENING_TYPERow rowSWSP_CULVERT_OPENING_TYPERow = ((SWSP_CULVERT_OPENING_TYPERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        culvert_opening,
                        description};
                rowSWSP_CULVERT_OPENING_TYPERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSWSP_CULVERT_OPENING_TYPERow);
                return rowSWSP_CULVERT_OPENING_TYPERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_CULVERT_OPENING_TYPERow FindByculvert_opening_type_id(int culvert_opening_type_id) {
                return ((SWSP_CULVERT_OPENING_TYPERow)(this.Rows.Find(new object[] {
                            culvert_opening_type_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SWSP_CULVERT_OPENING_TYPEDataTable cln = ((SWSP_CULVERT_OPENING_TYPEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SWSP_CULVERT_OPENING_TYPEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnculvert_opening_type_id = base.Columns["culvert_opening_type_id"];
                this.columnculvert_opening = base.Columns["culvert_opening"];
                this.columndescription = base.Columns["description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnculvert_opening_type_id = new global::System.Data.DataColumn("culvert_opening_type_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnculvert_opening_type_id);
                this.columnculvert_opening = new global::System.Data.DataColumn("culvert_opening", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnculvert_opening);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnculvert_opening_type_id}, true));
                this.columnculvert_opening_type_id.AutoIncrement = true;
                this.columnculvert_opening_type_id.AutoIncrementSeed = -1;
                this.columnculvert_opening_type_id.AutoIncrementStep = -1;
                this.columnculvert_opening_type_id.AllowDBNull = false;
                this.columnculvert_opening_type_id.ReadOnly = true;
                this.columnculvert_opening_type_id.Unique = true;
                this.columnculvert_opening.AllowDBNull = false;
                this.columnculvert_opening.MaxLength = 1;
                this.columndescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_CULVERT_OPENING_TYPERow NewSWSP_CULVERT_OPENING_TYPERow() {
                return ((SWSP_CULVERT_OPENING_TYPERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SWSP_CULVERT_OPENING_TYPERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SWSP_CULVERT_OPENING_TYPERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SWSP_CULVERT_OPENING_TYPERowChanged != null)) {
                    this.SWSP_CULVERT_OPENING_TYPERowChanged(this, new SWSP_CULVERT_OPENING_TYPERowChangeEvent(((SWSP_CULVERT_OPENING_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SWSP_CULVERT_OPENING_TYPERowChanging != null)) {
                    this.SWSP_CULVERT_OPENING_TYPERowChanging(this, new SWSP_CULVERT_OPENING_TYPERowChangeEvent(((SWSP_CULVERT_OPENING_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SWSP_CULVERT_OPENING_TYPERowDeleted != null)) {
                    this.SWSP_CULVERT_OPENING_TYPERowDeleted(this, new SWSP_CULVERT_OPENING_TYPERowChangeEvent(((SWSP_CULVERT_OPENING_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SWSP_CULVERT_OPENING_TYPERowDeleting != null)) {
                    this.SWSP_CULVERT_OPENING_TYPERowDeleting(this, new SWSP_CULVERT_OPENING_TYPERowChangeEvent(((SWSP_CULVERT_OPENING_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSWSP_CULVERT_OPENING_TYPERow(SWSP_CULVERT_OPENING_TYPERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SANDBOXDataSet ds = new SANDBOXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SWSP_CULVERT_OPENING_TYPEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SWSP_DITCHDataTable : global::System.Data.TypedTableBase<SWSP_DITCHRow> {
            
            private global::System.Data.DataColumn columnditch_id;
            
            private global::System.Data.DataColumn columnglobal_id;
            
            private global::System.Data.DataColumn columnsurvey_page_id;
            
            private global::System.Data.DataColumn columnnode;
            
            private global::System.Data.DataColumn columnfacing;
            
            private global::System.Data.DataColumn columndepth_in;
            
            private global::System.Data.DataColumn columntop_width_in;
            
            private global::System.Data.DataColumn columnbottom_width_in;
            
            private global::System.Data.DataColumn columnmaterial;
            
            private global::System.Data.DataColumn columncomment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_DITCHDataTable() {
                this.TableName = "SWSP_DITCH";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_DITCHDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SWSP_DITCHDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ditch_idColumn {
                get {
                    return this.columnditch_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn global_idColumn {
                get {
                    return this.columnglobal_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn survey_page_idColumn {
                get {
                    return this.columnsurvey_page_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nodeColumn {
                get {
                    return this.columnnode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn facingColumn {
                get {
                    return this.columnfacing;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn depth_inColumn {
                get {
                    return this.columndepth_in;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn top_width_inColumn {
                get {
                    return this.columntop_width_in;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bottom_width_inColumn {
                get {
                    return this.columnbottom_width_in;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn materialColumn {
                get {
                    return this.columnmaterial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn commentColumn {
                get {
                    return this.columncomment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_DITCHRow this[int index] {
                get {
                    return ((SWSP_DITCHRow)(this.Rows[index]));
                }
            }
            
            public event SWSP_DITCHRowChangeEventHandler SWSP_DITCHRowChanging;
            
            public event SWSP_DITCHRowChangeEventHandler SWSP_DITCHRowChanged;
            
            public event SWSP_DITCHRowChangeEventHandler SWSP_DITCHRowDeleting;
            
            public event SWSP_DITCHRowChangeEventHandler SWSP_DITCHRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSWSP_DITCHRow(SWSP_DITCHRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_DITCHRow AddSWSP_DITCHRow(SWSP_GLOBAL_IDRow parentSWSP_GLOBAL_IDRowByFK_SWSP_DITCH_SWSP_GLOBAL_ID, SWSP_SURVEY_PAGERow parentSWSP_SURVEY_PAGERowByFK_DITCH_SURVEY_PAGE, string node, SWSP_FACING_TYPERow parentSWSP_FACING_TYPERowByFK_DITCH_FACING_TYPE, double depth_in, double top_width_in, double bottom_width_in, SWSP_MATERIAL_TYPERow parentSWSP_MATERIAL_TYPERowByFK_DITCH_MATERIAL_TYPE, string comment) {
                SWSP_DITCHRow rowSWSP_DITCHRow = ((SWSP_DITCHRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        node,
                        null,
                        depth_in,
                        top_width_in,
                        bottom_width_in,
                        null,
                        comment};
                if ((parentSWSP_GLOBAL_IDRowByFK_SWSP_DITCH_SWSP_GLOBAL_ID != null)) {
                    columnValuesArray[1] = parentSWSP_GLOBAL_IDRowByFK_SWSP_DITCH_SWSP_GLOBAL_ID[0];
                }
                if ((parentSWSP_SURVEY_PAGERowByFK_DITCH_SURVEY_PAGE != null)) {
                    columnValuesArray[2] = parentSWSP_SURVEY_PAGERowByFK_DITCH_SURVEY_PAGE[0];
                }
                if ((parentSWSP_FACING_TYPERowByFK_DITCH_FACING_TYPE != null)) {
                    columnValuesArray[4] = parentSWSP_FACING_TYPERowByFK_DITCH_FACING_TYPE[0];
                }
                if ((parentSWSP_MATERIAL_TYPERowByFK_DITCH_MATERIAL_TYPE != null)) {
                    columnValuesArray[8] = parentSWSP_MATERIAL_TYPERowByFK_DITCH_MATERIAL_TYPE[0];
                }
                rowSWSP_DITCHRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSWSP_DITCHRow);
                return rowSWSP_DITCHRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_DITCHRow FindByditch_id(int ditch_id) {
                return ((SWSP_DITCHRow)(this.Rows.Find(new object[] {
                            ditch_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SWSP_DITCHDataTable cln = ((SWSP_DITCHDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SWSP_DITCHDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnditch_id = base.Columns["ditch_id"];
                this.columnglobal_id = base.Columns["global_id"];
                this.columnsurvey_page_id = base.Columns["survey_page_id"];
                this.columnnode = base.Columns["node"];
                this.columnfacing = base.Columns["facing"];
                this.columndepth_in = base.Columns["depth_in"];
                this.columntop_width_in = base.Columns["top_width_in"];
                this.columnbottom_width_in = base.Columns["bottom_width_in"];
                this.columnmaterial = base.Columns["material"];
                this.columncomment = base.Columns["comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnditch_id = new global::System.Data.DataColumn("ditch_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnditch_id);
                this.columnglobal_id = new global::System.Data.DataColumn("global_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnglobal_id);
                this.columnsurvey_page_id = new global::System.Data.DataColumn("survey_page_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsurvey_page_id);
                this.columnnode = new global::System.Data.DataColumn("node", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnode);
                this.columnfacing = new global::System.Data.DataColumn("facing", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfacing);
                this.columndepth_in = new global::System.Data.DataColumn("depth_in", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndepth_in);
                this.columntop_width_in = new global::System.Data.DataColumn("top_width_in", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntop_width_in);
                this.columnbottom_width_in = new global::System.Data.DataColumn("bottom_width_in", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbottom_width_in);
                this.columnmaterial = new global::System.Data.DataColumn("material", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmaterial);
                this.columncomment = new global::System.Data.DataColumn("comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncomment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnditch_id}, true));
                this.columnditch_id.AutoIncrement = true;
                this.columnditch_id.AutoIncrementSeed = -1;
                this.columnditch_id.AutoIncrementStep = -1;
                this.columnditch_id.AllowDBNull = false;
                this.columnditch_id.ReadOnly = true;
                this.columnditch_id.Unique = true;
                this.columnglobal_id.AllowDBNull = false;
                this.columnsurvey_page_id.AllowDBNull = false;
                this.columnnode.MaxLength = 10;
                this.columncomment.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_DITCHRow NewSWSP_DITCHRow() {
                return ((SWSP_DITCHRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SWSP_DITCHRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SWSP_DITCHRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SWSP_DITCHRowChanged != null)) {
                    this.SWSP_DITCHRowChanged(this, new SWSP_DITCHRowChangeEvent(((SWSP_DITCHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SWSP_DITCHRowChanging != null)) {
                    this.SWSP_DITCHRowChanging(this, new SWSP_DITCHRowChangeEvent(((SWSP_DITCHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SWSP_DITCHRowDeleted != null)) {
                    this.SWSP_DITCHRowDeleted(this, new SWSP_DITCHRowChangeEvent(((SWSP_DITCHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SWSP_DITCHRowDeleting != null)) {
                    this.SWSP_DITCHRowDeleting(this, new SWSP_DITCHRowChangeEvent(((SWSP_DITCHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSWSP_DITCHRow(SWSP_DITCHRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SANDBOXDataSet ds = new SANDBOXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SWSP_DITCHDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SWSP_EVALUATORDataTable : global::System.Data.TypedTableBase<SWSP_EVALUATORRow> {
            
            private global::System.Data.DataColumn columnevaluator_id;
            
            private global::System.Data.DataColumn columninitials;
            
            private global::System.Data.DataColumn columnlast_name;
            
            private global::System.Data.DataColumn columnfirst_name;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_EVALUATORDataTable() {
                this.TableName = "SWSP_EVALUATOR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_EVALUATORDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SWSP_EVALUATORDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn evaluator_idColumn {
                get {
                    return this.columnevaluator_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn initialsColumn {
                get {
                    return this.columninitials;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn last_nameColumn {
                get {
                    return this.columnlast_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn first_nameColumn {
                get {
                    return this.columnfirst_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_EVALUATORRow this[int index] {
                get {
                    return ((SWSP_EVALUATORRow)(this.Rows[index]));
                }
            }
            
            public event SWSP_EVALUATORRowChangeEventHandler SWSP_EVALUATORRowChanging;
            
            public event SWSP_EVALUATORRowChangeEventHandler SWSP_EVALUATORRowChanged;
            
            public event SWSP_EVALUATORRowChangeEventHandler SWSP_EVALUATORRowDeleting;
            
            public event SWSP_EVALUATORRowChangeEventHandler SWSP_EVALUATORRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSWSP_EVALUATORRow(SWSP_EVALUATORRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_EVALUATORRow AddSWSP_EVALUATORRow(string initials, string last_name, string first_name) {
                SWSP_EVALUATORRow rowSWSP_EVALUATORRow = ((SWSP_EVALUATORRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        initials,
                        last_name,
                        first_name};
                rowSWSP_EVALUATORRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSWSP_EVALUATORRow);
                return rowSWSP_EVALUATORRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_EVALUATORRow FindByevaluator_id(int evaluator_id) {
                return ((SWSP_EVALUATORRow)(this.Rows.Find(new object[] {
                            evaluator_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SWSP_EVALUATORDataTable cln = ((SWSP_EVALUATORDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SWSP_EVALUATORDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnevaluator_id = base.Columns["evaluator_id"];
                this.columninitials = base.Columns["initials"];
                this.columnlast_name = base.Columns["last_name"];
                this.columnfirst_name = base.Columns["first_name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnevaluator_id = new global::System.Data.DataColumn("evaluator_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnevaluator_id);
                this.columninitials = new global::System.Data.DataColumn("initials", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninitials);
                this.columnlast_name = new global::System.Data.DataColumn("last_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlast_name);
                this.columnfirst_name = new global::System.Data.DataColumn("first_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfirst_name);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnevaluator_id}, true));
                this.columnevaluator_id.AutoIncrement = true;
                this.columnevaluator_id.AutoIncrementSeed = -1;
                this.columnevaluator_id.AutoIncrementStep = -1;
                this.columnevaluator_id.AllowDBNull = false;
                this.columnevaluator_id.ReadOnly = true;
                this.columnevaluator_id.Unique = true;
                this.columninitials.AllowDBNull = false;
                this.columninitials.MaxLength = 3;
                this.columnlast_name.MaxLength = 30;
                this.columnfirst_name.MaxLength = 30;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_EVALUATORRow NewSWSP_EVALUATORRow() {
                return ((SWSP_EVALUATORRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SWSP_EVALUATORRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SWSP_EVALUATORRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SWSP_EVALUATORRowChanged != null)) {
                    this.SWSP_EVALUATORRowChanged(this, new SWSP_EVALUATORRowChangeEvent(((SWSP_EVALUATORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SWSP_EVALUATORRowChanging != null)) {
                    this.SWSP_EVALUATORRowChanging(this, new SWSP_EVALUATORRowChangeEvent(((SWSP_EVALUATORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SWSP_EVALUATORRowDeleted != null)) {
                    this.SWSP_EVALUATORRowDeleted(this, new SWSP_EVALUATORRowChangeEvent(((SWSP_EVALUATORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SWSP_EVALUATORRowDeleting != null)) {
                    this.SWSP_EVALUATORRowDeleting(this, new SWSP_EVALUATORRowChangeEvent(((SWSP_EVALUATORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSWSP_EVALUATORRow(SWSP_EVALUATORRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SANDBOXDataSet ds = new SANDBOXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SWSP_EVALUATORDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SWSP_FACING_TYPEDataTable : global::System.Data.TypedTableBase<SWSP_FACING_TYPERow> {
            
            private global::System.Data.DataColumn columnfacing_type_id;
            
            private global::System.Data.DataColumn columnfacing;
            
            private global::System.Data.DataColumn columndescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_FACING_TYPEDataTable() {
                this.TableName = "SWSP_FACING_TYPE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_FACING_TYPEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SWSP_FACING_TYPEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn facing_type_idColumn {
                get {
                    return this.columnfacing_type_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn facingColumn {
                get {
                    return this.columnfacing;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_FACING_TYPERow this[int index] {
                get {
                    return ((SWSP_FACING_TYPERow)(this.Rows[index]));
                }
            }
            
            public event SWSP_FACING_TYPERowChangeEventHandler SWSP_FACING_TYPERowChanging;
            
            public event SWSP_FACING_TYPERowChangeEventHandler SWSP_FACING_TYPERowChanged;
            
            public event SWSP_FACING_TYPERowChangeEventHandler SWSP_FACING_TYPERowDeleting;
            
            public event SWSP_FACING_TYPERowChangeEventHandler SWSP_FACING_TYPERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSWSP_FACING_TYPERow(SWSP_FACING_TYPERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_FACING_TYPERow AddSWSP_FACING_TYPERow(string facing, string description) {
                SWSP_FACING_TYPERow rowSWSP_FACING_TYPERow = ((SWSP_FACING_TYPERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        facing,
                        description};
                rowSWSP_FACING_TYPERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSWSP_FACING_TYPERow);
                return rowSWSP_FACING_TYPERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_FACING_TYPERow FindByfacing_type_id(int facing_type_id) {
                return ((SWSP_FACING_TYPERow)(this.Rows.Find(new object[] {
                            facing_type_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SWSP_FACING_TYPEDataTable cln = ((SWSP_FACING_TYPEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SWSP_FACING_TYPEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnfacing_type_id = base.Columns["facing_type_id"];
                this.columnfacing = base.Columns["facing"];
                this.columndescription = base.Columns["description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnfacing_type_id = new global::System.Data.DataColumn("facing_type_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfacing_type_id);
                this.columnfacing = new global::System.Data.DataColumn("facing", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfacing);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnfacing_type_id}, true));
                this.columnfacing_type_id.AutoIncrement = true;
                this.columnfacing_type_id.AutoIncrementSeed = -1;
                this.columnfacing_type_id.AutoIncrementStep = -1;
                this.columnfacing_type_id.AllowDBNull = false;
                this.columnfacing_type_id.ReadOnly = true;
                this.columnfacing_type_id.Unique = true;
                this.columnfacing.AllowDBNull = false;
                this.columnfacing.MaxLength = 1;
                this.columndescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_FACING_TYPERow NewSWSP_FACING_TYPERow() {
                return ((SWSP_FACING_TYPERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SWSP_FACING_TYPERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SWSP_FACING_TYPERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SWSP_FACING_TYPERowChanged != null)) {
                    this.SWSP_FACING_TYPERowChanged(this, new SWSP_FACING_TYPERowChangeEvent(((SWSP_FACING_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SWSP_FACING_TYPERowChanging != null)) {
                    this.SWSP_FACING_TYPERowChanging(this, new SWSP_FACING_TYPERowChangeEvent(((SWSP_FACING_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SWSP_FACING_TYPERowDeleted != null)) {
                    this.SWSP_FACING_TYPERowDeleted(this, new SWSP_FACING_TYPERowChangeEvent(((SWSP_FACING_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SWSP_FACING_TYPERowDeleting != null)) {
                    this.SWSP_FACING_TYPERowDeleting(this, new SWSP_FACING_TYPERowChangeEvent(((SWSP_FACING_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSWSP_FACING_TYPERow(SWSP_FACING_TYPERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SANDBOXDataSet ds = new SANDBOXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SWSP_FACING_TYPEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SWSP_GLOBAL_IDDataTable : global::System.Data.TypedTableBase<SWSP_GLOBAL_IDRow> {
            
            private global::System.Data.DataColumn columnglobal_id;
            
            private global::System.Data.DataColumn columndescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_GLOBAL_IDDataTable() {
                this.TableName = "SWSP_GLOBAL_ID";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_GLOBAL_IDDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SWSP_GLOBAL_IDDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn global_idColumn {
                get {
                    return this.columnglobal_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_GLOBAL_IDRow this[int index] {
                get {
                    return ((SWSP_GLOBAL_IDRow)(this.Rows[index]));
                }
            }
            
            public event SWSP_GLOBAL_IDRowChangeEventHandler SWSP_GLOBAL_IDRowChanging;
            
            public event SWSP_GLOBAL_IDRowChangeEventHandler SWSP_GLOBAL_IDRowChanged;
            
            public event SWSP_GLOBAL_IDRowChangeEventHandler SWSP_GLOBAL_IDRowDeleting;
            
            public event SWSP_GLOBAL_IDRowChangeEventHandler SWSP_GLOBAL_IDRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSWSP_GLOBAL_IDRow(SWSP_GLOBAL_IDRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_GLOBAL_IDRow AddSWSP_GLOBAL_IDRow(string description) {
                SWSP_GLOBAL_IDRow rowSWSP_GLOBAL_IDRow = ((SWSP_GLOBAL_IDRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        description};
                rowSWSP_GLOBAL_IDRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSWSP_GLOBAL_IDRow);
                return rowSWSP_GLOBAL_IDRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_GLOBAL_IDRow FindByglobal_id(int global_id) {
                return ((SWSP_GLOBAL_IDRow)(this.Rows.Find(new object[] {
                            global_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SWSP_GLOBAL_IDDataTable cln = ((SWSP_GLOBAL_IDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SWSP_GLOBAL_IDDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnglobal_id = base.Columns["global_id"];
                this.columndescription = base.Columns["description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnglobal_id = new global::System.Data.DataColumn("global_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnglobal_id);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnglobal_id}, true));
                this.columnglobal_id.AutoIncrement = true;
                this.columnglobal_id.AutoIncrementSeed = -1;
                this.columnglobal_id.AutoIncrementStep = -1;
                this.columnglobal_id.AllowDBNull = false;
                this.columnglobal_id.ReadOnly = true;
                this.columnglobal_id.Unique = true;
                this.columndescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_GLOBAL_IDRow NewSWSP_GLOBAL_IDRow() {
                return ((SWSP_GLOBAL_IDRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SWSP_GLOBAL_IDRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SWSP_GLOBAL_IDRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SWSP_GLOBAL_IDRowChanged != null)) {
                    this.SWSP_GLOBAL_IDRowChanged(this, new SWSP_GLOBAL_IDRowChangeEvent(((SWSP_GLOBAL_IDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SWSP_GLOBAL_IDRowChanging != null)) {
                    this.SWSP_GLOBAL_IDRowChanging(this, new SWSP_GLOBAL_IDRowChangeEvent(((SWSP_GLOBAL_IDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SWSP_GLOBAL_IDRowDeleted != null)) {
                    this.SWSP_GLOBAL_IDRowDeleted(this, new SWSP_GLOBAL_IDRowChangeEvent(((SWSP_GLOBAL_IDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SWSP_GLOBAL_IDRowDeleting != null)) {
                    this.SWSP_GLOBAL_IDRowDeleting(this, new SWSP_GLOBAL_IDRowChangeEvent(((SWSP_GLOBAL_IDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSWSP_GLOBAL_IDRow(SWSP_GLOBAL_IDRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SANDBOXDataSet ds = new SANDBOXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SWSP_GLOBAL_IDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SWSP_MATERIAL_TYPEDataTable : global::System.Data.TypedTableBase<SWSP_MATERIAL_TYPERow> {
            
            private global::System.Data.DataColumn columnmaterial_type_id;
            
            private global::System.Data.DataColumn columnmaterial;
            
            private global::System.Data.DataColumn columndescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_MATERIAL_TYPEDataTable() {
                this.TableName = "SWSP_MATERIAL_TYPE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_MATERIAL_TYPEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SWSP_MATERIAL_TYPEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn material_type_idColumn {
                get {
                    return this.columnmaterial_type_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn materialColumn {
                get {
                    return this.columnmaterial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_MATERIAL_TYPERow this[int index] {
                get {
                    return ((SWSP_MATERIAL_TYPERow)(this.Rows[index]));
                }
            }
            
            public event SWSP_MATERIAL_TYPERowChangeEventHandler SWSP_MATERIAL_TYPERowChanging;
            
            public event SWSP_MATERIAL_TYPERowChangeEventHandler SWSP_MATERIAL_TYPERowChanged;
            
            public event SWSP_MATERIAL_TYPERowChangeEventHandler SWSP_MATERIAL_TYPERowDeleting;
            
            public event SWSP_MATERIAL_TYPERowChangeEventHandler SWSP_MATERIAL_TYPERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSWSP_MATERIAL_TYPERow(SWSP_MATERIAL_TYPERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_MATERIAL_TYPERow AddSWSP_MATERIAL_TYPERow(string material, string description) {
                SWSP_MATERIAL_TYPERow rowSWSP_MATERIAL_TYPERow = ((SWSP_MATERIAL_TYPERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        material,
                        description};
                rowSWSP_MATERIAL_TYPERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSWSP_MATERIAL_TYPERow);
                return rowSWSP_MATERIAL_TYPERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_MATERIAL_TYPERow FindBymaterial_type_id(int material_type_id) {
                return ((SWSP_MATERIAL_TYPERow)(this.Rows.Find(new object[] {
                            material_type_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SWSP_MATERIAL_TYPEDataTable cln = ((SWSP_MATERIAL_TYPEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SWSP_MATERIAL_TYPEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmaterial_type_id = base.Columns["material_type_id"];
                this.columnmaterial = base.Columns["material"];
                this.columndescription = base.Columns["description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmaterial_type_id = new global::System.Data.DataColumn("material_type_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmaterial_type_id);
                this.columnmaterial = new global::System.Data.DataColumn("material", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmaterial);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnmaterial_type_id}, true));
                this.columnmaterial_type_id.AutoIncrement = true;
                this.columnmaterial_type_id.AutoIncrementSeed = -1;
                this.columnmaterial_type_id.AutoIncrementStep = -1;
                this.columnmaterial_type_id.AllowDBNull = false;
                this.columnmaterial_type_id.ReadOnly = true;
                this.columnmaterial_type_id.Unique = true;
                this.columnmaterial.AllowDBNull = false;
                this.columnmaterial.MaxLength = 6;
                this.columndescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_MATERIAL_TYPERow NewSWSP_MATERIAL_TYPERow() {
                return ((SWSP_MATERIAL_TYPERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SWSP_MATERIAL_TYPERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SWSP_MATERIAL_TYPERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SWSP_MATERIAL_TYPERowChanged != null)) {
                    this.SWSP_MATERIAL_TYPERowChanged(this, new SWSP_MATERIAL_TYPERowChangeEvent(((SWSP_MATERIAL_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SWSP_MATERIAL_TYPERowChanging != null)) {
                    this.SWSP_MATERIAL_TYPERowChanging(this, new SWSP_MATERIAL_TYPERowChangeEvent(((SWSP_MATERIAL_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SWSP_MATERIAL_TYPERowDeleted != null)) {
                    this.SWSP_MATERIAL_TYPERowDeleted(this, new SWSP_MATERIAL_TYPERowChangeEvent(((SWSP_MATERIAL_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SWSP_MATERIAL_TYPERowDeleting != null)) {
                    this.SWSP_MATERIAL_TYPERowDeleting(this, new SWSP_MATERIAL_TYPERowChangeEvent(((SWSP_MATERIAL_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSWSP_MATERIAL_TYPERow(SWSP_MATERIAL_TYPERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SANDBOXDataSet ds = new SANDBOXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SWSP_MATERIAL_TYPEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SWSP_PHOTODataTable : global::System.Data.TypedTableBase<SWSP_PHOTORow> {
            
            private global::System.Data.DataColumn columnphoto_id;
            
            private global::System.Data.DataColumn columnglobal_id;
            
            private global::System.Data.DataColumn columnlocation;
            
            private global::System.Data.DataColumn columncomment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_PHOTODataTable() {
                this.TableName = "SWSP_PHOTO";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_PHOTODataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SWSP_PHOTODataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn photo_idColumn {
                get {
                    return this.columnphoto_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn global_idColumn {
                get {
                    return this.columnglobal_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn locationColumn {
                get {
                    return this.columnlocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn commentColumn {
                get {
                    return this.columncomment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_PHOTORow this[int index] {
                get {
                    return ((SWSP_PHOTORow)(this.Rows[index]));
                }
            }
            
            public event SWSP_PHOTORowChangeEventHandler SWSP_PHOTORowChanging;
            
            public event SWSP_PHOTORowChangeEventHandler SWSP_PHOTORowChanged;
            
            public event SWSP_PHOTORowChangeEventHandler SWSP_PHOTORowDeleting;
            
            public event SWSP_PHOTORowChangeEventHandler SWSP_PHOTORowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSWSP_PHOTORow(SWSP_PHOTORow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_PHOTORow AddSWSP_PHOTORow(SWSP_CULVERTRow parentSWSP_CULVERTRowByFK_PHOTO_CULVERT, string location, string comment) {
                SWSP_PHOTORow rowSWSP_PHOTORow = ((SWSP_PHOTORow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        location,
                        comment};
                if ((parentSWSP_CULVERTRowByFK_PHOTO_CULVERT != null)) {
                    columnValuesArray[1] = parentSWSP_CULVERTRowByFK_PHOTO_CULVERT[1];
                }
                rowSWSP_PHOTORow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSWSP_PHOTORow);
                return rowSWSP_PHOTORow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_PHOTORow FindByphoto_id(int photo_id) {
                return ((SWSP_PHOTORow)(this.Rows.Find(new object[] {
                            photo_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SWSP_PHOTODataTable cln = ((SWSP_PHOTODataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SWSP_PHOTODataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnphoto_id = base.Columns["photo_id"];
                this.columnglobal_id = base.Columns["global_id"];
                this.columnlocation = base.Columns["location"];
                this.columncomment = base.Columns["comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnphoto_id = new global::System.Data.DataColumn("photo_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnphoto_id);
                this.columnglobal_id = new global::System.Data.DataColumn("global_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnglobal_id);
                this.columnlocation = new global::System.Data.DataColumn("location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlocation);
                this.columncomment = new global::System.Data.DataColumn("comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncomment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnphoto_id}, true));
                this.columnphoto_id.AutoIncrement = true;
                this.columnphoto_id.AutoIncrementSeed = -1;
                this.columnphoto_id.AutoIncrementStep = -1;
                this.columnphoto_id.AllowDBNull = false;
                this.columnphoto_id.ReadOnly = true;
                this.columnphoto_id.Unique = true;
                this.columnglobal_id.AllowDBNull = false;
                this.columnlocation.MaxLength = 255;
                this.columncomment.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_PHOTORow NewSWSP_PHOTORow() {
                return ((SWSP_PHOTORow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SWSP_PHOTORow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SWSP_PHOTORow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SWSP_PHOTORowChanged != null)) {
                    this.SWSP_PHOTORowChanged(this, new SWSP_PHOTORowChangeEvent(((SWSP_PHOTORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SWSP_PHOTORowChanging != null)) {
                    this.SWSP_PHOTORowChanging(this, new SWSP_PHOTORowChangeEvent(((SWSP_PHOTORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SWSP_PHOTORowDeleted != null)) {
                    this.SWSP_PHOTORowDeleted(this, new SWSP_PHOTORowChangeEvent(((SWSP_PHOTORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SWSP_PHOTORowDeleting != null)) {
                    this.SWSP_PHOTORowDeleting(this, new SWSP_PHOTORowChangeEvent(((SWSP_PHOTORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSWSP_PHOTORow(SWSP_PHOTORow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SANDBOXDataSet ds = new SANDBOXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SWSP_PHOTODataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SWSP_PIPEDataTable : global::System.Data.TypedTableBase<SWSP_PIPERow> {
            
            private global::System.Data.DataColumn columnpipe_id;
            
            private global::System.Data.DataColumn columnglobal_id;
            
            private global::System.Data.DataColumn columnsurvey_page_id;
            
            private global::System.Data.DataColumn columnus_node;
            
            private global::System.Data.DataColumn columnds_node;
            
            private global::System.Data.DataColumn columnus_depth_in;
            
            private global::System.Data.DataColumn columnds_depth_in;
            
            private global::System.Data.DataColumn columninside_diam_in;
            
            private global::System.Data.DataColumn columnmaterial;
            
            private global::System.Data.DataColumn columnshape;
            
            private global::System.Data.DataColumn columncomment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_PIPEDataTable() {
                this.TableName = "SWSP_PIPE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_PIPEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SWSP_PIPEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pipe_idColumn {
                get {
                    return this.columnpipe_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn global_idColumn {
                get {
                    return this.columnglobal_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn survey_page_idColumn {
                get {
                    return this.columnsurvey_page_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn us_nodeColumn {
                get {
                    return this.columnus_node;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ds_nodeColumn {
                get {
                    return this.columnds_node;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn us_depth_inColumn {
                get {
                    return this.columnus_depth_in;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ds_depth_inColumn {
                get {
                    return this.columnds_depth_in;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inside_diam_inColumn {
                get {
                    return this.columninside_diam_in;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn materialColumn {
                get {
                    return this.columnmaterial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn shapeColumn {
                get {
                    return this.columnshape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn commentColumn {
                get {
                    return this.columncomment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_PIPERow this[int index] {
                get {
                    return ((SWSP_PIPERow)(this.Rows[index]));
                }
            }
            
            public event SWSP_PIPERowChangeEventHandler SWSP_PIPERowChanging;
            
            public event SWSP_PIPERowChangeEventHandler SWSP_PIPERowChanged;
            
            public event SWSP_PIPERowChangeEventHandler SWSP_PIPERowDeleting;
            
            public event SWSP_PIPERowChangeEventHandler SWSP_PIPERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSWSP_PIPERow(SWSP_PIPERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_PIPERow AddSWSP_PIPERow(SWSP_GLOBAL_IDRow parentSWSP_GLOBAL_IDRowByFK_SWSP_PIPE_SWSP_GLOBAL_ID, SWSP_SURVEY_PAGERow parentSWSP_SURVEY_PAGERowByFK_PIPE_SURVEY_PAGE, string us_node, string ds_node, double us_depth_in, double ds_depth_in, double inside_diam_in, SWSP_MATERIAL_TYPERow parentSWSP_MATERIAL_TYPERowByFK_PIPE_MATERIAL_TYPE, SWSP_SHAPE_TYPERow parentSWSP_SHAPE_TYPERowByFK_PIPE_SHAPE_TYPE, string comment) {
                SWSP_PIPERow rowSWSP_PIPERow = ((SWSP_PIPERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        us_node,
                        ds_node,
                        us_depth_in,
                        ds_depth_in,
                        inside_diam_in,
                        null,
                        null,
                        comment};
                if ((parentSWSP_GLOBAL_IDRowByFK_SWSP_PIPE_SWSP_GLOBAL_ID != null)) {
                    columnValuesArray[1] = parentSWSP_GLOBAL_IDRowByFK_SWSP_PIPE_SWSP_GLOBAL_ID[0];
                }
                if ((parentSWSP_SURVEY_PAGERowByFK_PIPE_SURVEY_PAGE != null)) {
                    columnValuesArray[2] = parentSWSP_SURVEY_PAGERowByFK_PIPE_SURVEY_PAGE[0];
                }
                if ((parentSWSP_MATERIAL_TYPERowByFK_PIPE_MATERIAL_TYPE != null)) {
                    columnValuesArray[8] = parentSWSP_MATERIAL_TYPERowByFK_PIPE_MATERIAL_TYPE[0];
                }
                if ((parentSWSP_SHAPE_TYPERowByFK_PIPE_SHAPE_TYPE != null)) {
                    columnValuesArray[9] = parentSWSP_SHAPE_TYPERowByFK_PIPE_SHAPE_TYPE[0];
                }
                rowSWSP_PIPERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSWSP_PIPERow);
                return rowSWSP_PIPERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_PIPERow FindBypipe_id(int pipe_id) {
                return ((SWSP_PIPERow)(this.Rows.Find(new object[] {
                            pipe_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SWSP_PIPEDataTable cln = ((SWSP_PIPEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SWSP_PIPEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpipe_id = base.Columns["pipe_id"];
                this.columnglobal_id = base.Columns["global_id"];
                this.columnsurvey_page_id = base.Columns["survey_page_id"];
                this.columnus_node = base.Columns["us_node"];
                this.columnds_node = base.Columns["ds_node"];
                this.columnus_depth_in = base.Columns["us_depth_in"];
                this.columnds_depth_in = base.Columns["ds_depth_in"];
                this.columninside_diam_in = base.Columns["inside_diam_in"];
                this.columnmaterial = base.Columns["material"];
                this.columnshape = base.Columns["shape"];
                this.columncomment = base.Columns["comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpipe_id = new global::System.Data.DataColumn("pipe_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpipe_id);
                this.columnglobal_id = new global::System.Data.DataColumn("global_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnglobal_id);
                this.columnsurvey_page_id = new global::System.Data.DataColumn("survey_page_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsurvey_page_id);
                this.columnus_node = new global::System.Data.DataColumn("us_node", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnus_node);
                this.columnds_node = new global::System.Data.DataColumn("ds_node", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnds_node);
                this.columnus_depth_in = new global::System.Data.DataColumn("us_depth_in", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnus_depth_in);
                this.columnds_depth_in = new global::System.Data.DataColumn("ds_depth_in", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnds_depth_in);
                this.columninside_diam_in = new global::System.Data.DataColumn("inside_diam_in", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninside_diam_in);
                this.columnmaterial = new global::System.Data.DataColumn("material", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmaterial);
                this.columnshape = new global::System.Data.DataColumn("shape", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnshape);
                this.columncomment = new global::System.Data.DataColumn("comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncomment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnpipe_id}, true));
                this.columnpipe_id.AutoIncrement = true;
                this.columnpipe_id.AutoIncrementSeed = -1;
                this.columnpipe_id.AutoIncrementStep = -1;
                this.columnpipe_id.AllowDBNull = false;
                this.columnpipe_id.ReadOnly = true;
                this.columnpipe_id.Unique = true;
                this.columnglobal_id.AllowDBNull = false;
                this.columnsurvey_page_id.AllowDBNull = false;
                this.columnus_node.MaxLength = 10;
                this.columnds_node.MaxLength = 10;
                this.columncomment.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_PIPERow NewSWSP_PIPERow() {
                return ((SWSP_PIPERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SWSP_PIPERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SWSP_PIPERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SWSP_PIPERowChanged != null)) {
                    this.SWSP_PIPERowChanged(this, new SWSP_PIPERowChangeEvent(((SWSP_PIPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SWSP_PIPERowChanging != null)) {
                    this.SWSP_PIPERowChanging(this, new SWSP_PIPERowChangeEvent(((SWSP_PIPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SWSP_PIPERowDeleted != null)) {
                    this.SWSP_PIPERowDeleted(this, new SWSP_PIPERowChangeEvent(((SWSP_PIPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SWSP_PIPERowDeleting != null)) {
                    this.SWSP_PIPERowDeleting(this, new SWSP_PIPERowChangeEvent(((SWSP_PIPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSWSP_PIPERow(SWSP_PIPERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SANDBOXDataSet ds = new SANDBOXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SWSP_PIPEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SWSP_SHAPE_TYPEDataTable : global::System.Data.TypedTableBase<SWSP_SHAPE_TYPERow> {
            
            private global::System.Data.DataColumn columnshape_type_id;
            
            private global::System.Data.DataColumn columnshape;
            
            private global::System.Data.DataColumn columndescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SHAPE_TYPEDataTable() {
                this.TableName = "SWSP_SHAPE_TYPE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_SHAPE_TYPEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SWSP_SHAPE_TYPEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn shape_type_idColumn {
                get {
                    return this.columnshape_type_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn shapeColumn {
                get {
                    return this.columnshape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SHAPE_TYPERow this[int index] {
                get {
                    return ((SWSP_SHAPE_TYPERow)(this.Rows[index]));
                }
            }
            
            public event SWSP_SHAPE_TYPERowChangeEventHandler SWSP_SHAPE_TYPERowChanging;
            
            public event SWSP_SHAPE_TYPERowChangeEventHandler SWSP_SHAPE_TYPERowChanged;
            
            public event SWSP_SHAPE_TYPERowChangeEventHandler SWSP_SHAPE_TYPERowDeleting;
            
            public event SWSP_SHAPE_TYPERowChangeEventHandler SWSP_SHAPE_TYPERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSWSP_SHAPE_TYPERow(SWSP_SHAPE_TYPERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SHAPE_TYPERow AddSWSP_SHAPE_TYPERow(string shape, string description) {
                SWSP_SHAPE_TYPERow rowSWSP_SHAPE_TYPERow = ((SWSP_SHAPE_TYPERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        shape,
                        description};
                rowSWSP_SHAPE_TYPERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSWSP_SHAPE_TYPERow);
                return rowSWSP_SHAPE_TYPERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SHAPE_TYPERow FindByshape_type_id(int shape_type_id) {
                return ((SWSP_SHAPE_TYPERow)(this.Rows.Find(new object[] {
                            shape_type_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SWSP_SHAPE_TYPEDataTable cln = ((SWSP_SHAPE_TYPEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SWSP_SHAPE_TYPEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnshape_type_id = base.Columns["shape_type_id"];
                this.columnshape = base.Columns["shape"];
                this.columndescription = base.Columns["description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnshape_type_id = new global::System.Data.DataColumn("shape_type_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnshape_type_id);
                this.columnshape = new global::System.Data.DataColumn("shape", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnshape);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnshape_type_id}, true));
                this.columnshape_type_id.AutoIncrement = true;
                this.columnshape_type_id.AutoIncrementSeed = -1;
                this.columnshape_type_id.AutoIncrementStep = -1;
                this.columnshape_type_id.AllowDBNull = false;
                this.columnshape_type_id.ReadOnly = true;
                this.columnshape_type_id.Unique = true;
                this.columnshape.AllowDBNull = false;
                this.columnshape.MaxLength = 6;
                this.columndescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SHAPE_TYPERow NewSWSP_SHAPE_TYPERow() {
                return ((SWSP_SHAPE_TYPERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SWSP_SHAPE_TYPERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SWSP_SHAPE_TYPERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SWSP_SHAPE_TYPERowChanged != null)) {
                    this.SWSP_SHAPE_TYPERowChanged(this, new SWSP_SHAPE_TYPERowChangeEvent(((SWSP_SHAPE_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SWSP_SHAPE_TYPERowChanging != null)) {
                    this.SWSP_SHAPE_TYPERowChanging(this, new SWSP_SHAPE_TYPERowChangeEvent(((SWSP_SHAPE_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SWSP_SHAPE_TYPERowDeleted != null)) {
                    this.SWSP_SHAPE_TYPERowDeleted(this, new SWSP_SHAPE_TYPERowChangeEvent(((SWSP_SHAPE_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SWSP_SHAPE_TYPERowDeleting != null)) {
                    this.SWSP_SHAPE_TYPERowDeleting(this, new SWSP_SHAPE_TYPERowChangeEvent(((SWSP_SHAPE_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSWSP_SHAPE_TYPERow(SWSP_SHAPE_TYPERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SANDBOXDataSet ds = new SANDBOXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SWSP_SHAPE_TYPEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SWSP_SUBWATERSHEDDataTable : global::System.Data.TypedTableBase<SWSP_SUBWATERSHEDRow> {
            
            private global::System.Data.DataColumn columnsubwatershed_id;
            
            private global::System.Data.DataColumn columnwatershed_id;
            
            private global::System.Data.DataColumn columnsubwatershed;
            
            private global::System.Data.DataColumn columndescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SUBWATERSHEDDataTable() {
                this.TableName = "SWSP_SUBWATERSHED";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_SUBWATERSHEDDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SWSP_SUBWATERSHEDDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn subwatershed_idColumn {
                get {
                    return this.columnsubwatershed_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn watershed_idColumn {
                get {
                    return this.columnwatershed_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn subwatershedColumn {
                get {
                    return this.columnsubwatershed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SUBWATERSHEDRow this[int index] {
                get {
                    return ((SWSP_SUBWATERSHEDRow)(this.Rows[index]));
                }
            }
            
            public event SWSP_SUBWATERSHEDRowChangeEventHandler SWSP_SUBWATERSHEDRowChanging;
            
            public event SWSP_SUBWATERSHEDRowChangeEventHandler SWSP_SUBWATERSHEDRowChanged;
            
            public event SWSP_SUBWATERSHEDRowChangeEventHandler SWSP_SUBWATERSHEDRowDeleting;
            
            public event SWSP_SUBWATERSHEDRowChangeEventHandler SWSP_SUBWATERSHEDRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSWSP_SUBWATERSHEDRow(SWSP_SUBWATERSHEDRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SUBWATERSHEDRow AddSWSP_SUBWATERSHEDRow(SWSP_WATERSHEDRow parentSWSP_WATERSHEDRowByFK_SUBWATERSHED_WATERSHED, string subwatershed, string description) {
                SWSP_SUBWATERSHEDRow rowSWSP_SUBWATERSHEDRow = ((SWSP_SUBWATERSHEDRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        subwatershed,
                        description};
                if ((parentSWSP_WATERSHEDRowByFK_SUBWATERSHED_WATERSHED != null)) {
                    columnValuesArray[1] = parentSWSP_WATERSHEDRowByFK_SUBWATERSHED_WATERSHED[0];
                }
                rowSWSP_SUBWATERSHEDRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSWSP_SUBWATERSHEDRow);
                return rowSWSP_SUBWATERSHEDRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SUBWATERSHEDRow FindBysubwatershed_id(int subwatershed_id) {
                return ((SWSP_SUBWATERSHEDRow)(this.Rows.Find(new object[] {
                            subwatershed_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SWSP_SUBWATERSHEDDataTable cln = ((SWSP_SUBWATERSHEDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SWSP_SUBWATERSHEDDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsubwatershed_id = base.Columns["subwatershed_id"];
                this.columnwatershed_id = base.Columns["watershed_id"];
                this.columnsubwatershed = base.Columns["subwatershed"];
                this.columndescription = base.Columns["description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsubwatershed_id = new global::System.Data.DataColumn("subwatershed_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsubwatershed_id);
                this.columnwatershed_id = new global::System.Data.DataColumn("watershed_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnwatershed_id);
                this.columnsubwatershed = new global::System.Data.DataColumn("subwatershed", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsubwatershed);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsubwatershed_id}, true));
                this.columnsubwatershed_id.AutoIncrement = true;
                this.columnsubwatershed_id.AutoIncrementSeed = -1;
                this.columnsubwatershed_id.AutoIncrementStep = -1;
                this.columnsubwatershed_id.AllowDBNull = false;
                this.columnsubwatershed_id.ReadOnly = true;
                this.columnsubwatershed_id.Unique = true;
                this.columnwatershed_id.AllowDBNull = false;
                this.columnsubwatershed.AllowDBNull = false;
                this.columnsubwatershed.MaxLength = 30;
                this.columndescription.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SUBWATERSHEDRow NewSWSP_SUBWATERSHEDRow() {
                return ((SWSP_SUBWATERSHEDRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SWSP_SUBWATERSHEDRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SWSP_SUBWATERSHEDRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SWSP_SUBWATERSHEDRowChanged != null)) {
                    this.SWSP_SUBWATERSHEDRowChanged(this, new SWSP_SUBWATERSHEDRowChangeEvent(((SWSP_SUBWATERSHEDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SWSP_SUBWATERSHEDRowChanging != null)) {
                    this.SWSP_SUBWATERSHEDRowChanging(this, new SWSP_SUBWATERSHEDRowChangeEvent(((SWSP_SUBWATERSHEDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SWSP_SUBWATERSHEDRowDeleted != null)) {
                    this.SWSP_SUBWATERSHEDRowDeleted(this, new SWSP_SUBWATERSHEDRowChangeEvent(((SWSP_SUBWATERSHEDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SWSP_SUBWATERSHEDRowDeleting != null)) {
                    this.SWSP_SUBWATERSHEDRowDeleting(this, new SWSP_SUBWATERSHEDRowChangeEvent(((SWSP_SUBWATERSHEDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSWSP_SUBWATERSHEDRow(SWSP_SUBWATERSHEDRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SANDBOXDataSet ds = new SANDBOXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SWSP_SUBWATERSHEDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SWSP_SURVEY_PAGEDataTable : global::System.Data.TypedTableBase<SWSP_SURVEY_PAGERow> {
            
            private global::System.Data.DataColumn columnsurvey_page_id;
            
            private global::System.Data.DataColumn columnview_id;
            
            private global::System.Data.DataColumn columnpage_number;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SURVEY_PAGEDataTable() {
                this.TableName = "SWSP_SURVEY_PAGE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_SURVEY_PAGEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SWSP_SURVEY_PAGEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn survey_page_idColumn {
                get {
                    return this.columnsurvey_page_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn view_idColumn {
                get {
                    return this.columnview_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn page_numberColumn {
                get {
                    return this.columnpage_number;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SURVEY_PAGERow this[int index] {
                get {
                    return ((SWSP_SURVEY_PAGERow)(this.Rows[index]));
                }
            }
            
            public event SWSP_SURVEY_PAGERowChangeEventHandler SWSP_SURVEY_PAGERowChanging;
            
            public event SWSP_SURVEY_PAGERowChangeEventHandler SWSP_SURVEY_PAGERowChanged;
            
            public event SWSP_SURVEY_PAGERowChangeEventHandler SWSP_SURVEY_PAGERowDeleting;
            
            public event SWSP_SURVEY_PAGERowChangeEventHandler SWSP_SURVEY_PAGERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSWSP_SURVEY_PAGERow(SWSP_SURVEY_PAGERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SURVEY_PAGERow AddSWSP_SURVEY_PAGERow(SWSP_VIEWRow parentSWSP_VIEWRowByFK_SURVEY_PAGE_VIEW, int page_number) {
                SWSP_SURVEY_PAGERow rowSWSP_SURVEY_PAGERow = ((SWSP_SURVEY_PAGERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        page_number};
                if ((parentSWSP_VIEWRowByFK_SURVEY_PAGE_VIEW != null)) {
                    columnValuesArray[1] = parentSWSP_VIEWRowByFK_SURVEY_PAGE_VIEW[0];
                }
                rowSWSP_SURVEY_PAGERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSWSP_SURVEY_PAGERow);
                return rowSWSP_SURVEY_PAGERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SURVEY_PAGERow FindBysurvey_page_id(int survey_page_id) {
                return ((SWSP_SURVEY_PAGERow)(this.Rows.Find(new object[] {
                            survey_page_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SWSP_SURVEY_PAGEDataTable cln = ((SWSP_SURVEY_PAGEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SWSP_SURVEY_PAGEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsurvey_page_id = base.Columns["survey_page_id"];
                this.columnview_id = base.Columns["view_id"];
                this.columnpage_number = base.Columns["page_number"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsurvey_page_id = new global::System.Data.DataColumn("survey_page_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsurvey_page_id);
                this.columnview_id = new global::System.Data.DataColumn("view_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnview_id);
                this.columnpage_number = new global::System.Data.DataColumn("page_number", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpage_number);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsurvey_page_id}, true));
                this.columnsurvey_page_id.AutoIncrement = true;
                this.columnsurvey_page_id.AutoIncrementSeed = -1;
                this.columnsurvey_page_id.AutoIncrementStep = -1;
                this.columnsurvey_page_id.AllowDBNull = false;
                this.columnsurvey_page_id.ReadOnly = true;
                this.columnsurvey_page_id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SURVEY_PAGERow NewSWSP_SURVEY_PAGERow() {
                return ((SWSP_SURVEY_PAGERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SWSP_SURVEY_PAGERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SWSP_SURVEY_PAGERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SWSP_SURVEY_PAGERowChanged != null)) {
                    this.SWSP_SURVEY_PAGERowChanged(this, new SWSP_SURVEY_PAGERowChangeEvent(((SWSP_SURVEY_PAGERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SWSP_SURVEY_PAGERowChanging != null)) {
                    this.SWSP_SURVEY_PAGERowChanging(this, new SWSP_SURVEY_PAGERowChangeEvent(((SWSP_SURVEY_PAGERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SWSP_SURVEY_PAGERowDeleted != null)) {
                    this.SWSP_SURVEY_PAGERowDeleted(this, new SWSP_SURVEY_PAGERowChangeEvent(((SWSP_SURVEY_PAGERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SWSP_SURVEY_PAGERowDeleting != null)) {
                    this.SWSP_SURVEY_PAGERowDeleting(this, new SWSP_SURVEY_PAGERowChangeEvent(((SWSP_SURVEY_PAGERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSWSP_SURVEY_PAGERow(SWSP_SURVEY_PAGERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SANDBOXDataSet ds = new SANDBOXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SWSP_SURVEY_PAGEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SWSP_SURVEY_PAGE_EVALUATORDataTable : global::System.Data.TypedTableBase<SWSP_SURVEY_PAGE_EVALUATORRow> {
            
            private global::System.Data.DataColumn columnsurvey_page_id;
            
            private global::System.Data.DataColumn columnevaluator_id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SURVEY_PAGE_EVALUATORDataTable() {
                this.TableName = "SWSP_SURVEY_PAGE_EVALUATOR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_SURVEY_PAGE_EVALUATORDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SWSP_SURVEY_PAGE_EVALUATORDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn survey_page_idColumn {
                get {
                    return this.columnsurvey_page_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn evaluator_idColumn {
                get {
                    return this.columnevaluator_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SURVEY_PAGE_EVALUATORRow this[int index] {
                get {
                    return ((SWSP_SURVEY_PAGE_EVALUATORRow)(this.Rows[index]));
                }
            }
            
            public event SWSP_SURVEY_PAGE_EVALUATORRowChangeEventHandler SWSP_SURVEY_PAGE_EVALUATORRowChanging;
            
            public event SWSP_SURVEY_PAGE_EVALUATORRowChangeEventHandler SWSP_SURVEY_PAGE_EVALUATORRowChanged;
            
            public event SWSP_SURVEY_PAGE_EVALUATORRowChangeEventHandler SWSP_SURVEY_PAGE_EVALUATORRowDeleting;
            
            public event SWSP_SURVEY_PAGE_EVALUATORRowChangeEventHandler SWSP_SURVEY_PAGE_EVALUATORRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSWSP_SURVEY_PAGE_EVALUATORRow(SWSP_SURVEY_PAGE_EVALUATORRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SURVEY_PAGE_EVALUATORRow AddSWSP_SURVEY_PAGE_EVALUATORRow(SWSP_SURVEY_PAGERow parentSWSP_SURVEY_PAGERowByFK_SURVEY_PAGE_EVALUATOR_SURVEY_PAGE, SWSP_EVALUATORRow parentSWSP_EVALUATORRowByFK_SURVEY_PAGE_EVALUATOR_EVALUATOR) {
                SWSP_SURVEY_PAGE_EVALUATORRow rowSWSP_SURVEY_PAGE_EVALUATORRow = ((SWSP_SURVEY_PAGE_EVALUATORRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentSWSP_SURVEY_PAGERowByFK_SURVEY_PAGE_EVALUATOR_SURVEY_PAGE != null)) {
                    columnValuesArray[0] = parentSWSP_SURVEY_PAGERowByFK_SURVEY_PAGE_EVALUATOR_SURVEY_PAGE[0];
                }
                if ((parentSWSP_EVALUATORRowByFK_SURVEY_PAGE_EVALUATOR_EVALUATOR != null)) {
                    columnValuesArray[1] = parentSWSP_EVALUATORRowByFK_SURVEY_PAGE_EVALUATOR_EVALUATOR[0];
                }
                rowSWSP_SURVEY_PAGE_EVALUATORRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSWSP_SURVEY_PAGE_EVALUATORRow);
                return rowSWSP_SURVEY_PAGE_EVALUATORRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SURVEY_PAGE_EVALUATORRow FindBysurvey_page_idevaluator_id(int survey_page_id, int evaluator_id) {
                return ((SWSP_SURVEY_PAGE_EVALUATORRow)(this.Rows.Find(new object[] {
                            survey_page_id,
                            evaluator_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SWSP_SURVEY_PAGE_EVALUATORDataTable cln = ((SWSP_SURVEY_PAGE_EVALUATORDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SWSP_SURVEY_PAGE_EVALUATORDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsurvey_page_id = base.Columns["survey_page_id"];
                this.columnevaluator_id = base.Columns["evaluator_id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsurvey_page_id = new global::System.Data.DataColumn("survey_page_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsurvey_page_id);
                this.columnevaluator_id = new global::System.Data.DataColumn("evaluator_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnevaluator_id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsurvey_page_id,
                                this.columnevaluator_id}, true));
                this.columnsurvey_page_id.AllowDBNull = false;
                this.columnevaluator_id.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SURVEY_PAGE_EVALUATORRow NewSWSP_SURVEY_PAGE_EVALUATORRow() {
                return ((SWSP_SURVEY_PAGE_EVALUATORRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SWSP_SURVEY_PAGE_EVALUATORRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SWSP_SURVEY_PAGE_EVALUATORRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SWSP_SURVEY_PAGE_EVALUATORRowChanged != null)) {
                    this.SWSP_SURVEY_PAGE_EVALUATORRowChanged(this, new SWSP_SURVEY_PAGE_EVALUATORRowChangeEvent(((SWSP_SURVEY_PAGE_EVALUATORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SWSP_SURVEY_PAGE_EVALUATORRowChanging != null)) {
                    this.SWSP_SURVEY_PAGE_EVALUATORRowChanging(this, new SWSP_SURVEY_PAGE_EVALUATORRowChangeEvent(((SWSP_SURVEY_PAGE_EVALUATORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SWSP_SURVEY_PAGE_EVALUATORRowDeleted != null)) {
                    this.SWSP_SURVEY_PAGE_EVALUATORRowDeleted(this, new SWSP_SURVEY_PAGE_EVALUATORRowChangeEvent(((SWSP_SURVEY_PAGE_EVALUATORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SWSP_SURVEY_PAGE_EVALUATORRowDeleting != null)) {
                    this.SWSP_SURVEY_PAGE_EVALUATORRowDeleting(this, new SWSP_SURVEY_PAGE_EVALUATORRowChangeEvent(((SWSP_SURVEY_PAGE_EVALUATORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSWSP_SURVEY_PAGE_EVALUATORRow(SWSP_SURVEY_PAGE_EVALUATORRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SANDBOXDataSet ds = new SANDBOXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SWSP_SURVEY_PAGE_EVALUATORDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SWSP_VIEWDataTable : global::System.Data.TypedTableBase<SWSP_VIEWRow> {
            
            private global::System.Data.DataColumn columnview_id;
            
            private global::System.Data.DataColumn columnsubwatershed_id;
            
            private global::System.Data.DataColumn columnview_number;
            
            private global::System.Data.DataColumn columndescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_VIEWDataTable() {
                this.TableName = "SWSP_VIEW";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_VIEWDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SWSP_VIEWDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn view_idColumn {
                get {
                    return this.columnview_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn subwatershed_idColumn {
                get {
                    return this.columnsubwatershed_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn view_numberColumn {
                get {
                    return this.columnview_number;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_VIEWRow this[int index] {
                get {
                    return ((SWSP_VIEWRow)(this.Rows[index]));
                }
            }
            
            public event SWSP_VIEWRowChangeEventHandler SWSP_VIEWRowChanging;
            
            public event SWSP_VIEWRowChangeEventHandler SWSP_VIEWRowChanged;
            
            public event SWSP_VIEWRowChangeEventHandler SWSP_VIEWRowDeleting;
            
            public event SWSP_VIEWRowChangeEventHandler SWSP_VIEWRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSWSP_VIEWRow(SWSP_VIEWRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_VIEWRow AddSWSP_VIEWRow(SWSP_SUBWATERSHEDRow parentSWSP_SUBWATERSHEDRowByFK_VIEW_SUBWATERSHED, int view_number, string description) {
                SWSP_VIEWRow rowSWSP_VIEWRow = ((SWSP_VIEWRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        view_number,
                        description};
                if ((parentSWSP_SUBWATERSHEDRowByFK_VIEW_SUBWATERSHED != null)) {
                    columnValuesArray[1] = parentSWSP_SUBWATERSHEDRowByFK_VIEW_SUBWATERSHED[0];
                }
                rowSWSP_VIEWRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSWSP_VIEWRow);
                return rowSWSP_VIEWRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_VIEWRow FindByview_id(int view_id) {
                return ((SWSP_VIEWRow)(this.Rows.Find(new object[] {
                            view_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SWSP_VIEWDataTable cln = ((SWSP_VIEWDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SWSP_VIEWDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnview_id = base.Columns["view_id"];
                this.columnsubwatershed_id = base.Columns["subwatershed_id"];
                this.columnview_number = base.Columns["view_number"];
                this.columndescription = base.Columns["description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnview_id = new global::System.Data.DataColumn("view_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnview_id);
                this.columnsubwatershed_id = new global::System.Data.DataColumn("subwatershed_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsubwatershed_id);
                this.columnview_number = new global::System.Data.DataColumn("view_number", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnview_number);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnview_id}, true));
                this.columnview_id.AutoIncrement = true;
                this.columnview_id.AutoIncrementSeed = -1;
                this.columnview_id.AutoIncrementStep = -1;
                this.columnview_id.AllowDBNull = false;
                this.columnview_id.ReadOnly = true;
                this.columnview_id.Unique = true;
                this.columnsubwatershed_id.AllowDBNull = false;
                this.columnview_number.AllowDBNull = false;
                this.columndescription.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_VIEWRow NewSWSP_VIEWRow() {
                return ((SWSP_VIEWRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SWSP_VIEWRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SWSP_VIEWRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SWSP_VIEWRowChanged != null)) {
                    this.SWSP_VIEWRowChanged(this, new SWSP_VIEWRowChangeEvent(((SWSP_VIEWRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SWSP_VIEWRowChanging != null)) {
                    this.SWSP_VIEWRowChanging(this, new SWSP_VIEWRowChangeEvent(((SWSP_VIEWRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SWSP_VIEWRowDeleted != null)) {
                    this.SWSP_VIEWRowDeleted(this, new SWSP_VIEWRowChangeEvent(((SWSP_VIEWRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SWSP_VIEWRowDeleting != null)) {
                    this.SWSP_VIEWRowDeleting(this, new SWSP_VIEWRowChangeEvent(((SWSP_VIEWRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSWSP_VIEWRow(SWSP_VIEWRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SANDBOXDataSet ds = new SANDBOXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SWSP_VIEWDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SWSP_WATERSHEDDataTable : global::System.Data.TypedTableBase<SWSP_WATERSHEDRow> {
            
            private global::System.Data.DataColumn columnwatershed_id;
            
            private global::System.Data.DataColumn columnwatershed;
            
            private global::System.Data.DataColumn columndescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_WATERSHEDDataTable() {
                this.TableName = "SWSP_WATERSHED";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_WATERSHEDDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SWSP_WATERSHEDDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn watershed_idColumn {
                get {
                    return this.columnwatershed_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn watershedColumn {
                get {
                    return this.columnwatershed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_WATERSHEDRow this[int index] {
                get {
                    return ((SWSP_WATERSHEDRow)(this.Rows[index]));
                }
            }
            
            public event SWSP_WATERSHEDRowChangeEventHandler SWSP_WATERSHEDRowChanging;
            
            public event SWSP_WATERSHEDRowChangeEventHandler SWSP_WATERSHEDRowChanged;
            
            public event SWSP_WATERSHEDRowChangeEventHandler SWSP_WATERSHEDRowDeleting;
            
            public event SWSP_WATERSHEDRowChangeEventHandler SWSP_WATERSHEDRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSWSP_WATERSHEDRow(SWSP_WATERSHEDRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_WATERSHEDRow AddSWSP_WATERSHEDRow(string watershed, string description) {
                SWSP_WATERSHEDRow rowSWSP_WATERSHEDRow = ((SWSP_WATERSHEDRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        watershed,
                        description};
                rowSWSP_WATERSHEDRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSWSP_WATERSHEDRow);
                return rowSWSP_WATERSHEDRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_WATERSHEDRow FindBywatershed_id(int watershed_id) {
                return ((SWSP_WATERSHEDRow)(this.Rows.Find(new object[] {
                            watershed_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SWSP_WATERSHEDDataTable cln = ((SWSP_WATERSHEDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SWSP_WATERSHEDDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnwatershed_id = base.Columns["watershed_id"];
                this.columnwatershed = base.Columns["watershed"];
                this.columndescription = base.Columns["description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnwatershed_id = new global::System.Data.DataColumn("watershed_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnwatershed_id);
                this.columnwatershed = new global::System.Data.DataColumn("watershed", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnwatershed);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnwatershed_id}, true));
                this.columnwatershed_id.AutoIncrement = true;
                this.columnwatershed_id.AutoIncrementSeed = -1;
                this.columnwatershed_id.AutoIncrementStep = -1;
                this.columnwatershed_id.AllowDBNull = false;
                this.columnwatershed_id.ReadOnly = true;
                this.columnwatershed_id.Unique = true;
                this.columnwatershed.AllowDBNull = false;
                this.columnwatershed.MaxLength = 30;
                this.columndescription.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_WATERSHEDRow NewSWSP_WATERSHEDRow() {
                return ((SWSP_WATERSHEDRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SWSP_WATERSHEDRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SWSP_WATERSHEDRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SWSP_WATERSHEDRowChanged != null)) {
                    this.SWSP_WATERSHEDRowChanged(this, new SWSP_WATERSHEDRowChangeEvent(((SWSP_WATERSHEDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SWSP_WATERSHEDRowChanging != null)) {
                    this.SWSP_WATERSHEDRowChanging(this, new SWSP_WATERSHEDRowChangeEvent(((SWSP_WATERSHEDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SWSP_WATERSHEDRowDeleted != null)) {
                    this.SWSP_WATERSHEDRowDeleted(this, new SWSP_WATERSHEDRowChangeEvent(((SWSP_WATERSHEDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SWSP_WATERSHEDRowDeleting != null)) {
                    this.SWSP_WATERSHEDRowDeleting(this, new SWSP_WATERSHEDRowChangeEvent(((SWSP_WATERSHEDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSWSP_WATERSHEDRow(SWSP_WATERSHEDRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SANDBOXDataSet ds = new SANDBOXDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SWSP_WATERSHEDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SWSP_CULVERTRow : global::System.Data.DataRow {
            
            private SWSP_CULVERTDataTable tableSWSP_CULVERT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_CULVERTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSWSP_CULVERT = ((SWSP_CULVERTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int culvert_id {
                get {
                    return ((int)(this[this.tableSWSP_CULVERT.culvert_idColumn]));
                }
                set {
                    this[this.tableSWSP_CULVERT.culvert_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int global_id {
                get {
                    return ((int)(this[this.tableSWSP_CULVERT.global_idColumn]));
                }
                set {
                    this[this.tableSWSP_CULVERT.global_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int survey_page_id {
                get {
                    return ((int)(this[this.tableSWSP_CULVERT.survey_page_idColumn]));
                }
                set {
                    this[this.tableSWSP_CULVERT.survey_page_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string node {
                get {
                    try {
                        return ((string)(this[this.tableSWSP_CULVERT.nodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'node\' in table \'SWSP_CULVERT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_CULVERT.nodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int facing {
                get {
                    try {
                        return ((int)(this[this.tableSWSP_CULVERT.facingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'facing\' in table \'SWSP_CULVERT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_CULVERT.facingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int culvert_opening {
                get {
                    try {
                        return ((int)(this[this.tableSWSP_CULVERT.culvert_openingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'culvert_opening\' in table \'SWSP_CULVERT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_CULVERT.culvert_openingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int shape {
                get {
                    try {
                        return ((int)(this[this.tableSWSP_CULVERT.shapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'shape\' in table \'SWSP_CULVERT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_CULVERT.shapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double full_diam_in {
                get {
                    try {
                        return ((double)(this[this.tableSWSP_CULVERT.full_diam_inColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'full_diam_in\' in table \'SWSP_CULVERT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_CULVERT.full_diam_inColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double unobstructed_height_in {
                get {
                    try {
                        return ((double)(this[this.tableSWSP_CULVERT.unobstructed_height_inColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'unobstructed_height_in\' in table \'SWSP_CULVERT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_CULVERT.unobstructed_height_inColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int material {
                get {
                    try {
                        return ((int)(this[this.tableSWSP_CULVERT.materialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'material\' in table \'SWSP_CULVERT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_CULVERT.materialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string comment {
                get {
                    try {
                        return ((string)(this[this.tableSWSP_CULVERT.commentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'comment\' in table \'SWSP_CULVERT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_CULVERT.commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_CULVERT_OPENING_TYPERow SWSP_CULVERT_OPENING_TYPERow {
                get {
                    return ((SWSP_CULVERT_OPENING_TYPERow)(this.GetParentRow(this.Table.ParentRelations["FK_CULVERT_CULVERT_OPENING_TYPE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CULVERT_CULVERT_OPENING_TYPE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_FACING_TYPERow SWSP_FACING_TYPERow {
                get {
                    return ((SWSP_FACING_TYPERow)(this.GetParentRow(this.Table.ParentRelations["FK_CULVERT_FACING_TYPE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CULVERT_FACING_TYPE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_MATERIAL_TYPERow SWSP_MATERIAL_TYPERow {
                get {
                    return ((SWSP_MATERIAL_TYPERow)(this.GetParentRow(this.Table.ParentRelations["FK_CULVERT_MATERIAL_TYPE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CULVERT_MATERIAL_TYPE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SHAPE_TYPERow SWSP_SHAPE_TYPERow {
                get {
                    return ((SWSP_SHAPE_TYPERow)(this.GetParentRow(this.Table.ParentRelations["FK_CULVERT_SHAPE_TYPE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CULVERT_SHAPE_TYPE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SURVEY_PAGERow SWSP_SURVEY_PAGERow {
                get {
                    return ((SWSP_SURVEY_PAGERow)(this.GetParentRow(this.Table.ParentRelations["FK_CULVERT_SURVEY_PAGE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CULVERT_SURVEY_PAGE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_GLOBAL_IDRow SWSP_GLOBAL_IDRow {
                get {
                    return ((SWSP_GLOBAL_IDRow)(this.GetParentRow(this.Table.ParentRelations["FK_SWSP_CULVERT_SWSP_GLOBAL_ID"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SWSP_CULVERT_SWSP_GLOBAL_ID"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnodeNull() {
                return this.IsNull(this.tableSWSP_CULVERT.nodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnodeNull() {
                this[this.tableSWSP_CULVERT.nodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfacingNull() {
                return this.IsNull(this.tableSWSP_CULVERT.facingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfacingNull() {
                this[this.tableSWSP_CULVERT.facingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isculvert_openingNull() {
                return this.IsNull(this.tableSWSP_CULVERT.culvert_openingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setculvert_openingNull() {
                this[this.tableSWSP_CULVERT.culvert_openingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsshapeNull() {
                return this.IsNull(this.tableSWSP_CULVERT.shapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetshapeNull() {
                this[this.tableSWSP_CULVERT.shapeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfull_diam_inNull() {
                return this.IsNull(this.tableSWSP_CULVERT.full_diam_inColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfull_diam_inNull() {
                this[this.tableSWSP_CULVERT.full_diam_inColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isunobstructed_height_inNull() {
                return this.IsNull(this.tableSWSP_CULVERT.unobstructed_height_inColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setunobstructed_height_inNull() {
                this[this.tableSWSP_CULVERT.unobstructed_height_inColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaterialNull() {
                return this.IsNull(this.tableSWSP_CULVERT.materialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaterialNull() {
                this[this.tableSWSP_CULVERT.materialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscommentNull() {
                return this.IsNull(this.tableSWSP_CULVERT.commentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcommentNull() {
                this[this.tableSWSP_CULVERT.commentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_PHOTORow[] GetSWSP_PHOTORows() {
                if ((this.Table.ChildRelations["FK_PHOTO_CULVERT"] == null)) {
                    return new SWSP_PHOTORow[0];
                }
                else {
                    return ((SWSP_PHOTORow[])(base.GetChildRows(this.Table.ChildRelations["FK_PHOTO_CULVERT"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SWSP_CULVERT_OPENING_TYPERow : global::System.Data.DataRow {
            
            private SWSP_CULVERT_OPENING_TYPEDataTable tableSWSP_CULVERT_OPENING_TYPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_CULVERT_OPENING_TYPERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSWSP_CULVERT_OPENING_TYPE = ((SWSP_CULVERT_OPENING_TYPEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int culvert_opening_type_id {
                get {
                    return ((int)(this[this.tableSWSP_CULVERT_OPENING_TYPE.culvert_opening_type_idColumn]));
                }
                set {
                    this[this.tableSWSP_CULVERT_OPENING_TYPE.culvert_opening_type_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string culvert_opening {
                get {
                    return ((string)(this[this.tableSWSP_CULVERT_OPENING_TYPE.culvert_openingColumn]));
                }
                set {
                    this[this.tableSWSP_CULVERT_OPENING_TYPE.culvert_openingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableSWSP_CULVERT_OPENING_TYPE.descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'description\' in table \'SWSP_CULVERT_OPENING_TYPE\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSWSP_CULVERT_OPENING_TYPE.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableSWSP_CULVERT_OPENING_TYPE.descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tableSWSP_CULVERT_OPENING_TYPE.descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_CULVERTRow[] GetSWSP_CULVERTRows() {
                if ((this.Table.ChildRelations["FK_CULVERT_CULVERT_OPENING_TYPE"] == null)) {
                    return new SWSP_CULVERTRow[0];
                }
                else {
                    return ((SWSP_CULVERTRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CULVERT_CULVERT_OPENING_TYPE"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SWSP_DITCHRow : global::System.Data.DataRow {
            
            private SWSP_DITCHDataTable tableSWSP_DITCH;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_DITCHRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSWSP_DITCH = ((SWSP_DITCHDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ditch_id {
                get {
                    return ((int)(this[this.tableSWSP_DITCH.ditch_idColumn]));
                }
                set {
                    this[this.tableSWSP_DITCH.ditch_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int global_id {
                get {
                    return ((int)(this[this.tableSWSP_DITCH.global_idColumn]));
                }
                set {
                    this[this.tableSWSP_DITCH.global_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int survey_page_id {
                get {
                    return ((int)(this[this.tableSWSP_DITCH.survey_page_idColumn]));
                }
                set {
                    this[this.tableSWSP_DITCH.survey_page_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string node {
                get {
                    try {
                        return ((string)(this[this.tableSWSP_DITCH.nodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'node\' in table \'SWSP_DITCH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_DITCH.nodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int facing {
                get {
                    try {
                        return ((int)(this[this.tableSWSP_DITCH.facingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'facing\' in table \'SWSP_DITCH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_DITCH.facingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double depth_in {
                get {
                    try {
                        return ((double)(this[this.tableSWSP_DITCH.depth_inColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'depth_in\' in table \'SWSP_DITCH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_DITCH.depth_inColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double top_width_in {
                get {
                    try {
                        return ((double)(this[this.tableSWSP_DITCH.top_width_inColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'top_width_in\' in table \'SWSP_DITCH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_DITCH.top_width_inColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double bottom_width_in {
                get {
                    try {
                        return ((double)(this[this.tableSWSP_DITCH.bottom_width_inColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'bottom_width_in\' in table \'SWSP_DITCH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_DITCH.bottom_width_inColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int material {
                get {
                    try {
                        return ((int)(this[this.tableSWSP_DITCH.materialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'material\' in table \'SWSP_DITCH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_DITCH.materialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string comment {
                get {
                    try {
                        return ((string)(this[this.tableSWSP_DITCH.commentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'comment\' in table \'SWSP_DITCH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_DITCH.commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_FACING_TYPERow SWSP_FACING_TYPERow {
                get {
                    return ((SWSP_FACING_TYPERow)(this.GetParentRow(this.Table.ParentRelations["FK_DITCH_FACING_TYPE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_DITCH_FACING_TYPE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_MATERIAL_TYPERow SWSP_MATERIAL_TYPERow {
                get {
                    return ((SWSP_MATERIAL_TYPERow)(this.GetParentRow(this.Table.ParentRelations["FK_DITCH_MATERIAL_TYPE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_DITCH_MATERIAL_TYPE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SURVEY_PAGERow SWSP_SURVEY_PAGERow {
                get {
                    return ((SWSP_SURVEY_PAGERow)(this.GetParentRow(this.Table.ParentRelations["FK_DITCH_SURVEY_PAGE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_DITCH_SURVEY_PAGE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_GLOBAL_IDRow SWSP_GLOBAL_IDRow {
                get {
                    return ((SWSP_GLOBAL_IDRow)(this.GetParentRow(this.Table.ParentRelations["FK_SWSP_DITCH_SWSP_GLOBAL_ID"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SWSP_DITCH_SWSP_GLOBAL_ID"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnodeNull() {
                return this.IsNull(this.tableSWSP_DITCH.nodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnodeNull() {
                this[this.tableSWSP_DITCH.nodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfacingNull() {
                return this.IsNull(this.tableSWSP_DITCH.facingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfacingNull() {
                this[this.tableSWSP_DITCH.facingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdepth_inNull() {
                return this.IsNull(this.tableSWSP_DITCH.depth_inColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdepth_inNull() {
                this[this.tableSWSP_DITCH.depth_inColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istop_width_inNull() {
                return this.IsNull(this.tableSWSP_DITCH.top_width_inColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settop_width_inNull() {
                this[this.tableSWSP_DITCH.top_width_inColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isbottom_width_inNull() {
                return this.IsNull(this.tableSWSP_DITCH.bottom_width_inColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setbottom_width_inNull() {
                this[this.tableSWSP_DITCH.bottom_width_inColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaterialNull() {
                return this.IsNull(this.tableSWSP_DITCH.materialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaterialNull() {
                this[this.tableSWSP_DITCH.materialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscommentNull() {
                return this.IsNull(this.tableSWSP_DITCH.commentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcommentNull() {
                this[this.tableSWSP_DITCH.commentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_PHOTORow[] GetSWSP_PHOTORows() {
                if ((this.Table.ChildRelations["FK_PHOTO_DITCH"] == null)) {
                    return new SWSP_PHOTORow[0];
                }
                else {
                    return ((SWSP_PHOTORow[])(base.GetChildRows(this.Table.ChildRelations["FK_PHOTO_DITCH"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SWSP_EVALUATORRow : global::System.Data.DataRow {
            
            private SWSP_EVALUATORDataTable tableSWSP_EVALUATOR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_EVALUATORRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSWSP_EVALUATOR = ((SWSP_EVALUATORDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int evaluator_id {
                get {
                    return ((int)(this[this.tableSWSP_EVALUATOR.evaluator_idColumn]));
                }
                set {
                    this[this.tableSWSP_EVALUATOR.evaluator_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string initials {
                get {
                    return ((string)(this[this.tableSWSP_EVALUATOR.initialsColumn]));
                }
                set {
                    this[this.tableSWSP_EVALUATOR.initialsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string last_name {
                get {
                    try {
                        return ((string)(this[this.tableSWSP_EVALUATOR.last_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'last_name\' in table \'SWSP_EVALUATOR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_EVALUATOR.last_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string first_name {
                get {
                    try {
                        return ((string)(this[this.tableSWSP_EVALUATOR.first_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'first_name\' in table \'SWSP_EVALUATOR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_EVALUATOR.first_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islast_nameNull() {
                return this.IsNull(this.tableSWSP_EVALUATOR.last_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlast_nameNull() {
                this[this.tableSWSP_EVALUATOR.last_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfirst_nameNull() {
                return this.IsNull(this.tableSWSP_EVALUATOR.first_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfirst_nameNull() {
                this[this.tableSWSP_EVALUATOR.first_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SURVEY_PAGE_EVALUATORRow[] GetSWSP_SURVEY_PAGE_EVALUATORRows() {
                if ((this.Table.ChildRelations["FK_SURVEY_PAGE_EVALUATOR_EVALUATOR"] == null)) {
                    return new SWSP_SURVEY_PAGE_EVALUATORRow[0];
                }
                else {
                    return ((SWSP_SURVEY_PAGE_EVALUATORRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SURVEY_PAGE_EVALUATOR_EVALUATOR"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SWSP_FACING_TYPERow : global::System.Data.DataRow {
            
            private SWSP_FACING_TYPEDataTable tableSWSP_FACING_TYPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_FACING_TYPERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSWSP_FACING_TYPE = ((SWSP_FACING_TYPEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int facing_type_id {
                get {
                    return ((int)(this[this.tableSWSP_FACING_TYPE.facing_type_idColumn]));
                }
                set {
                    this[this.tableSWSP_FACING_TYPE.facing_type_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string facing {
                get {
                    return ((string)(this[this.tableSWSP_FACING_TYPE.facingColumn]));
                }
                set {
                    this[this.tableSWSP_FACING_TYPE.facingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableSWSP_FACING_TYPE.descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'description\' in table \'SWSP_FACING_TYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_FACING_TYPE.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableSWSP_FACING_TYPE.descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tableSWSP_FACING_TYPE.descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_CULVERTRow[] GetSWSP_CULVERTRows() {
                if ((this.Table.ChildRelations["FK_CULVERT_FACING_TYPE"] == null)) {
                    return new SWSP_CULVERTRow[0];
                }
                else {
                    return ((SWSP_CULVERTRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CULVERT_FACING_TYPE"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_DITCHRow[] GetSWSP_DITCHRows() {
                if ((this.Table.ChildRelations["FK_DITCH_FACING_TYPE"] == null)) {
                    return new SWSP_DITCHRow[0];
                }
                else {
                    return ((SWSP_DITCHRow[])(base.GetChildRows(this.Table.ChildRelations["FK_DITCH_FACING_TYPE"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SWSP_GLOBAL_IDRow : global::System.Data.DataRow {
            
            private SWSP_GLOBAL_IDDataTable tableSWSP_GLOBAL_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_GLOBAL_IDRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSWSP_GLOBAL_ID = ((SWSP_GLOBAL_IDDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int global_id {
                get {
                    return ((int)(this[this.tableSWSP_GLOBAL_ID.global_idColumn]));
                }
                set {
                    this[this.tableSWSP_GLOBAL_ID.global_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableSWSP_GLOBAL_ID.descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'description\' in table \'SWSP_GLOBAL_ID\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_GLOBAL_ID.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableSWSP_GLOBAL_ID.descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tableSWSP_GLOBAL_ID.descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_CULVERTRow[] GetSWSP_CULVERTRows() {
                if ((this.Table.ChildRelations["FK_SWSP_CULVERT_SWSP_GLOBAL_ID"] == null)) {
                    return new SWSP_CULVERTRow[0];
                }
                else {
                    return ((SWSP_CULVERTRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SWSP_CULVERT_SWSP_GLOBAL_ID"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_DITCHRow[] GetSWSP_DITCHRows() {
                if ((this.Table.ChildRelations["FK_SWSP_DITCH_SWSP_GLOBAL_ID"] == null)) {
                    return new SWSP_DITCHRow[0];
                }
                else {
                    return ((SWSP_DITCHRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SWSP_DITCH_SWSP_GLOBAL_ID"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_PIPERow[] GetSWSP_PIPERows() {
                if ((this.Table.ChildRelations["FK_SWSP_PIPE_SWSP_GLOBAL_ID"] == null)) {
                    return new SWSP_PIPERow[0];
                }
                else {
                    return ((SWSP_PIPERow[])(base.GetChildRows(this.Table.ChildRelations["FK_SWSP_PIPE_SWSP_GLOBAL_ID"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SWSP_MATERIAL_TYPERow : global::System.Data.DataRow {
            
            private SWSP_MATERIAL_TYPEDataTable tableSWSP_MATERIAL_TYPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_MATERIAL_TYPERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSWSP_MATERIAL_TYPE = ((SWSP_MATERIAL_TYPEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int material_type_id {
                get {
                    return ((int)(this[this.tableSWSP_MATERIAL_TYPE.material_type_idColumn]));
                }
                set {
                    this[this.tableSWSP_MATERIAL_TYPE.material_type_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string material {
                get {
                    return ((string)(this[this.tableSWSP_MATERIAL_TYPE.materialColumn]));
                }
                set {
                    this[this.tableSWSP_MATERIAL_TYPE.materialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableSWSP_MATERIAL_TYPE.descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'description\' in table \'SWSP_MATERIAL_TYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_MATERIAL_TYPE.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableSWSP_MATERIAL_TYPE.descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tableSWSP_MATERIAL_TYPE.descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_CULVERTRow[] GetSWSP_CULVERTRows() {
                if ((this.Table.ChildRelations["FK_CULVERT_MATERIAL_TYPE"] == null)) {
                    return new SWSP_CULVERTRow[0];
                }
                else {
                    return ((SWSP_CULVERTRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CULVERT_MATERIAL_TYPE"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_DITCHRow[] GetSWSP_DITCHRows() {
                if ((this.Table.ChildRelations["FK_DITCH_MATERIAL_TYPE"] == null)) {
                    return new SWSP_DITCHRow[0];
                }
                else {
                    return ((SWSP_DITCHRow[])(base.GetChildRows(this.Table.ChildRelations["FK_DITCH_MATERIAL_TYPE"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_PIPERow[] GetSWSP_PIPERows() {
                if ((this.Table.ChildRelations["FK_PIPE_MATERIAL_TYPE"] == null)) {
                    return new SWSP_PIPERow[0];
                }
                else {
                    return ((SWSP_PIPERow[])(base.GetChildRows(this.Table.ChildRelations["FK_PIPE_MATERIAL_TYPE"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SWSP_PHOTORow : global::System.Data.DataRow {
            
            private SWSP_PHOTODataTable tableSWSP_PHOTO;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_PHOTORow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSWSP_PHOTO = ((SWSP_PHOTODataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int photo_id {
                get {
                    return ((int)(this[this.tableSWSP_PHOTO.photo_idColumn]));
                }
                set {
                    this[this.tableSWSP_PHOTO.photo_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int global_id {
                get {
                    return ((int)(this[this.tableSWSP_PHOTO.global_idColumn]));
                }
                set {
                    this[this.tableSWSP_PHOTO.global_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string location {
                get {
                    try {
                        return ((string)(this[this.tableSWSP_PHOTO.locationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'location\' in table \'SWSP_PHOTO\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_PHOTO.locationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string comment {
                get {
                    try {
                        return ((string)(this[this.tableSWSP_PHOTO.commentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'comment\' in table \'SWSP_PHOTO\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_PHOTO.commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_CULVERTRow SWSP_CULVERTRow {
                get {
                    return ((SWSP_CULVERTRow)(this.GetParentRow(this.Table.ParentRelations["FK_PHOTO_CULVERT"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_PHOTO_CULVERT"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_DITCHRow SWSP_DITCHRow {
                get {
                    return ((SWSP_DITCHRow)(this.GetParentRow(this.Table.ParentRelations["FK_PHOTO_DITCH"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_PHOTO_DITCH"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_PIPERow SWSP_PIPERow {
                get {
                    return ((SWSP_PIPERow)(this.GetParentRow(this.Table.ParentRelations["FK_PHOTO_PIPE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_PHOTO_PIPE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslocationNull() {
                return this.IsNull(this.tableSWSP_PHOTO.locationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlocationNull() {
                this[this.tableSWSP_PHOTO.locationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscommentNull() {
                return this.IsNull(this.tableSWSP_PHOTO.commentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcommentNull() {
                this[this.tableSWSP_PHOTO.commentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SWSP_PIPERow : global::System.Data.DataRow {
            
            private SWSP_PIPEDataTable tableSWSP_PIPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_PIPERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSWSP_PIPE = ((SWSP_PIPEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pipe_id {
                get {
                    return ((int)(this[this.tableSWSP_PIPE.pipe_idColumn]));
                }
                set {
                    this[this.tableSWSP_PIPE.pipe_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int global_id {
                get {
                    return ((int)(this[this.tableSWSP_PIPE.global_idColumn]));
                }
                set {
                    this[this.tableSWSP_PIPE.global_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int survey_page_id {
                get {
                    return ((int)(this[this.tableSWSP_PIPE.survey_page_idColumn]));
                }
                set {
                    this[this.tableSWSP_PIPE.survey_page_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string us_node {
                get {
                    try {
                        return ((string)(this[this.tableSWSP_PIPE.us_nodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'us_node\' in table \'SWSP_PIPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_PIPE.us_nodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ds_node {
                get {
                    try {
                        return ((string)(this[this.tableSWSP_PIPE.ds_nodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ds_node\' in table \'SWSP_PIPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_PIPE.ds_nodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double us_depth_in {
                get {
                    try {
                        return ((double)(this[this.tableSWSP_PIPE.us_depth_inColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'us_depth_in\' in table \'SWSP_PIPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_PIPE.us_depth_inColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ds_depth_in {
                get {
                    try {
                        return ((double)(this[this.tableSWSP_PIPE.ds_depth_inColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ds_depth_in\' in table \'SWSP_PIPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_PIPE.ds_depth_inColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double inside_diam_in {
                get {
                    try {
                        return ((double)(this[this.tableSWSP_PIPE.inside_diam_inColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'inside_diam_in\' in table \'SWSP_PIPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_PIPE.inside_diam_inColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int material {
                get {
                    try {
                        return ((int)(this[this.tableSWSP_PIPE.materialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'material\' in table \'SWSP_PIPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_PIPE.materialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int shape {
                get {
                    try {
                        return ((int)(this[this.tableSWSP_PIPE.shapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'shape\' in table \'SWSP_PIPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_PIPE.shapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string comment {
                get {
                    try {
                        return ((string)(this[this.tableSWSP_PIPE.commentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'comment\' in table \'SWSP_PIPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_PIPE.commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_MATERIAL_TYPERow SWSP_MATERIAL_TYPERow {
                get {
                    return ((SWSP_MATERIAL_TYPERow)(this.GetParentRow(this.Table.ParentRelations["FK_PIPE_MATERIAL_TYPE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_PIPE_MATERIAL_TYPE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SHAPE_TYPERow SWSP_SHAPE_TYPERow {
                get {
                    return ((SWSP_SHAPE_TYPERow)(this.GetParentRow(this.Table.ParentRelations["FK_PIPE_SHAPE_TYPE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_PIPE_SHAPE_TYPE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SURVEY_PAGERow SWSP_SURVEY_PAGERow {
                get {
                    return ((SWSP_SURVEY_PAGERow)(this.GetParentRow(this.Table.ParentRelations["FK_PIPE_SURVEY_PAGE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_PIPE_SURVEY_PAGE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_GLOBAL_IDRow SWSP_GLOBAL_IDRow {
                get {
                    return ((SWSP_GLOBAL_IDRow)(this.GetParentRow(this.Table.ParentRelations["FK_SWSP_PIPE_SWSP_GLOBAL_ID"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SWSP_PIPE_SWSP_GLOBAL_ID"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isus_nodeNull() {
                return this.IsNull(this.tableSWSP_PIPE.us_nodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setus_nodeNull() {
                this[this.tableSWSP_PIPE.us_nodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isds_nodeNull() {
                return this.IsNull(this.tableSWSP_PIPE.ds_nodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setds_nodeNull() {
                this[this.tableSWSP_PIPE.ds_nodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isus_depth_inNull() {
                return this.IsNull(this.tableSWSP_PIPE.us_depth_inColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setus_depth_inNull() {
                this[this.tableSWSP_PIPE.us_depth_inColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isds_depth_inNull() {
                return this.IsNull(this.tableSWSP_PIPE.ds_depth_inColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setds_depth_inNull() {
                this[this.tableSWSP_PIPE.ds_depth_inColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinside_diam_inNull() {
                return this.IsNull(this.tableSWSP_PIPE.inside_diam_inColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinside_diam_inNull() {
                this[this.tableSWSP_PIPE.inside_diam_inColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaterialNull() {
                return this.IsNull(this.tableSWSP_PIPE.materialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaterialNull() {
                this[this.tableSWSP_PIPE.materialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsshapeNull() {
                return this.IsNull(this.tableSWSP_PIPE.shapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetshapeNull() {
                this[this.tableSWSP_PIPE.shapeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscommentNull() {
                return this.IsNull(this.tableSWSP_PIPE.commentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcommentNull() {
                this[this.tableSWSP_PIPE.commentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_PHOTORow[] GetSWSP_PHOTORows() {
                if ((this.Table.ChildRelations["FK_PHOTO_PIPE"] == null)) {
                    return new SWSP_PHOTORow[0];
                }
                else {
                    return ((SWSP_PHOTORow[])(base.GetChildRows(this.Table.ChildRelations["FK_PHOTO_PIPE"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SWSP_SHAPE_TYPERow : global::System.Data.DataRow {
            
            private SWSP_SHAPE_TYPEDataTable tableSWSP_SHAPE_TYPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_SHAPE_TYPERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSWSP_SHAPE_TYPE = ((SWSP_SHAPE_TYPEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int shape_type_id {
                get {
                    return ((int)(this[this.tableSWSP_SHAPE_TYPE.shape_type_idColumn]));
                }
                set {
                    this[this.tableSWSP_SHAPE_TYPE.shape_type_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string shape {
                get {
                    return ((string)(this[this.tableSWSP_SHAPE_TYPE.shapeColumn]));
                }
                set {
                    this[this.tableSWSP_SHAPE_TYPE.shapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableSWSP_SHAPE_TYPE.descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'description\' in table \'SWSP_SHAPE_TYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_SHAPE_TYPE.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableSWSP_SHAPE_TYPE.descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tableSWSP_SHAPE_TYPE.descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_CULVERTRow[] GetSWSP_CULVERTRows() {
                if ((this.Table.ChildRelations["FK_CULVERT_SHAPE_TYPE"] == null)) {
                    return new SWSP_CULVERTRow[0];
                }
                else {
                    return ((SWSP_CULVERTRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CULVERT_SHAPE_TYPE"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_PIPERow[] GetSWSP_PIPERows() {
                if ((this.Table.ChildRelations["FK_PIPE_SHAPE_TYPE"] == null)) {
                    return new SWSP_PIPERow[0];
                }
                else {
                    return ((SWSP_PIPERow[])(base.GetChildRows(this.Table.ChildRelations["FK_PIPE_SHAPE_TYPE"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SWSP_SUBWATERSHEDRow : global::System.Data.DataRow {
            
            private SWSP_SUBWATERSHEDDataTable tableSWSP_SUBWATERSHED;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_SUBWATERSHEDRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSWSP_SUBWATERSHED = ((SWSP_SUBWATERSHEDDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int subwatershed_id {
                get {
                    return ((int)(this[this.tableSWSP_SUBWATERSHED.subwatershed_idColumn]));
                }
                set {
                    this[this.tableSWSP_SUBWATERSHED.subwatershed_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int watershed_id {
                get {
                    return ((int)(this[this.tableSWSP_SUBWATERSHED.watershed_idColumn]));
                }
                set {
                    this[this.tableSWSP_SUBWATERSHED.watershed_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string subwatershed {
                get {
                    return ((string)(this[this.tableSWSP_SUBWATERSHED.subwatershedColumn]));
                }
                set {
                    this[this.tableSWSP_SUBWATERSHED.subwatershedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableSWSP_SUBWATERSHED.descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'description\' in table \'SWSP_SUBWATERSHED\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_SUBWATERSHED.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_WATERSHEDRow SWSP_WATERSHEDRow {
                get {
                    return ((SWSP_WATERSHEDRow)(this.GetParentRow(this.Table.ParentRelations["FK_SUBWATERSHED_WATERSHED"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SUBWATERSHED_WATERSHED"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableSWSP_SUBWATERSHED.descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tableSWSP_SUBWATERSHED.descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_VIEWRow[] GetSWSP_VIEWRows() {
                if ((this.Table.ChildRelations["FK_VIEW_SUBWATERSHED"] == null)) {
                    return new SWSP_VIEWRow[0];
                }
                else {
                    return ((SWSP_VIEWRow[])(base.GetChildRows(this.Table.ChildRelations["FK_VIEW_SUBWATERSHED"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SWSP_SURVEY_PAGERow : global::System.Data.DataRow {
            
            private SWSP_SURVEY_PAGEDataTable tableSWSP_SURVEY_PAGE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_SURVEY_PAGERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSWSP_SURVEY_PAGE = ((SWSP_SURVEY_PAGEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int survey_page_id {
                get {
                    return ((int)(this[this.tableSWSP_SURVEY_PAGE.survey_page_idColumn]));
                }
                set {
                    this[this.tableSWSP_SURVEY_PAGE.survey_page_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int view_id {
                get {
                    try {
                        return ((int)(this[this.tableSWSP_SURVEY_PAGE.view_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'view_id\' in table \'SWSP_SURVEY_PAGE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_SURVEY_PAGE.view_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int page_number {
                get {
                    try {
                        return ((int)(this[this.tableSWSP_SURVEY_PAGE.page_numberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'page_number\' in table \'SWSP_SURVEY_PAGE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_SURVEY_PAGE.page_numberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_VIEWRow SWSP_VIEWRow {
                get {
                    return ((SWSP_VIEWRow)(this.GetParentRow(this.Table.ParentRelations["FK_SURVEY_PAGE_VIEW"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SURVEY_PAGE_VIEW"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isview_idNull() {
                return this.IsNull(this.tableSWSP_SURVEY_PAGE.view_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setview_idNull() {
                this[this.tableSWSP_SURVEY_PAGE.view_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispage_numberNull() {
                return this.IsNull(this.tableSWSP_SURVEY_PAGE.page_numberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpage_numberNull() {
                this[this.tableSWSP_SURVEY_PAGE.page_numberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_CULVERTRow[] GetSWSP_CULVERTRows() {
                if ((this.Table.ChildRelations["FK_CULVERT_SURVEY_PAGE"] == null)) {
                    return new SWSP_CULVERTRow[0];
                }
                else {
                    return ((SWSP_CULVERTRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CULVERT_SURVEY_PAGE"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_DITCHRow[] GetSWSP_DITCHRows() {
                if ((this.Table.ChildRelations["FK_DITCH_SURVEY_PAGE"] == null)) {
                    return new SWSP_DITCHRow[0];
                }
                else {
                    return ((SWSP_DITCHRow[])(base.GetChildRows(this.Table.ChildRelations["FK_DITCH_SURVEY_PAGE"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_PIPERow[] GetSWSP_PIPERows() {
                if ((this.Table.ChildRelations["FK_PIPE_SURVEY_PAGE"] == null)) {
                    return new SWSP_PIPERow[0];
                }
                else {
                    return ((SWSP_PIPERow[])(base.GetChildRows(this.Table.ChildRelations["FK_PIPE_SURVEY_PAGE"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SURVEY_PAGE_EVALUATORRow[] GetSWSP_SURVEY_PAGE_EVALUATORRows() {
                if ((this.Table.ChildRelations["FK_SURVEY_PAGE_EVALUATOR_SURVEY_PAGE"] == null)) {
                    return new SWSP_SURVEY_PAGE_EVALUATORRow[0];
                }
                else {
                    return ((SWSP_SURVEY_PAGE_EVALUATORRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SURVEY_PAGE_EVALUATOR_SURVEY_PAGE"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SWSP_SURVEY_PAGE_EVALUATORRow : global::System.Data.DataRow {
            
            private SWSP_SURVEY_PAGE_EVALUATORDataTable tableSWSP_SURVEY_PAGE_EVALUATOR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_SURVEY_PAGE_EVALUATORRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSWSP_SURVEY_PAGE_EVALUATOR = ((SWSP_SURVEY_PAGE_EVALUATORDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int survey_page_id {
                get {
                    return ((int)(this[this.tableSWSP_SURVEY_PAGE_EVALUATOR.survey_page_idColumn]));
                }
                set {
                    this[this.tableSWSP_SURVEY_PAGE_EVALUATOR.survey_page_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int evaluator_id {
                get {
                    return ((int)(this[this.tableSWSP_SURVEY_PAGE_EVALUATOR.evaluator_idColumn]));
                }
                set {
                    this[this.tableSWSP_SURVEY_PAGE_EVALUATOR.evaluator_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_EVALUATORRow SWSP_EVALUATORRow {
                get {
                    return ((SWSP_EVALUATORRow)(this.GetParentRow(this.Table.ParentRelations["FK_SURVEY_PAGE_EVALUATOR_EVALUATOR"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SURVEY_PAGE_EVALUATOR_EVALUATOR"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SURVEY_PAGERow SWSP_SURVEY_PAGERow {
                get {
                    return ((SWSP_SURVEY_PAGERow)(this.GetParentRow(this.Table.ParentRelations["FK_SURVEY_PAGE_EVALUATOR_SURVEY_PAGE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SURVEY_PAGE_EVALUATOR_SURVEY_PAGE"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SWSP_VIEWRow : global::System.Data.DataRow {
            
            private SWSP_VIEWDataTable tableSWSP_VIEW;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_VIEWRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSWSP_VIEW = ((SWSP_VIEWDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int view_id {
                get {
                    return ((int)(this[this.tableSWSP_VIEW.view_idColumn]));
                }
                set {
                    this[this.tableSWSP_VIEW.view_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int subwatershed_id {
                get {
                    return ((int)(this[this.tableSWSP_VIEW.subwatershed_idColumn]));
                }
                set {
                    this[this.tableSWSP_VIEW.subwatershed_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int view_number {
                get {
                    return ((int)(this[this.tableSWSP_VIEW.view_numberColumn]));
                }
                set {
                    this[this.tableSWSP_VIEW.view_numberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableSWSP_VIEW.descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'description\' in table \'SWSP_VIEW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_VIEW.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SUBWATERSHEDRow SWSP_SUBWATERSHEDRow {
                get {
                    return ((SWSP_SUBWATERSHEDRow)(this.GetParentRow(this.Table.ParentRelations["FK_VIEW_SUBWATERSHED"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_VIEW_SUBWATERSHED"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableSWSP_VIEW.descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tableSWSP_VIEW.descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SURVEY_PAGERow[] GetSWSP_SURVEY_PAGERows() {
                if ((this.Table.ChildRelations["FK_SURVEY_PAGE_VIEW"] == null)) {
                    return new SWSP_SURVEY_PAGERow[0];
                }
                else {
                    return ((SWSP_SURVEY_PAGERow[])(base.GetChildRows(this.Table.ChildRelations["FK_SURVEY_PAGE_VIEW"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SWSP_WATERSHEDRow : global::System.Data.DataRow {
            
            private SWSP_WATERSHEDDataTable tableSWSP_WATERSHED;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWSP_WATERSHEDRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSWSP_WATERSHED = ((SWSP_WATERSHEDDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int watershed_id {
                get {
                    return ((int)(this[this.tableSWSP_WATERSHED.watershed_idColumn]));
                }
                set {
                    this[this.tableSWSP_WATERSHED.watershed_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string watershed {
                get {
                    return ((string)(this[this.tableSWSP_WATERSHED.watershedColumn]));
                }
                set {
                    this[this.tableSWSP_WATERSHED.watershedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableSWSP_WATERSHED.descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'description\' in table \'SWSP_WATERSHED\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWSP_WATERSHED.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableSWSP_WATERSHED.descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tableSWSP_WATERSHED.descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SUBWATERSHEDRow[] GetSWSP_SUBWATERSHEDRows() {
                if ((this.Table.ChildRelations["FK_SUBWATERSHED_WATERSHED"] == null)) {
                    return new SWSP_SUBWATERSHEDRow[0];
                }
                else {
                    return ((SWSP_SUBWATERSHEDRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SUBWATERSHED_WATERSHED"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SWSP_CULVERTRowChangeEvent : global::System.EventArgs {
            
            private SWSP_CULVERTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_CULVERTRowChangeEvent(SWSP_CULVERTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_CULVERTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SWSP_CULVERT_OPENING_TYPERowChangeEvent : global::System.EventArgs {
            
            private SWSP_CULVERT_OPENING_TYPERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_CULVERT_OPENING_TYPERowChangeEvent(SWSP_CULVERT_OPENING_TYPERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_CULVERT_OPENING_TYPERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SWSP_DITCHRowChangeEvent : global::System.EventArgs {
            
            private SWSP_DITCHRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_DITCHRowChangeEvent(SWSP_DITCHRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_DITCHRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SWSP_EVALUATORRowChangeEvent : global::System.EventArgs {
            
            private SWSP_EVALUATORRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_EVALUATORRowChangeEvent(SWSP_EVALUATORRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_EVALUATORRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SWSP_FACING_TYPERowChangeEvent : global::System.EventArgs {
            
            private SWSP_FACING_TYPERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_FACING_TYPERowChangeEvent(SWSP_FACING_TYPERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_FACING_TYPERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SWSP_GLOBAL_IDRowChangeEvent : global::System.EventArgs {
            
            private SWSP_GLOBAL_IDRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_GLOBAL_IDRowChangeEvent(SWSP_GLOBAL_IDRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_GLOBAL_IDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SWSP_MATERIAL_TYPERowChangeEvent : global::System.EventArgs {
            
            private SWSP_MATERIAL_TYPERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_MATERIAL_TYPERowChangeEvent(SWSP_MATERIAL_TYPERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_MATERIAL_TYPERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SWSP_PHOTORowChangeEvent : global::System.EventArgs {
            
            private SWSP_PHOTORow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_PHOTORowChangeEvent(SWSP_PHOTORow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_PHOTORow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SWSP_PIPERowChangeEvent : global::System.EventArgs {
            
            private SWSP_PIPERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_PIPERowChangeEvent(SWSP_PIPERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_PIPERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SWSP_SHAPE_TYPERowChangeEvent : global::System.EventArgs {
            
            private SWSP_SHAPE_TYPERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SHAPE_TYPERowChangeEvent(SWSP_SHAPE_TYPERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SHAPE_TYPERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SWSP_SUBWATERSHEDRowChangeEvent : global::System.EventArgs {
            
            private SWSP_SUBWATERSHEDRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SUBWATERSHEDRowChangeEvent(SWSP_SUBWATERSHEDRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SUBWATERSHEDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SWSP_SURVEY_PAGERowChangeEvent : global::System.EventArgs {
            
            private SWSP_SURVEY_PAGERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SURVEY_PAGERowChangeEvent(SWSP_SURVEY_PAGERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SURVEY_PAGERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SWSP_SURVEY_PAGE_EVALUATORRowChangeEvent : global::System.EventArgs {
            
            private SWSP_SURVEY_PAGE_EVALUATORRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SURVEY_PAGE_EVALUATORRowChangeEvent(SWSP_SURVEY_PAGE_EVALUATORRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_SURVEY_PAGE_EVALUATORRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SWSP_VIEWRowChangeEvent : global::System.EventArgs {
            
            private SWSP_VIEWRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_VIEWRowChangeEvent(SWSP_VIEWRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_VIEWRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SWSP_WATERSHEDRowChangeEvent : global::System.EventArgs {
            
            private SWSP_WATERSHEDRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_WATERSHEDRowChangeEvent(SWSP_WATERSHEDRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWSP_WATERSHEDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace SWI_2.SANDBOXDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SWSP_CULVERTTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SWSP_CULVERTTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SWSP_CULVERT";
            tableMapping.ColumnMappings.Add("culvert_id", "culvert_id");
            tableMapping.ColumnMappings.Add("global_id", "global_id");
            tableMapping.ColumnMappings.Add("survey_page_id", "survey_page_id");
            tableMapping.ColumnMappings.Add("node", "node");
            tableMapping.ColumnMappings.Add("facing", "facing");
            tableMapping.ColumnMappings.Add("culvert_opening", "culvert_opening");
            tableMapping.ColumnMappings.Add("shape", "shape");
            tableMapping.ColumnMappings.Add("full_diam_in", "full_diam_in");
            tableMapping.ColumnMappings.Add("unobstructed_height_in", "unobstructed_height_in");
            tableMapping.ColumnMappings.Add("material", "material");
            tableMapping.ColumnMappings.Add("comment", "comment");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [GIS].[SWSP_CULVERT] WHERE (([culvert_id] = @Original_culvert_id) AND ([global_id] = @Original_global_id) AND ([survey_page_id] = @Original_survey_page_id) AND ((@IsNull_node = 1 AND [node] IS NULL) OR ([node] = @Original_node)) AND ((@IsNull_facing = 1 AND [facing] IS NULL) OR ([facing] = @Original_facing)) AND ((@IsNull_culvert_opening = 1 AND [culvert_opening] IS NULL) OR ([culvert_opening] = @Original_culvert_opening)) AND ((@IsNull_shape = 1 AND [shape] IS NULL) OR ([shape] = @Original_shape)) AND ((@IsNull_full_diam_in = 1 AND [full_diam_in] IS NULL) OR ([full_diam_in] = @Original_full_diam_in)) AND ((@IsNull_unobstructed_height_in = 1 AND [unobstructed_height_in] IS NULL) OR ([unobstructed_height_in] = @Original_unobstructed_height_in)) AND ((@IsNull_material = 1 AND [material] IS NULL) OR ([material] = @Original_material)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_culvert_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "culvert_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_global_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_survey_page_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "survey_page_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_node", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "node", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_node", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "node", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_facing", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facing", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_facing", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facing", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_culvert_opening", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "culvert_opening", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_culvert_opening", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "culvert_opening", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_shape", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "shape", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_shape", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "shape", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_full_diam_in", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "full_diam_in", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_full_diam_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "full_diam_in", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_unobstructed_height_in", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "unobstructed_height_in", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_unobstructed_height_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "unobstructed_height_in", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_material", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_material", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [GIS].[SWSP_CULVERT] ([global_id], [survey_page_id], [node], [facing], [culvert_opening], [shape], [full_diam_in], [unobstructed_height_in], [material], [comment]) VALUES (@global_id, @survey_page_id, @node, @facing, @culvert_opening, @shape, @full_diam_in, @unobstructed_height_in, @material, @comment);
SELECT culvert_id, global_id, survey_page_id, node, facing, culvert_opening, shape, full_diam_in, unobstructed_height_in, material, comment FROM SWSP_CULVERT WHERE (culvert_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@global_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@survey_page_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "survey_page_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@node", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "node", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@facing", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facing", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@culvert_opening", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "culvert_opening", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@shape", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "shape", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@full_diam_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "full_diam_in", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@unobstructed_height_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "unobstructed_height_in", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@material", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@comment", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [GIS].[SWSP_CULVERT] SET [global_id] = @global_id, [survey_page_id] = @survey_page_id, [node] = @node, [facing] = @facing, [culvert_opening] = @culvert_opening, [shape] = @shape, [full_diam_in] = @full_diam_in, [unobstructed_height_in] = @unobstructed_height_in, [material] = @material, [comment] = @comment WHERE (([culvert_id] = @Original_culvert_id) AND ([global_id] = @Original_global_id) AND ([survey_page_id] = @Original_survey_page_id) AND ((@IsNull_node = 1 AND [node] IS NULL) OR ([node] = @Original_node)) AND ((@IsNull_facing = 1 AND [facing] IS NULL) OR ([facing] = @Original_facing)) AND ((@IsNull_culvert_opening = 1 AND [culvert_opening] IS NULL) OR ([culvert_opening] = @Original_culvert_opening)) AND ((@IsNull_shape = 1 AND [shape] IS NULL) OR ([shape] = @Original_shape)) AND ((@IsNull_full_diam_in = 1 AND [full_diam_in] IS NULL) OR ([full_diam_in] = @Original_full_diam_in)) AND ((@IsNull_unobstructed_height_in = 1 AND [unobstructed_height_in] IS NULL) OR ([unobstructed_height_in] = @Original_unobstructed_height_in)) AND ((@IsNull_material = 1 AND [material] IS NULL) OR ([material] = @Original_material)));
SELECT culvert_id, global_id, survey_page_id, node, facing, culvert_opening, shape, full_diam_in, unobstructed_height_in, material, comment FROM SWSP_CULVERT WHERE (culvert_id = @culvert_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@global_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@survey_page_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "survey_page_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@node", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "node", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@facing", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facing", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@culvert_opening", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "culvert_opening", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@shape", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "shape", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@full_diam_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "full_diam_in", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@unobstructed_height_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "unobstructed_height_in", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@material", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@comment", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_culvert_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "culvert_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_global_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_survey_page_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "survey_page_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_node", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "node", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_node", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "node", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_facing", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facing", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_facing", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facing", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_culvert_opening", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "culvert_opening", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_culvert_opening", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "culvert_opening", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_shape", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "shape", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_shape", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "shape", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_full_diam_in", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "full_diam_in", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_full_diam_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "full_diam_in", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_unobstructed_height_in", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "unobstructed_height_in", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_unobstructed_height_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "unobstructed_height_in", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_material", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_material", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@culvert_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "culvert_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SWI_2.Properties.Settings.Default.SANDBOXConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT culvert_id, global_id, survey_page_id, node, facing, culvert_opening, shap" +
                "e, full_diam_in, unobstructed_height_in, material, comment FROM GIS.SWSP_CULVERT" +
                "";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM [GIS].[SWSP_CULVERT] WHERE ([culvert_id] = @Original_culvert_id)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_culvert_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "culvert_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SANDBOXDataSet.SWSP_CULVERTDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SANDBOXDataSet.SWSP_CULVERTDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SANDBOXDataSet.SWSP_CULVERTDataTable dataTable = new SANDBOXDataSet.SWSP_CULVERTDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet.SWSP_CULVERTDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SWSP_CULVERT");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_culvert_id, int Original_global_id, int Original_survey_page_id, string Original_node, global::System.Nullable<int> Original_facing, global::System.Nullable<int> Original_culvert_opening, global::System.Nullable<int> Original_shape, global::System.Nullable<double> Original_full_diam_in, global::System.Nullable<double> Original_unobstructed_height_in, global::System.Nullable<int> Original_material) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_culvert_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_global_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_survey_page_id));
            if ((Original_node == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_node));
            }
            if ((Original_facing.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_facing.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_culvert_opening.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_culvert_opening.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_shape.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_shape.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_full_diam_in.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((double)(Original_full_diam_in.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_unobstructed_height_in.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((double)(Original_unobstructed_height_in.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_material.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((int)(Original_material.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int global_id, int survey_page_id, string node, global::System.Nullable<int> facing, global::System.Nullable<int> culvert_opening, global::System.Nullable<int> shape, global::System.Nullable<double> full_diam_in, global::System.Nullable<double> unobstructed_height_in, global::System.Nullable<int> material, string comment) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(global_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(survey_page_id));
            if ((node == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(node));
            }
            if ((facing.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(facing.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((culvert_opening.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(culvert_opening.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((shape.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(shape.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((full_diam_in.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(full_diam_in.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((unobstructed_height_in.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(unobstructed_height_in.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((material.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(material.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((comment == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(comment));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int global_id, 
                    int survey_page_id, 
                    string node, 
                    global::System.Nullable<int> facing, 
                    global::System.Nullable<int> culvert_opening, 
                    global::System.Nullable<int> shape, 
                    global::System.Nullable<double> full_diam_in, 
                    global::System.Nullable<double> unobstructed_height_in, 
                    global::System.Nullable<int> material, 
                    string comment, 
                    int Original_culvert_id, 
                    int Original_global_id, 
                    int Original_survey_page_id, 
                    string Original_node, 
                    global::System.Nullable<int> Original_facing, 
                    global::System.Nullable<int> Original_culvert_opening, 
                    global::System.Nullable<int> Original_shape, 
                    global::System.Nullable<double> Original_full_diam_in, 
                    global::System.Nullable<double> Original_unobstructed_height_in, 
                    global::System.Nullable<int> Original_material, 
                    int culvert_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(global_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(survey_page_id));
            if ((node == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(node));
            }
            if ((facing.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(facing.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((culvert_opening.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(culvert_opening.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((shape.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(shape.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((full_diam_in.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(full_diam_in.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((unobstructed_height_in.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(unobstructed_height_in.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((material.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(material.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((comment == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(comment));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_culvert_id));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_global_id));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_survey_page_id));
            if ((Original_node == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_node));
            }
            if ((Original_facing.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_facing.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_culvert_opening.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_culvert_opening.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_shape.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_shape.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_full_diam_in.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((double)(Original_full_diam_in.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_unobstructed_height_in.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((double)(Original_unobstructed_height_in.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_material.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(Original_material.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(culvert_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int global_id, 
                    int survey_page_id, 
                    string node, 
                    global::System.Nullable<int> facing, 
                    global::System.Nullable<int> culvert_opening, 
                    global::System.Nullable<int> shape, 
                    global::System.Nullable<double> full_diam_in, 
                    global::System.Nullable<double> unobstructed_height_in, 
                    global::System.Nullable<int> material, 
                    string comment, 
                    int Original_culvert_id, 
                    int Original_global_id, 
                    int Original_survey_page_id, 
                    string Original_node, 
                    global::System.Nullable<int> Original_facing, 
                    global::System.Nullable<int> Original_culvert_opening, 
                    global::System.Nullable<int> Original_shape, 
                    global::System.Nullable<double> Original_full_diam_in, 
                    global::System.Nullable<double> Original_unobstructed_height_in, 
                    global::System.Nullable<int> Original_material) {
            return this.Update(global_id, survey_page_id, node, facing, culvert_opening, shape, full_diam_in, unobstructed_height_in, material, comment, Original_culvert_id, Original_global_id, Original_survey_page_id, Original_node, Original_facing, Original_culvert_opening, Original_shape, Original_full_diam_in, Original_unobstructed_height_in, Original_material, Original_culvert_id);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteQuery(int Original_culvert_id) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((int)(Original_culvert_id));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SWSP_CULVERT_OPENING_TYPETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SWSP_CULVERT_OPENING_TYPETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SWSP_CULVERT_OPENING_TYPE";
            tableMapping.ColumnMappings.Add("culvert_opening_type_id", "culvert_opening_type_id");
            tableMapping.ColumnMappings.Add("culvert_opening", "culvert_opening");
            tableMapping.ColumnMappings.Add("description", "description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [GIS].[SWSP_CULVERT_OPENING_TYPE] WHERE (([culvert_opening_type_id] = @Original_culvert_opening_type_id) AND ([culvert_opening] = @Original_culvert_opening) AND ((@IsNull_description = 1 AND [description] IS NULL) OR ([description] = @Original_description)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_culvert_opening_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "culvert_opening_type_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_culvert_opening", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "culvert_opening", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_description", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [GIS].[SWSP_CULVERT_OPENING_TYPE] ([culvert_opening], [description]) VALUES (@culvert_opening, @description);
SELECT culvert_opening_type_id, culvert_opening, description FROM SWSP_CULVERT_OPENING_TYPE WHERE (culvert_opening_type_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@culvert_opening", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "culvert_opening", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [GIS].[SWSP_CULVERT_OPENING_TYPE] SET [culvert_opening] = @culvert_opening, [description] = @description WHERE (([culvert_opening_type_id] = @Original_culvert_opening_type_id) AND ([culvert_opening] = @Original_culvert_opening) AND ((@IsNull_description = 1 AND [description] IS NULL) OR ([description] = @Original_description)));
SELECT culvert_opening_type_id, culvert_opening, description FROM SWSP_CULVERT_OPENING_TYPE WHERE (culvert_opening_type_id = @culvert_opening_type_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@culvert_opening", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "culvert_opening", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_culvert_opening_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "culvert_opening_type_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_culvert_opening", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "culvert_opening", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_description", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@culvert_opening_type_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "culvert_opening_type_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SWI_2.Properties.Settings.Default.SANDBOXConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT culvert_opening_type_id, culvert_opening, description FROM GIS.SWSP_CULVER" +
                "T_OPENING_TYPE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SANDBOXDataSet.SWSP_CULVERT_OPENING_TYPEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SANDBOXDataSet.SWSP_CULVERT_OPENING_TYPEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SANDBOXDataSet.SWSP_CULVERT_OPENING_TYPEDataTable dataTable = new SANDBOXDataSet.SWSP_CULVERT_OPENING_TYPEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet.SWSP_CULVERT_OPENING_TYPEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SWSP_CULVERT_OPENING_TYPE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_culvert_opening_type_id, string Original_culvert_opening, string Original_description) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_culvert_opening_type_id));
            if ((Original_culvert_opening == null)) {
                throw new global::System.ArgumentNullException("Original_culvert_opening");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_culvert_opening));
            }
            if ((Original_description == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string culvert_opening, string description) {
            if ((culvert_opening == null)) {
                throw new global::System.ArgumentNullException("culvert_opening");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(culvert_opening));
            }
            if ((description == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string culvert_opening, string description, int Original_culvert_opening_type_id, string Original_culvert_opening, string Original_description, int culvert_opening_type_id) {
            if ((culvert_opening == null)) {
                throw new global::System.ArgumentNullException("culvert_opening");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(culvert_opening));
            }
            if ((description == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(description));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_culvert_opening_type_id));
            if ((Original_culvert_opening == null)) {
                throw new global::System.ArgumentNullException("Original_culvert_opening");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_culvert_opening));
            }
            if ((Original_description == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_description));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(culvert_opening_type_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string culvert_opening, string description, int Original_culvert_opening_type_id, string Original_culvert_opening, string Original_description) {
            return this.Update(culvert_opening, description, Original_culvert_opening_type_id, Original_culvert_opening, Original_description, Original_culvert_opening_type_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SWSP_DITCHTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SWSP_DITCHTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SWSP_DITCH";
            tableMapping.ColumnMappings.Add("ditch_id", "ditch_id");
            tableMapping.ColumnMappings.Add("global_id", "global_id");
            tableMapping.ColumnMappings.Add("survey_page_id", "survey_page_id");
            tableMapping.ColumnMappings.Add("node", "node");
            tableMapping.ColumnMappings.Add("facing", "facing");
            tableMapping.ColumnMappings.Add("depth_in", "depth_in");
            tableMapping.ColumnMappings.Add("top_width_in", "top_width_in");
            tableMapping.ColumnMappings.Add("bottom_width_in", "bottom_width_in");
            tableMapping.ColumnMappings.Add("material", "material");
            tableMapping.ColumnMappings.Add("comment", "comment");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [GIS].[SWSP_DITCH] WHERE (([ditch_id] = @Original_ditch_id) AND ([global_id] = @Original_global_id) AND ([survey_page_id] = @Original_survey_page_id) AND ((@IsNull_node = 1 AND [node] IS NULL) OR ([node] = @Original_node)) AND ((@IsNull_facing = 1 AND [facing] IS NULL) OR ([facing] = @Original_facing)) AND ((@IsNull_depth_in = 1 AND [depth_in] IS NULL) OR ([depth_in] = @Original_depth_in)) AND ((@IsNull_top_width_in = 1 AND [top_width_in] IS NULL) OR ([top_width_in] = @Original_top_width_in)) AND ((@IsNull_bottom_width_in = 1 AND [bottom_width_in] IS NULL) OR ([bottom_width_in] = @Original_bottom_width_in)) AND ((@IsNull_material = 1 AND [material] IS NULL) OR ([material] = @Original_material)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ditch_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ditch_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_global_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_survey_page_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "survey_page_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_node", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "node", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_node", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "node", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_facing", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facing", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_facing", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facing", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_depth_in", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "depth_in", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_depth_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "depth_in", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_top_width_in", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "top_width_in", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_top_width_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "top_width_in", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_bottom_width_in", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bottom_width_in", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bottom_width_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bottom_width_in", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_material", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_material", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [GIS].[SWSP_DITCH] ([global_id], [survey_page_id], [node], [facing], [depth_in], [top_width_in], [bottom_width_in], [material], [comment]) VALUES (@global_id, @survey_page_id, @node, @facing, @depth_in, @top_width_in, @bottom_width_in, @material, @comment);
SELECT ditch_id, global_id, survey_page_id, node, facing, depth_in, top_width_in, bottom_width_in, material, comment FROM SWSP_DITCH WHERE (ditch_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@global_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@survey_page_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "survey_page_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@node", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "node", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@facing", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facing", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@depth_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "depth_in", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@top_width_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "top_width_in", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bottom_width_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bottom_width_in", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@material", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@comment", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [GIS].[SWSP_DITCH] SET [global_id] = @global_id, [survey_page_id] = @survey_page_id, [node] = @node, [facing] = @facing, [depth_in] = @depth_in, [top_width_in] = @top_width_in, [bottom_width_in] = @bottom_width_in, [material] = @material, [comment] = @comment WHERE (([ditch_id] = @Original_ditch_id) AND ([global_id] = @Original_global_id) AND ([survey_page_id] = @Original_survey_page_id) AND ((@IsNull_node = 1 AND [node] IS NULL) OR ([node] = @Original_node)) AND ((@IsNull_facing = 1 AND [facing] IS NULL) OR ([facing] = @Original_facing)) AND ((@IsNull_depth_in = 1 AND [depth_in] IS NULL) OR ([depth_in] = @Original_depth_in)) AND ((@IsNull_top_width_in = 1 AND [top_width_in] IS NULL) OR ([top_width_in] = @Original_top_width_in)) AND ((@IsNull_bottom_width_in = 1 AND [bottom_width_in] IS NULL) OR ([bottom_width_in] = @Original_bottom_width_in)) AND ((@IsNull_material = 1 AND [material] IS NULL) OR ([material] = @Original_material)));
SELECT ditch_id, global_id, survey_page_id, node, facing, depth_in, top_width_in, bottom_width_in, material, comment FROM SWSP_DITCH WHERE (ditch_id = @ditch_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@global_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@survey_page_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "survey_page_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@node", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "node", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@facing", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facing", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@depth_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "depth_in", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@top_width_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "top_width_in", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bottom_width_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bottom_width_in", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@material", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@comment", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ditch_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ditch_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_global_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_survey_page_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "survey_page_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_node", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "node", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_node", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "node", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_facing", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facing", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_facing", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facing", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_depth_in", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "depth_in", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_depth_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "depth_in", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_top_width_in", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "top_width_in", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_top_width_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "top_width_in", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_bottom_width_in", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bottom_width_in", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bottom_width_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bottom_width_in", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_material", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_material", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ditch_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ditch_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SWI_2.Properties.Settings.Default.SANDBOXConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ditch_id, global_id, survey_page_id, node, facing, depth_in, top_width_in," +
                " bottom_width_in, material, comment FROM GIS.SWSP_DITCH";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM [GIS].[SWSP_DITCH] WHERE [ditch_id] = @Original_ditch_id ";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ditch_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ditch_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SANDBOXDataSet.SWSP_DITCHDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SANDBOXDataSet.SWSP_DITCHDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SANDBOXDataSet.SWSP_DITCHDataTable dataTable = new SANDBOXDataSet.SWSP_DITCHDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet.SWSP_DITCHDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SWSP_DITCH");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ditch_id, int Original_global_id, int Original_survey_page_id, string Original_node, global::System.Nullable<int> Original_facing, global::System.Nullable<double> Original_depth_in, global::System.Nullable<double> Original_top_width_in, global::System.Nullable<double> Original_bottom_width_in, global::System.Nullable<int> Original_material) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ditch_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_global_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_survey_page_id));
            if ((Original_node == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_node));
            }
            if ((Original_facing.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_facing.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_depth_in.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((double)(Original_depth_in.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_top_width_in.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((double)(Original_top_width_in.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_bottom_width_in.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((double)(Original_bottom_width_in.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_material.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_material.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int global_id, int survey_page_id, string node, global::System.Nullable<int> facing, global::System.Nullable<double> depth_in, global::System.Nullable<double> top_width_in, global::System.Nullable<double> bottom_width_in, global::System.Nullable<int> material, string comment) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(global_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(survey_page_id));
            if ((node == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(node));
            }
            if ((facing.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(facing.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((depth_in.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(depth_in.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((top_width_in.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(top_width_in.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((bottom_width_in.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(bottom_width_in.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((material.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(material.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((comment == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(comment));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int global_id, 
                    int survey_page_id, 
                    string node, 
                    global::System.Nullable<int> facing, 
                    global::System.Nullable<double> depth_in, 
                    global::System.Nullable<double> top_width_in, 
                    global::System.Nullable<double> bottom_width_in, 
                    global::System.Nullable<int> material, 
                    string comment, 
                    int Original_ditch_id, 
                    int Original_global_id, 
                    int Original_survey_page_id, 
                    string Original_node, 
                    global::System.Nullable<int> Original_facing, 
                    global::System.Nullable<double> Original_depth_in, 
                    global::System.Nullable<double> Original_top_width_in, 
                    global::System.Nullable<double> Original_bottom_width_in, 
                    global::System.Nullable<int> Original_material, 
                    int ditch_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(global_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(survey_page_id));
            if ((node == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(node));
            }
            if ((facing.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(facing.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((depth_in.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(depth_in.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((top_width_in.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(top_width_in.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((bottom_width_in.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(bottom_width_in.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((material.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(material.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((comment == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(comment));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_ditch_id));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_global_id));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_survey_page_id));
            if ((Original_node == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_node));
            }
            if ((Original_facing.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_facing.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_depth_in.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((double)(Original_depth_in.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_top_width_in.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((double)(Original_top_width_in.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((Original_bottom_width_in.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((double)(Original_bottom_width_in.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Original_material.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(Original_material.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(ditch_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int global_id, 
                    int survey_page_id, 
                    string node, 
                    global::System.Nullable<int> facing, 
                    global::System.Nullable<double> depth_in, 
                    global::System.Nullable<double> top_width_in, 
                    global::System.Nullable<double> bottom_width_in, 
                    global::System.Nullable<int> material, 
                    string comment, 
                    int Original_ditch_id, 
                    int Original_global_id, 
                    int Original_survey_page_id, 
                    string Original_node, 
                    global::System.Nullable<int> Original_facing, 
                    global::System.Nullable<double> Original_depth_in, 
                    global::System.Nullable<double> Original_top_width_in, 
                    global::System.Nullable<double> Original_bottom_width_in, 
                    global::System.Nullable<int> Original_material) {
            return this.Update(global_id, survey_page_id, node, facing, depth_in, top_width_in, bottom_width_in, material, comment, Original_ditch_id, Original_global_id, Original_survey_page_id, Original_node, Original_facing, Original_depth_in, Original_top_width_in, Original_bottom_width_in, Original_material, Original_ditch_id);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteQuery(int Original_ditch_id) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((int)(Original_ditch_id));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SWSP_EVALUATORTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SWSP_EVALUATORTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SWSP_EVALUATOR";
            tableMapping.ColumnMappings.Add("evaluator_id", "evaluator_id");
            tableMapping.ColumnMappings.Add("initials", "initials");
            tableMapping.ColumnMappings.Add("last_name", "last_name");
            tableMapping.ColumnMappings.Add("first_name", "first_name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [GIS].[SWSP_EVALUATOR] WHERE (([evaluator_id] = @Original_evaluator_id) AND ([initials] = @Original_initials) AND ((@IsNull_last_name = 1 AND [last_name] IS NULL) OR ([last_name] = @Original_last_name)) AND ((@IsNull_first_name = 1 AND [first_name] IS NULL) OR ([first_name] = @Original_first_name)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_evaluator_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "evaluator_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_initials", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "initials", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_last_name", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "last_name", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_last_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "last_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_first_name", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "first_name", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_first_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "first_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [GIS].[SWSP_EVALUATOR] ([initials], [last_name], [first_name]) VALUES" +
                " (@initials, @last_name, @first_name);\r\nSELECT evaluator_id, initials, last_name" +
                ", first_name FROM SWSP_EVALUATOR WHERE (evaluator_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@initials", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "initials", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@last_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "last_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@first_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "first_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [GIS].[SWSP_EVALUATOR] SET [initials] = @initials, [last_name] = @last_name, [first_name] = @first_name WHERE (([evaluator_id] = @Original_evaluator_id) AND ([initials] = @Original_initials) AND ((@IsNull_last_name = 1 AND [last_name] IS NULL) OR ([last_name] = @Original_last_name)) AND ((@IsNull_first_name = 1 AND [first_name] IS NULL) OR ([first_name] = @Original_first_name)));
SELECT evaluator_id, initials, last_name, first_name FROM SWSP_EVALUATOR WHERE (evaluator_id = @evaluator_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@initials", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "initials", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@last_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "last_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@first_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "first_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_evaluator_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "evaluator_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_initials", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "initials", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_last_name", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "last_name", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_last_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "last_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_first_name", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "first_name", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_first_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "first_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@evaluator_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "evaluator_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SWI_2.Properties.Settings.Default.SANDBOXConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT evaluator_id, initials, last_name, first_name FROM GIS.SWSP_EVALUATOR";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SANDBOXDataSet.SWSP_EVALUATORDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SANDBOXDataSet.SWSP_EVALUATORDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SANDBOXDataSet.SWSP_EVALUATORDataTable dataTable = new SANDBOXDataSet.SWSP_EVALUATORDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet.SWSP_EVALUATORDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SWSP_EVALUATOR");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_evaluator_id, string Original_initials, string Original_last_name, string Original_first_name) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_evaluator_id));
            if ((Original_initials == null)) {
                throw new global::System.ArgumentNullException("Original_initials");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_initials));
            }
            if ((Original_last_name == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_last_name));
            }
            if ((Original_first_name == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_first_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string initials, string last_name, string first_name) {
            if ((initials == null)) {
                throw new global::System.ArgumentNullException("initials");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(initials));
            }
            if ((last_name == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(last_name));
            }
            if ((first_name == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(first_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string initials, string last_name, string first_name, int Original_evaluator_id, string Original_initials, string Original_last_name, string Original_first_name, int evaluator_id) {
            if ((initials == null)) {
                throw new global::System.ArgumentNullException("initials");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(initials));
            }
            if ((last_name == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(last_name));
            }
            if ((first_name == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(first_name));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_evaluator_id));
            if ((Original_initials == null)) {
                throw new global::System.ArgumentNullException("Original_initials");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_initials));
            }
            if ((Original_last_name == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_last_name));
            }
            if ((Original_first_name == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_first_name));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(evaluator_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string initials, string last_name, string first_name, int Original_evaluator_id, string Original_initials, string Original_last_name, string Original_first_name) {
            return this.Update(initials, last_name, first_name, Original_evaluator_id, Original_initials, Original_last_name, Original_first_name, Original_evaluator_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SWSP_FACING_TYPETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SWSP_FACING_TYPETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SWSP_FACING_TYPE";
            tableMapping.ColumnMappings.Add("facing_type_id", "facing_type_id");
            tableMapping.ColumnMappings.Add("facing", "facing");
            tableMapping.ColumnMappings.Add("description", "description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [GIS].[SWSP_FACING_TYPE] WHERE (([facing_type_id] = @Original_facing_" +
                "type_id) AND ([facing] = @Original_facing) AND ((@IsNull_description = 1 AND [de" +
                "scription] IS NULL) OR ([description] = @Original_description)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_facing_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facing_type_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_facing", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facing", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_description", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [GIS].[SWSP_FACING_TYPE] ([facing], [description]) VALUES (@facing, @" +
                "description);\r\nSELECT facing_type_id, facing, description FROM SWSP_FACING_TYPE " +
                "WHERE (facing_type_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@facing", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facing", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [GIS].[SWSP_FACING_TYPE] SET [facing] = @facing, [description] = @description WHERE (([facing_type_id] = @Original_facing_type_id) AND ([facing] = @Original_facing) AND ((@IsNull_description = 1 AND [description] IS NULL) OR ([description] = @Original_description)));
SELECT facing_type_id, facing, description FROM SWSP_FACING_TYPE WHERE (facing_type_id = @facing_type_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@facing", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facing", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_facing_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facing_type_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_facing", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facing", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_description", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@facing_type_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "facing_type_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SWI_2.Properties.Settings.Default.SANDBOXConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT facing_type_id, facing, description FROM GIS.SWSP_FACING_TYPE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SANDBOXDataSet.SWSP_FACING_TYPEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SANDBOXDataSet.SWSP_FACING_TYPEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SANDBOXDataSet.SWSP_FACING_TYPEDataTable dataTable = new SANDBOXDataSet.SWSP_FACING_TYPEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet.SWSP_FACING_TYPEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SWSP_FACING_TYPE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_facing_type_id, string Original_facing, string Original_description) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_facing_type_id));
            if ((Original_facing == null)) {
                throw new global::System.ArgumentNullException("Original_facing");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_facing));
            }
            if ((Original_description == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string facing, string description) {
            if ((facing == null)) {
                throw new global::System.ArgumentNullException("facing");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(facing));
            }
            if ((description == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string facing, string description, int Original_facing_type_id, string Original_facing, string Original_description, int facing_type_id) {
            if ((facing == null)) {
                throw new global::System.ArgumentNullException("facing");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(facing));
            }
            if ((description == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(description));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_facing_type_id));
            if ((Original_facing == null)) {
                throw new global::System.ArgumentNullException("Original_facing");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_facing));
            }
            if ((Original_description == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_description));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(facing_type_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string facing, string description, int Original_facing_type_id, string Original_facing, string Original_description) {
            return this.Update(facing, description, Original_facing_type_id, Original_facing, Original_description, Original_facing_type_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SWSP_GLOBAL_IDTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SWSP_GLOBAL_IDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SWSP_GLOBAL_ID";
            tableMapping.ColumnMappings.Add("global_id", "global_id");
            tableMapping.ColumnMappings.Add("description", "description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [GIS].[SWSP_GLOBAL_ID] WHERE (([global_id] = @Original_global_id) AND" +
                " ((@IsNull_description = 1 AND [description] IS NULL) OR ([description] = @Origi" +
                "nal_description)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_global_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_description", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [GIS].[SWSP_GLOBAL_ID] ([description]) VALUES (@description);\r\nSELECT" +
                " global_id, description FROM SWSP_GLOBAL_ID WHERE (global_id = SCOPE_IDENTITY())" +
                "";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [GIS].[SWSP_GLOBAL_ID] SET [description] = @description WHERE (([global_id] = @Original_global_id) AND ((@IsNull_description = 1 AND [description] IS NULL) OR ([description] = @Original_description)));
SELECT global_id, description FROM SWSP_GLOBAL_ID WHERE (global_id = @global_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_global_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_description", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@global_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SWI_2.Properties.Settings.Default.SANDBOXConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT global_id, description FROM GIS.SWSP_GLOBAL_ID";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT MAX(global_id) FROM SWSP_GLOBAL_ID";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SANDBOXDataSet.SWSP_GLOBAL_IDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SANDBOXDataSet.SWSP_GLOBAL_IDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SANDBOXDataSet.SWSP_GLOBAL_IDDataTable dataTable = new SANDBOXDataSet.SWSP_GLOBAL_IDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet.SWSP_GLOBAL_IDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SWSP_GLOBAL_ID");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_global_id, string Original_description) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_global_id));
            if ((Original_description == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string description) {
            if ((description == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string description, int Original_global_id, string Original_description, int global_id) {
            if ((description == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(description));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_global_id));
            if ((Original_description == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_description));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(global_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string description, int Original_global_id, string Original_description) {
            return this.Update(description, Original_global_id, Original_description, Original_global_id);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual global::System.Nullable<int> ScalarQuery() {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return new global::System.Nullable<int>();
            }
            else {
                return new global::System.Nullable<int>(((int)(returnValue)));
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SWSP_MATERIAL_TYPETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SWSP_MATERIAL_TYPETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SWSP_MATERIAL_TYPE";
            tableMapping.ColumnMappings.Add("material_type_id", "material_type_id");
            tableMapping.ColumnMappings.Add("material", "material");
            tableMapping.ColumnMappings.Add("description", "description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [GIS].[SWSP_MATERIAL_TYPE] WHERE (([material_type_id] = @Original_mat" +
                "erial_type_id) AND ([material] = @Original_material) AND ((@IsNull_description =" +
                " 1 AND [description] IS NULL) OR ([description] = @Original_description)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_material_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material_type_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_material", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_description", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [GIS].[SWSP_MATERIAL_TYPE] ([material], [description]) VALUES (@mater" +
                "ial, @description);\r\nSELECT material_type_id, material, description FROM SWSP_MA" +
                "TERIAL_TYPE WHERE (material_type_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@material", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [GIS].[SWSP_MATERIAL_TYPE] SET [material] = @material, [description] = @description WHERE (([material_type_id] = @Original_material_type_id) AND ([material] = @Original_material) AND ((@IsNull_description = 1 AND [description] IS NULL) OR ([description] = @Original_description)));
SELECT material_type_id, material, description FROM SWSP_MATERIAL_TYPE WHERE (material_type_id = @material_type_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@material", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_material_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material_type_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_material", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_description", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@material_type_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "material_type_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SWI_2.Properties.Settings.Default.SANDBOXConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT material_type_id, material, description FROM GIS.SWSP_MATERIAL_TYPE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SANDBOXDataSet.SWSP_MATERIAL_TYPEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SANDBOXDataSet.SWSP_MATERIAL_TYPEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SANDBOXDataSet.SWSP_MATERIAL_TYPEDataTable dataTable = new SANDBOXDataSet.SWSP_MATERIAL_TYPEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet.SWSP_MATERIAL_TYPEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SWSP_MATERIAL_TYPE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_material_type_id, string Original_material, string Original_description) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_material_type_id));
            if ((Original_material == null)) {
                throw new global::System.ArgumentNullException("Original_material");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_material));
            }
            if ((Original_description == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string material, string description) {
            if ((material == null)) {
                throw new global::System.ArgumentNullException("material");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(material));
            }
            if ((description == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string material, string description, int Original_material_type_id, string Original_material, string Original_description, int material_type_id) {
            if ((material == null)) {
                throw new global::System.ArgumentNullException("material");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(material));
            }
            if ((description == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(description));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_material_type_id));
            if ((Original_material == null)) {
                throw new global::System.ArgumentNullException("Original_material");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_material));
            }
            if ((Original_description == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_description));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(material_type_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string material, string description, int Original_material_type_id, string Original_material, string Original_description) {
            return this.Update(material, description, Original_material_type_id, Original_material, Original_description, Original_material_type_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SWSP_PHOTOTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SWSP_PHOTOTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SWSP_PHOTO";
            tableMapping.ColumnMappings.Add("photo_id", "photo_id");
            tableMapping.ColumnMappings.Add("global_id", "global_id");
            tableMapping.ColumnMappings.Add("location", "location");
            tableMapping.ColumnMappings.Add("comment", "comment");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [GIS].[SWSP_PHOTO] WHERE (([photo_id] = @Original_photo_id) AND ([glo" +
                "bal_id] = @Original_global_id) AND ((@IsNull_location = 1 AND [location] IS NULL" +
                ") OR ([location] = @Original_location)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_photo_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "photo_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_global_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_location", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [GIS].[SWSP_PHOTO] ([global_id], [location], [comment]) VALUES (@glob" +
                "al_id, @location, @comment);\r\nSELECT photo_id, global_id, location, comment FROM" +
                " SWSP_PHOTO WHERE (photo_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@global_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@comment", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [GIS].[SWSP_PHOTO] SET [global_id] = @global_id, [location] = @location, [comment] = @comment WHERE (([photo_id] = @Original_photo_id) AND ([global_id] = @Original_global_id) AND ((@IsNull_location = 1 AND [location] IS NULL) OR ([location] = @Original_location)));
SELECT photo_id, global_id, location, comment FROM SWSP_PHOTO WHERE (photo_id = @photo_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@global_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@comment", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_photo_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "photo_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_global_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_location", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@photo_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "photo_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SWI_2.Properties.Settings.Default.SANDBOXConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT photo_id, global_id, location, comment FROM GIS.SWSP_PHOTO";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT photo_id, global_id, location, comment FROM GIS.SWSP_PHOTO WHERE global_id" +
                " = @global_id";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@global_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "INSERT INTO [GIS].[SWSP_PHOTO] ([global_id], [location], [comment]) VALUES (@glob" +
                "al_id, @location, @comment);\r\nSELECT photo_id, global_id, location, comment FROM" +
                " SWSP_PHOTO WHERE (photo_id = SCOPE_IDENTITY())";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@global_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "location", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@comment", global::System.Data.SqlDbType.VarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"UPDATE [GIS].[SWSP_PHOTO] SET [global_id] = @global_id, [location] = @location, [comment] = @comment WHERE (([photo_id] = @Original_photo_id) AND ([global_id] = @Original_global_id) );
SELECT photo_id, global_id, location, comment FROM SWSP_PHOTO WHERE (photo_id = @photo_id)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@global_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "location", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@comment", global::System.Data.SqlDbType.VarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_photo_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "photo_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_global_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@photo_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "photo_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SANDBOXDataSet.SWSP_PHOTODataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SANDBOXDataSet.SWSP_PHOTODataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SANDBOXDataSet.SWSP_PHOTODataTable dataTable = new SANDBOXDataSet.SWSP_PHOTODataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByGlobalID(SANDBOXDataSet.SWSP_PHOTODataTable dataTable, int global_id) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(global_id));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual SANDBOXDataSet.SWSP_PHOTODataTable GetDataByGlobalID(int global_id) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(global_id));
            SANDBOXDataSet.SWSP_PHOTODataTable dataTable = new SANDBOXDataSet.SWSP_PHOTODataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet.SWSP_PHOTODataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SWSP_PHOTO");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_photo_id, int Original_global_id, string Original_location) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_photo_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_global_id));
            if ((Original_location == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_location));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int global_id, string location, string comment) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(global_id));
            if ((location == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(location));
            }
            if ((comment == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(comment));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int global_id, string location, string comment, int Original_photo_id, int Original_global_id, string Original_location, int photo_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(global_id));
            if ((location == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(location));
            }
            if ((comment == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(comment));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_photo_id));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_global_id));
            if ((Original_location == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_location));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(photo_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int global_id, string location, string comment, int Original_photo_id, int Original_global_id, string Original_location) {
            return this.Update(global_id, location, comment, Original_photo_id, Original_global_id, Original_location, Original_photo_id);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(int global_id, string location, string comment) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            command.Parameters[0].Value = ((int)(global_id));
            if ((location == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(location));
            }
            if ((comment == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(comment));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateQuery(int global_id, string location, string comment, int Original_photo_id, int Original_global_id, int photo_id) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            command.Parameters[0].Value = ((int)(global_id));
            if ((location == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(location));
            }
            if ((comment == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(comment));
            }
            command.Parameters[3].Value = ((int)(Original_photo_id));
            command.Parameters[4].Value = ((int)(Original_global_id));
            command.Parameters[5].Value = ((int)(photo_id));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SWSP_PIPETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SWSP_PIPETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SWSP_PIPE";
            tableMapping.ColumnMappings.Add("pipe_id", "pipe_id");
            tableMapping.ColumnMappings.Add("global_id", "global_id");
            tableMapping.ColumnMappings.Add("survey_page_id", "survey_page_id");
            tableMapping.ColumnMappings.Add("us_node", "us_node");
            tableMapping.ColumnMappings.Add("ds_node", "ds_node");
            tableMapping.ColumnMappings.Add("us_depth_in", "us_depth_in");
            tableMapping.ColumnMappings.Add("ds_depth_in", "ds_depth_in");
            tableMapping.ColumnMappings.Add("inside_diam_in", "inside_diam_in");
            tableMapping.ColumnMappings.Add("material", "material");
            tableMapping.ColumnMappings.Add("shape", "shape");
            tableMapping.ColumnMappings.Add("comment", "comment");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [GIS].[SWSP_PIPE] WHERE (([pipe_id] = @Original_pipe_id) AND ([global_id] = @Original_global_id) AND ([survey_page_id] = @Original_survey_page_id) AND ((@IsNull_us_node = 1 AND [us_node] IS NULL) OR ([us_node] = @Original_us_node)) AND ((@IsNull_ds_node = 1 AND [ds_node] IS NULL) OR ([ds_node] = @Original_ds_node)) AND ((@IsNull_us_depth_in = 1 AND [us_depth_in] IS NULL) OR ([us_depth_in] = @Original_us_depth_in)) AND ((@IsNull_ds_depth_in = 1 AND [ds_depth_in] IS NULL) OR ([ds_depth_in] = @Original_ds_depth_in)) AND ((@IsNull_inside_diam_in = 1 AND [inside_diam_in] IS NULL) OR ([inside_diam_in] = @Original_inside_diam_in)) AND ((@IsNull_material = 1 AND [material] IS NULL) OR ([material] = @Original_material)) AND ((@IsNull_shape = 1 AND [shape] IS NULL) OR ([shape] = @Original_shape)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pipe_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pipe_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_global_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_survey_page_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "survey_page_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_us_node", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "us_node", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_us_node", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "us_node", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ds_node", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ds_node", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ds_node", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ds_node", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_us_depth_in", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "us_depth_in", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_us_depth_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "us_depth_in", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ds_depth_in", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ds_depth_in", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ds_depth_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ds_depth_in", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_inside_diam_in", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inside_diam_in", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_inside_diam_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inside_diam_in", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_material", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_material", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_shape", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "shape", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_shape", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "shape", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [GIS].[SWSP_PIPE] ([global_id], [survey_page_id], [us_node], [ds_node], [us_depth_in], [ds_depth_in], [inside_diam_in], [material], [shape], [comment]) VALUES (@global_id, @survey_page_id, @us_node, @ds_node, @us_depth_in, @ds_depth_in, @inside_diam_in, @material, @shape, @comment);
SELECT pipe_id, global_id, survey_page_id, us_node, ds_node, us_depth_in, ds_depth_in, inside_diam_in, material, shape, comment FROM SWSP_PIPE WHERE (pipe_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@global_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@survey_page_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "survey_page_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@us_node", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "us_node", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ds_node", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ds_node", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@us_depth_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "us_depth_in", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ds_depth_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ds_depth_in", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inside_diam_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inside_diam_in", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@material", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@shape", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "shape", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@comment", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [GIS].[SWSP_PIPE] SET [global_id] = @global_id, [survey_page_id] = @survey_page_id, [us_node] = @us_node, [ds_node] = @ds_node, [us_depth_in] = @us_depth_in, [ds_depth_in] = @ds_depth_in, [inside_diam_in] = @inside_diam_in, [material] = @material, [shape] = @shape, [comment] = @comment WHERE (([pipe_id] = @Original_pipe_id) AND ([global_id] = @Original_global_id) AND ([survey_page_id] = @Original_survey_page_id) AND ((@IsNull_us_node = 1 AND [us_node] IS NULL) OR ([us_node] = @Original_us_node)) AND ((@IsNull_ds_node = 1 AND [ds_node] IS NULL) OR ([ds_node] = @Original_ds_node)) AND ((@IsNull_us_depth_in = 1 AND [us_depth_in] IS NULL) OR ([us_depth_in] = @Original_us_depth_in)) AND ((@IsNull_ds_depth_in = 1 AND [ds_depth_in] IS NULL) OR ([ds_depth_in] = @Original_ds_depth_in)) AND ((@IsNull_inside_diam_in = 1 AND [inside_diam_in] IS NULL) OR ([inside_diam_in] = @Original_inside_diam_in)) AND ((@IsNull_material = 1 AND [material] IS NULL) OR ([material] = @Original_material)) AND ((@IsNull_shape = 1 AND [shape] IS NULL) OR ([shape] = @Original_shape)));
SELECT pipe_id, global_id, survey_page_id, us_node, ds_node, us_depth_in, ds_depth_in, inside_diam_in, material, shape, comment FROM SWSP_PIPE WHERE (pipe_id = @pipe_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@global_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@survey_page_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "survey_page_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@us_node", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "us_node", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ds_node", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ds_node", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@us_depth_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "us_depth_in", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ds_depth_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ds_depth_in", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inside_diam_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inside_diam_in", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@material", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@shape", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "shape", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@comment", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pipe_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pipe_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_global_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "global_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_survey_page_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "survey_page_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_us_node", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "us_node", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_us_node", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "us_node", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ds_node", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ds_node", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ds_node", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ds_node", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_us_depth_in", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "us_depth_in", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_us_depth_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "us_depth_in", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ds_depth_in", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ds_depth_in", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ds_depth_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ds_depth_in", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_inside_diam_in", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inside_diam_in", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_inside_diam_in", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inside_diam_in", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_material", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_material", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "material", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_shape", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "shape", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_shape", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "shape", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pipe_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "pipe_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SWI_2.Properties.Settings.Default.SANDBOXConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT pipe_id, global_id, survey_page_id, us_node, ds_node, us_depth_in, ds_dept" +
                "h_in, inside_diam_in, material, shape, comment FROM GIS.SWSP_PIPE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM [GIS].[SWSP_PIPE] WHERE ([pipe_id] = @Original_pipe_id) ";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pipe_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "pipe_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SANDBOXDataSet.SWSP_PIPEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SANDBOXDataSet.SWSP_PIPEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SANDBOXDataSet.SWSP_PIPEDataTable dataTable = new SANDBOXDataSet.SWSP_PIPEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet.SWSP_PIPEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SWSP_PIPE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_pipe_id, int Original_global_id, int Original_survey_page_id, string Original_us_node, string Original_ds_node, global::System.Nullable<double> Original_us_depth_in, global::System.Nullable<double> Original_ds_depth_in, global::System.Nullable<double> Original_inside_diam_in, global::System.Nullable<int> Original_material, global::System.Nullable<int> Original_shape) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_pipe_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_global_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_survey_page_id));
            if ((Original_us_node == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_us_node));
            }
            if ((Original_ds_node == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_ds_node));
            }
            if ((Original_us_depth_in.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((double)(Original_us_depth_in.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_ds_depth_in.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((double)(Original_ds_depth_in.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_inside_diam_in.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((double)(Original_inside_diam_in.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_material.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_material.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_shape.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((int)(Original_shape.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int global_id, int survey_page_id, string us_node, string ds_node, global::System.Nullable<double> us_depth_in, global::System.Nullable<double> ds_depth_in, global::System.Nullable<double> inside_diam_in, global::System.Nullable<int> material, global::System.Nullable<int> shape, string comment) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(global_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(survey_page_id));
            if ((us_node == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(us_node));
            }
            if ((ds_node == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ds_node));
            }
            if ((us_depth_in.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(us_depth_in.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((ds_depth_in.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(ds_depth_in.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((inside_diam_in.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(inside_diam_in.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((material.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(material.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((shape.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(shape.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((comment == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(comment));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int global_id, 
                    int survey_page_id, 
                    string us_node, 
                    string ds_node, 
                    global::System.Nullable<double> us_depth_in, 
                    global::System.Nullable<double> ds_depth_in, 
                    global::System.Nullable<double> inside_diam_in, 
                    global::System.Nullable<int> material, 
                    global::System.Nullable<int> shape, 
                    string comment, 
                    int Original_pipe_id, 
                    int Original_global_id, 
                    int Original_survey_page_id, 
                    string Original_us_node, 
                    string Original_ds_node, 
                    global::System.Nullable<double> Original_us_depth_in, 
                    global::System.Nullable<double> Original_ds_depth_in, 
                    global::System.Nullable<double> Original_inside_diam_in, 
                    global::System.Nullable<int> Original_material, 
                    global::System.Nullable<int> Original_shape, 
                    int pipe_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(global_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(survey_page_id));
            if ((us_node == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(us_node));
            }
            if ((ds_node == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ds_node));
            }
            if ((us_depth_in.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(us_depth_in.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((ds_depth_in.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(ds_depth_in.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((inside_diam_in.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(inside_diam_in.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((material.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(material.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((shape.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(shape.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((comment == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(comment));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_pipe_id));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_global_id));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_survey_page_id));
            if ((Original_us_node == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_us_node));
            }
            if ((Original_ds_node == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_ds_node));
            }
            if ((Original_us_depth_in.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((double)(Original_us_depth_in.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_ds_depth_in.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((double)(Original_ds_depth_in.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_inside_diam_in.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((double)(Original_inside_diam_in.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_material.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(Original_material.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_shape.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(Original_shape.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(pipe_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int global_id, 
                    int survey_page_id, 
                    string us_node, 
                    string ds_node, 
                    global::System.Nullable<double> us_depth_in, 
                    global::System.Nullable<double> ds_depth_in, 
                    global::System.Nullable<double> inside_diam_in, 
                    global::System.Nullable<int> material, 
                    global::System.Nullable<int> shape, 
                    string comment, 
                    int Original_pipe_id, 
                    int Original_global_id, 
                    int Original_survey_page_id, 
                    string Original_us_node, 
                    string Original_ds_node, 
                    global::System.Nullable<double> Original_us_depth_in, 
                    global::System.Nullable<double> Original_ds_depth_in, 
                    global::System.Nullable<double> Original_inside_diam_in, 
                    global::System.Nullable<int> Original_material, 
                    global::System.Nullable<int> Original_shape) {
            return this.Update(global_id, survey_page_id, us_node, ds_node, us_depth_in, ds_depth_in, inside_diam_in, material, shape, comment, Original_pipe_id, Original_global_id, Original_survey_page_id, Original_us_node, Original_ds_node, Original_us_depth_in, Original_ds_depth_in, Original_inside_diam_in, Original_material, Original_shape, Original_pipe_id);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteQuery(int Original_pipe_id) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((int)(Original_pipe_id));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SWSP_SHAPE_TYPETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SWSP_SHAPE_TYPETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SWSP_SHAPE_TYPE";
            tableMapping.ColumnMappings.Add("shape_type_id", "shape_type_id");
            tableMapping.ColumnMappings.Add("shape", "shape");
            tableMapping.ColumnMappings.Add("description", "description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [GIS].[SWSP_SHAPE_TYPE] WHERE (([shape_type_id] = @Original_shape_typ" +
                "e_id) AND ([shape] = @Original_shape) AND ((@IsNull_description = 1 AND [descrip" +
                "tion] IS NULL) OR ([description] = @Original_description)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_shape_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "shape_type_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_shape", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "shape", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_description", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [GIS].[SWSP_SHAPE_TYPE] ([shape], [description]) VALUES (@shape, @des" +
                "cription);\r\nSELECT shape_type_id, shape, description FROM SWSP_SHAPE_TYPE WHERE " +
                "(shape_type_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@shape", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "shape", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [GIS].[SWSP_SHAPE_TYPE] SET [shape] = @shape, [description] = @description WHERE (([shape_type_id] = @Original_shape_type_id) AND ([shape] = @Original_shape) AND ((@IsNull_description = 1 AND [description] IS NULL) OR ([description] = @Original_description)));
SELECT shape_type_id, shape, description FROM SWSP_SHAPE_TYPE WHERE (shape_type_id = @shape_type_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@shape", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "shape", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_shape_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "shape_type_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_shape", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "shape", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_description", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@shape_type_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "shape_type_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SWI_2.Properties.Settings.Default.SANDBOXConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT shape_type_id, shape, description FROM GIS.SWSP_SHAPE_TYPE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SANDBOXDataSet.SWSP_SHAPE_TYPEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SANDBOXDataSet.SWSP_SHAPE_TYPEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SANDBOXDataSet.SWSP_SHAPE_TYPEDataTable dataTable = new SANDBOXDataSet.SWSP_SHAPE_TYPEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet.SWSP_SHAPE_TYPEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SWSP_SHAPE_TYPE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_shape_type_id, string Original_shape, string Original_description) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_shape_type_id));
            if ((Original_shape == null)) {
                throw new global::System.ArgumentNullException("Original_shape");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_shape));
            }
            if ((Original_description == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string shape, string description) {
            if ((shape == null)) {
                throw new global::System.ArgumentNullException("shape");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(shape));
            }
            if ((description == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string shape, string description, int Original_shape_type_id, string Original_shape, string Original_description, int shape_type_id) {
            if ((shape == null)) {
                throw new global::System.ArgumentNullException("shape");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(shape));
            }
            if ((description == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(description));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_shape_type_id));
            if ((Original_shape == null)) {
                throw new global::System.ArgumentNullException("Original_shape");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_shape));
            }
            if ((Original_description == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_description));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(shape_type_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string shape, string description, int Original_shape_type_id, string Original_shape, string Original_description) {
            return this.Update(shape, description, Original_shape_type_id, Original_shape, Original_description, Original_shape_type_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SWSP_SUBWATERSHEDTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SWSP_SUBWATERSHEDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SWSP_SUBWATERSHED";
            tableMapping.ColumnMappings.Add("subwatershed_id", "subwatershed_id");
            tableMapping.ColumnMappings.Add("watershed_id", "watershed_id");
            tableMapping.ColumnMappings.Add("subwatershed", "subwatershed");
            tableMapping.ColumnMappings.Add("description", "description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [GIS].[SWSP_SUBWATERSHED] WHERE (([subwatershed_id] = @Original_subwatershed_id) AND ([watershed_id] = @Original_watershed_id) AND ([subwatershed] = @Original_subwatershed) AND ((@IsNull_description = 1 AND [description] IS NULL) OR ([description] = @Original_description)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_subwatershed_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subwatershed_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_watershed_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "watershed_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_subwatershed", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subwatershed", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_description", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [GIS].[SWSP_SUBWATERSHED] ([watershed_id], [subwatershed], [description]) VALUES (@watershed_id, @subwatershed, @description);
SELECT subwatershed_id, watershed_id, subwatershed, description FROM SWSP_SUBWATERSHED WHERE (subwatershed_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@watershed_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "watershed_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@subwatershed", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subwatershed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [GIS].[SWSP_SUBWATERSHED] SET [watershed_id] = @watershed_id, [subwatershed] = @subwatershed, [description] = @description WHERE (([subwatershed_id] = @Original_subwatershed_id) AND ([watershed_id] = @Original_watershed_id) AND ([subwatershed] = @Original_subwatershed) AND ((@IsNull_description = 1 AND [description] IS NULL) OR ([description] = @Original_description)));
SELECT subwatershed_id, watershed_id, subwatershed, description FROM SWSP_SUBWATERSHED WHERE (subwatershed_id = @subwatershed_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@watershed_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "watershed_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@subwatershed", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subwatershed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_subwatershed_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subwatershed_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_watershed_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "watershed_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_subwatershed", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subwatershed", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_description", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@subwatershed_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "subwatershed_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SWI_2.Properties.Settings.Default.SANDBOXConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT subwatershed_id, watershed_id, subwatershed, description FROM GIS.SWSP_SUB" +
                "WATERSHED";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SANDBOXDataSet.SWSP_SUBWATERSHEDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SANDBOXDataSet.SWSP_SUBWATERSHEDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SANDBOXDataSet.SWSP_SUBWATERSHEDDataTable dataTable = new SANDBOXDataSet.SWSP_SUBWATERSHEDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet.SWSP_SUBWATERSHEDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SWSP_SUBWATERSHED");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_subwatershed_id, int Original_watershed_id, string Original_subwatershed, string Original_description) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_subwatershed_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_watershed_id));
            if ((Original_subwatershed == null)) {
                throw new global::System.ArgumentNullException("Original_subwatershed");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_subwatershed));
            }
            if ((Original_description == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int watershed_id, string subwatershed, string description) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(watershed_id));
            if ((subwatershed == null)) {
                throw new global::System.ArgumentNullException("subwatershed");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(subwatershed));
            }
            if ((description == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int watershed_id, string subwatershed, string description, int Original_subwatershed_id, int Original_watershed_id, string Original_subwatershed, string Original_description, int subwatershed_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(watershed_id));
            if ((subwatershed == null)) {
                throw new global::System.ArgumentNullException("subwatershed");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(subwatershed));
            }
            if ((description == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(description));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_subwatershed_id));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_watershed_id));
            if ((Original_subwatershed == null)) {
                throw new global::System.ArgumentNullException("Original_subwatershed");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_subwatershed));
            }
            if ((Original_description == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_description));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(subwatershed_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int watershed_id, string subwatershed, string description, int Original_subwatershed_id, int Original_watershed_id, string Original_subwatershed, string Original_description) {
            return this.Update(watershed_id, subwatershed, description, Original_subwatershed_id, Original_watershed_id, Original_subwatershed, Original_description, Original_subwatershed_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SWSP_SURVEY_PAGETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SWSP_SURVEY_PAGETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SWSP_SURVEY_PAGE";
            tableMapping.ColumnMappings.Add("survey_page_id", "survey_page_id");
            tableMapping.ColumnMappings.Add("view_id", "view_id");
            tableMapping.ColumnMappings.Add("page_number", "page_number");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [GIS].[SWSP_SURVEY_PAGE] WHERE (([survey_page_id] = @Original_survey_page_id) AND ((@IsNull_view_id = 1 AND [view_id] IS NULL) OR ([view_id] = @Original_view_id)) AND ((@IsNull_page_number = 1 AND [page_number] IS NULL) OR ([page_number] = @Original_page_number)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_survey_page_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "survey_page_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_view_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "view_id", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_view_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "view_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_page_number", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "page_number", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_page_number", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "page_number", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [GIS].[SWSP_SURVEY_PAGE] ([view_id], [page_number]) VALUES (@view_id," +
                " @page_number);\r\nSELECT survey_page_id, view_id, page_number FROM SWSP_SURVEY_PA" +
                "GE WHERE (survey_page_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@view_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "view_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@page_number", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "page_number", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [GIS].[SWSP_SURVEY_PAGE] SET [view_id] = @view_id, [page_number] = @page_number WHERE (([survey_page_id] = @Original_survey_page_id) AND ((@IsNull_view_id = 1 AND [view_id] IS NULL) OR ([view_id] = @Original_view_id)) AND ((@IsNull_page_number = 1 AND [page_number] IS NULL) OR ([page_number] = @Original_page_number)));
SELECT survey_page_id, view_id, page_number FROM SWSP_SURVEY_PAGE WHERE (survey_page_id = @survey_page_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@view_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "view_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@page_number", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "page_number", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_survey_page_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "survey_page_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_view_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "view_id", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_view_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "view_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_page_number", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "page_number", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_page_number", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "page_number", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@survey_page_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "survey_page_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SWI_2.Properties.Settings.Default.SANDBOXConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT survey_page_id, view_id, page_number FROM GIS.SWSP_SURVEY_PAGE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SANDBOXDataSet.SWSP_SURVEY_PAGEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SANDBOXDataSet.SWSP_SURVEY_PAGEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SANDBOXDataSet.SWSP_SURVEY_PAGEDataTable dataTable = new SANDBOXDataSet.SWSP_SURVEY_PAGEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet.SWSP_SURVEY_PAGEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SWSP_SURVEY_PAGE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_survey_page_id, global::System.Nullable<int> Original_view_id, global::System.Nullable<int> Original_page_number) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_survey_page_id));
            if ((Original_view_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_view_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_page_number.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_page_number.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<int> view_id, global::System.Nullable<int> page_number) {
            if ((view_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(view_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((page_number.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(page_number.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> view_id, global::System.Nullable<int> page_number, int Original_survey_page_id, global::System.Nullable<int> Original_view_id, global::System.Nullable<int> Original_page_number, int survey_page_id) {
            if ((view_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(view_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((page_number.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(page_number.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_survey_page_id));
            if ((Original_view_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_view_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_page_number.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_page_number.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(survey_page_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> view_id, global::System.Nullable<int> page_number, int Original_survey_page_id, global::System.Nullable<int> Original_view_id, global::System.Nullable<int> Original_page_number) {
            return this.Update(view_id, page_number, Original_survey_page_id, Original_view_id, Original_page_number, Original_survey_page_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SWSP_SURVEY_PAGE_EVALUATORTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SWSP_SURVEY_PAGE_EVALUATORTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SWSP_SURVEY_PAGE_EVALUATOR";
            tableMapping.ColumnMappings.Add("survey_page_id", "survey_page_id");
            tableMapping.ColumnMappings.Add("evaluator_id", "evaluator_id");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [GIS].[SWSP_SURVEY_PAGE_EVALUATOR] WHERE (([survey_page_id] = @Origin" +
                "al_survey_page_id) AND ([evaluator_id] = @Original_evaluator_id))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_survey_page_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "survey_page_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_evaluator_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "evaluator_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [GIS].[SWSP_SURVEY_PAGE_EVALUATOR] ([survey_page_id], [evaluator_id]) VALUES (@survey_page_id, @evaluator_id);
SELECT survey_page_id, evaluator_id FROM SWSP_SURVEY_PAGE_EVALUATOR WHERE (evaluator_id = @evaluator_id) AND (survey_page_id = @survey_page_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@survey_page_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "survey_page_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@evaluator_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "evaluator_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [GIS].[SWSP_SURVEY_PAGE_EVALUATOR] SET [survey_page_id] = @survey_page_id, [evaluator_id] = @evaluator_id WHERE (([survey_page_id] = @Original_survey_page_id) AND ([evaluator_id] = @Original_evaluator_id));
SELECT survey_page_id, evaluator_id FROM SWSP_SURVEY_PAGE_EVALUATOR WHERE (evaluator_id = @evaluator_id) AND (survey_page_id = @survey_page_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@survey_page_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "survey_page_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@evaluator_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "evaluator_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_survey_page_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "survey_page_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_evaluator_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "evaluator_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SWI_2.Properties.Settings.Default.SANDBOXConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT survey_page_id, evaluator_id FROM GIS.SWSP_SURVEY_PAGE_EVALUATOR";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM [GIS].[SWSP_SURVEY_PAGE_EVALUATOR] WHERE (([survey_page_id] = @Origin" +
                "al_survey_page_id) )";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_survey_page_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "survey_page_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT COUNT(*) FROM SWSP_SURVEY_PAGE_EVALUATOR WHERE survey_page_id = @survey_pa" +
                "ge_id AND evaluator_id = @evaluator_id";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@survey_page_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "survey_page_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@evaluator_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "evaluator_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "INSERT INTO [GIS].[SWSP_SURVEY_PAGE_EVALUATOR] ([survey_page_id], [evaluator_id])" +
                " VALUES (@survey_page_id, @evaluator_id)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@survey_page_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "survey_page_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@evaluator_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "evaluator_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SANDBOXDataSet.SWSP_SURVEY_PAGE_EVALUATORDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SANDBOXDataSet.SWSP_SURVEY_PAGE_EVALUATORDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SANDBOXDataSet.SWSP_SURVEY_PAGE_EVALUATORDataTable dataTable = new SANDBOXDataSet.SWSP_SURVEY_PAGE_EVALUATORDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet.SWSP_SURVEY_PAGE_EVALUATORDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SWSP_SURVEY_PAGE_EVALUATOR");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_survey_page_id, int Original_evaluator_id) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_survey_page_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_evaluator_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int survey_page_id, int evaluator_id) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(survey_page_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(evaluator_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int survey_page_id, int evaluator_id, int Original_survey_page_id, int Original_evaluator_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(survey_page_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(evaluator_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_survey_page_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_evaluator_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Original_survey_page_id, int Original_evaluator_id) {
            return this.Update(Original_survey_page_id, Original_evaluator_id, Original_survey_page_id, Original_evaluator_id);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteQuery(int Original_survey_page_id) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((int)(Original_survey_page_id));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual global::System.Nullable<int> IdentifyValidEvaluators(int survey_page_id, int evaluator_id) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            command.Parameters[0].Value = ((int)(survey_page_id));
            command.Parameters[1].Value = ((int)(evaluator_id));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return new global::System.Nullable<int>();
            }
            else {
                return new global::System.Nullable<int>(((int)(returnValue)));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(int survey_page_id, int evaluator_id) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            command.Parameters[0].Value = ((int)(survey_page_id));
            command.Parameters[1].Value = ((int)(evaluator_id));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SWSP_VIEWTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SWSP_VIEWTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SWSP_VIEW";
            tableMapping.ColumnMappings.Add("view_id", "view_id");
            tableMapping.ColumnMappings.Add("subwatershed_id", "subwatershed_id");
            tableMapping.ColumnMappings.Add("view_number", "view_number");
            tableMapping.ColumnMappings.Add("description", "description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [GIS].[SWSP_VIEW] WHERE (([view_id] = @Original_view_id) AND ([subwatershed_id] = @Original_subwatershed_id) AND ([view_number] = @Original_view_number) AND ((@IsNull_description = 1 AND [description] IS NULL) OR ([description] = @Original_description)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_view_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "view_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_subwatershed_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subwatershed_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_view_number", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "view_number", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_description", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [GIS].[SWSP_VIEW] ([subwatershed_id], [view_number], [description]) V" +
                "ALUES (@subwatershed_id, @view_number, @description);\r\nSELECT view_id, subwaters" +
                "hed_id, view_number, description FROM SWSP_VIEW WHERE (view_id = SCOPE_IDENTITY(" +
                "))";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@subwatershed_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subwatershed_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@view_number", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "view_number", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [GIS].[SWSP_VIEW] SET [subwatershed_id] = @subwatershed_id, [view_number] = @view_number, [description] = @description WHERE (([view_id] = @Original_view_id) AND ([subwatershed_id] = @Original_subwatershed_id) AND ([view_number] = @Original_view_number) AND ((@IsNull_description = 1 AND [description] IS NULL) OR ([description] = @Original_description)));
SELECT view_id, subwatershed_id, view_number, description FROM SWSP_VIEW WHERE (view_id = @view_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@subwatershed_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subwatershed_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@view_number", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "view_number", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_view_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "view_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_subwatershed_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subwatershed_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_view_number", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "view_number", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_description", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@view_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "view_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SWI_2.Properties.Settings.Default.SANDBOXConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT view_id, subwatershed_id, view_number, description FROM GIS.SWSP_VIEW";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SANDBOXDataSet.SWSP_VIEWDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SANDBOXDataSet.SWSP_VIEWDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SANDBOXDataSet.SWSP_VIEWDataTable dataTable = new SANDBOXDataSet.SWSP_VIEWDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet.SWSP_VIEWDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SWSP_VIEW");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_view_id, int Original_subwatershed_id, int Original_view_number, string Original_description) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_view_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_subwatershed_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_view_number));
            if ((Original_description == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int subwatershed_id, int view_number, string description) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(subwatershed_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(view_number));
            if ((description == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int subwatershed_id, int view_number, string description, int Original_view_id, int Original_subwatershed_id, int Original_view_number, string Original_description, int view_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(subwatershed_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(view_number));
            if ((description == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(description));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_view_id));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_subwatershed_id));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_view_number));
            if ((Original_description == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_description));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(view_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int subwatershed_id, int view_number, string description, int Original_view_id, int Original_subwatershed_id, int Original_view_number, string Original_description) {
            return this.Update(subwatershed_id, view_number, description, Original_view_id, Original_subwatershed_id, Original_view_number, Original_description, Original_view_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SWSP_WATERSHEDTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SWSP_WATERSHEDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SWSP_WATERSHED";
            tableMapping.ColumnMappings.Add("watershed_id", "watershed_id");
            tableMapping.ColumnMappings.Add("watershed", "watershed");
            tableMapping.ColumnMappings.Add("description", "description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [GIS].[SWSP_WATERSHED] WHERE (([watershed_id] = @Original_watershed_i" +
                "d) AND ([watershed] = @Original_watershed) AND ((@IsNull_description = 1 AND [de" +
                "scription] IS NULL) OR ([description] = @Original_description)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_watershed_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "watershed_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_watershed", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "watershed", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_description", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [GIS].[SWSP_WATERSHED] ([watershed], [description]) VALUES (@watershe" +
                "d, @description);\r\nSELECT watershed_id, watershed, description FROM SWSP_WATERSH" +
                "ED WHERE (watershed_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@watershed", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "watershed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [GIS].[SWSP_WATERSHED] SET [watershed] = @watershed, [description] = @description WHERE (([watershed_id] = @Original_watershed_id) AND ([watershed] = @Original_watershed) AND ((@IsNull_description = 1 AND [description] IS NULL) OR ([description] = @Original_description)));
SELECT watershed_id, watershed, description FROM SWSP_WATERSHED WHERE (watershed_id = @watershed_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@watershed", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "watershed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_watershed_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "watershed_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_watershed", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "watershed", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_description", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@watershed_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "watershed_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SWI_2.Properties.Settings.Default.SANDBOXConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT watershed_id, watershed, description FROM GIS.SWSP_WATERSHED";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SANDBOXDataSet.SWSP_WATERSHEDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SANDBOXDataSet.SWSP_WATERSHEDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SANDBOXDataSet.SWSP_WATERSHEDDataTable dataTable = new SANDBOXDataSet.SWSP_WATERSHEDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet.SWSP_WATERSHEDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SANDBOXDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SWSP_WATERSHED");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_watershed_id, string Original_watershed, string Original_description) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_watershed_id));
            if ((Original_watershed == null)) {
                throw new global::System.ArgumentNullException("Original_watershed");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_watershed));
            }
            if ((Original_description == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string watershed, string description) {
            if ((watershed == null)) {
                throw new global::System.ArgumentNullException("watershed");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(watershed));
            }
            if ((description == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string watershed, string description, int Original_watershed_id, string Original_watershed, string Original_description, int watershed_id) {
            if ((watershed == null)) {
                throw new global::System.ArgumentNullException("watershed");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(watershed));
            }
            if ((description == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(description));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_watershed_id));
            if ((Original_watershed == null)) {
                throw new global::System.ArgumentNullException("Original_watershed");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_watershed));
            }
            if ((Original_description == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_description));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(watershed_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string watershed, string description, int Original_watershed_id, string Original_watershed, string Original_description) {
            return this.Update(watershed, description, Original_watershed_id, Original_watershed, Original_description, Original_watershed_id);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private SWSP_CULVERTTableAdapter _sWSP_CULVERTTableAdapter;
        
        private SWSP_CULVERT_OPENING_TYPETableAdapter _sWSP_CULVERT_OPENING_TYPETableAdapter;
        
        private SWSP_DITCHTableAdapter _sWSP_DITCHTableAdapter;
        
        private SWSP_EVALUATORTableAdapter _sWSP_EVALUATORTableAdapter;
        
        private SWSP_FACING_TYPETableAdapter _sWSP_FACING_TYPETableAdapter;
        
        private SWSP_GLOBAL_IDTableAdapter _sWSP_GLOBAL_IDTableAdapter;
        
        private SWSP_MATERIAL_TYPETableAdapter _sWSP_MATERIAL_TYPETableAdapter;
        
        private SWSP_PHOTOTableAdapter _sWSP_PHOTOTableAdapter;
        
        private SWSP_PIPETableAdapter _sWSP_PIPETableAdapter;
        
        private SWSP_SHAPE_TYPETableAdapter _sWSP_SHAPE_TYPETableAdapter;
        
        private SWSP_SUBWATERSHEDTableAdapter _sWSP_SUBWATERSHEDTableAdapter;
        
        private SWSP_SURVEY_PAGETableAdapter _sWSP_SURVEY_PAGETableAdapter;
        
        private SWSP_SURVEY_PAGE_EVALUATORTableAdapter _sWSP_SURVEY_PAGE_EVALUATORTableAdapter;
        
        private SWSP_VIEWTableAdapter _sWSP_VIEWTableAdapter;
        
        private SWSP_WATERSHEDTableAdapter _sWSP_WATERSHEDTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SWSP_CULVERTTableAdapter SWSP_CULVERTTableAdapter {
            get {
                return this._sWSP_CULVERTTableAdapter;
            }
            set {
                this._sWSP_CULVERTTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SWSP_CULVERT_OPENING_TYPETableAdapter SWSP_CULVERT_OPENING_TYPETableAdapter {
            get {
                return this._sWSP_CULVERT_OPENING_TYPETableAdapter;
            }
            set {
                this._sWSP_CULVERT_OPENING_TYPETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SWSP_DITCHTableAdapter SWSP_DITCHTableAdapter {
            get {
                return this._sWSP_DITCHTableAdapter;
            }
            set {
                this._sWSP_DITCHTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SWSP_EVALUATORTableAdapter SWSP_EVALUATORTableAdapter {
            get {
                return this._sWSP_EVALUATORTableAdapter;
            }
            set {
                this._sWSP_EVALUATORTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SWSP_FACING_TYPETableAdapter SWSP_FACING_TYPETableAdapter {
            get {
                return this._sWSP_FACING_TYPETableAdapter;
            }
            set {
                this._sWSP_FACING_TYPETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SWSP_GLOBAL_IDTableAdapter SWSP_GLOBAL_IDTableAdapter {
            get {
                return this._sWSP_GLOBAL_IDTableAdapter;
            }
            set {
                this._sWSP_GLOBAL_IDTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SWSP_MATERIAL_TYPETableAdapter SWSP_MATERIAL_TYPETableAdapter {
            get {
                return this._sWSP_MATERIAL_TYPETableAdapter;
            }
            set {
                this._sWSP_MATERIAL_TYPETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SWSP_PHOTOTableAdapter SWSP_PHOTOTableAdapter {
            get {
                return this._sWSP_PHOTOTableAdapter;
            }
            set {
                this._sWSP_PHOTOTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SWSP_PIPETableAdapter SWSP_PIPETableAdapter {
            get {
                return this._sWSP_PIPETableAdapter;
            }
            set {
                this._sWSP_PIPETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SWSP_SHAPE_TYPETableAdapter SWSP_SHAPE_TYPETableAdapter {
            get {
                return this._sWSP_SHAPE_TYPETableAdapter;
            }
            set {
                this._sWSP_SHAPE_TYPETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SWSP_SUBWATERSHEDTableAdapter SWSP_SUBWATERSHEDTableAdapter {
            get {
                return this._sWSP_SUBWATERSHEDTableAdapter;
            }
            set {
                this._sWSP_SUBWATERSHEDTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SWSP_SURVEY_PAGETableAdapter SWSP_SURVEY_PAGETableAdapter {
            get {
                return this._sWSP_SURVEY_PAGETableAdapter;
            }
            set {
                this._sWSP_SURVEY_PAGETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SWSP_SURVEY_PAGE_EVALUATORTableAdapter SWSP_SURVEY_PAGE_EVALUATORTableAdapter {
            get {
                return this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter;
            }
            set {
                this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SWSP_VIEWTableAdapter SWSP_VIEWTableAdapter {
            get {
                return this._sWSP_VIEWTableAdapter;
            }
            set {
                this._sWSP_VIEWTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SWSP_WATERSHEDTableAdapter SWSP_WATERSHEDTableAdapter {
            get {
                return this._sWSP_WATERSHEDTableAdapter;
            }
            set {
                this._sWSP_WATERSHEDTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._sWSP_CULVERTTableAdapter != null) 
                            && (this._sWSP_CULVERTTableAdapter.Connection != null))) {
                    return this._sWSP_CULVERTTableAdapter.Connection;
                }
                if (((this._sWSP_CULVERT_OPENING_TYPETableAdapter != null) 
                            && (this._sWSP_CULVERT_OPENING_TYPETableAdapter.Connection != null))) {
                    return this._sWSP_CULVERT_OPENING_TYPETableAdapter.Connection;
                }
                if (((this._sWSP_DITCHTableAdapter != null) 
                            && (this._sWSP_DITCHTableAdapter.Connection != null))) {
                    return this._sWSP_DITCHTableAdapter.Connection;
                }
                if (((this._sWSP_EVALUATORTableAdapter != null) 
                            && (this._sWSP_EVALUATORTableAdapter.Connection != null))) {
                    return this._sWSP_EVALUATORTableAdapter.Connection;
                }
                if (((this._sWSP_FACING_TYPETableAdapter != null) 
                            && (this._sWSP_FACING_TYPETableAdapter.Connection != null))) {
                    return this._sWSP_FACING_TYPETableAdapter.Connection;
                }
                if (((this._sWSP_GLOBAL_IDTableAdapter != null) 
                            && (this._sWSP_GLOBAL_IDTableAdapter.Connection != null))) {
                    return this._sWSP_GLOBAL_IDTableAdapter.Connection;
                }
                if (((this._sWSP_MATERIAL_TYPETableAdapter != null) 
                            && (this._sWSP_MATERIAL_TYPETableAdapter.Connection != null))) {
                    return this._sWSP_MATERIAL_TYPETableAdapter.Connection;
                }
                if (((this._sWSP_PHOTOTableAdapter != null) 
                            && (this._sWSP_PHOTOTableAdapter.Connection != null))) {
                    return this._sWSP_PHOTOTableAdapter.Connection;
                }
                if (((this._sWSP_PIPETableAdapter != null) 
                            && (this._sWSP_PIPETableAdapter.Connection != null))) {
                    return this._sWSP_PIPETableAdapter.Connection;
                }
                if (((this._sWSP_SHAPE_TYPETableAdapter != null) 
                            && (this._sWSP_SHAPE_TYPETableAdapter.Connection != null))) {
                    return this._sWSP_SHAPE_TYPETableAdapter.Connection;
                }
                if (((this._sWSP_SUBWATERSHEDTableAdapter != null) 
                            && (this._sWSP_SUBWATERSHEDTableAdapter.Connection != null))) {
                    return this._sWSP_SUBWATERSHEDTableAdapter.Connection;
                }
                if (((this._sWSP_SURVEY_PAGETableAdapter != null) 
                            && (this._sWSP_SURVEY_PAGETableAdapter.Connection != null))) {
                    return this._sWSP_SURVEY_PAGETableAdapter.Connection;
                }
                if (((this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter != null) 
                            && (this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter.Connection != null))) {
                    return this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter.Connection;
                }
                if (((this._sWSP_VIEWTableAdapter != null) 
                            && (this._sWSP_VIEWTableAdapter.Connection != null))) {
                    return this._sWSP_VIEWTableAdapter.Connection;
                }
                if (((this._sWSP_WATERSHEDTableAdapter != null) 
                            && (this._sWSP_WATERSHEDTableAdapter.Connection != null))) {
                    return this._sWSP_WATERSHEDTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._sWSP_CULVERTTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sWSP_CULVERT_OPENING_TYPETableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sWSP_DITCHTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sWSP_EVALUATORTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sWSP_FACING_TYPETableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sWSP_GLOBAL_IDTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sWSP_MATERIAL_TYPETableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sWSP_PHOTOTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sWSP_PIPETableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sWSP_SHAPE_TYPETableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sWSP_SUBWATERSHEDTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sWSP_SURVEY_PAGETableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sWSP_VIEWTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sWSP_WATERSHEDTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(SANDBOXDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._sWSP_WATERSHEDTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SWSP_WATERSHED.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sWSP_WATERSHEDTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sWSP_SUBWATERSHEDTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SWSP_SUBWATERSHED.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sWSP_SUBWATERSHEDTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sWSP_VIEWTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SWSP_VIEW.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sWSP_VIEWTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sWSP_MATERIAL_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SWSP_MATERIAL_TYPE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sWSP_MATERIAL_TYPETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sWSP_SHAPE_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SWSP_SHAPE_TYPE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sWSP_SHAPE_TYPETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sWSP_GLOBAL_IDTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SWSP_GLOBAL_ID.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sWSP_GLOBAL_IDTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sWSP_CULVERT_OPENING_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SWSP_CULVERT_OPENING_TYPE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sWSP_CULVERT_OPENING_TYPETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sWSP_SURVEY_PAGETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SWSP_SURVEY_PAGE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sWSP_SURVEY_PAGETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sWSP_FACING_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SWSP_FACING_TYPE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sWSP_FACING_TYPETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sWSP_EVALUATORTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SWSP_EVALUATOR.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sWSP_EVALUATORTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sWSP_DITCHTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SWSP_DITCH.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sWSP_DITCHTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sWSP_PIPETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SWSP_PIPE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sWSP_PIPETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sWSP_CULVERTTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SWSP_CULVERT.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sWSP_CULVERTTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sWSP_PHOTOTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SWSP_PHOTO.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sWSP_PHOTOTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SWSP_SURVEY_PAGE_EVALUATOR.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(SANDBOXDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._sWSP_WATERSHEDTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SWSP_WATERSHED.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sWSP_WATERSHEDTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sWSP_SUBWATERSHEDTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SWSP_SUBWATERSHED.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sWSP_SUBWATERSHEDTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sWSP_VIEWTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SWSP_VIEW.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sWSP_VIEWTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sWSP_MATERIAL_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SWSP_MATERIAL_TYPE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sWSP_MATERIAL_TYPETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sWSP_SHAPE_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SWSP_SHAPE_TYPE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sWSP_SHAPE_TYPETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sWSP_GLOBAL_IDTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SWSP_GLOBAL_ID.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sWSP_GLOBAL_IDTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sWSP_CULVERT_OPENING_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SWSP_CULVERT_OPENING_TYPE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sWSP_CULVERT_OPENING_TYPETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sWSP_SURVEY_PAGETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SWSP_SURVEY_PAGE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sWSP_SURVEY_PAGETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sWSP_FACING_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SWSP_FACING_TYPE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sWSP_FACING_TYPETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sWSP_EVALUATORTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SWSP_EVALUATOR.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sWSP_EVALUATORTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sWSP_DITCHTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SWSP_DITCH.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sWSP_DITCHTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sWSP_PIPETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SWSP_PIPE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sWSP_PIPETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sWSP_CULVERTTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SWSP_CULVERT.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sWSP_CULVERTTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sWSP_PHOTOTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SWSP_PHOTO.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sWSP_PHOTOTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SWSP_SURVEY_PAGE_EVALUATOR.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(SANDBOXDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SWSP_SURVEY_PAGE_EVALUATOR.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sWSP_PHOTOTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SWSP_PHOTO.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sWSP_PHOTOTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sWSP_CULVERTTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SWSP_CULVERT.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sWSP_CULVERTTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sWSP_PIPETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SWSP_PIPE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sWSP_PIPETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sWSP_DITCHTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SWSP_DITCH.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sWSP_DITCHTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sWSP_EVALUATORTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SWSP_EVALUATOR.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sWSP_EVALUATORTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sWSP_FACING_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SWSP_FACING_TYPE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sWSP_FACING_TYPETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sWSP_SURVEY_PAGETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SWSP_SURVEY_PAGE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sWSP_SURVEY_PAGETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sWSP_CULVERT_OPENING_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SWSP_CULVERT_OPENING_TYPE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sWSP_CULVERT_OPENING_TYPETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sWSP_GLOBAL_IDTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SWSP_GLOBAL_ID.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sWSP_GLOBAL_IDTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sWSP_SHAPE_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SWSP_SHAPE_TYPE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sWSP_SHAPE_TYPETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sWSP_MATERIAL_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SWSP_MATERIAL_TYPE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sWSP_MATERIAL_TYPETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sWSP_VIEWTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SWSP_VIEW.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sWSP_VIEWTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sWSP_SUBWATERSHEDTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SWSP_SUBWATERSHED.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sWSP_SUBWATERSHEDTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sWSP_WATERSHEDTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SWSP_WATERSHED.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sWSP_WATERSHEDTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(SANDBOXDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._sWSP_CULVERTTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sWSP_CULVERTTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sWSP_CULVERT_OPENING_TYPETableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sWSP_CULVERT_OPENING_TYPETableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sWSP_DITCHTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sWSP_DITCHTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sWSP_EVALUATORTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sWSP_EVALUATORTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sWSP_FACING_TYPETableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sWSP_FACING_TYPETableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sWSP_GLOBAL_IDTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sWSP_GLOBAL_IDTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sWSP_MATERIAL_TYPETableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sWSP_MATERIAL_TYPETableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sWSP_PHOTOTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sWSP_PHOTOTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sWSP_PIPETableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sWSP_PIPETableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sWSP_SHAPE_TYPETableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sWSP_SHAPE_TYPETableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sWSP_SUBWATERSHEDTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sWSP_SUBWATERSHEDTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sWSP_SURVEY_PAGETableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sWSP_SURVEY_PAGETableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sWSP_VIEWTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sWSP_VIEWTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sWSP_WATERSHEDTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sWSP_WATERSHEDTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._sWSP_CULVERTTableAdapter != null)) {
                    revertConnections.Add(this._sWSP_CULVERTTableAdapter, this._sWSP_CULVERTTableAdapter.Connection);
                    this._sWSP_CULVERTTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sWSP_CULVERTTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sWSP_CULVERTTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sWSP_CULVERTTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sWSP_CULVERTTableAdapter.Adapter);
                    }
                }
                if ((this._sWSP_CULVERT_OPENING_TYPETableAdapter != null)) {
                    revertConnections.Add(this._sWSP_CULVERT_OPENING_TYPETableAdapter, this._sWSP_CULVERT_OPENING_TYPETableAdapter.Connection);
                    this._sWSP_CULVERT_OPENING_TYPETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sWSP_CULVERT_OPENING_TYPETableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sWSP_CULVERT_OPENING_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sWSP_CULVERT_OPENING_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sWSP_CULVERT_OPENING_TYPETableAdapter.Adapter);
                    }
                }
                if ((this._sWSP_DITCHTableAdapter != null)) {
                    revertConnections.Add(this._sWSP_DITCHTableAdapter, this._sWSP_DITCHTableAdapter.Connection);
                    this._sWSP_DITCHTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sWSP_DITCHTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sWSP_DITCHTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sWSP_DITCHTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sWSP_DITCHTableAdapter.Adapter);
                    }
                }
                if ((this._sWSP_EVALUATORTableAdapter != null)) {
                    revertConnections.Add(this._sWSP_EVALUATORTableAdapter, this._sWSP_EVALUATORTableAdapter.Connection);
                    this._sWSP_EVALUATORTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sWSP_EVALUATORTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sWSP_EVALUATORTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sWSP_EVALUATORTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sWSP_EVALUATORTableAdapter.Adapter);
                    }
                }
                if ((this._sWSP_FACING_TYPETableAdapter != null)) {
                    revertConnections.Add(this._sWSP_FACING_TYPETableAdapter, this._sWSP_FACING_TYPETableAdapter.Connection);
                    this._sWSP_FACING_TYPETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sWSP_FACING_TYPETableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sWSP_FACING_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sWSP_FACING_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sWSP_FACING_TYPETableAdapter.Adapter);
                    }
                }
                if ((this._sWSP_GLOBAL_IDTableAdapter != null)) {
                    revertConnections.Add(this._sWSP_GLOBAL_IDTableAdapter, this._sWSP_GLOBAL_IDTableAdapter.Connection);
                    this._sWSP_GLOBAL_IDTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sWSP_GLOBAL_IDTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sWSP_GLOBAL_IDTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sWSP_GLOBAL_IDTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sWSP_GLOBAL_IDTableAdapter.Adapter);
                    }
                }
                if ((this._sWSP_MATERIAL_TYPETableAdapter != null)) {
                    revertConnections.Add(this._sWSP_MATERIAL_TYPETableAdapter, this._sWSP_MATERIAL_TYPETableAdapter.Connection);
                    this._sWSP_MATERIAL_TYPETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sWSP_MATERIAL_TYPETableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sWSP_MATERIAL_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sWSP_MATERIAL_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sWSP_MATERIAL_TYPETableAdapter.Adapter);
                    }
                }
                if ((this._sWSP_PHOTOTableAdapter != null)) {
                    revertConnections.Add(this._sWSP_PHOTOTableAdapter, this._sWSP_PHOTOTableAdapter.Connection);
                    this._sWSP_PHOTOTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sWSP_PHOTOTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sWSP_PHOTOTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sWSP_PHOTOTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sWSP_PHOTOTableAdapter.Adapter);
                    }
                }
                if ((this._sWSP_PIPETableAdapter != null)) {
                    revertConnections.Add(this._sWSP_PIPETableAdapter, this._sWSP_PIPETableAdapter.Connection);
                    this._sWSP_PIPETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sWSP_PIPETableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sWSP_PIPETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sWSP_PIPETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sWSP_PIPETableAdapter.Adapter);
                    }
                }
                if ((this._sWSP_SHAPE_TYPETableAdapter != null)) {
                    revertConnections.Add(this._sWSP_SHAPE_TYPETableAdapter, this._sWSP_SHAPE_TYPETableAdapter.Connection);
                    this._sWSP_SHAPE_TYPETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sWSP_SHAPE_TYPETableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sWSP_SHAPE_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sWSP_SHAPE_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sWSP_SHAPE_TYPETableAdapter.Adapter);
                    }
                }
                if ((this._sWSP_SUBWATERSHEDTableAdapter != null)) {
                    revertConnections.Add(this._sWSP_SUBWATERSHEDTableAdapter, this._sWSP_SUBWATERSHEDTableAdapter.Connection);
                    this._sWSP_SUBWATERSHEDTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sWSP_SUBWATERSHEDTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sWSP_SUBWATERSHEDTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sWSP_SUBWATERSHEDTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sWSP_SUBWATERSHEDTableAdapter.Adapter);
                    }
                }
                if ((this._sWSP_SURVEY_PAGETableAdapter != null)) {
                    revertConnections.Add(this._sWSP_SURVEY_PAGETableAdapter, this._sWSP_SURVEY_PAGETableAdapter.Connection);
                    this._sWSP_SURVEY_PAGETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sWSP_SURVEY_PAGETableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sWSP_SURVEY_PAGETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sWSP_SURVEY_PAGETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sWSP_SURVEY_PAGETableAdapter.Adapter);
                    }
                }
                if ((this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter != null)) {
                    revertConnections.Add(this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter, this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter.Connection);
                    this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter.Adapter);
                    }
                }
                if ((this._sWSP_VIEWTableAdapter != null)) {
                    revertConnections.Add(this._sWSP_VIEWTableAdapter, this._sWSP_VIEWTableAdapter.Connection);
                    this._sWSP_VIEWTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sWSP_VIEWTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sWSP_VIEWTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sWSP_VIEWTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sWSP_VIEWTableAdapter.Adapter);
                    }
                }
                if ((this._sWSP_WATERSHEDTableAdapter != null)) {
                    revertConnections.Add(this._sWSP_WATERSHEDTableAdapter, this._sWSP_WATERSHEDTableAdapter.Connection);
                    this._sWSP_WATERSHEDTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sWSP_WATERSHEDTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sWSP_WATERSHEDTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sWSP_WATERSHEDTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sWSP_WATERSHEDTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._sWSP_CULVERTTableAdapter != null)) {
                    this._sWSP_CULVERTTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sWSP_CULVERTTableAdapter]));
                    this._sWSP_CULVERTTableAdapter.Transaction = null;
                }
                if ((this._sWSP_CULVERT_OPENING_TYPETableAdapter != null)) {
                    this._sWSP_CULVERT_OPENING_TYPETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sWSP_CULVERT_OPENING_TYPETableAdapter]));
                    this._sWSP_CULVERT_OPENING_TYPETableAdapter.Transaction = null;
                }
                if ((this._sWSP_DITCHTableAdapter != null)) {
                    this._sWSP_DITCHTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sWSP_DITCHTableAdapter]));
                    this._sWSP_DITCHTableAdapter.Transaction = null;
                }
                if ((this._sWSP_EVALUATORTableAdapter != null)) {
                    this._sWSP_EVALUATORTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sWSP_EVALUATORTableAdapter]));
                    this._sWSP_EVALUATORTableAdapter.Transaction = null;
                }
                if ((this._sWSP_FACING_TYPETableAdapter != null)) {
                    this._sWSP_FACING_TYPETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sWSP_FACING_TYPETableAdapter]));
                    this._sWSP_FACING_TYPETableAdapter.Transaction = null;
                }
                if ((this._sWSP_GLOBAL_IDTableAdapter != null)) {
                    this._sWSP_GLOBAL_IDTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sWSP_GLOBAL_IDTableAdapter]));
                    this._sWSP_GLOBAL_IDTableAdapter.Transaction = null;
                }
                if ((this._sWSP_MATERIAL_TYPETableAdapter != null)) {
                    this._sWSP_MATERIAL_TYPETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sWSP_MATERIAL_TYPETableAdapter]));
                    this._sWSP_MATERIAL_TYPETableAdapter.Transaction = null;
                }
                if ((this._sWSP_PHOTOTableAdapter != null)) {
                    this._sWSP_PHOTOTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sWSP_PHOTOTableAdapter]));
                    this._sWSP_PHOTOTableAdapter.Transaction = null;
                }
                if ((this._sWSP_PIPETableAdapter != null)) {
                    this._sWSP_PIPETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sWSP_PIPETableAdapter]));
                    this._sWSP_PIPETableAdapter.Transaction = null;
                }
                if ((this._sWSP_SHAPE_TYPETableAdapter != null)) {
                    this._sWSP_SHAPE_TYPETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sWSP_SHAPE_TYPETableAdapter]));
                    this._sWSP_SHAPE_TYPETableAdapter.Transaction = null;
                }
                if ((this._sWSP_SUBWATERSHEDTableAdapter != null)) {
                    this._sWSP_SUBWATERSHEDTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sWSP_SUBWATERSHEDTableAdapter]));
                    this._sWSP_SUBWATERSHEDTableAdapter.Transaction = null;
                }
                if ((this._sWSP_SURVEY_PAGETableAdapter != null)) {
                    this._sWSP_SURVEY_PAGETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sWSP_SURVEY_PAGETableAdapter]));
                    this._sWSP_SURVEY_PAGETableAdapter.Transaction = null;
                }
                if ((this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter != null)) {
                    this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter]));
                    this._sWSP_SURVEY_PAGE_EVALUATORTableAdapter.Transaction = null;
                }
                if ((this._sWSP_VIEWTableAdapter != null)) {
                    this._sWSP_VIEWTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sWSP_VIEWTableAdapter]));
                    this._sWSP_VIEWTableAdapter.Transaction = null;
                }
                if ((this._sWSP_WATERSHEDTableAdapter != null)) {
                    this._sWSP_WATERSHEDTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sWSP_WATERSHEDTableAdapter]));
                    this._sWSP_WATERSHEDTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591
      PROGRAM AXTPARSE
c routine to automatically read SWMM4 EXTRAN Generic.out output file and 
c parse for spreadsheet format
c
c function is to read number of time steps, timing parameters, and
c  the depth, conduit flow fields from summary output section.
C     6/23/95:  Add in ability to create interface file
C======================================================================
      IMPLICIT NONE

      INCLUDE 'TAPESIR.INC'
      INCLUDE 'INTER.INC'

      CHARACTER*12 filout, station
C
      
      CHARACTER DUMMY1*36,DUMMY3*6,SUR*1
      CHARACTER DUMMY4*14,BLANK*10,AJUNC*10,ACOND*10
      CHARACTER ECOND*10
      CHARACTER*40 SWMMFILE
      LOGICAL HAMLET      
      INTEGER MAXD,JSUR,ICOND,KCOND,JUNC,KJUNC,KACAD,KJ,
     +        KC,I,J,N7,IPCON,NDT,NSTART,IPCYC,NCN,NC,
     +        NJN,NJ,LINEC,NCEXTRA,LINEJ,JN,ICN,ICYC,IRD,
     +        K,IC,NYEAR,JDAY,JULDAY,YESDAY
      REAL PRTGD,PRTQ,CROWN,BOTTOM,PRTBOT,PRTCWN,ELEV,DEPTH,FLOW,
     +      PRTE,GRND,DELT,AREA,DELTA,TIME,TIMDAY
      PARAMETER(MAXD=500)
      DIMENSION JUNC(MAXD),DEPTH(MAXD),ELEV(MAXD),FLOW(MAXD),
     + ICOND(MAXD),KJUNC(MAXD),KCOND(MAXD),IPCON(MAXD),
     + PRTE(MAXD),PRTQ(MAXD),SUR(MAXD),JSUR(MAXD),
     + GRND(MAXD),BOTTOM(MAXD),PRTGD(MAXD),PRTBOT(MAXD),
     + AJUNC(MAXD),ACOND(MAXD),PRTCWN(MAXD),CROWN(MAXD)
      DATA BLANK/'          '/
c
C ck to see if requested junction/cond data has been output from acad
C  Index KACAD used to indicate which files (junc or cond data) were
c     requested.  KACAD=0->no request, KACAD=1->junc only, 
c     KACAD=2->cond data only, KACAD=3->both
c
      KACAD=0
      KJ=0
      KC=0
      INQUIRE(FILE='AC_JUNC.DAT',EXIST=HAMLET)
      IF(HAMLET)THEN
        OPEN(55,ERR=3100,FILE='AC_JUNC.DAT',STATUS='OLD')
        KACAD=1
        DO 1 I=1,1000
          READ(55,*,END=2,ERR=2)KJUNC(I)
          IF(KJUNC(I).EQ.0)GO TO 2
          KJ=KJ+1
1       CONTINUE

2       CONTINUE

        IF(KJ.GT.500)THEN
          WRITE(*,3200)
          KJ=500
          ENDIF
        ENDIF
      INQUIRE(FILE='AC_COND.DAT',EXIST=HAMLET)
      IF(HAMLET)THEN
        OPEN(56,ERR=3100,FILE='AC_COND.DAT',STATUS='OLD')
        KACAD=KACAD+2
        DO 3 I=1,1000
          READ(56,*,END=4,ERR=4)KCOND(I)
          If(KCOND(I).LT.1) GO To 4
          KC = KC + 1
3       Continue
4       IF(KC.GT.500)THEN
          WRITE(*,3200)
          KC=500
          ENDIF
        ENDIF
c here request file names and open for ASCII output
      INQUIRE(FILE='generic.out',EXIST=HAMLET)
      IF(HAMLET)THEN
        OPEN(5,ERR=3100,FILE='generic.out',STATUS='OLD')
        SWMMFile='GENERIC.OUT'
      else
        WRITE(*,'(A\)')'     No Generic.Out file found! '
        WRITE(*,'(A\)')'     Please Enter Path & Name of Ouput File: '
        READ(*,'(A\)') SWMMFile
          INQUIRE(FILE=SWMMFile,EXIST=HAMLET)
          IF(HAMLET)THEN
              OPEN(N5,ERR=3100,FILE=SWMMFile,STATUS='OLD')
          Else        
              WRITE(*,'(A\)')' ERROR! File Not Found! '
              STOP
          Endif
      endif
      N5=5      
      N6=6
      N7=7
      IF(KACAD.NE.2) OPEN(6,FILE='GENERIC.HGL')
      IF(KACAD.NE.1) OPEN(7,FILE='GENERIC.FLO')

      DO 5 J=1,MAXD
        JSUR(J)=0
5     CONTINUE
      NJCE=0
      
      Do 8 J = 1, 4
        Title(J) = ' '
8     Continue
C     
C     Write message to user on status of processing:
         WRITE(*,4110) SWMMFile
 4110    FORMAT(/,10X,' **********  AUTO-EXTRAN-PARSER  **********',//,
     +            10X,' Processing Extran Output File: ',A40)
         WRITE(*,4120)
 4120    FORMAT( /,18X,'==>> Is the Current Julian Date')


c HERE READ DATA FILE TO FIND CONTROLS
C
      DO 10 I=1,2000
        READ(N5,'(A)',END=9901)DUMMY1
        IF(DUMMY1.EQ.' Integration cycles.................')THEN
          BACKSPACE 5
          READ(N5,'(36X,I8)')NDT
        ElseIF(DUMMY1.EQ.' Length of integration step is......')THEN
          BACKSPACE 5
          READ(N5,'(36X,F8.2)')DELT
        ElseIF(DUMMY1.EQ.' Printing starts in cycle...........')THEN
          BACKSPACE 5
          READ(N5,'(36X,I8)')NSTART
        ElseIF(DUMMY1.EQ.' Intermediate printout intervals of.')THEN
          IF(IPCYC.LE.0) Then
              BACKSPACE 5
              READ(N5,'(36X,I8)')IPCYC
          ENDIF
        ElseIF(DUMMY1.EQ.' Initial time.......................')THEN
          BACKSPACE 5
          READ(N5,'(36X,F8.2)') TZero
          GO TO 11
        ENDIF
10    CONTINUE
9901  WRITE(*,'(A)')' READING ERROR!  File may not produced have been ',
     +              'produced by PDXTRAN Version 4.x'
      STOP
11    CONTINUE
c-----------------------------------------------------------------------
C finished reading controls--look for warning messages and initialize

      DO 111 I=1,1000000
        READ(N5,'(A)')DUMMY4

C     Check for Title(1) and Title(2)
        IF(Title(1).EQ.' ') Then
            IF(DUMMY4.EQ.' WASHINGTON, D') THEN
               Read(N5,*)
               Read(N5,*)
               READ(N5,'(5X,A)') Title(1)
               READ(N5,'(5X,A)') Title(2)
            Endif
        Endif  
        
        IF(DUMMY4.EQ.' Title from fi')THEN
          READ(N5,'(1X,A80)')Title(3)
          READ(N5,'(1X,A80)')Title(4)
          READ(N5,*)
          READ(N5,*)
          READ(N5,*)
          READ(N5,*)
          READ(N5,*)
          READ(N5,*)
          READ(N5,'(52X,I8)') IDateZ
          READ(N5,'(52X,F8.1)') TZero
          READ(N5,*)
          READ(N5,*)
          READ(N5,'(52X,F8.2)') Area
          READ(N5,'(52X,I8)') NJCE
          GO TO 160
        EndIf
 
 
c read conduit numbers

        IF(DUMMY4.EQ.'  INP  CONDUIT')THEN
          READ(N5,'(A)')
          READ(N5,'(A)')
          READ(N5,*,ERR=1114)J,ICOND(J)
          GO TO 1113
1114      NJCE=1
1113      BACKSPACE 5

          DO 113 NCN=1,10000
105        IF(NJCE.EQ.0)THEN
             READ(N5,*,ERR=114)J,ICOND(J)
            ELSE
             READ(5,5001,ERR=114)J,ACOND(J)
            ENDIF
            GO TO 113

C     READ ERR-CHK FOR MORE CONDUITS ON NEXT PAGE AND GET WARNINGS
114        BACKSPACE 5
           DO 104 J=1,1000
            READ(N5,'(A)')DUMMY4
            IF(DUMMY4.EQ.'  INP  CONDUIT')THEN
              READ(N5,'(A)')
              READ(N5,'(A)')
              GO TO 105
              ENDIF

            IF(DUMMY4.EQ.' *  Equivalent')THEN
              BACKSPACE 5
              BACKSPACE 5
              BACKSPACE 5
              NC=NCN-1
              GO TO 111
              ENDIF

            IF(DUMMY4.EQ.' INP  JUNCTION')THEN
              BACKSPACE 5
              NC=NCN-1
              GO TO 111
              ENDIF

104         CONTINUE

113       CONTINUE

          ENDIF

c read junction data
        IF(DUMMY4.EQ.' INP  JUNCTION')THEN
          READ(N5,'(A)')
          READ(N5,'(A)')
          
1061      DO 115 NJN=1,1000
106        IF(NJCE.EQ.0)THEN
            READ(N5,*,ERR=116)J,JUNC(J),GRND(J),CROWN(J),BOTTOM(J)
           ELSE
            READ(N5,*,ERR=116)J,AJUNC(J),GRND(J),CROWN(J),BOTTOM(J)
           ENDIF 
           GO TO 115

C READ ERR-CHECK FOR MORE JUNCTIONS ON NEXT PAGE OR CONDUIT WARNING MSG
116       BACKSPACE 5
          DO 1116 J=1,1000
            READ(N5,'(A)')DUMMY4
            IF(DUMMY4.EQ.' INP  JUNCTION')THEN
              READ(N5,'(A)')
              READ(N5,'(A)')
              GO TO 106
            ELSEIF(DUMMY4.EQ.'      lie abov')THEN
              GO TO 106
              ENDIF

            IF(DUMMY4.EQ.' STORAGE JUNCT' .OR.
     +         DUMMY4.EQ.' *        DIUR' .OR.
     +         DUMMY4.EQ.' # Header info' .OR.
     +         DUMMY4.EQ.' *        INTE'     )THEN
              NJ=NJN-1
              LINEJ=FLOAT(NJ)/3.+.7
              BACKSPACE 5
              GO TO 111
              ENDIF
1116      CONTINUE

115       CONTINUE

          ENDIF

C Find extra conduits created internally

        IF(DUMMY4.EQ.' *        INTE')THEN
          DO 117 J=1,4
117          READ(N5,*)
          DO 118 J=1,1000
           IF(NJCE.EQ.0)THEN
            READ(N5,'(1X,I14)')NCEXTRA
             IF(NCEXTRA.EQ.0)THEN
               GO TO 119
               ELSE
                NC=NC+1
                ICOND(NC)=NCEXTRA
               ENDIF
           ELSE
            READ(N5,'(5X,A)')ECOND
             IF(ECOND.EQ.BLANK)THEN
               GO TO 119
               ELSE
                NC=NC+1
                ACOND(NC)=ECOND
               ENDIF
           ENDIF
118       CONTINUE 
119       LINEC=FLOAT(NC)/4.+0.8
        ENDIF

C Read initial date and time for solution

        IF(DUMMY4.EQ.' Initial Julia')THEN
          BACKSPACE 5
          READ(N5,'(51X,I8)')IDATEZ
          READ(N5,'(51X,F8.0)')TZERO
          TZERO=TZERO/3600.
          ENDIF

c Read initial junction conditions

        IF(DUMMY4.EQ.' JUNCTION / DE')THEN
         IF(NJCE.EQ.0)THEN
          DO 150 JN=1,LINEJ,3
           READ(5,6000,ERR=151)JUNC(JN),DEPTH(JN),ELEV(JN),
     +                  JUNC(JN+1),DEPTH(JN+1),ELEV(JN+1),
     +                  JUNC(JN+2),DEPTH(JN+2),ELEV(JN+2)
150       CONTINUE
         ELSE
          DO 152 JN=1,LINEJ,3
           READ(5,6015,ERR=151)AJUNC(JN),DEPTH(JN),ELEV(JN),
     +                  AJUNC(JN+1),DEPTH(JN+1),ELEV(JN+1),
     +                  AJUNC(JN+2),DEPTH(JN+2),ELEV(JN+2)
          IF(AJUNC(JN).EQ.BLANK)GO TO 151  
152       CONTINUE
         ENDIF
151      CONTINUE
         BACKSPACE 5
         ENDIF

c Read initial conduit conditions

        IF(DUMMY4.EQ.'   CONDUIT/   ')THEN
         IF(NJCE.EQ.0)THEN
          DO 155 ICN=1,LINEC,4
                READ(5,6001,ERR=156)ICOND(ICN),FLOW(ICN),ICOND(ICN+1),
     +                FLOW(ICN+1),ICOND(ICN+2),FLOW(ICN+2),
     +                ICOND(ICN+3),FLOW(ICN+3)
155        CONTINUE
156        CONTINUE
         ELSE
          DO 157 ICN=1,LINEC,4
          READ(5,6001,ERR=158)ACOND(ICN),FLOW(ICN),ACOND(ICN+1),
     +                FLOW(ICN+1),ACOND(ICN+2),FLOW(ICN+2),
     +                ACOND(ICN+3),FLOW(ICN+3)
157        CONTINUE
158        CONTINUE
         ENDIF
        ENDIF

111   CONTINUE

160   CONTINUE

C       Now assign Delta Time Step and default Source
       Source = 'PDXTran-AXTParser'
       Delta = 60.0 * Float(Int(Delt * IPCYC + 5)/60)
C       Determine year and assign IDateZ if not seen yet:
        If(IDateZ.LE.0)Then 
           NYear = 19000
           JDay = 1
           IDateZ = 19001
        Else
           NYear = IDateZ / 1000
           JDay = IDateZ - NYear*1000
        Endif
       

C
C NOW WRITE THE TOP OF OUTPUT FILE AND INITIAL CONDITION

C       Test if user wants all or a select few.  Write full inteface
C       data/header only for KACAD = 0

         IF(KACAD.EQ.0)THEN
            WRITE(N6,'(A)')'"Junction WSElev Data From Auto-XTParser"'
            WRITE(N7,'(A)')'"Conduit Flow Data From Auto-XTParser"'
            
            WRITE(N6,4000) Title(1),Title(2),IDateZ,TZero,
     +                     Title(3),Title(4),Source,Area,Delta
            WRITE(N7,4000) Title(1),Title(2),IDateZ,TZero,
     +                     Title(3),Title(4),Source,Area,Delta
     
           IF(NJCE.EQ.0)THEN
             WRITE(N6,6008)(JUNC(J),J=1,NJ)
             WRITE(N7,6018)(ICOND(J),J=1,NC)
             ELSE
              WRITE(N6,6013)(AJUNC(J),J=1,NJ)
              WRITE(N7,6023)(ACOND(J),J=1,NC)
             ENDIF

            WRITE(N6,6009)(GRND(J),J=1,NJ)
            WRITE(N6,6012)(CROWN(J),J=1,NJ)
            WRITE(N6,6011)(BOTTOM(J),J=1,NJ)
            WRITE(N6,'(/)')
            WRITE(N7,'(/)')

            IF(NSTART.LE.1)THEN
              WRITE(N6,6003)TZERO,(ELEV(J),J=1,NJ)
              WRITE(N7,6003)TZERO,(FLOW(J),J=1,NC)
              ENDIF
         ELSE
           IF(KACAD.EQ.1 .OR. KACAD.EQ.3)THEN
             WRITE(N6,'(A,I10/)')' "STARTING DATE =", ',IDATEZ
             WRITE(N6,6008)(KJUNC(J),J=1,KJ)
C
            DO 450 K=1,KJ
              DO 448 J=1,MAXD
                IF(JUNC(J).EQ.KJUNC(K))GO TO 449
448           CONTINUE
              WRITE(*,7000)KJUNC(K)
              STOP
449           PRTGD(K)=GRND(J)
              PRTCWN(K)=CROWN(J)
              PRTBOT(K)=BOTTOM(J)
450         CONTINUE
            WRITE(N6,6009)(PRTGD(J),J=1,KJ)
            WRITE(N6,6012)(PRTCWN(J),J=1,KJ)
            WRITE(N6,6011)(PRTBOT(J),J=1,KJ)
            WRITE(N6,'(/)')
            ENDIF

           IF(KACAD.GT.1)THEN
            WRITE(N7,'(A,I10/)')' "STARTING DATE =", ',IDATEZ
            WRITE(N7,6018)(KCOND(J),J=1,KC)
              DO 500 K=1,KC
                DO 498 J=1,MAXD
                  IF(ICOND(J).EQ.KCOND(K))GO TO 499
498             CONTINUE
                WRITE(*,7100)KCOND(K)
                STOP
499             IPCON(K)=J
500           CONTINUE
            ENDIF

         ENDIF
C ' CUMULATIVE OVERFLOW VOLUME FROM NODE'
C NOW FIND THE FIRST CYCLE OF OUTPUT

      DO 30 I=1,1000000 
C         BEGIN DO LOOP FOR EACH TIME STEP/PRINT INTERVAL
          READ(N5,'(A)')DUMMY3
          IF(DUMMY3.EQ.' CYCLE')GO TO 35
30    CONTINUE
C NOW WE HAVE FOUND THE FIRST CYCLE TIME OUTPUT
C
35    BACKSPACE 5
      READ(N5,'(6X,I11)')ICYC
C         ICYC is the number of time steps skipped
      IRD=(NDT-NSTART)/IPCYC
      DO 50 IC=1,IRD+1
      
        TIME=ICYC*DELT/3600.+TZERO 
C         Calculate Julian Day for Interface File
          JDay = (IDateZ - NYear*1000) + Int((TIME+1)/24.)
          If(JDay.GT.365) Then
             JDay = JDay - 365
             NYear = (IDateZ/1000) + Int(JDay/365.)
          Endif
          JulDay = NYear*1000 + JDay
          
C         Calculate TimDay for Interface file - round to nearest Delta
        TimDay = TIME - Int((TIME+1)/24.)
        TimDay = Delta * Float(Int(TimDay * 3600./Delta))
        
        DO 36 K=1,1000
         READ(N5,'(A)',ERR=51,END=51)DUMMY3
         IF(DUMMY3.EQ.' JUNCT')GOTO 37
36      CONTINUE
37        DO 38 JN=1,LINEJ*3,3
           IF(NJCE.EQ.0)THEN
            READ(5,6010,ERR=40)JUNC(JN),DEPTH(JN),SUR(JN),ELEV(JN),
     +                   JUNC(JN+1),DEPTH(JN+1),SUR(JN+1),ELEV(JN+1),
     +                   JUNC(JN+2),DEPTH(JN+2),SUR(JN+2),ELEV(JN+2)
           ELSE
            READ(5,6014,ERR=40)AJUNC(JN),DEPTH(JN),SUR(JN),ELEV(JN),
     +                  AJUNC(JN+1),DEPTH(JN+1),SUR(JN+1),ELEV(JN+1),
     +                  AJUNC(JN+2),DEPTH(JN+2),SUR(JN+2),ELEV(JN+2)
           ENDIF
            DO 371 J=JN,JN+2
             IF(SUR(J).NE.' ' .OR. ELEV(J).GT.CROWN(J))THEN
               IF(ELEV(J)-GRND(J) .LE. 1.E-06)JSUR(J)=1
               ENDIF
371         CONTINUE
38        CONTINUE
40        CONTINUE
          BACKSPACE 5
          DO 400 K=1,1000
           READ(N5,'(A)')DUMMY3
           IF(DUMMY3.EQ.'   CON')GOTO 401
400       CONTINUE
401       CONTINUE
          DO 41 ICN=1,LINEC*4,4
            IF(NJCE.EQ.0)THEN
                READ(5,6001,ERR=42)ICOND(ICN),FLOW(ICN),ICOND(ICN+1),
     +                FLOW(ICN+1),ICOND(ICN+2),FLOW(ICN+2),
     +                ICOND(ICN+3),FLOW(ICN+3)
            ELSE
                READ(5,6016,ERR=42)ACOND(ICN),FLOW(ICN),ACOND(ICN+1),
     +                FLOW(ICN+1),ACOND(ICN+2),FLOW(ICN+2),
     +                ACOND(ICN+3),FLOW(ICN+3)
            ENDIF
41        CONTINUE
42        CONTINUE
C
C
*        Write message to screen to tell user the current date examined:
*                   
         IF(JULDAY.NE.YESDAY) THEN
           WRITE(*,4130) JulDay           
           YESDAY = JulDay
         ENDIF
 4130   FORMAT('+',10X,I6)
           
C         WRITE DATA TO FILES:
C
          IF(KACAD.EQ.0)THEN
            WRITE(N6,6003)TIME,(ELEV(J),J=1,NJ)
            WRITE(N7,6003)TIME,(FLOW(J),J=1,NC)
          ELSE
           IF(KACAD.EQ.1 .OR. KACAD.EQ.3)THEN
            DO 600 K=1,KJ
              PRTE(K)=ELEV(J)
 600        CONTINUE
            WRITE(N6,6003)TIME,(PRTE(J),J=1,KJ)
            ENDIF
C
            IF(KACAD.GT.1)THEN
              DO 601 K=1,KC
                J=IPCON(K)
601             PRTQ(K)=FLOW(J)
              WRITE(N7,6003)TIME,(PRTQ(J),J=1,KC)
              ENDIF
          ENDIF
C
          IF(IC.LT.IRD)THEN
           DO 46 I=1,10000
            READ(N5,'(A)',ERR=51,END=51)DUMMY3
            IF(DUMMY3.EQ.' CYCLE')THEN
              BACKSPACE 5
              READ(N5,'(6X,I11)')ICYC
              GO TO 50
              ENDIF
46         CONTINUE
          ELSE
           GO TO 51
          ENDIF
C
50    CONTINUE
51    CONTINUE
C

88    CONTINUE

100      STOP
c
3100  write(*,'(a)')' Error in opening request files'
      stop
C=======================================================================
3200  FORMAT(' ERROR, ONLY THE FIRST 500 ELEMENTS WILL BE PRINTED')
4000  FORMAT(/,2('"',A80,'"',/),'"Starting Date =", ',I6,', ',
     +      '"Starting Time = ",',F8.2,/,2('"',A80,'"',/),
     +      '"',A20,'", "Area = ",',F8.2,/,
     +      '"Output Time Step (secs) = ", ',F10.2)
5000  FORMAT(' RUN TIME MESSAGES FROM FILE ',A/
     +' USING INTERFACE FILE 'A//)
5001  FORMAT(I4,A10,F10.0)
6000  FORMAT(3(I10,1X,F7.2,2X,F9.2))
6001  FORMAT(4(I10,1X,F11.2,1X))
6002  FORMAT('('/(1X,20I10))
6003  FORMAT(F8.3,',',500(F8.2,','))
6004  FORMAT('''(')
6005  FORMAT(')')
6006  FORMAT('(')
6007  FORMAT(')''')
6008  FORMAT('"JUNC", ',500(I8,','))
6009  FORMAT('"GROUND", ',500(F8.2,','))
6010  FORMAT(3(I10,1X,F7.2,A,1X,F9.2))
6011  FORMAT('"INVERT", ',500(F8.2,', '))
6012  FORMAT('"CROWN", ',500(F8.2,', '))
6013  FORMAT('"JUNC", ',500(A8,', '))
6014  FORMAT(3(A10,1X,F7.2,A,1X,F9.2))
6015  FORMAT(3(A10,1X,F7.2,2X,F9.2))
6016  FORMAT(4(A10,1X,F11.2,1X))
6018  FORMAT('"COND", ',500(I8,','))
6023  FORMAT('"COND", ',500(A8,','))
7000  FORMAT(/,' ===> ERROR! JUNCTION',I10,' NOT FOUND IN EXTRAN FILE')
7100  FORMAT(/,' ===> ERROR! CONDUIT ',I10,' NOT FOUND IN EXTRAN FILE')
C=======================================================================
      END


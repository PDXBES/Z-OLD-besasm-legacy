include	"MapBasic.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\Common\Inc\EMGGlobal.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\Common\Inc\EMGLogger.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\Common\Inc\EMGOpenUtils.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\Common\Inc\EMGMTabUtil.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\Common\Inc\INIUtils.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\Workbench\Inc\EMGInit.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\LinkTool\Inc\EMGLinkCheck.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\LinkTool\Inc\EMGLinkColData.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\LinkTool\Inc\EMGFinder.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\LinkTool\Inc\EMGDelList.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\common\inc\EMGLineGeo.def"

'EMGAATS Link Append prototypes
declare sub AddLinkCheck(ByVal TName as string)
declare sub CheckOneLink
declare function IsInt(byval InString as string) as logical
declare function IsAlpha(byval InString as string) as logical
declare sub AppendOnelink()
declare sub CheckOrAddNode(
		ByVal TName as string, 
		ByVal Node as string, 
		ByVal X as float, 
		ByVal Y as float,
		ByVal NType as string)
declare sub CommitAppend(ByVal TName as string)
Declare	Sub	OpenWarnBrowser(ByVal TName as string)
Declare	Sub	OpenFailBrowser(ByVal TName as string)

'--------------------------------------------------------
'Excerpts from EMGAATS Link Append Tool
'--------------------------------------------------------
Dim LinkCount as integer
dim		mLinkCount as integer
Dim		mDateStamp as string
Dim		mMaxLinkID as integer

Dim		cobj as object
Dim		cLinkID as integer
Dim		cLinkType as string
Dim		cPipeFlowType as string
Dim		cMLinkID as integer
Dim		cCompKey as integer
Dim		cUSNode as string
Dim		cDSNode as string
Dim		cLength as float
Dim		cDiamWidth as float
Dim		cHeight as float
Dim		cPipeShape as string
Dim		cMaterial as string
Dim		cUpsDepth as float
Dim		cDwnDepth as float
Dim		cUSIE as float
Dim		cDSIE as float
Dim		cAsBuilt as string
Dim		cInstdate as date
Dim		cFromX as float
Dim		cFromY as float
Dim		cToX as float
Dim		cToY as float
Dim		cRoughness as float
Dim		cLinkReach as string
Dim		cReachElement as integer
Dim		cObjSource as string
Dim		cDataQual as string
Dim		cIsSpecLink as string
Dim		cDataFlagSynth as integer
Dim		cTimeFrame as string
Dim		cSource as string
' following are related to nodes, only used if node created
Dim		cUSNodeType as string
Dim		cDSNodeType as string

Sub AddLinkCheck(ByVal TableName as string)
	dim lResult as logical
	dim ColErrs as string
	dim NumLinks as integer

	call CheckOrCreateAuditColumns(TableName, "ADD")

	gReqColCount = gModelMax
	print "Model Mode"

	'JHB: Was "select * from gstrSelectedTableName into _LinkCheck
	select * from TableName into _LinkCheck
	
	NumLinks = TableInfo(_LinkCheck, TAB_INFO_NROWS)
	LinkCount = 0
	' reset all check fields
	update _LinkCheck
	set AuditNodeID = "",
	AuditDups = "",
	AuditSpatial = "",
	AuditOK2Go = False,
	AuditProcTimestamp = ""
	Fetch First from _LinkCheck

	ProgressBar   "Checking links to be added ..." 
		Calling   CheckOneLink  
		Range   NumLinks 

End Sub

Sub		CheckOneLink()
Dim		MyOK2Go as logical
Dim		TempStr as string
Dim		MyRow as integer
Dim		NodeFirst3 as string
Dim		NodeLast3 as string
Dim		NodeIDLen as integer
Dim		lResult as logical
Dim		TimeFrame as string
Dim		LinkType as string

	if EOT(_LinkCheck) then
		Progressbar = -1
		exit sub
	end if

	LinkCount = Linkcount + 1
	Progressbar = LinkCount
	MyRow = _LinkCheck.ROWID

' ----------------------------------------------------------------------------------
'		Actual check of each link between bars...
	MyOK2Go = TRUE


' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 

'			Node ID checks, US and DS
' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 

	print "USNode: " & _LinkCheck.USNode
		NodeIDLen = len(lTrim$(rtrim$(_LinkCheck.USNode)))
		if NodeIDLen <> 6 then
			MyOK2Go = FALSE
			TempStr = _LinkCheck.AuditNodeID
			TempStr = TempStr & " US Len" & str$(NodeIDLen)
			update _LinkCheck
				set AuditNodeID = TempStr
				where ROWID = MyRow
			
		else
		' check Node IDs for license plate format.
			NodeFirst3 = mid$(_LinkCheck.USNode,1,3)
			NodeLast3 = mid$(_LinkCheck.USNode, 4,3)
			' if first part is integer, second part must be alpha.
			' if first part is alpha, second part must be integer.
			if IsInt(NodeFirst3) then
				print "1st 3 int"
				if IsAlpha(NodeLast3) then
					' USNode is OK, no need to do anything
					print "2nd 3 alpha, ok"
				else	
					' USNode incorrect format
					print "2nd 3 not alpha, not ok"
					MyOK2Go = FALSE
					TempStr = _LinkCheck.AuditNodeID
					TempStr = TempStr & " US 2NA"
					update _LinkCheck
						set AuditNodeID = TempStr
						where ROWID = MyRow
				end if
			else
				if IsAlpha(NodeFirst3) then
					print "1st 3 alpha"
					if IsInt(NodeLast3) then
						' US Node is OK, no need to do anything
						print "2nd 3 int, ok"
					else
						' US Node incorrect format
						print "2nd 3 not int, not ok"
						MyOK2Go = FALSE
						TempStr = _LinkCheck.AuditNodeID
						TempStr = TempStr & " US 2NN"
						update _LinkCheck
							set AuditNodeID = TempStr
							where ROWID = MyRow

					end if
				else
					' first 3 passes neither int or alpha
					print "1st 3 neither int nor alpha, not ok"
					MyOK2Go = FALSE
					TempStr = _LinkCheck.AuditNodeID
					TempStr = TempStr & " US Allbad"
					update _LinkCheck
						set AuditNodeID = TempStr
						where ROWID = MyRow
				
				end if
			end if
		end if
	print "DSNode: " & _LinkCheck.DSNode
		NodeIDLen = len(lTrim$(rtrim$(_LinkCheck.DSNode)))
		if NodeIDLen <> 6 then
			MyOK2Go = FALSE
			TempStr = _LinkCheck.AuditNodeID
			TempStr = TempStr & " DS Len" & str$(NodeIDLen)
			update _LinkCheck
				set AuditNodeID = TempStr
				where ROWID = MyRow
		else
			' check Node IDs for license plate format.
			NodeFirst3 = mid$(_LinkCheck.DSNode,1,3)
			NodeLast3 = mid$(_LinkCheck.DSNode, 4,3)
			' if first part is integer, second part must be alpha.

			' if first part is alpha, second part must be integer.
			if IsInt(NodeFirst3) then
				print "1st 3 int"
				if IsAlpha(NodeLast3) then
					' USNode is OK, no need to do anything
					print "2nd 3 alpha, ok"
				else	
					' USNode incorrect format
					print "2nd 3 not alpha, not ok"
					MyOK2Go = FALSE
					TempStr = _LinkCheck.AuditNodeID
					TempStr = TempStr & " DS 2NA"
					update _LinkCheck
						set AuditNodeID = TempStr
						where ROWID = MyRow
				end if
			else
				if IsAlpha(NodeFirst3) then
					print "1st 3 alpha"
					if IsInt(NodeLast3) then
						' US Node is OK, no need to do anything
						print "2nd 3 int, ok"
					else
						' US Node incorrect format
						print "2nd 3 not int, not ok"

						MyOK2Go = FALSE
						TempStr = _LinkCheck.AuditNodeID
						TempStr = TempStr & " DS 2NN"
						update _LinkCheck
							set AuditNodeID = TempStr
							where ROWID = MyRow

					end if
				else
					' first 3 passes neither int or alpha
					print "1st 3 neither int nor alpha, not ok"
					MyOK2Go = FALSE
					TempStr = _LinkCheck.AuditNodeID
					TempStr = TempStr & " DS1 bad"
					update _LinkCheck
						set AuditNodeID = TempStr
						where ROWID = MyRow
				
				end if
			end if
		end if
' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
'			Ends consistent with nodes
' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
Dim		SpaceMsg as string
Dim		DupMsg as string

		lResult = LinkCheckSpace(SpaceMsg)
		if Len(SpaceMsg) > 0 then
			TempStr = _LinkCheck.AuditSpatial
			TempStr = TempStr & SpaceMsg
			update _LinkCheck
				set AuditSpatial = TempStr
				where ROWID = MyRow
		end if
		if not lResult then
			MyOK2Go = FALSE
		end if
' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
'			Look for potential duplicates
' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 

		lResult = LinkCheckDup(DupMsg)
		if Len(DupMsg) > 0 then
			TempStr = _LinkCheck.AuditDups
			TempStr = TempStr & DupMsg
			update _LinkCheck
				set AuditDups = TempStr
				where ROWID = MyRow
		End If
		if not lResult then
			'  dups are not fatal !  leave MyOK2GO alone
		end if
' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
'			Valid Flow Type
' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
	Linktype = _LinkCheck.LinkType
	do case LinkType
		case "C", "IC", "D", "ID", "PS", "PD", "PC", "FD", "S", "IS", "V", "F", "X"
			' valid types
		case else
					TempStr = _LinkCheck.AuditDups
					TempStr = TempStr & " Bad Type"
					update _LinkCheck
						set AuditDups = TempStr
						where ROWID = MyRow
			
	end case
' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
		' set the ok to go field to the combined opinion
		print "Final OK? " & str$(MyOK2Go) & " in ROWID " & str$(MyRow)
		Update _LinkCheck
			set AuditOK2Go = MyOK2Go
			where ROWID = MyRow
' ----------------------------------------------------------------------------------
	fetch next from _LinkCheck
End sub
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
'
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
Function IsInt(byval InString as string) as logical
	Dim	CurChar as string
	IsInt = false
		CurChar = mid$(InString, 1, 1)
		if CurChar < "0" or CurChar > "9" then
			exit function
		end if
		CurChar = mid$(InString, 2, 1)
		if CurChar < "0" or CurChar > "9" then
			exit function
		end if
		CurChar = mid$(InString, 3, 1)
		if CurChar < "0" or CurChar > "9" then
			exit function
		end if
	IsInt = TRUE
End Function
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
'
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
Function IsAlpha(byval InString as string) as logical
	dim	CurChar as string
	IsAlpha = false
		CurChar = mid$(InString, 1, 1)
		if CurChar < "A" or CurChar > "z" then
			exit function
		end if
		CurChar = mid$(InString, 2, 1)
		if CurChar < "A" or CurChar > "z" then
			exit function
		end if
		CurChar = mid$(InString, 3, 1)
		if CurChar < "A" or CurChar > "z" then
			exit function
		end if
	IsAlpha = TRUE
End Function

' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
'

' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
Sub AppendOneLink()
	dim	MyRow as integer
	dim	AppTable as string
	dim	Colname as string
	dim	lResult as logical

	dim	Msg as string

	'print "APpend one..."

	if EOT(_CommitRecs) then
		Progressbar = -1
		exit sub
	end if

	' set all "c" variables to blank or zero to start with...
	'
	cLinkID = 0
	cLinkType = ""
	cPipeFlowType = ""
	cMLinkID = 0
	cCompKey  = 0
	cUSNode = ""
	cDSNode = ""
	cLength  = 0
	cDiamWidth  = 0
	cHeight  = 0
	cPipeShape = ""
	cMaterial = ""
	cUpsDepth  = 0
	cDwnDepth  = 0
	cUSIE  = 0
	cDSIE  = 0
	cAsBuilt = ""
	'cInstdate = 
	cFromX  = 0
	cFromY  = 0
	cToX  = 0
	cToY  = 0
	cRoughness  = 0
	cLinkReach = ""
	cReachElement  = 0
	cObjSource = ""
	cDataQual = ""
	cIsSpecLink = ""
	cDataFlagSynth  = 0
	cTimeFrame = ""
	cUSNodeType = ""
	cDSNodeType = ""
	cSource = ""

	mLinkCount = mLinkcount + 1
	mMaxLinkID = mMaxLinkID + 1
	Progressbar = mLinkCount
	MyRow = _CommitRecs.ROWID
	'print "AppendOne B"
	AppTable = "_CommitRecs"

	'	Do the real work here...

	cobj = _CommitRecs.obj
	ColName = "LinkType"
	if IsColumnThere(AppTable, ColName) then
		cLinktype = _CommitRecs.LinkType
	end if
	ColName = "PipeFlowType"
	if IsColumnThere(AppTable, Colname) then
		cPipeFlowType = _CommitRecs.PipeFlowType
	end if
	ColName = "MLinkID"
	If IsColumnThere(AppTable, ColName) then
		cMLinkID = _CommitRecs.MLinkID
	end if
	
'	cCompKey = _CommitRecs.CompKey
	ColName = "CompKey"
	If IsColumnThere(AppTable, ColName) then
		onerror goto noComp
		cCompKey = _CommitRecs.CompKey
		goto okComp
	NoComp:
		cCompKey = 0
		resume okComp
	okComp:
	end if
	onerror goto 0

'	cUSNode = _CommitRecs.USNode
	ColName = "USNode"
	If IsColumnThere(AppTable, ColName) then
		cUSNode = _CommitRecs.USNode
	end if

'	cDSNode = _CommitRecs.DSNode
	ColName = "DSNode"
	If IsColumnThere(AppTable, ColName) then
		cDSNode = _CommitRecs.DSNode
	end if

'	cDiamWidth = _CommitRecs.DiamWidth
	ColName = "DiamWidth"
	If IsColumnThere(AppTable, ColName) then
		onerror goto noDiam
		cDiamWidth = _CommitRecs.DiamWidth
		goto okDiam
	noDiam:
		cDiamWidth = 0
		resume OKDiam
	OKDiam:
	end if
	onerror goto 0

'	cHeight = _CommitRecs.Height
	ColName = "Height"
	If IsColumnThere(AppTable, ColName) then
		onerror goto noHeight
		cHeight = _CommitRecs.Height
		goto okHeight
	noHeight:
		cHeight = 0
		resume okHeight
	okHeight:
	end if
	onerror goto 0

'	cPipeShape = _CommitRecs.Shape
	ColName = "PipeShape"
	If IsColumnThere(AppTable, ColName) then
		cPipeShape = _CommitRecs.PipeShape
	end if

'	cMaterial = _CommitRecs.Material
	ColName = "Material"
	If IsColumnThere(AppTable, ColName) then
		cMaterial = _CommitRecs.Material
	end if

'	cUpsDepth = _CommitRecs.UpsDepth
	ColName = "UpsDepth"
	If IsColumnThere(AppTable, ColName) then
		onerror goto noUpsd
		cUpsDepth = _CommitRecs.UpsDpth
		goto okUpsd
	noUpsd:
		cUpsDepth = 0.0
		resume okUpsd
	okUpsd:
	end if
	onerror goto 0

'
	ColName = "DwnDepth"
	If IsColumnThere(AppTable, ColName) then
		onerror goto noDwnd
		cDwnDepth = _CommitRecs.DwnDpth
		goto okDwnd
	noDwnd:
		cDwnDepth = 0.0
		resume okDwnd
	okDwnd:
	end if
	onerror goto 0

'	cUSIE = _CommitRecs.USIE
	ColName = "USIE"
	If IsColumnThere(AppTable, ColName) then
		onerror goto noUSIE
		cUSIE = _CommitRecs.USIE
		goto okUSIE
	noUSIE:
		cUSIE = 0.0
		resume okUSIE
	okUSIE:
	end if
	onerror goto 0

'	cDSIE = _CommitRecs.DSIE
	ColName = "DSIE"
	If IsColumnThere(AppTable, ColName) then
		onerror goto noDSIE
		cDSIE = _CommitRecs.DSIE
		goto okDSIE
	noDSIE:
		cDSIE = 0.0
		resume okDSIE
	okDSIE:
	end if
	onerror goto 0

'	cAsBuilt = _CommitRecs.AsBuilt
	ColName = "AsBuilt"
	If IsColumnThere(AppTable, ColName) then
		cAsBuilt = _CommitRecs.AsBuilt
	end if

'	cInstdate = _CommitRecs.Instdate
	ColName = "Instdate"
	If IsColumnThere(AppTable, ColName) then
		onerror goto noInst
		cInstDate = _CommitRecs.InstDate
		goto okInst
	noInst:
		cInstDate = ""
		resume okInst
	okInst:
	end if
	onerror goto 0

	' Note:  all the spatial stuff (to, from; x&y) is recomputed below.

'	cRoughness = _CommitRecs.Roughness
	ColName = "Roughness"
	If IsColumnThere(AppTable, ColName) then
		onerror goto noRough
		cRoughness = _CommitRecs.Roughness
		goto okRough
	noRough:
		cRoughness = 0.0
		resume okRough
	okRough:
	end if
	onerror goto 0

'	cLinkReach = _CommitRecs.LinkReach
	ColName = "LinkReach"
	If IsColumnThere(AppTable, ColName) then
		cLinkreach = _CommitRecs.LinkReach
	end if

'	cReachElement = _CommitRecs.ReachElement
	ColName = "ReachElement"
	If IsColumnThere(AppTable, ColName) then
		onerror goto noReach
		cReachElement = _CommitRecs.ReachElement
		goto okReach
	noReach:
		cReachElement = 0
		resume okReach
	okReach:
	end if
	onerror goto 0

'	cDataQual = _CommitRecs.DataQual
	ColName = "DataQual"
	If IsColumnThere(AppTable, ColName) then


		cDataQual = _CommitRecs.DataQual
	end if

'	cDataFlagSynth = _CommitRecs.DataFlagSynth
	ColName = "DataFlagSynth"
	If IsColumnThere(AppTable, ColName) then
		onerror goto noSynth
		cDataFlagSynth = _CommitRecs.DataFlagSynth
		goto okSynth
	noSynth:
		cDataFlagSynth = 0
		resume okSynth
	okSynth:
	end if
	onerror goto 0

	ColName = "mhfrom_type"
	If IsColumnThere(AppTable, ColName) then
		cUSNodeType = _CommitRecs.mhfrom_type
	end if
	ColName = "mhto_type"
	If IsColumnThere(AppTable, ColName) then
		cDSNodeType = _CommitRecs.mhto_type
	end if
	
	ColName = "IsSpecLink"
	If IsColumnThere(AppTable, ColName) then
		cIsSpecLink = _CommitRecs.IsSpecLink
	end if
	
	ColName = "AltLinkID"
	If IsColumnThere(AppTable, ColName) then
		cSource = _CommitRecs.Source
	End if

'	
'	All geo-spatial stuff is re-computed at this time
'
	cLength = ObjectLen(cobj, "ft")
	lResult = CalcEnds(cobj, cFromX, cFromY, cToX, cToY)

'
'	certain fields computed based on others
'
	Do Case ucase$(ltrim$(rtrim$(cLinkType)))
		case "C", "IC"
			cPipeFlowType = "C"
		case "D", "ID"
			cPipeFlowType = "D"
		case "PS", "PD", "PC", "FD"
			cPipeFlowType = "F"
		case "S", "IS"
			cPipeFlowType = "S"
		case "V", "F", "X"
			cPipeFlowType = "I"
		case else
			cPipeFlowType = "U"
	End Case
	
		Msg = "Insert Model"
		Call Loggit(Msg)

		Insert into mdl_Links (
			obj,
			LinkID,
			MLinkID,
			CompKey,
			USNode,
			DSNode,
			PipeShape,
			Linktype,
			PipeFlowType,
			Length,
			DiamWidth,
			Height,
			Material,
			Upsdpth,
			'Dwndpth,		' error in version 2
			USIE,
			DSIE,
			AsBuilt,
			Instdate,
			FromX,
			FromY,
			ToX,
			ToY,
			Roughness,
			DataQual,
			IsSpecLink,
			DataSource,
			Source,
			IsActive
			)
			values (
				cobj,
				mMaxLinkID,
				cMLinkID,
				cCompKey,
				cUSNode,
				cDSNode,
				cPipeShape,
				cLinkType,
				cPipeFlowType,
				cLength,
				cDiamWidth,
				cHeight,
				cMaterial,
				cUpsDepth,
				'cDwnDepth,
				cUSIE,
				cDSIE,
				cAsBuilt,
				cInstdate,
				cFromX,
				cFromY,
				cToX,
				cToY,
				cRoughness,
				cDataQual,
				cIsSpecLink,
				"A",			' we came from an "add",
				cSource,
				"T"
			)
	'  ensure the beginning and ending nodes are there...
		call CheckOrAddNode("mdl_Nodes", cUSNode, cFromX, cFromY, cUSNodeType)
		Call CheckOrAddNode("mdl_Nodes", cDSNode, cToX, cToY, cDSNodeType)

	Update _CommitRecs
		set AuditProcTimestamp = mDateStamp
		where ROWID = MyRow

	Msg = "Get next record..."
	call loggit(msg)

	fetch next from _CommitRecs


End Sub
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
'
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
Sub		CheckOrAddNode(
	ByVal TName as string, 
	ByVal NodeKey as string, 
	byval X as float, 
	byval Y as float,
	ByVal NType as string)
Dim		NodeCount as integer
Dim		NewPoint as object
Dim		NewColor as integer
Dim		Msg as string
Dim		NodeX, NodeY as float
Define		SNAP_TOLERANCE 5.0

	Select * from TName
	where Node = NodeKey
	into _GotNode

	NodeCount = TableInfo(_GotNode, TAB_INFO_NROWS)
	if NodeCount > 0 then
		' check spatial match; warn only
		NodeX = _GotNode.XCoord
		NodeY = _GotNode.YCoord
		if (abs(nodex - X) > SNAP_TOLERANCE) then
			Msg = "X coord of node <> line end point"
			call loggit(Msg)
		end if
		if (abs(NodeY - Y) > SNAP_TOLERANCE) then
			Msg = "Y coord of node <> line end point"

			call loggit(Msg)
		end if
		exit sub

	else
		create point into variable NewPoint (X, Y) symbol(34,0,4)
		Insert into TName (
			obj,
			Node,
			XCoord,
			YCoord,
			NodeType,
			HasSpecLink,
			HasSpecNode
		) values (

			NewPoint,
			NodeKey,
			X,
			Y,
			NType,
			"F",
			"F"
		)
		
	end if

	close table _GotNode

End Sub

Sub CommitAppend(ByVal TName as string)
Dim		TotalRecs as integer
Dim		OKRecs as integer
Dim		Msg as string

	'print "In COmmitAppend()"
	Select * from TName
	into _CommitRecs
	TotalRecs = TableInfo(_CommitRecs, TAB_INFO_NROWS)
	
	Select * from TName
		where AuditOK2GO = TRUE
	into _OKRecs
	OKRecs = TableInfo(_OKRecs, TAB_INFO_NROWS)
	close table _OKRecs

	if TotalRecs <> OKRecs then
		close table _CommitRecs
		'JHB Throw error
		Error 699
		exit sub
	end if

	msg = "There are " & str$(TotalRecs) & " to be appended."
	call loggit(msg)

	Select max(LinkID)
	from		mdl_Links
	into		_MaxID

	mMaxLinkID = _MaxID.col1
	close table _MaxID

	Fetch First from _CommitRecs
	mLinkCount = 0
	mDateStamp = FormatDate$(CurDate()) & " " & time(24)

	ProgressBar   "Appending links ..." 
			Calling   AppendOneLink  
			Range   TotalRecs 


	close table _CommitRecs

End Sub

Sub OpenWarnBrowser(ByVal TName as string)
		Select * from TName
		where AuditOK2GO = "T"
			and (AuditNodeID <> "" or AuditDups <> "" or AuditSpatial <> "")
		into _Warned
		Browse USNode, DSNode, AuditNodeID, AuditDups, AuditSpatial,AuditOK2Go from _Warned		
End Sub
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
'
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
Sub OpenFailBrowser(ByVal TName as string)
		Select * from TName
		where AuditOK2GO <> "T"
		into _Failed
		Browse USNode, DSNode, AuditNodeID, AuditDups, AuditSpatial,AuditOK2Go from _Failed		
End Sub
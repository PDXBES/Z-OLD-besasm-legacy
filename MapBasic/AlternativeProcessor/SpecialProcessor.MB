include "MapBasic.def"
'include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\Common\Inc\EMGGlobal.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\Common\Inc\EMGToolGlobal.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\Common\Inc\EMGLogger.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\Common\Inc\EMGOpenUtils.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\Common\Inc\EMGMTabUtil.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\Common\Inc\INIUtils.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\Workbench\Inc\EMGInit.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\LinkTool\Inc\EMGLinkColData.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\common\inc\EMGCoordSys.def"

Declare Sub Main()
'Declare Sub EndHandler()

'Required for all Framework MBX Apps
Declare Sub ExitApplication()
Declare Sub Function_Menu()

'Globals required for all Framework Apps
Global gReturnStatus as String
Global gDebugMode as Logical

'Functions specific to this Framework App
Declare Sub UpdateSpecialLinks
Declare Sub DeleteSpecialLinks
Declare Sub CheckSpecialLinks
Declare Sub AppendSpecialLinks
Declare Sub SetupSpecialLinkProcessor
DECLARE SUB ExtractAltLinkID
Declare Sub SetAllLineStyles()
Declare Function AlterLineStyle(ByVal oLine As Object, ByVal pNew As Pen) As Object
Declare Function IsTableOpened(ByVal sTab As String) As Logical
Declare Function InsertColumnRatedBy () as Logical

'EMGAATS Link Append prototypes
Declare Sub AddLinkCheck(ByVal TName as string)
Declare Sub CheckOneLink
Declare Function IsInt(byval InString as string) as logical
Declare Function IsAlpha(byval InString as string) as logical
Declare Sub CommitAppend(ByVal TName as string)
Declare	Sub	OpenWarnBrowser(ByVal TName as string)
Declare	Sub	OpenFailBrowser(ByVal TName as string)


'Globals specific to this Framework App
global gOutputModelPath as String
global gBaseModelPath AS String
global gLinkAlternative as String
global gAltSpecLinks as String
global gAltSpecLinkData as String
global gAltPumpCurves as String
Global gTempDir as String
Global gAltID as Integer
Global gErrorCheckPath as String



'--------------------------------------------------------
Sub	Main() 
	gReturnStatus="Initialized"	
	OnError GoTo ErrorHandler
	Call InitHousekeeping		' have to init some globals before we can say hello
  Call InitOpenUtilGlobals  ' this sets up table names for the EMGOpenUtils functions
	
	Call Function_Menu
	
	Exit Sub
	
	ErrorHandler:
		gReturnStatus = "Error: " + Err()		
		OnError GoTo 0
		Error Err()
	
End	Sub
'---------------------------------------------------------
Sub	Function_Menu() 'Required for all Framework MBX apps

Create Menu	"Function Menu"	as 
	"Setup Special Link Processor" ID 10003 calling SetupSpecialLinkProcessor,	
	"Delete Special Link Alternatives" ID 10001 calling DeleteSpecialLinks,
	"Update Special Link Alternatives" ID 10002 calling UpdateSpecialLinks,
	"Check Special Link Alternatives" ID 10004 calling CheckSpecialLinks,
	"Append Special Link Alternatives" ID 10000 calling AppendSpecialLinks,	
	"Exit MBX Application" ID 9999 calling ExitApplication 'Required for all Framework MBX apps

  Alter	Menu Bar Remove	ID 6, ID 7 
  Alter	Menu Bar Add "Function Menu", ID 6,	ID 7

End	Sub
'---------------------------------------------------------
Sub ExitApplication()	
	
	Close All		
	End Program
End Sub
'---------------------------------------------------------
Sub SetupSpecialLinkProcessor

	gReturnStatus="Entered SetupSpecialLinkProcessor()"	
	gmdlINIfullpath = gOutputModelPath
	call InitOpenUtilGlobals()
	Call SetStdCoordSys()
	
	dim mdlIndex(6) as integer
	mdlIndex(1) = NDX_MDL_LINKS
	mdlIndex(2) = NDX_MDL_NODES 				
	mdlIndex(3) = NDX_MDL_DIRSC 				
	mdlIndex(4) = NDX_MDL_SURFSC
	mdlIndex(5) = NDX_MDL_SPECLINKS
	mdlIndex(6) = NDX_MDL_SPECLINKDATA
	
	dim result as integer
	result = setOKToOpen(gmdlFiles, mdlIndex)	

	result = setAllowWrite(gmdlFiles, mdlIndex)
	result = ReallyOpenModel()
	gReturnStatus="Succesfully called SetupSpecialLinkProcessor()"	
End Sub
'---------------------------------------------------------
Sub DeleteSpecialLinks
	
	gReturnStatus="Entered DeleteSpecialLinks()"	
		
	'Open Table gLinkAlternative as LinkAlternative
	Open Table gAltSpecLinks as AltSpecLinks
	'Open Table gMdlSpecLinks as mdl_SpecLinks
	Select * from AltSpecLinks where Operation="DEL" into Alt_SpecDelete	
	
	'If there are no special links to delete, then leave this sub
	If TableInfo(Alt_SpecDelete, TAB_INFO_NROWS) = 0 Then
		Print "No links for delete."
		gReturnStatus = "No links for delete."
		Exit Sub
	End If
	
	'Output how many links this sub intends to delete
	Print "Found " & SelectionInfo(SEL_INFO_NROWS) & " links for deletion."
	
	'save this table out, close it, and re-open it.  This allows us
	'to perform operations on selections from a main table without
	'changing the entries that exist in the main table.
	Commit Table Alt_SpecDelete As gTempDir & "Alt_SpecDelete.tab" TYPE NATIVE Charset "WindowsLatin1"
	Close Table Alt_SpecDelete
	Open Table gTempDir & "Alt_SpecDelete.tab"
	
	'counting the number of entries to delete
	dim deleteCount as integer
	deleteCount = TableInfo(Alt_SpecDelete, TAB_INFO_NROWS)
	
	DIM iTheSpecID AS Integer
	'Get the links from mdl_SpecLinks that we neeed to delete
	Select mdl_SpecLinks.SLID, mdl_SpecLinks.SpecLinkType, alt_SpecDelete.AltSpecLinkID FROM mdl_SpecLinks, alt_SpecDelete WHERE mdl_SpecLinks.SLID = alt_SpecDelete.MdlSpecLinkID INTO mdl_SpecLinks_delete

	'Get the entries from mdl_SpecLinkData that we neeed to delete
	SELECT mdl_SpecLinkData.SLID, AltSpecLinks.MdlSpecLinkID FROM mdl_SpecLinkData, AltSpecLinks WHERE mdl_SpecLinkData.SLID = AltSpecLinks.MdlSpecLinkID INTO mdlSpecLinkData_delete

	'Mark all of the objects we are going to delete with an 'X' in the SpecLinkType field
	Update mdl_SpecLinks_delete SET SpecLinkType = "X"
	Select * from mdl_SpecLinks WHERE SpecLinkType = "X" into qryDelete
	
	'Keep track of how many records are actually getting deleted, then delete them and save the tables
	dim actualDelete as Integer
	actualDelete = TableInfo(qryDelete, TAB_INFO_NROWS)
	Delete From qryDelete
	'DELETE FROM mdlSpecLinkData_delete
	COMMIT TABLE mdl_SpecLinkData
	Commit Table mdl_SpecLinks

	Pack Table mdl_SpecLinks Data
	Pack Table mdl_SpecLinkData Data	
	
	'If there is a discrepancy in the amount of records deleted cs the amount of records
	'we intended to delete, then place the records which were not deleted into a new
	'table, 'delete_failed'
	If actualDelete <> deleteCount Then
		Select * From mdl_SpecLinks_delete Where SpecLinkType <> "X" Into delete_failed		
		Commit Table delete_failed as gErrorCheckPath & "\SpecLink_Delete_Failed.tab"
		CLOSE TABLE delete_failed
	End If		
	
	gReturnStatus = "Found " & Str$(deleteCount) & " special link(s) specified for deletion. Succesfully deleted " & Str$(actualDelete) & " special link(s)."
	CLOSE TABLE alt_SpecDelete
	'CLOSE TABLE qryDelete
End Sub
'---------------------------------------------------------
Sub UpdateSpecialLinks

	gReturnStatus="Entered Update Special Links()"	
	'Open Table gLinkAlternative as LinkAlternative
	Open Table gAltSpecLinks as AltSpecLinks
	Open Table gAltSpecLinkData AS AltSpecLinkData
	'Open Table gMdlSpecLinks as mdl_SpecLinks
	'Open Table gMdlSpecLinkData AS mdl_SpecLinkData
	Open Table gAltPumpCurves AS AltPumpCurves

	'Open the pumpcurves table from the access database
	Register Table gOutputModelPath & "mdbs\LookupTables.mdb"  Type ACCESS Table "PumpCurves" Into gTempDir & "PumpCurves.TAB"
	Open Table gTempDir & "PumpCurves.TAB" AS mdl_PumpCurves Interactive	
	
	'Get all of the records that the model intends to update
	Select * from AltSpecLinks where Operation="UPD" into Alt_SpecUpdate	
	
	'If there are no records that the model needs to update, just exit this sub
	If TableInfo(Alt_SpecUpdate, TAB_INFO_NROWS) = 0 Then
		Print "No links for update."
		gReturnStatus = "No links for update."
		'CLOSE TABLE Alt_SpecUpdate
		'CLOSE TABLE AltSpecLinks
		'CLOSE TABLE mdl_SpecLinks
		'CLOSE TABLE mdl_SpecLinkData
		'CLOSE TABLE AltPumpCurves
		'CLOSE TABLE mdl_PumpCurves
		Exit Sub
	End If

	'Output the number of entries that the model intends to update
	Print "Found " & SelectionInfo(SEL_INFO_NROWS) & " links for tabular update."

	'save this table out, close it, and re-open it.  This allows us
	'to perform operations on selections from a main table without
	'changing the entries that exist in the main table.
	Commit Table Alt_SpecUpdate As gTempDir & "Alt_SpecUpdate.TAB" TYPE NATIVE Charset "WindowsLatin1"
	Close Table Alt_SpecUpdate
	Open Table gTempDir & "Alt_SpecUpdate.TAB"
	Print "1"
	
	'Select all of the entries that we are going to update
	Select Alt_SpecUpdate.MdlSpecLinkID "MdlSpecLinkID", AltSpecLinkData.AltSpecLinkDataID, AltSpecLinkData.AltSpecLinkID, AltSpecLinkData.Tag, AltSpecLinkData.Value FROM AltSpecLinkData, Alt_SpecUpdate WHERE AltSpecLinkData.AltSpecLinkID = Alt_SpecUpdate.AltSpecLinkID INTO Alt_SpecDataUpdate
	
	'Output the number of entries scheduled for update
	Print "Found " & SelectionInfo(SEL_INFO_NROWS) & " entries for data update."
	
	'save this table out, close it, and re-open it.  This allows us
	'to perform operations on selections from a main table without
	'changing the entries that exist in the main table.
	Commit Table Alt_SpecDataUpdate As gTempDir & "Alt_SpecDataUpdate.TAB" TYPE NATIVE Charset "WindowsLatin1"
	Close Table Alt_SpecDataUpdate
	Open Table gTempDir & "Alt_SpecDataUpdate.TAB"
	Print "1.1"
	
	'Get the new info for the mdl_SpecLinks Table
	'Nodes don't change on updates
	'ToLinkID doesn't change on updates
	'ToLinkNDX
	Select Alt_SpecUpdate.SpecLinkIndex "newSpecLinkIndex", mdl_SpecLinks.ToLinkNDX from mdl_SpecLinks, Alt_SpecUpdate WHERE mdl_SpecLinks.SLID = Alt_SpecUpdate.MdlSpecLinkID into mdl_SpecLinks_update_SpecLinkIndex
	Update mdl_SpecLinks_update_SpecLinkIndex Set ToLinkNDX = newSpecLinkIndex
	'SpecLinkType
	Select Alt_SpecUpdate.SpecLinkType "newSpecLinkType", mdl_SpecLinks.SpecLinkType FROM mdl_SpecLinks, Alt_SpecUpdate WHERE mdl_SpecLinks.SLID = Alt_SpecUpdate.MdlSpecLinkID into mdl_SpecLinks_update_type
	Update mdl_SpecLinks_update_type Set SpecLinkType = newSpecLinkType	
	'MSpecLinkID goes to zero
	Select mdl_SpecLinks.MSpecLinkID from mdl_SpecLinks, Alt_SpecUpdate WHERE mdl_SpecLinks.SLID = Alt_SpecUpdate.MdlSpecLinkID into mdl_SpecLinks_update_MSpecLinkID
	Update mdl_SpecLinks_update_MSpecLinkID Set MSpecLinkID = 0
	'IsActive wont change
	'SLID will not change
	'SLNode will not change
	
	'Get the new info for the mdl_SpecLinkData table
	'Node will not change
	'ToLinkID will not change
	'ToLinkNDX will not change on update
	'Tag will not change
	'TValue will change
	Select Alt_SpecDataUpdate.Value "newTValue", mdl_SpecLinkData.TValue FROM mdl_SpecLinkData, Alt_SpecDataUpdate WHERE mdl_SpecLinkData.SLID = Alt_SpecDataUpdate.MdlSpecLinkID AND mdl_SpecLinkData.tag = Alt_SpecDataUpdate.tag into mdl_SpecLinkData_update_TValue
	Update mdl_SpecLinkData_update_TValue Set TValue = newTValue
	'NValue will not change
	'SLID will not change
				
	Print "3"
	
	'Commit all of the important tables we just modified
	Commit Table mdl_SpecLinks
	Commit Table mdl_SpecLinkData
	Commit Table mdl_PumpCurves
	
	'count how many updates we intended to do
	dim updateCount as integer
	updateCount = TableInfo(Alt_SpecUpdate, TAB_INFO_NROWS)
	'count how many updates we actually did
	dim actualUpdate as integer
	actualUpdate = TableInfo(mdl_SpecLinks_update_type, TAB_INFO_NROWS)
	
	'if the number of updates we intended to do is different from the
	'number of updates we actually did, then tell the user and save out a table that
	'lists the updates that did not occur correctly.
	If actualUpdate <> updateCount Then
		Select * From Alt_SpecUpdate, mdl_SpecLinks where Alt_SpecUpdate.MdlSpecLinkID = mdl_SpecLinks.SLID
		Run Menu Command 311 'M_QUERY_INVERTSELECT
		Select * From Selection into update_failed
		Commit Table update_failed as gErrorCheckPath & "\SpecialLink_Update_Failed.tab"
	End If	

	gReturnStatus = "Found " & Str$(updateCount) & " special link(s) specified for update. Succesfully updated " & Str$(actualUpdate) & " special link(s)."
	Print gReturnStatus
End Sub
'---------------------------------------------------------
Sub AppendSpecialLinks
	gReturnStatus="Entered AppendSpecialLinks()"
		
	Open Table gAltPumpCurves AS AltPumpCurves
	IF IsTableOpened("AltPumpCurves") = true THEN
		'Now, the pumpcurves table.  This should just be a straight append
		DIM uselessVariable as Logical
		'make sure the ratedBy column is included in the table we are appending to
		'I'm not sure why I added this column, maybe I was having trouble with just
		'passing the model table an integer?
		uselessVariable = InsertColumnRatedBy()
		Update AltPumpCurves Set Rated_By = 4
		COMMIT TABLE AltPumpCurves
		
		'Update all the pump curves that are already in the model.  I think that this entire
		'procedure is legacy now, because ultimately I wanted to make sure that any change to
		'a pump would require a new pump name.  The reason is due to the fact that the modeler
		'may want to switch between pump ratings without having to create entire new models or
		'edit the entire curve through SWMM.  This code is kept though, just in case someone
		'bypasses the rules.
		SELECT mdl_PumpCurves.PumpType FROM mdl_PumpCurves WHERE mdl_PumpCurves.PumpType IN (SELECT PumpType FROM  AltPumpCurves) into CurvesUpdate
		DELETE FROM CurvesUpdate
		COMMIT TABLE mdl_PumpCurves
		PACK TABLE mdl_PumpCurves
		CLOSE TABLE CurvesUpdate

		INSERT INTO mdl_PumpCurves (PumpType, Index, Rating, Flow, Rated_By)
			SELECT PumpType, Index, Rating, Flow, Rated_By FROM AltPumpCurves
		
		COMMIT TABLE mdl_PumpCurves
	END IF
	
	'If there are no special links to append, just exit the sub
	IF  TableInfo(Alt_SpecAppend, TAB_INFO_NROWS) = 0 THEN
		Print "No special links to append"
		Exit Sub
	END IF
	
	'Since all the data is ok, prepare the new tables for appending
	'First append the alt_specLinks table
	'I need the Node, ToLinkID, and SLID
	'The Node can be found using the AltLinkID.  We will not have the alt_links table available to us
	'when we are appending these values, so we will have to use the mdl_links table, in the Source column
	'First, get a list of the AltLinkIDs that are in the alt_Speclinks table
	'Update alt_SpecLinks in order to accomodate for gAltID

	'get the list of altID source numbers
	CALL ExtractAltLinkID
	
	'SLID needs to be in the append, but it cannot be allowed to share any other SLID within the same model
	'In order to do this, I will call SLID of new altSpecLinks to be equal to the Max SLID from mdl_specLinks + AltSpecLinkID
	SELECT MAX(SLID) "max" FROM mdl_SpecLinks INTO CloseMe
	DIM theMax AS Integer
	theMax = CloseMe.max
	CLOSE TABLE CloseMe
	'Now the table mdl_links_extracted holds the model link ID of the alt link we are interested in
	'Now we need the column 'Node', which represents the updstream node of the pipe in master links
	'The connection between these tables is alt_speclinks.AltLinkID-> mdl_links_extracted.ExtractedAltLinkID.
	Update Alt_SpecAppend Set AltSpecLinkID = AltSpecLinkID + theMax
	
	COMMIT TABLE Alt_SpecAppend
	COMMIT TABLE Alt_SpecDataAppend
	
	Alter Table Alt_SpecAppend (RENAME SpecLinkIndex ToLinkNDX)
	Alter Table Alt_SpecAppend (RENAME AltSpecLinkID SLID)

	'This is redundant but that's how life goes
	Alter Table Alt_SpecAppend (ADD Node char(6), ToLinkID Integer, MSpecLinkID Integer, IsActive Logical)
	Alter Table Alt_SpecDataAppend (ADD NValued Integer, Node char(6), ToLinkID Integer, ToLinkNDX Integer, NValue Integer, SLID Integer)
	
	Add Column Alt_SpecAppend (Node) FROM mdl_links_extracted SET TO USNode WHERE AltLinkID = ExtractedAltLinkId
	Add Column Alt_SpecAppend (ToLinkID) FROM mdl_links_extracted SET TO LinkID WHERE AltLinkID = ExtractedAltLinkId
	Update Alt_SpecAppend Set MSpecLinkID = 0
	Update Alt_SpecAppend Set IsActive = true
	
	COMMIT TABLE Alt_SpecAppend
	
	'Now the alt_SpecLinkData table needs to get ready for appending
	'Add the 'SLID' Column
	Update Alt_SpecDataAppend Set SLID = AltSpecLinkID + theMax
	COMMIT TABLE Alt_SpecDataAppend
	Add Column Alt_SpecDataAppend (Node) FROM Alt_SpecAppend SET TO Node WHERE SLID = SLID
	Add Column Alt_SpecDataAppend (ToLinkID) FROM Alt_SpecAppend SET TO ToLinkID WHERE SLID = SLID
	Add Column Alt_SpecDataAppend (ToLinkNDX) FROM Alt_SpecAppend SET TO ToLinkNDX WHERE SLID = SLID
	Update Alt_SpecDataAppend Set NValue = 0 
	
	COMMIT TABLE Alt_SpecDataAppend
	
	Alter Table Alt_SpecAppend (DROP MdlSpecLinkID, AltLinkID, Operation)
	
	COMMIT TABLE Alt_SpecAppend

	INSERT INTO mdl_SpecLinks(Node, ToLinkID, ToLinkNDX, SpecLinkType, MSpecLinkID, IsActive, SLID, SLNode)
	 SELECT Node, ToLinkID, ToLinkNDX, SpecLinkType, MSpecLinkID, IsActive, SLID, SLNode FROM Alt_SpecAppend
	
	COMMIT TABLE mdl_SpecLinks
	IF  TableInfo(Alt_SpecDataAppend, TAB_INFO_NROWS) = 0 THEN
		Print "No special data to append"
		Exit Sub
	END IF
	
	COMMIT TABLE Alt_SpecDataAppend
	
	Alter Table Alt_SpecDataAppend (DROP AltSpecLinkDataID, AltSpecLinkID)
	Alter Table Alt_SpecDataAppend (RENAME Value TValue)
	
	'Alt_SpecDataAppend
	INSERT INTO mdl_SpecLinkData (Node, ToLinkID, ToLinkNDX, Tag, TValue, NValue, SLID)
	 SELECT Node, ToLinkID, ToLinkNDX, Tag, TValue, NValue, SLID FROM Alt_SpecDataAppend
	
	COMMIT TABLE mdl_SpecLinkData
	
	gReturnStatus="Succesfully called AppendLinks()"
			
End Sub
'---------------------------------------------------------
Sub CheckSpecialLinks
	'The problem that needs to be solved here is that appends will always be placed upon
	'alternate links.  The alternate link append tool will most likely be run before the
	'alternate special link append tool.  This is the 'SOURCE' column.  The source column
	'shows a #.# format, which is the altModelNumber.altLinkID.  This will be the only
	'way to know what link our alt_specLink is going to.
	gReturnStatus="Entered CheckSpecialLinks()"	
	'The number of our model is gAltID
		
	Open Table gAltSpecLinks as AltSpecLinks
	Open Table gAltSpecLinkData as AltSpecLinkData
	Open Table gAltPumpCurves as AltPumpCurves

	'Get the records we intend to add
	Select * from AltSpecLinks WHERE Operation="ADD" into Alt_SpecAppend
	Select * FROM AltSpecLinkData WHERE AltSpecLinkID IN (Select AltSpecLinkID FROM alt_SpecAppend) INTO Alt_SpecDataAppend
	
	If TableInfo(Alt_SpecAppend, TAB_INFO_NROWS) = 0 Then
		Print "No special links for pre-append."
		gReturnStatus = "No special links for pre-append."
		Exit Sub
	End If
	If TableInfo(Alt_SpecDataAppend, TAB_INFO_NROWS) = 0 Then
		Print "No special links for pre-append."
		gReturnStatus = "No special links for pre-append."
		Exit Sub
	End If
	
	Print "Found " & SelectionInfo(SEL_INFO_NROWS) & " special links for adding."

	Commit Table Alt_SpecAppend As gTempDir & "Alt_SpecAppend.TAB" TYPE NATIVE Charset "WindowsLatin1"
	Close Table Alt_SpecAppend
	Open Table gTempDir & "Alt_SpecAppend.TAB"
	
	Commit Table Alt_SpecDataAppend As gTempDir & "Alt_SpecDataAppend.TAB" TYPE NATIVE Charset "WindowsLatin1"
	Close Table Alt_SpecDataAppend
	Open Table gTempDir & "Alt_SpecDataAppend.TAB"

	'First I need to check that the special links are capable of being put into
	'the model.  This requires me knowing if the altLink that the special
	'link is going into is in the model.  I also need to know if there are any
	'special links going to the same link which also share the same special
	'link index.
	'For the special links data, nothing really needs to be done, but it wouldn't
	'hurt to check for pre-existing duplicates if I get the time.
	'For the pump curves table, I need to make sure that there are no other pumps
	'going under the exact same name as the one that is in the alt_pumpcurves table
		
	Commit Table Alt_SpecAppend	
	'Look through all of the add objects, checking each column for errors.
	'First check alt_SpecLinks
	'MdlSpecLinkID should be '0' for every add
	SELECT * FROM Alt_SpecAppend WHERE MdlSpecLinkID <> 0 INTO ADDS_FAILED_MdlSpecLinkID_NotZero
	'AltLinkID should not be less than 1
	SELECT * FROM Alt_SpecAppend WHERE AltLinkID < 1 INTO ADDS_FAILED_AltLinkID_NonPositive
	'AltLinkID should not be duplicated	
	SELECT AltLinkID, Count(*) FROM Alt_SpecAppend GROUP BY AltLinkID INTO DupCheck
	SELECT * FROM Alt_SpecAppend WHERE AltLinkID IN (SELECT AltLinkID FROM DupCheck WHERE Count > 1) INTO ADDS_FAILED_AltLinkID_Duplicates
	Close Table DupCheck
	'SpecLinkIndex should not be less than 1
	SELECT * FROM Alt_SpecAppend WHERE SpecLinkIndex < 1 INTO ADDS_FAILED_SpecLinkIndex_NonPositive
	'SpecLinkIndex should not be duplicated when coming from the same SLNode
	SELECT SLNode, SpecLinkIndex, AltSpecLinkID, Count(*) FROM Alt_SpecAppend GROUP BY SLNode, SpecLinkIndex INTO DupCheck
	SELECT * FROM Alt_SpecAppend WHERE AltSpecLinkID IN (SELECT AltSpecLinkID FROM DupCheck WHERE Count > 1) INTO ADDS_FAILED_SpecLinkIndex_Duplicates
	Close Table DupCheck
	'SpecLinkType must be one of WS, WT, PS, OB, OS.  There are no other allowable types
	SELECT * FROM Alt_SpecAppend WHERE SpecLinkType NOT IN ("WS", "WT", "PS", "OB", "OS") INTO ADDS_FAILED_SpecLinkType_Unrecognized
	
	'Second check the alt_SpecLinkData table
	'AltSpecLinkID should only come in sets of 7 or 10
	SELECT AltSpecLinkID, Count(*) FROM Alt_SpecDataAppend GROUP BY AltSpecLinkID INTO DupCheck
	SELECT * FROM Alt_SpecDataAppend WHERE AltSpecLinkID IN (SELECT AltSpecLinkID FROM DupCheck WHERE Count <> 7 AND Count <> 10 AND Count <> 8) INTO ADDS_FAILED_AltSpecLinkID_WrongNumberOfEntries
	Close Table DupCheck
	
	'Third check the pump tables
	'There can be no duplicate indexes for any given pumptype
	'IF IsTableOpened("AltPumpCurves") = true THEN
		'If TableInfo(AltPumpCurves, TAB_INFO_NROWS) <> 0 Then
			'SELECT PumpType, Index, Count(*) FROM AltPumpCurves GROUP BY PumpType, Index INTO DupCheck
			'SELECT * FROM AltPumpCurves WHERE PumpType IN (SELECT PumpType FROM DupCheck WHERE Count > 1) INTO ADDS_FAILED_pumpcurves_DuplicateIndexes
			'IF TableInfo(ADDS_FAILED_pumpcurves_DuplicateIndexes, TAB_INFO_NROWS) <> 0 THEN
				'Browse * From ADDS_FAILED_pumpcurves_DuplicateIndexes
				'EXIT SUB
			'END IF
			'Close Table DupCheck
		'End If
	'END IF
	
	
	'If there are objects in the tables just created, exit the sub
	IF 	TableInfo(ADDS_FAILED_MdlSpecLinkID_NotZero, TAB_INFO_NROWS) <> 0 OR 
			TableInfo(ADDS_FAILED_AltLinkID_NonPositive, TAB_INFO_NROWS) <> 0 OR 
			TableInfo(ADDS_FAILED_AltLinkID_Duplicates, TAB_INFO_NROWS) <> 0 OR 
			TableInfo(ADDS_FAILED_SpecLinkIndex_NonPositive, TAB_INFO_NROWS) <> 0 OR 
			TableInfo(ADDS_FAILED_SpecLinkIndex_Duplicates, TAB_INFO_NROWS) <> 0 OR 
			TableInfo(ADDS_FAILED_AltSpecLinkID_WrongNumberOfEntries, TAB_INFO_NROWS) <> 0 OR 			 
			TableInfo(ADDS_FAILED_SpecLinkType_Unrecognized, TAB_INFO_NROWS) <> 0 THEN 
				Note "Add special links failed"
				Browse * From ADDS_FAILED_MdlSpecLinkID_NotZero
				Browse * From ADDS_FAILED_AltLinkID_NonPositive
				Browse * From ADDS_FAILED_AltLinkID_Duplicates
				Browse * From ADDS_FAILED_SpecLinkIndex_NonPositive
				Browse * From ADDS_FAILED_SpecLinkIndex_Duplicates
				Browse * From ADDS_FAILED_AltSpecLinkID_WrongNumberOfEntries
				Browse * From ADDS_FAILED_SpecLinkType_Unrecognized
				Exit Sub
	END IF
End Sub
'--------------------------------------------------------
Sub ExtractAltLinkID

	gReturnStatus="Entered ExtractAltLinkID()" 
	Add Column mdl_links (ExtractedAltLinkId Integer) From mdl_links Set To Val(Right$(Source, Len(Source)-InStr(1, Source, ".")))
	Add Column mdl_links (ExtractedAltId Integer) From mdl_links Set To Val(Left$(Source, InStr(1, Source, ".") - 1))
	Select * From mdl_links Where ExtractedAltID = gAltId Into mdl_links_extracted

	Commit Table mdl_links_extracted As gTempDir & "mdl_links_extracted.tab"
	 If TableInfo(mdl_links_extracted, TAB_INFO_NROWS) = 0 Then
  	Exit Sub
   End If

	Close Table mdl_links_extracted
	Open Table gTempDir & "mdl_links_extracted.tab"
End Sub
'--------------------------------------------------------
Function IsTableOpened (ByVal sTab As String) 'Name of (possibly) open table 
as logical 'TRUE is table is open

	dim i as smallint

	OnError goto Trap
	i = TableInfo (sTab, TAB_INFO_NUM)
	IsTableOpened = TRUE
exit function

Trap:
	IsTableOpened = FALSE
End Function
'--------------------------------------------------------
Function InsertColumnRatedBy () 
as logical 'TRUE means we added the column
	OnError goto Trap

	dim i as smallint
	
	'look through the list of columns for the column name 'Rated_By'
	for i = 1 to TableInfo(AltPumpCurves, TAB_INFO_NCOLS)
		if ColumnInfo(AltPumpCurves,"col" & i,COL_INFO_NAME) = "Rated_By" then
			InsertColumnRatedBy = FALSE
			exit function
		end if
	next
	
	Alter Table AltPumpCurves (ADD Rated_By Integer)
	
	InsertColumnRatedBy = TRUE
exit function

Trap:
	InsertColumnRatedBy = FALSE
End Function
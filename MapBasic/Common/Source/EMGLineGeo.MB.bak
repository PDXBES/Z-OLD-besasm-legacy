'
'	Support line geography and geometry
'
include "MapBasic.def"
include "..\inc\EMGLineGeo.def"
include "..\inc\EMGGlobal.def"
include "..\inc\EMGLogger.def"

' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  
'	Some local (private) defines
DEFINE		SNAP_TOLERANCE .5			'	This will be feet most of the time... depends on working coordsys

' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  
'	CalcEnds
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  
Function CalcEnds(TheLine as object, BegX as float, BegY as float, EndX as float, EndY as float) as logical
dim ObjType as integer
dim NumSects as integer
dim LastNode as integer

CalcEnds = false
ObjType = ObjectInfo(TheLine, OBJ_INFO_TYPE)

Do Case ObjType
	Case OBJ_TYPE_LINE
		 BegX = ObjectGeography(TheLine, OBJ_GEO_LINEBEGX)
		 BegY = ObjectGeography(TheLine, OBJ_GEO_LINEBEGY)
		 EndX = ObjectGeography(TheLine, OBJ_GEO_LINEENDX)
		 EndY = ObjectGeography(TheLine, OBJ_GEO_LINEENDY)
		 CalcEnds = True

	Case OBJ_TYPE_PLINE
		' get the  beginning and end points of the intersection PLine
		BegX = ObjectNodeX(TheLine, 1, 1)
		BegY = ObjectNodeY(TheLine, 1, 1)
	    NumSects = ObjectInfo(TheLine,OBJ_INFO_NPOLYGONS)
		LastNode = ObjectInfo(TheLine,OBJ_INFO_NPOLYGONS + NumSects)
	  	EndX  = ObjectNodeX(TheLine, NumSects,LastNode)	' read x_coor of 2nd node in last segment
  		EndY  = ObjectNodeY(TheLine, NumSects,LastNode)	' read y_coor of 2nd node in last segment
		 CalcEnds = True

	Case Else
		CalcEnds = false
		gstrCurrentMessage = "unexpected object type in CalcEnds function"
		gstrReturnStatus = "ERROR"
		call loggit(gstrCurrentMessage)
end case

End Function
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  
'	Move Line End
'
'	Moves the end point of a line or polyline (last node) to the specified X,Y coordinates.
'
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  
Function MoveEnd(TheLine as object, EndX as float, EndY as Float) as logical
dim ObjType as integer
dim NumSects as integer
dim LastNode as integer

MoveEnd = False
ObjType = ObjectInfo(TheLine, OBJ_INFO_TYPE)

Do Case ObjType
	Case OBJ_TYPE_LINE
		Alter Object TheLine
			Geography OBJ_GEO_LINEENDX, EndX
		Alter Object TheLine
			Geography OBJ_GEO_LINEENDY, EndY
		 MoveEnd = True

	Case OBJ_TYPE_PLINE
	    NumSects = ObjectInfo(TheLine,OBJ_INFO_NPOLYGONS)
		LastNode = ObjectInfo(TheLine,OBJ_INFO_NPOLYGONS + NumSects)
		Alter Object TheLine
			Node Set Position NumSects, LastNode (EndX, EndY)		
		 MoveEnd = True

	Case Else
		MoveEnd = false
		gstrCurrentMessage = "unexpected object type in MoveEnd function"
		call loggit(gstrCurrentMessage)
end case
	
End Function
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  
'	Move Line Start
'
'	Moves the Start point of a line or polyline (last node) to the specified X,Y coordinates.
'
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  
Function MoveStart(TheLine as object, BegX as float, BegY as Float) as logical
dim ObjType as integer

MoveStart = False
ObjType = ObjectInfo(TheLine, OBJ_INFO_TYPE)

Do Case ObjType
	Case OBJ_TYPE_LINE
		Alter Object TheLine
			Geography OBJ_GEO_LINEBegX, BegX
		Alter Object TheLine
			Geography OBJ_GEO_LINEBegY, BegY
		 MoveStart = True

	Case OBJ_TYPE_PLINE
		Alter Object TheLine
			Node Set Position 1, 1 (BegX, BegY)		
		 MoveStart = True

	Case Else
		MoveStart = false
		gstrCurrentMessage = "unexpected object type in MoveStart function"
		gstrReturnStatus = "ERROR"
		call loggit(gstrCurrentMessage)
end case
	
End Function
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  
'	Figure out whether there is a node at a specified point
'	Input:
'		TheLine	a polyline object -- must have just one segment
'		ThePoint	a point object, possibly lying at one of the pline's nodes
'	Output:
'		TheMsg		an error message, if an error occurs
'		NodeFound	the node number of the "found" node
'		NodeDist	the distance (ft) from beginning of line to the node
'		NodeFract	the fraction (0 - 1 domain) of the total distance
'	Return:
'		True		node found, and NodeFound is the number of that node
'		False		node not found, TheMsg will have contents if there is an error and zero length if just not found
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  
Function NodeAtPoint (TheLine as object, ThePoint as object, TheMsg as string, NodeFound as integer, NodeDist as float, NodeFract as float) as logical
dim ObjType as integer
Dim	PointX, PointY as float
Dim	NumSects as integer
Dim	NumNodes as integer
Dim	LoopCount as integer
Dim	NodeX, NodeY as float
Dim	LastX, LastY as float
Dim	TotLength as float
Dim	LineLength as float
Dim	FractDist as float
Dim		BitLen as float

'Print	"in NodeAtPoint"

NodeAtPoint = false
TheMsg = ""

ObjType = ObjectInfo (TheLine, OBJ_INFO_TYPE)
if ObjType <> OBJ_TYPE_PLINE then
	TheMsg = "Object provided as line is not a polyline."
	call loggit( TheMsg)
	NodeAtPoint = false
	gstrCurrentMessage = TheMsg
	gstrReturnStatus = "ERROR"
	exit function
end if
'print "Pline OK"
ObjType = ObjectInfo(ThePoint, OBJ_INFO_TYPE)
if ObjType <> OBJ_TYPE_POINT then
	TheMsg = "Object provided as point is not a point."
	Call Loggit ( TheMsg)
	NodeAtPoint = false
	gstrCurrentMessage = TheMsg
	gstrReturnStatus = "ERROR"
	exit function
end if
'print "Point OK"
NumSects = ObjectInfo (TheLine, OBJ_INFO_NPOLYGONS)
If NumSects <> 1 then
	TheMsg = "Line object has more than one section."
	Call loggit( TheMsg)
	NodeAtPoint = false
	gstrCurrentMessage = TheMsg
	gstrReturnStatus = "ERROR"

	exit function
end if
'print "Ready to Roll..."
NumNodes = ObjectInfo(TheLine, OBJ_INFO_NPNTS)
'print "there are nodes: " & str$(NumNodes)

PointX = ObjectGeography(ThePoint, OBJ_GEO_POINTX)
PointY = ObjectGeography(ThePoint, OBJ_GEO_POINTY)
'print "The point is at " & str$(PointX) & ", " & str$(PointY)

TotLength = ObjectLen(TheLine, "ft")
LineLength = 0.0
LastX = 0.0
LastY = 0.0

'	Traverse the polyline, seeing if any node is really close (ie, "the same as") to our point...
For LoopCount = 1 to NumNodes
'	print "Loop Count: " & str$(LoopCount)
	NodeX = ObjectNodeX(TheLine, 1, LoopCount)
	NodeY = ObjectNodeY(TheLine, 1, LoopCount)
'	print "Got node coords: " & str$(NodeX) & ", " & str$(NodeY)
	If LastX <> 0 Then
'		Print "taking a bit"
		BitLen = distance(LastX, LastY,NodeX, NodeY, "ft")
		LineLength = LineLength + BitLen
'		print "Bit Len " & str$(BitLen) & " Length " & Str$(LineLength)
	end if
	LastX = NodeX
	LastY = NodeY


	If abs(PointX - NodeX  ) < SNAP_TOLERANCE and abs(PointY - NodeY) < SNAP_TOLERANCE then
'		print "really close"
		NodeFound = LoopCount
		if LineLength <> 0 then
			FractDist = LineLength / TotLength
		end if
		NodeDist = LineLength
		NodeFract = FractDist
		NodeAtPoint = True
'		print "Tot Len: " & str$(TotLength) & " Line " & str$(LineLength) & " fract " & FractDist
		exit function
	end if

Next

End Function
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  
'	Insert a node at a point that is on a polyline...
'		Assert:  the point is actually on the polyline.
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  
Function InsertNodeAtPoint(TheLine as object, ThePoint as object, TheMsg as string) as logical
Dim	PointX, PointY as float
Dim	NumSects as integer
Dim	NumNodes as integer
Dim	LoopCount as integer
Dim	X, Y as float
Dim	LastX, LastY as float
Dim	ObjType as integer
Dim	LineLength as float
Dim	DistToPoint as float
Dim	TotLength as float
Dim	FractDist as float
Dim	Short1, Short2 as integer
Dim	ShortDist1, ShortDist2 as float
Dim	FractDist1, FractDist2 as float
Dim		ThisBit as float

Dim	Short1X, Short1Y, Short2X, Short2Y as float

'print "Insert Node at Point"
InsertNodeAtPoint = False
TheMsg = ""

ObjType = ObjectInfo (TheLine, OBJ_INFO_TYPE)
if ObjType <> OBJ_TYPE_PLINE then
	TheMsg = "Object provided as line is not a polyline."
	call loggit (TheMsg)
	gstrCurrentMessage = TheMsg
	gstrReturnStatus = "ERROR"

	exit function
end if
'print "Pline OK"
ObjType = ObjectInfo(ThePoint, OBJ_INFO_TYPE)
if ObjType <> OBJ_TYPE_POINT then
	TheMsg = "Object provided as point is not a point."
	call loggit (TheMsg)
	gstrCurrentMessage = TheMsg
	gstrReturnStatus = "ERROR"
	exit function
end if
'print "Point OK"
NumSects = ObjectInfo (TheLine, OBJ_INFO_NPOLYGONS)
If NumSects <> 1 then
	TheMsg = "Line object has more than one section."
	call loggit (TheMsg)
	gstrCurrentMessage = TheMsg
	gstrReturnStatus = "ERROR"
	exit function
end if
NumNodes = ObjectInfo(TheLine, OBJ_INFO_NPNTS)

'print "NumNodes: " & str$(NumNodes)
PointX = ObjectGeography(ThePoint, OBJ_GEO_POINTX)
PointY = ObjectGeography(ThePoint, OBJ_GEO_POINTY)

'
'	Run through all the nodes, recording information about each of them.
'

'Create Table _TempNodes (
'	NodeNum		intege,
'	NodeX		float,
'	NodeY		float,
'	Dist2Beg		float,
'	FractLen		float,
'	Dist2Point		float
')

LineLength = 0.0
LastX = 0.0
LastY = 0.0
ShortDist1 = 9999999.0
ShortDist2 = 9999999.0

TotLength = ObjectLen(TheLine, "ft")
'print "Line: tot length " & str$(TotLength)
For LoopCount = 1 to NumNodes

	print "LoopCount: " & str$(LoopCOunt)

	X = ObjectNodeX(TheLine, 1, LoopCount)
	Y = ObjectNodeY(TheLine, 1, LoopCount)
	If LastX <> 0.0 Then
		ThisBit = distance(LastX, LastY, X, Y, "ft")
		LineLength = LineLength + ThisBit
		Print "Line: Bit = " & str$(ThisBit) & " Len = " & str$(LineLength)
	end if
	LastX = X
	LastY = Y

	DistToPoint = Distance(X, Y, PointX, PointY, "ft")
	FractDist = LineLength / TotLength

	Print "DistToPoint = "+DistToPoint+"; ShortDist1 = "+ShortDist1+"; ShortDist2 = "+ShortDist2
	Print "Short2 = "+Short2+"; Short1 = "+Short1
	if DistToPoint < ShortDist1 then
		'	move 1 to 2
		Short2 = Short1
		ShortDist2 = ShortDist1
		FractDist2 = FractDist1

		' 	install new 1
		Short1 = LoopCount
		ShortDist1 = DistToPoint
		FractDist1 = FractDist
	else
		if DistToPoint < ShortDist2 then
			Short2 = LoopCount
			ShortDist2 = DistToPoint
			FractDist2 = FractDist
		end if
	end if
	Print "Short2 = " + Short2 + "; Short1 = " + Short1
	Print "DistToPoint = "+DistToPoint+"; ShortDist1 = "+ShortDist1+"; ShortDist2 = "+ShortDist2

'	Insert into _TempNodes (
'		NodeNum,
'		NodeX,
'		NodeY,
'		Dist2Beg,
'		FractLen,
'		Dist2Point
'	) values (
'		LoopCount,
'		X,
'		Y,
'		LineLength,
'		FractDist,
'		DistToPoint
'	)
Next

''print "Shortest: " & str$(short1) & " Next Shortest: " & str$(Short2)

if abs(Short1 - Short2) > 1 then
	TheMsg = "Alleged point of ThePoint not in node sequence."
	call loggit (TheMsg)
	gstrCurrentMessage = TheMsg
	gstrReturnStatus = "ERROR"
	Exit Function
end if
'print "About to Alter..."
Dim TheOne as integer

If Short1 < Short2 then
	TheOne = Short2
else
	TheOne = Short1
end if
Alter Object TheLine
	Node Add Position 1, TheOne (PointX, PointY)
'Insert Into XXJunk (
'	obj
') values (
'	TheLine
')

InsertNodeAtPoint = TRUE

'print "Done altering..."
'Drop Table _TempNodes

end Function

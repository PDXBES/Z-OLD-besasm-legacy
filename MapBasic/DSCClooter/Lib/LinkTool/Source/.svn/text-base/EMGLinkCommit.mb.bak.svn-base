'
'	Commit the records in an append table if they are all good to go.
'
'	13Mar03	Cautley
'		Correct hard code assumption that IsSpecLink exists in append table,
'		needs to follow the same "if it's there, append it but don't sweat otherwise"
'		rules.  
'
include "mapbasic.def"
include "..\inc\EMGLinkCommit.def"
include "..\..\common\inc\EMGToolGlobal.def"
include "..\..\common\inc\EMGLogger.def"
include "..\..\common\inc\EMGMTabUtil.def"
include "..\..\common\inc\EMGLineGeo.def"

' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
'
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
Declare Sub AppendOnelink()
Declare	Sub DeleteOneLink()
Declare	Sub		CheckOrAddNOde(
		byval TName as string, 
		byVal	Node as string, 
		byval X as float, 
		Byval Y as float,
		Byval NType as string)

dim		mLinkCount as integer
Dim		mDateStamp as string
Dim		mMaxLinkID as integer

Dim		cobj as object
Dim		cLinkID as integer
Dim		cLinkType as string
Dim		cPipeFlowType as string
Dim		cMLinkID as integer
Dim		cCompKey as integer
Dim		cUSNode as string
Dim		cDSNode as string
Dim		cLength as float
Dim		cDiamWidth as float
Dim		cHeight as float
Dim		cShape as string
Dim		cMaterial as string
Dim		cUpsDepth as float
Dim		cDwnDepth as float
Dim		cUSIE as float
Dim		cDSIE as float
Dim		cAsBuilt as string
Dim		cInstdate as date
Dim		cFromX as float
Dim		cFromY as float
Dim		cToX as float
Dim		cToY as float
Dim		cRoughness as float
Dim		cLinkReach as string
Dim		cReachElement as integer
Dim		cObjSource as string
Dim		cDataQual as string
Dim		cIsSpecLink as string
Dim		cDataFlagSynth as integer
Dim		cTimeFrame as string
' following are related to nodes, only used if node created
Dim		cUSNodeType as string
Dim		cDSNodeType as string


' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
'
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

Sub CommitAppend()
Dim		TotalRecs as integer
Dim		OKRecs as integer
Dim		Msg as string

	'print "In COmmitAppend()"
	Select * from gstrSelectedTablename
	into _CommitRecs
	TotalRecs = TableInfo(_CommitRecs, TAB_INFO_NROWS)
	
	Select * from gstrSelectedTablename
		where AuditOK2GO = TRUE
	into _OKRecs
	OKRecs = TableInfo(_OKRecs, TAB_INFO_NROWS)
	close table _OKRecs

	if TotalRecs <> OKRecs then
		close table _CommitRecs
		Note "There are some links that are not yet 'OK 2 go'"
		exit sub
	end if

	msg = "There are " & str$(TotalRecs) & " to be appended."
	call loggit(msg)

	do case gMasterModelMode			' 1 = master, 2 = model

		case 1
			Select max(MLinkID)
			from		mst_Links
			into		_MaxID
		case 2
			Select max(LinkID)
			from		mdl_Links
			into		_MaxID
	end case
	mMaxLinkID = _MaxID.col1
	close table _MaxID

	Fetch First from _CommitRecs
	mLinkCount = 0
	mDateStamp = FormatDate$(CurDate()) & " " & time(24)

	ProgressBar   "Appending links ..." 
			Calling   AppendOneLink  
			Range   TotalRecs 


	close table _CommitRecs

End Sub
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
'

' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
Sub AppendOneLink()
Dim		MyRow as integer
Dim		AppTable as string
Dim		Colname as string
dim		lResult as logical

Dim		Msg as string

	'print "APpend one..."

	if EOT(_CommitRecs) then
		Progressbar = -1
		exit sub
	end if

	' set all "c" variables to blank or zero to start with...
	'
 		cLinkID = 0
 		cLinkType = ""
 		cPipeFlowType = ""
 		cMLinkID = 0
 		cCompKey  = 0
 		cUSNode = ""
 		cDSNode = ""
 		cLength  = 0
 		cDiamWidth  = 0
 		cHeight  = 0
 		cShape = ""
 		cMaterial = ""
 		cUpsDepth  = 0
 		cDwnDepth  = 0
 		cUSIE  = 0
 		cDSIE  = 0
 		cAsBuilt = ""
 		'cInstdate = 
 		cFromX  = 0
 		cFromY  = 0
 		cToX  = 0
 		cToY  = 0
 		cRoughness  = 0
 		cLinkReach = ""
 		cReachElement  = 0
 		cObjSource = ""
 		cDataQual = ""
 		cIsSpecLink = ""
 		cDataFlagSynth  = 0
 		cTimeFrame = ""
 		cUSNodeType = ""
 		cDSNodeType = ""



	mLinkCount = mLinkcount + 1
	mMaxLinkID = mMaxLinkID + 1
	Progressbar = mLinkCount
	MyRow = _CommitRecs.ROWID
	'print "AppendOne B"
	AppTable = "_CommitRecs"


	'	Do the real work here...
	cobj = _CommitRecs.obj
	ColName = "LinkType"
	if IsColumnThere(AppTable, ColName) then
		cLinktype = _CommitRecs.LinkType
	end if
	ColName = "PipeFlowType"
	if IsColumnThere(AppTable, Colname) then
		cPipeFlowType = _CommitRecs.PipeFlowType
	end if
	ColName = "MLinkID"
	If IsColumnThere(AppTable, ColName) then
		cMLinkID = _CommitRecs.MLinkID
	end if
	
'	cCompKey = _CommitRecs.CompKey
	ColName = "CompKey"
	If IsColumnThere(AppTable, ColName) then
		onerror goto noComp
		cCompKey = _CommitRecs.CompKey
		goto okComp
	NoComp:
		cCompKey = 0
		resume okComp
	okComp:
	end if
	onerror goto 0

'	cUSNode = _CommitRecs.USNode
	ColName = "USNode"
	If IsColumnThere(AppTable, ColName) then
		cUSNode = _CommitRecs.USNode
	end if

'	cDSNode = _CommitRecs.DSNode
	ColName = "DSNode"
	If IsColumnThere(AppTable, ColName) then
		cDSNode = _CommitRecs.DSNode
	end if

'	cDiamWidth = _CommitRecs.DiamWidth
	ColName = "DiamWidth"
	If IsColumnThere(AppTable, ColName) then
		onerror goto noDiam
		cDiamWidth = _CommitRecs.DiamWidth
		goto okDiam
	noDiam:
		cDiamWidth = 0
		resume OKDiam
	OKDiam:
	end if
	onerror goto 0

'	cHeight = _CommitRecs.Height
	ColName = "Height"
	If IsColumnThere(AppTable, ColName) then
		onerror goto noHeight
		cHeight = _CommitRecs.Height
		goto okHeight
	noHeight:
		cHeight = 0
		resume okHeight
	okHeight:
	end if
	onerror goto 0

'	cShape = _CommitRecs.Shape
	ColName = "Shape"
	If IsColumnThere(AppTable, ColName) then
		cShape = _CommitRecs.Shape
	end if

'	cMaterial = _CommitRecs.Material
	ColName = "Material"
	If IsColumnThere(AppTable, ColName) then
		cMaterial = _CommitRecs.Material
	end if

'	cUpsDepth = _CommitRecs.UpsDepth
	ColName = "UpsDepth"
	If IsColumnThere(AppTable, ColName) then
		onerror goto noUpsd
		cUpsDepth = _CommitRecs.UpsDpth
		goto okUpsd
	noUpsd:
		cUpsDepth = 0.0
		resume okUpsd
	okUpsd:
	end if
	onerror goto 0

'
	ColName = "DwnDepth"
	If IsColumnThere(AppTable, ColName) then
		onerror goto noDwnd
		cDwnDepth = _CommitRecs.DwnDpth
		goto okDwnd
	noDwnd:
		cDwnDepth = 0.0
		resume okDwnd
	okDwnd:
	end if
	onerror goto 0

'	cUSIE = _CommitRecs.USIE
	ColName = "USIE"
	If IsColumnThere(AppTable, ColName) then
		onerror goto noUSIE
		cUSIE = _CommitRecs.USIE
		goto okUSIE
	noUSIE:
		cUSIE = 0.0
		resume okUSIE
	okUSIE:
	end if
	onerror goto 0

'	cDSIE = _CommitRecs.DSIE
	ColName = "DSIE"
	If IsColumnThere(AppTable, ColName) then
		onerror goto noDSIE
		cDSIE = _CommitRecs.DSIE
		goto okDSIE
	noDSIE:
		cDSIE = 0.0
		resume okDSIE
	okDSIE:
	end if
	onerror goto 0

'	cAsBuilt = _CommitRecs.AsBuilt
	ColName = "AsBuilt"
	If IsColumnThere(AppTable, ColName) then
		cAsBuilt = _CommitRecs.AsBuilt
	end if

'	cInstdate = _CommitRecs.Instdate
	ColName = "Instdate"
	If IsColumnThere(AppTable, ColName) then
		onerror goto noInst
		cInstDate = _CommitRecs.InstDate
		goto okInst
	noInst:
		cInstDate = ""
		resume okInst
	okInst:
	end if
	onerror goto 0

	' Note:  all the spatial stuff (to, from; x&y) is recomputed below.

'	cRoughness = _CommitRecs.Roughness
	ColName = "Roughness"
	If IsColumnThere(AppTable, ColName) then
		onerror goto noRough
		cRoughness = _CommitRecs.Roughness
		goto okRough
	noRough:
		cRoughness = 0.0
		resume okRough
	okRough:
	end if
	onerror goto 0

'	cLinkReach = _CommitRecs.LinkReach
	ColName = "LinkReach"
	If IsColumnThere(AppTable, ColName) then
		cLinkreach = _CommitRecs.LinkReach
	end if

'	cReachElement = _CommitRecs.ReachElement
	ColName = "ReachElement"
	If IsColumnThere(AppTable, ColName) then
		onerror goto noReach
		cReachElement = _CommitRecs.ReachElement
		goto okReach
	noReach:
		cReachElement = 0
		resume okReach
	okReach:
	end if
	onerror goto 0

'	cDataQual = _CommitRecs.DataQual
	ColName = "DataQual"
	If IsColumnThere(AppTable, ColName) then


		cDataQual = _CommitRecs.DataQual
	end if

'	cDataFlagSynth = _CommitRecs.DataFlagSynth
	ColName = "DataFlagSynth"
	If IsColumnThere(AppTable, ColName) then
		onerror goto noSynth
		cDataFlagSynth = _CommitRecs.DataFlagSynth
		goto okSynth
	noSynth:
		cDataFlagSynth = 0
		resume okSynth
	okSynth:
	end if
	onerror goto 0

	ColName = "mhfrom_type"
	If IsColumnThere(AppTable, ColName) then
		cUSNodeType = _CommitRecs.mhfrom_type
	end if
	ColName = "mhto_type"
	If IsColumnThere(AppTable, ColName) then
		cDSNodeType = _CommitRecs.mhto_type
	end if
	ColName = "TimeFrame"
	if IsColumnThere(AppTable, Colname) then
		' insist on a proper time frame
		cTimeFrame = _CommitRecs.TimeFrame

		Do Case ltrim$(rtrim$(cTimeFrame))
			case "AB", "EX", "CE", "FC", "FU"
				' don't need to do anything, it's a good code
			case ""
				cTimeFrame = "EX"
			case else
				' don't allow it.
				msg = "Append of this record skipped due to timeframe: " + cTimeFrame
				call loggit(msg)
				exit sub
		End Case
		
	End If
	ColName = "IsSpecLink"
	If IsColumnThere(AppTable, ColName) then
		cIsSpecLink = _CommitRecs.IsSpecLink
	end if

'	
'	All geo-spatial stuff is re-computed at this time
'
	cLength = ObjectLen(cobj, "ft")
	lResult = CalcEnds(cobj, cFromX, cFromY, cToX, cToY)

'
'	certain fields computed based on others
'
	Do Case ucase$(ltrim$(rtrim$(cLinkType)))
		case "C", "IC"
			cPipeFlowType = "C"
		case "D", "ID"
			cPipeFlowType = "D"
		case "PS", "PD", "PC", "FD"
			cPipeFlowType = "F"
		case "S", "IS"
			cPipeFlowType = "S"
		case "V", "F", "X"
			cPipeFlowType = "I"
		case else
			cPipeFlowType = "U"
	End Case

	do case gMasterModelMode			' 1 = master, 2 = model
		case 1
			Msg = "insert Master"
			call loggit(msg)
			Insert into mst_Links (
				obj,
				MLinkID,
				CompKey,
				USNode,
				DSNode,
				Shape,
				Linktype,
				PipeFlowType,
				Length,
				DiamWidth,
				Height,
				Material,
				Upsdpth,
				Dwndpth,
				USIE,
				DSIE,
				AsBuilt,
				Instdate,
				FromX,
				FromY,
				ToX,
				ToY,
				Roughness,
				TimeFrame,
				DataQual,
				DataFlagSynth
				)
				values (
					cobj,
					mMaxLinkID,
					cCompKey,
					cUSNode,
					cDSNode,
					cShape,
					cLinkType,
					cPipeFlowType,
					cLength,
					cDiamWidth,
					cHeight,
					cMaterial,
					cUpsDepth,
					cDwnDepth,
					cUSIE,
					cDSIE,
					cAsBuilt,
					cInstdate,
					cFromX,
					cFromY,
					cToX,
					cToY,
					cRoughness,
					cTimeFrame,
					cDataQual,
					cDataFlagSynth
				)
		'  ensure the beginning and ending nodes are there...
			call CheckOrAddNode("mst_Nodes", cUSNode, cFromX, cFromY, cUSNodeType)
			call CheckOrAddNode("mst_Nodes", cDSNode, cToX, cToY, cDSNodeType)
		case 2
			Msg = "Insert Model"
			Call Loggit(Msg)

			Insert into mdl_Links (
				obj,
				LinkID,
				MLinkID,
				CompKey,
				USNode,
				DSNode,
				Shape,
				Linktype,
				PipeFlowType,
				Length,
				DiamWidth,
				Height,
				Material,
				Upsdpth,
				'Dwndpth,		' error in version 2
				USIE,
				DSIE,
				AsBuilt,
				Instdate,
				FromX,
				FromY,
				ToX,
				ToY,
				Roughness,
				DataQual,
				IsSpecLink,
				DataSource
				)
				values (
					cobj,
					mMaxLinkID,
					cMLinkID,
					cCompKey,
					cUSNode,
					cDSNode,
					cShape,
					cLinkType,
					cPipeFlowType,
					cLength,
					cDiamWidth,
					cHeight,
					cMaterial,
					cUpsDepth,
					'cDwnDepth,
					cUSIE,
					cDSIE,
					cAsBuilt,
					cInstdate,
					cFromX,
					cFromY,
					cToX,
					cToY,
					cRoughness,
					cDataQual,
					cIsSpecLink,
					"A"
				)
		'  ensure the beginning and ending nodes are there...
			call CheckOrAddNode("mdl_Nodes", cUSNode, cFromX, cFromY, cUSNodeType)
			Call CheckOrAddNode("mdl_Nodes", cDSNode, cToX, cToY, cDSNodeType)

		case else
			note "Unexpected value for gMasterModelMode"
			exit sub
	end case

	Update _CommitRecs
		set AuditProcTimestamp = mDateStamp
		where ROWID = MyRow

	Msg = "Get next record..."
	call loggit(msg)

	fetch next from _CommitRecs


End Sub

' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
'
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
Sub		CommitDelete()
Dim		TotalRecs as integer
Dim		OKRecs as integer
Dim		Msg as string

	Select * from gstrSelectedTablename
	into _CommitRecs
	TotalRecs = TableInfo(_CommitRecs, TAB_INFO_NROWS)
	
	Select * from gstrSelectedTablename
		where AuditOK2GO = TRUE
	into _OKRecs
	OKRecs = TableInfo(_OKRecs, TAB_INFO_NROWS)
	close table _OKRecs

	if TotalRecs <> OKRecs then
		close table _CommitRecs
		Note "There are some links that are not yet 'OK 2 go' " & str$(TotalRecs) & " total, " & str$(OKRecs) & " OK."
		exit sub
	end if

	msg = "There are " & str$(TotalRecs) & " to be deleted."
	call loggit(msg)

	fetch first from _CommitRecs
	mLinkCount = 0
	mDateStamp = formatDate$(CurDate()) & " " & time(24)

	ProgressBar "Deleting Links ..."
		calling		DeleteOneLink
		Range		TotalRecs

	close table _CommitRecs

	' this takes a long time...
	if gOrphanCheck then
		Call	OrphanNodes()
	end if
End Sub
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
'
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
Sub		OrphanNodes()
Dim		NodesFolder as string
Dim		NodesPath as string
Dim		OrphanCount as integer
Dim		msg as string
Dim		NodesTable as string
Dim		LinksTable as string

msg = "Checking / deleting orphan nodes.  This will take a while ..."
call loggit(msg)

do case gMasterModelMode
	case 1
		NodesFolder = PathToDirectory$(TableInfo(mst_nodes, TAB_INFO_TABFILE))
		NodesTable = "mst_nodes"
		LinksTable = "mst_links"
	case 2
		NodesFolder = PathToDirectory$(TableInfo(mdl_nodes, TAB_INFO_TABFILE))
		NodesTable = "mdl_nodes"
		LinksTable = "mdl_links"
end case
Msg = "Nodes folder is: " & Nodesfolder
call loggit(msg)

msg = "Finding unique referenced US nodes ..."
call loggit(msg)

select USNode
from LinksTable
into _Nodes
Group by USNode

NodesPath = NodesFolder & "_Nodes.tab"
Commit Table _Nodes
as NodesPath

Close table _Nodes

Open Table NodesPath as _Nodes

msg = "finding unique referenced DS nodes ..."
call loggit(msg)

Select DSNode
from LinksTable
into _DSNodes
Group by DSNode

msg = "Merging US and DS node sets..."
call loggit(msg)

Insert Into _Nodes
Select * from _DSNodes

close table _DSNOdes

msg = "Finding combined unique referenced nodes ..."
call loggit(msg)

Select col1
from _Nodes
into _UniqueNodes
Group By col1

'  find which nodes aren't needed anymore
msg = "Finding nodes which aren't needed anymore ..."
call loggit(msg)

Select * from NodesTable
where Node <> all(select USNode from _UniqueNodes)
into _ByeByeNodes

OrphanCount = TableInfo(_ByeByeNodes, TAB_INFO_NROWS)
Msg = "Orphan count: " & str$(OrphanCount)
call Loggit(msg)

Delete from _ByeByeNodes

close table _ByeByeNodes
drop table _Nodes

End Sub
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
'
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
Sub		DeleteOneLink
Dim		MyRow as integer
Dim		WhatID as integer
Dim		Msg as string
Dim		RowCheck as integer

	if EOT(_CommitRecs) then
		ProgressBar = -1
		Exit Sub
	end if

	do case gMasterModelMode
		case 1
			WhatID = _CommitRecs.MLinkID
			select * from mst_links
			into _DelLinks
			where MLinkID = WhatID

			RowCheck = TableInfo(_DelLinks, TAB_INFO_NROWS)
			Msg = "Check: deleting " & str$(RowCheck) & " rows from Master"
			call loggit(msg)
			Delete from _DelLinks

		case 2
			WhatID = _CommitRecs.LinkID
			select * from mdl_links
			into _DelLinks
			where LinkID = WhatID

			RowCheck = TableInfo(_DelLinks, TAB_INFO_NROWS)
			Msg = "Check: deleting " & str$(RowCheck) & " rows from Master"
			call loggit(msg)

			delete from _DelLinks
	end case
	mLinkCount = mLinkCount + 1
	ProgressBar = mLinkCount
	close table _DelLinks

	MyRow = _CommitRecs.ROWID
	update _CommitRecs
			set AuditProcTimeStamp = mDateStamp
			where ROWID = MyRow

	Fetch Next from _CommitRecs
End Sub
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
'
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
Sub		CheckOrAddNode(
	ByVal TName as string, 
	ByVal NodeKey as string, 
	byval X as float, 
	byval Y as float,
	ByVal NType as string)
Dim		NodeCount as integer
Dim		NewPoint as object
Dim		NewColor as integer
Dim		Msg as string
Dim		NodeX, NodeY as float
Define		SNAP_TOLERANCE 5.0

	Select * from TName
	where Node = NodeKey
	into _GotNode

	NodeCount = TableInfo(_GotNode, TAB_INFO_NROWS)
	if NodeCount > 0 then
		' check spatial match; warn only
		NodeX = _GotNode.XCoord
		NodeY = _GotNode.YCoord
		if (abs(nodex - X) > SNAP_TOLERANCE) then
			Msg = "X coord of node <> line end point"
			call loggit(Msg)
		end if
		if (abs(NodeY - Y) > SNAP_TOLERANCE) then
			Msg = "Y coord of node <> line end point"
			call loggit(Msg)
		end if
		exit sub

	else
		create point into variable NewPoint (X, Y) symbol(34,0,4)
		Insert into TName (
			obj,
			Node,
			XCoord,
			YCoord,
			NodeType,
			HasSpecLink,
			HasSpecNode
		) values (

			NewPoint,
			NodeKey,
			X,
			Y,
			NType,
			"F",
			"F"
		)
		
	end if

	close table _GotNode

End Sub
'
'	============ EMGAATS Workbench =================
'
'	Copyright (c) 2001, 2002, 2003  
'	City of Portland, OR Bureau of Environmental Services 
'	and CH2M HILL, Inc.
'
include "MapBasic.def"
include "..\Inc\EMGInit.def"
include "..\..\Common\Inc\EMGGlobal.def"
include "..\..\Common\Inc\EMGMTabUtil.def"
include "..\..\Common\Inc\INIUtils.def"
include "..\..\Common\Inc\EMGModMake.def"
include "..\..\Common\Inc\EMGLogger.def"
include "..\..\Common\Inc\EMGOpenUtils.def"

' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'		Module level storage
'
'		Note:  these need to align with the names in Create Tables in EMGTraceLinks.mb
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

' Collins 22Mar2004 use the model open standard in common\EMGOpenUtils
'Dim		mModelFiles(17) as FileSpec
Dim		mMasterFiles(7) as FileSpec

Declare Sub	ReallyOpenTables(ByVal Deny as logical)
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'	Do initial setup
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Sub InitHousekeeping

	' print, msg, status, file
	Call SetLogOptions (TRUE, TRUE, TRUE, FALSE)

	gstrAppName = "EMGAATS Workbench"
	gstrCopyRight = "Copyright (c) 2001, 2002, 2003, 2007 City of Portland Bureau of Environmental Services and CH2M HILL, Inc."
	gstrVersion = "2.2"
	gstrVerDate = "Jan 17, 2007"
	gstrAppFolder = ApplicationDirectory$()
	'gstrAppFolder = FixFolderSlash (gstrAppFolder)

	' Aliases are by necessity hard coded elsewhere in the program, can cannot be changed.

	' the names and locations of model files are hard coded, relative to the "Model Root".
	
	
	
	' Collins 22Mar2004 use the model open standard in common\EMGOpenUtils
	'mModelFiles(1).Name = "Links"
	'mModelFiles(1).FullPath = "Links\mdl_Links_ac.tab"
	'mModelFiles(1).Alias = "mdl_Links"

	'mModelFiles(2).Name = "Nodes"
	'mModelFiles(2).Fullpath = "Nodes\mdl_Nodes_ac.tab"
	'mModelFiles(2).Alias = "mdl_Nodes"

	'mModelFiles(3).Name = "Direct Subcatchments"
	'mModelFiles(3).FullPath = "DSC\mdl_DirSC_ac.tab"
	'mModelFiles(3).Alias = "mdl_DSC"

	'mModelFiles(4).Name = "Laterals"
	'mModelFiles(4).FullPath = "Laterals\mdl_laterals_ac.tab"
	'mModelFiles(4).Alias = "mdl_Laterals"

	'mModelFiles(5).Name = "Lateral End Points"
	'mModelFiles(5).FullPath = "Laterals\mdl_lateralEndPts.tab"
	'mModelFiles(5).Alias = "mdl_LatEndPts"

	'mModelFiles(6).Name = "Link Results"
	'mModelFiles(6).FullPath = "Links\mdl_LinkRes_ac.tab"
	'mModelFiles(6).Alias = "mdl_LinkRes"

	'mModelFiles(7).Name = "Node Results"
	'mModelFiles(7).FullPath = "Nodes\mdl_NodeRes_ac.tab"
	'mModelFiles(7).Alias = "mdl_NodeRes"

	'mModelFiles(8).Name = "Special Links"
	'mModelFiles(8).FullPath = "Links\mdl_SpecLinks_ac.tab"
	'mModelFiles(8).Alias = "mdl_SpecLinks"

	'mModelFiles(9).Name = "Special Link Data"
	'mModelFiles(9).FullPath = "Links\mdl_SpecLinkData_ac.tab"
	'mModelFiles(9).Alias = "mdl_SpecLinkData"

	'mModelFiles(10).Name = "Special Node Data"
	'mModelFiles(10).FullPath = "Nodes\mdl_SpecNodeData_ac.tab"
	'mModelFiles(10).Alias = "mdl_SpecNodeData"

	'mModelFiles(11).Name = "Tag Definitions"
	'mModelFiles(11).FullPath = "Nodes\mdl_DefineTags_ac.tab"
	'mModelFiles(11).Alias = "mdl_DefineTags"

	'mModelFiles(12).Name = "Surface Subcatchments"
	'mModelFiles(12).FullPath = "SurfSC\mdl_SurfSC_ac.tab"
	'mModelFiles(12).Alias = "mdl_SurfSC"

  'mModelFiles(13).Name = "Surface Zingers"
	'mModelFiles(13).FullPath = "SurfSC\mdl_SurfZing.tab"
	'mModelFiles(13).Alias = "mdl_SurfZing"

	'mModelFiles(14).Name = "Disco Veg"
	'mModelFiles(14).FullPath = "ic\mdl_ic_discoVeg_ac.tab"
	'mModelFiles(14).Alias = "mdl_discoveg"

	'mModelFiles(15).Name = "Drywell"
	'mModelFiles(15).FullPath = "ic\mdl_ic_drywell_ac.tab"
	'mModelFiles(15).Alias = "mdl_drywell"

	'mModelFiles(16).Name = "Green Roof"
	'mModelFiles(16).FullPath = "ic\mdl_ic_grnroof_ac.tab"
	'mModelFiles(16).Alias = "mdl_GrnRoof"

	'mModelFiles(17).Name = "Storage"
	'mModelFiles(17).FullPath = "ic\mdl_ic_store_ac.tab"
	'mModelFiles(17).Alias = "mdl_store"

	

	'  the names and locations of the master files need not be hard coded.  If the INI file
	'  contains a value for the "Root" Key, and/or INIKey, then use it, otherwise just use the 'FullPath'.
	'	in other words, FullPath is the default.
	mMasterFiles(1).Name = "Master Links"
	mMasterFiles(1).FullPath = "Links\mst_Links_ac"
	mMasterFiles(1).INISection = "masterfiles"
	mMasterFiles(1).INIKey = "links"
	mMasterFiles(1).Alias = "mst_links"

	mMasterFiles(2).Name = "Master Nodes"
	mMasterFiles(2).FullPath = "Nodes\mst_Nodes_ac"
	mMasterFiles(2).INISection = "masterfiles"
	mMasterFiles(2).INIKey = "Nodes"
	mMasterFiles(2).Alias = "mst_nodes"

	mMasterFiles(3).Name = "Master Special Links"
	mMasterFiles(3).FullPath = "Links\mst_SpecLinks_ac"
	mMasterFiles(3).INISection = "masterfiles"
	mMasterFiles(3).INIKey = "speclinks"
	mMasterFiles(3).Alias = "mst_SpecLinks"

	mMasterFiles(4).Name = "Master Special Links Data"
	mMasterFiles(4).FullPath = "Links\mst_SpecLinkData_ac"
	mMasterFiles(4).INISection = "masterfiles"
	mMasterFiles(4).INIKey = "speclinksdata"
	mMasterFiles(4).Alias = "mst_SpecLinksData"

	mMasterFiles(5).Name = "Master Surface Subcatchments"
	mMasterFiles(5).FullPath = "Surface\mst_SurfSC_ac"
	mMasterFiles(5).INISection = "masterfiles"
	mMasterFiles(5).INIKey = "surface"
	mMasterFiles(5).Alias = "mst_SurfSC"

  mMasterFiles(6).Name = "Quartersections"
	mMasterFiles(6).FullPath = "Grid\QS_bound"
	mMasterFiles(6).INISection = "masterfiles"
	mMasterFiles(6).INIKey = "Quartersections"
	mMasterFiles(6).Alias = "mst_Quartersections"

  mMasterFiles(7).Name = "Master Direct Subcatchments"
	mMasterFiles(7).FullPath = "Parcels_Divides\mst_DSC_ac"
	mMasterFiles(7).INISection = "masterfiles"
	mMasterFiles(7).INIKey = "dsc"
	mMasterFiles(7).Alias = "mst_DSC"

End Sub
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'	Let the user know who we are
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Sub SayHello

	CLS
	print gstrAppName
	print	gstrCopyRight
	print	"Version " + gstrVersion + " - " + gstrVerDate
	print	"Running from " & gstrAppFolder

End Sub
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'		Ask for a new model path, then open the tables...
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Sub		OpenModel
Dim		ProjFolderPath as String

	ProjFolderPath = APIBrowseFolders("Select an EMGAATS Project Folder")
	'ProjFolderPath = FileOpenDlg( "" ,  "Model.ini" ,  "*.INI" ,  "Browse for EMGAATS Project Folder" ) 

	'gmdlRootFolder = PathToDirectory$(ProjFolderPath)
	gmdlRootFolder = FixFolderSlash(ProjFolderPath)
	print "Selected directory '" & gmdlRootFolder & "'"
	
	' this is neccessary so that EMGOpenUtils works
	gmdlINIFullPath = gmdlRootFolder & "model.ini"
	call OpenTables

End Sub
Sub OpenTablesDenyWrite
	dim x as integer
	Call ReallyOpenTables(True)
	' this is neccessary so that EMGOpenUtils works
	gmdlINIFullPath = gmdlRootFolder & "model.ini"
	
	
	
	' 22Mar2004 Collins
	x = ReallyOpenModel() ' from EMGOpenUntils
	
	
End Sub

Sub OpenTables
	dim x as integer
	
	Call ReallyOpenTables(False)
	' this is neccessary so that EMGOpenUtils works
	gmdlINIFullPath = gmdlRootFolder & "model.ini"
	
	' 02Feb2005 Collins
	x = setModelAllOpen() ' from EMGOpenUntils
	if x = RETURNSUCCESS then
		Call Loggit ("setModelAllOpen is successful")
	else
		Call Loggit ("setModelAllOpen is failed")
	end if 
	
	
	' 22Mar2004 Collins
	x = ReallyOpenModel() ' from EMGOpenUntils
End Sub
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'	Close currently open tables, then open the tables necessary for the workbench.
'
'	It is NOT fatal if some tables aren't there, because they may not be constructed yet.
'
'	Master tables are just opened (you're sharing)
'	Model is opened "deny write" so that only you can be making updates.
'
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Sub ReallyOpenTables(ByVal Deny as logical)
Dim		ProjFolderPath as string
Dim		Gentle as logical
Dim		FullPath as string
Dim		PathName as string
Dim		TableName as string
Dim		AliasName as string
Dim		LoopCount as integer
Dim		lResult as logical
Dim		ModelINIPath as string
Dim		MasterRoot as string

	close all interactive
	
  Call SetLogOptions (TRUE, TRUE, TRUE, TRUE)

'	If we know what our project folder is, open those, otherwise, ask

	if len(gmdlRootFolder) = 0 then

		ProjFolderPath = APIBrowseFolders("Select an EMGAATS Project Folder")
		gmdlRootFolder = FixFolderSlash(ProjFolderPath)

		
	end if
  
  gmdlRootFolder = FixFolderSlash(gmdlRootFolder)
  
  Call Loggit ( "model directory '" & gmdlRootFolder & "'")
	
'	Get the path to the master files, and open them.
	ModelINIPath = gmdlRootFolder & "model.ini"
	if not FileExists(ModelINIPath) then
		gstrCurrentMessage = "The current model directory does not contain a 'model.ini' file. " & ModelINIPath
		gstrReturnStatus = "ERROR"
		Exit Sub
	end if
	Call Loggit ( "Model.ini exists where it's supposed to")

	MasterRoot = FixFolderSlash(LTrim$(RTrim$(ReadINI (ModelINIPath, "MasterFiles", "Root", ""))))
	gstrTimeFrame = ReadINI (ModelINIPath, "ModelState", "TimeFrame", "XX")
	if gstrTimeFrame = "XX" 
		or (gstrTimeFrame <> "EX" and gstrTimeFrame <> "FU" ) then
		call loggit( "the current model does not have a valid timeframe")
		exit sub
	end if
	Call Loggit( "Master is: " & MasterRoot)
	Call Loggit ( "Project is: " & gmdlRootFolder)
	Call Loggit ("Time frame of this model is " & gstrTimeFrame)

	Gentle = FALSE			' Its not OK for master files to not exist.


	For LoopCount = 1 to UBound(mMasterFiles)
		AliasName = mMasterFiles(LoopCount).Alias
		PathName = ReadINI(ModelINIPath, mMasterFiles(LoopCount).INISection, 
					mMasterFiles(LoopCount).INIKey, mMasterFiles(LoopCount).FullPath)
		If left$(PathName,1) = "\" then
			FullPath = MasterRoot & Mid$(PathName,2,99) & ".tab"
		else
			FullPath = MasterRoot & PathName & ".tab"
		end if
		TableName = PathToTableName$(FullPath)
		PathName = PathToDirectory$(FullPath)

		Call Loggit ( "Open Table " & FullPath & " as " & AliasName)
	
		Open Table FullPath as AliasName


		' Can't use OpenTable in Integrated Mapping because the 'is file open' test
		' wont work because error trapping in the MBX doesn't work when integrated.

		'lResult = OpenTable(PathName,  TableName, AliasName, Gentle)	
		'if lResult then
		'	print "Table " & FullPath & " open."
		'else
		'	print "Table " & FullPath & " not found."
		'end if

	Next
	
	' I believe this is not used anymore
	Gentle = TRUE				' Its OK for model files not to exist yet.

	' 22Mar2004 Collins
	' comment out the following because we are using the EMGOpenUtils for the model
	'
	'For LoopCount = 1 to UBound(mModelFiles)
	'	AliasName = mModelFiles(LoopCount).Alias
	'	FullPath = gmdlRootFolder & mModelFiles(LoopCount).FullPath
	'	TableName = PathToTableName$(FullPath)
	'	PathName = PathToDirectory$(FullPath)

'		Call Loggit ( "Open Table " & FullPath & " as " & AliasName)

'		If Deny Then
'			Open Table FullPath as AliasName DenyWrite
'		else
'			Open Table FullPath as AliasName
'		end if


		'this was commented out prior to 22Mar2004
		'lResult = OpenTable(PathName,  TableName, AliasName, Gentle)	
		'if lResult then
		'	print "Table " & FullPath & " open."
		'else
		'	print "Table " & FullPath & " not found."
		'end if
'	Next

	gstrReturnStatus = "SUCCESS"

End Sub


'22Mar2004 Collins - put this one in EMGOpenUtils
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'
'	CommitModel()
'
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'Sub CommitModel()
'Dim 		LoopCount as integer
'Dim		AliasName as string

'	For LoopCount = 1 to UBound(mModelFiles)
'		AliasName = mModelFiles(LoopCount).Alias
'		commit table AliasName
'	next
'End Sub

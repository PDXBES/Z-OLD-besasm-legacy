//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace PumpCycleDataAnalyzer {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("PumpCycleDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PumpCycleDataSet : global::System.Data.DataSet {
        
        private StationDataTable tableStation;
        
        private PumpDataTable tablePump;
        
        private CycleDataDataTable tableCycleData;
        
        private OperationsDataDataTable tableOperationsData;
        
        private WetWellDataTable tableWetWell;
        
        private EnvironSensorDataTable tableEnvironSensor;
        
        private DepthDataDataTable tableDepthData;
        
        private RawDataTable tableRaw;
        
        private CalculatedDataTable tableCalculated;
        
        private DistributedDataTable tableDistributed;
        
        private CycleSummaryDataTable tableCycleSummary;
        
        private global::System.Data.DataRelation relationSTATION_PUMP;
        
        private global::System.Data.DataRelation relationSTATION_CYCLE_DATA;
        
        private global::System.Data.DataRelation relationFK_Station_OperationsData;
        
        private global::System.Data.DataRelation relationFK_Station_WetWell;
        
        private global::System.Data.DataRelation relationFK_ENVIRON_SENSOR_STATION;
        
        private global::System.Data.DataRelation relationStation_DepthData;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PumpCycleDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected PumpCycleDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Station"] != null)) {
                    base.Tables.Add(new StationDataTable(ds.Tables["Station"]));
                }
                if ((ds.Tables["Pump"] != null)) {
                    base.Tables.Add(new PumpDataTable(ds.Tables["Pump"]));
                }
                if ((ds.Tables["CycleData"] != null)) {
                    base.Tables.Add(new CycleDataDataTable(ds.Tables["CycleData"]));
                }
                if ((ds.Tables["OperationsData"] != null)) {
                    base.Tables.Add(new OperationsDataDataTable(ds.Tables["OperationsData"]));
                }
                if ((ds.Tables["WetWell"] != null)) {
                    base.Tables.Add(new WetWellDataTable(ds.Tables["WetWell"]));
                }
                if ((ds.Tables["EnvironSensor"] != null)) {
                    base.Tables.Add(new EnvironSensorDataTable(ds.Tables["EnvironSensor"]));
                }
                if ((ds.Tables["DepthData"] != null)) {
                    base.Tables.Add(new DepthDataDataTable(ds.Tables["DepthData"]));
                }
                if ((ds.Tables["Raw"] != null)) {
                    base.Tables.Add(new RawDataTable(ds.Tables["Raw"]));
                }
                if ((ds.Tables["Calculated"] != null)) {
                    base.Tables.Add(new CalculatedDataTable(ds.Tables["Calculated"]));
                }
                if ((ds.Tables["Distributed"] != null)) {
                    base.Tables.Add(new DistributedDataTable(ds.Tables["Distributed"]));
                }
                if ((ds.Tables["CycleSummary"] != null)) {
                    base.Tables.Add(new CycleSummaryDataTable(ds.Tables["CycleSummary"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StationDataTable Station {
            get {
                return this.tableStation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PumpDataTable Pump {
            get {
                return this.tablePump;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CycleDataDataTable CycleData {
            get {
                return this.tableCycleData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OperationsDataDataTable OperationsData {
            get {
                return this.tableOperationsData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WetWellDataTable WetWell {
            get {
                return this.tableWetWell;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EnvironSensorDataTable EnvironSensor {
            get {
                return this.tableEnvironSensor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DepthDataDataTable DepthData {
            get {
                return this.tableDepthData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RawDataTable Raw {
            get {
                return this.tableRaw;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CalculatedDataTable Calculated {
            get {
                return this.tableCalculated;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DistributedDataTable Distributed {
            get {
                return this.tableDistributed;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CycleSummaryDataTable CycleSummary {
            get {
                return this.tableCycleSummary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            PumpCycleDataSet cln = ((PumpCycleDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Station"] != null)) {
                    base.Tables.Add(new StationDataTable(ds.Tables["Station"]));
                }
                if ((ds.Tables["Pump"] != null)) {
                    base.Tables.Add(new PumpDataTable(ds.Tables["Pump"]));
                }
                if ((ds.Tables["CycleData"] != null)) {
                    base.Tables.Add(new CycleDataDataTable(ds.Tables["CycleData"]));
                }
                if ((ds.Tables["OperationsData"] != null)) {
                    base.Tables.Add(new OperationsDataDataTable(ds.Tables["OperationsData"]));
                }
                if ((ds.Tables["WetWell"] != null)) {
                    base.Tables.Add(new WetWellDataTable(ds.Tables["WetWell"]));
                }
                if ((ds.Tables["EnvironSensor"] != null)) {
                    base.Tables.Add(new EnvironSensorDataTable(ds.Tables["EnvironSensor"]));
                }
                if ((ds.Tables["DepthData"] != null)) {
                    base.Tables.Add(new DepthDataDataTable(ds.Tables["DepthData"]));
                }
                if ((ds.Tables["Raw"] != null)) {
                    base.Tables.Add(new RawDataTable(ds.Tables["Raw"]));
                }
                if ((ds.Tables["Calculated"] != null)) {
                    base.Tables.Add(new CalculatedDataTable(ds.Tables["Calculated"]));
                }
                if ((ds.Tables["Distributed"] != null)) {
                    base.Tables.Add(new DistributedDataTable(ds.Tables["Distributed"]));
                }
                if ((ds.Tables["CycleSummary"] != null)) {
                    base.Tables.Add(new CycleSummaryDataTable(ds.Tables["CycleSummary"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableStation = ((StationDataTable)(base.Tables["Station"]));
            if ((initTable == true)) {
                if ((this.tableStation != null)) {
                    this.tableStation.InitVars();
                }
            }
            this.tablePump = ((PumpDataTable)(base.Tables["Pump"]));
            if ((initTable == true)) {
                if ((this.tablePump != null)) {
                    this.tablePump.InitVars();
                }
            }
            this.tableCycleData = ((CycleDataDataTable)(base.Tables["CycleData"]));
            if ((initTable == true)) {
                if ((this.tableCycleData != null)) {
                    this.tableCycleData.InitVars();
                }
            }
            this.tableOperationsData = ((OperationsDataDataTable)(base.Tables["OperationsData"]));
            if ((initTable == true)) {
                if ((this.tableOperationsData != null)) {
                    this.tableOperationsData.InitVars();
                }
            }
            this.tableWetWell = ((WetWellDataTable)(base.Tables["WetWell"]));
            if ((initTable == true)) {
                if ((this.tableWetWell != null)) {
                    this.tableWetWell.InitVars();
                }
            }
            this.tableEnvironSensor = ((EnvironSensorDataTable)(base.Tables["EnvironSensor"]));
            if ((initTable == true)) {
                if ((this.tableEnvironSensor != null)) {
                    this.tableEnvironSensor.InitVars();
                }
            }
            this.tableDepthData = ((DepthDataDataTable)(base.Tables["DepthData"]));
            if ((initTable == true)) {
                if ((this.tableDepthData != null)) {
                    this.tableDepthData.InitVars();
                }
            }
            this.tableRaw = ((RawDataTable)(base.Tables["Raw"]));
            if ((initTable == true)) {
                if ((this.tableRaw != null)) {
                    this.tableRaw.InitVars();
                }
            }
            this.tableCalculated = ((CalculatedDataTable)(base.Tables["Calculated"]));
            if ((initTable == true)) {
                if ((this.tableCalculated != null)) {
                    this.tableCalculated.InitVars();
                }
            }
            this.tableDistributed = ((DistributedDataTable)(base.Tables["Distributed"]));
            if ((initTable == true)) {
                if ((this.tableDistributed != null)) {
                    this.tableDistributed.InitVars();
                }
            }
            this.tableCycleSummary = ((CycleSummaryDataTable)(base.Tables["CycleSummary"]));
            if ((initTable == true)) {
                if ((this.tableCycleSummary != null)) {
                    this.tableCycleSummary.InitVars();
                }
            }
            this.relationSTATION_PUMP = this.Relations["STATION_PUMP"];
            this.relationSTATION_CYCLE_DATA = this.Relations["STATION_CYCLE_DATA"];
            this.relationFK_Station_OperationsData = this.Relations["FK_Station_OperationsData"];
            this.relationFK_Station_WetWell = this.Relations["FK_Station_WetWell"];
            this.relationFK_ENVIRON_SENSOR_STATION = this.Relations["FK_ENVIRON_SENSOR_STATION"];
            this.relationStation_DepthData = this.Relations["Station_DepthData"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "PumpCycleDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/RawCycleData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableStation = new StationDataTable();
            base.Tables.Add(this.tableStation);
            this.tablePump = new PumpDataTable();
            base.Tables.Add(this.tablePump);
            this.tableCycleData = new CycleDataDataTable();
            base.Tables.Add(this.tableCycleData);
            this.tableOperationsData = new OperationsDataDataTable();
            base.Tables.Add(this.tableOperationsData);
            this.tableWetWell = new WetWellDataTable();
            base.Tables.Add(this.tableWetWell);
            this.tableEnvironSensor = new EnvironSensorDataTable();
            base.Tables.Add(this.tableEnvironSensor);
            this.tableDepthData = new DepthDataDataTable();
            base.Tables.Add(this.tableDepthData);
            this.tableRaw = new RawDataTable();
            base.Tables.Add(this.tableRaw);
            this.tableCalculated = new CalculatedDataTable();
            base.Tables.Add(this.tableCalculated);
            this.tableDistributed = new DistributedDataTable();
            base.Tables.Add(this.tableDistributed);
            this.tableCycleSummary = new CycleSummaryDataTable();
            base.Tables.Add(this.tableCycleSummary);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("STATION_PUMP", new global::System.Data.DataColumn[] {
                        this.tableStation.StationIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePump.StationIDColumn});
            this.tablePump.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("STATION_CYCLE_DATA", new global::System.Data.DataColumn[] {
                        this.tableStation.StationIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCycleData.StationIDColumn});
            this.tableCycleData.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Station_OperationsData", new global::System.Data.DataColumn[] {
                        this.tableStation.StationIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableOperationsData.StationIDColumn});
            this.tableOperationsData.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Station_WetWell", new global::System.Data.DataColumn[] {
                        this.tableStation.StationIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableWetWell.StationIDColumn});
            this.tableWetWell.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            this.relationSTATION_PUMP = new global::System.Data.DataRelation("STATION_PUMP", new global::System.Data.DataColumn[] {
                        this.tableStation.StationIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePump.StationIDColumn}, false);
            this.Relations.Add(this.relationSTATION_PUMP);
            this.relationSTATION_CYCLE_DATA = new global::System.Data.DataRelation("STATION_CYCLE_DATA", new global::System.Data.DataColumn[] {
                        this.tableStation.StationIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCycleData.StationIDColumn}, false);
            this.Relations.Add(this.relationSTATION_CYCLE_DATA);
            this.relationFK_Station_OperationsData = new global::System.Data.DataRelation("FK_Station_OperationsData", new global::System.Data.DataColumn[] {
                        this.tableStation.StationIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableOperationsData.StationIDColumn}, false);
            this.Relations.Add(this.relationFK_Station_OperationsData);
            this.relationFK_Station_WetWell = new global::System.Data.DataRelation("FK_Station_WetWell", new global::System.Data.DataColumn[] {
                        this.tableStation.StationIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableWetWell.StationIDColumn}, false);
            this.Relations.Add(this.relationFK_Station_WetWell);
            this.relationFK_ENVIRON_SENSOR_STATION = new global::System.Data.DataRelation("FK_ENVIRON_SENSOR_STATION", new global::System.Data.DataColumn[] {
                        this.tableStation.StationIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableEnvironSensor.StationIDColumn}, false);
            this.Relations.Add(this.relationFK_ENVIRON_SENSOR_STATION);
            this.relationStation_DepthData = new global::System.Data.DataRelation("Station_DepthData", new global::System.Data.DataColumn[] {
                        this.tableStation.StationIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableDepthData.StationIDColumn}, false);
            this.Relations.Add(this.relationStation_DepthData);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePump() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCycleData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOperationsData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWetWell() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEnvironSensor() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDepthData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRaw() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCalculated() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDistributed() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCycleSummary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            PumpCycleDataSet ds = new PumpCycleDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void StationRowChangeEventHandler(object sender, StationRowChangeEvent e);
        
        public delegate void PumpRowChangeEventHandler(object sender, PumpRowChangeEvent e);
        
        public delegate void CycleDataRowChangeEventHandler(object sender, CycleDataRowChangeEvent e);
        
        public delegate void OperationsDataRowChangeEventHandler(object sender, OperationsDataRowChangeEvent e);
        
        public delegate void WetWellRowChangeEventHandler(object sender, WetWellRowChangeEvent e);
        
        public delegate void EnvironSensorRowChangeEventHandler(object sender, EnvironSensorRowChangeEvent e);
        
        public delegate void DepthDataRowChangeEventHandler(object sender, DepthDataRowChangeEvent e);
        
        public delegate void RawRowChangeEventHandler(object sender, RawRowChangeEvent e);
        
        public delegate void CalculatedRowChangeEventHandler(object sender, CalculatedRowChangeEvent e);
        
        public delegate void DistributedRowChangeEventHandler(object sender, DistributedRowChangeEvent e);
        
        public delegate void CycleSummaryRowChangeEventHandler(object sender, CycleSummaryRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnStationID;
            
            private global::System.Data.DataColumn columnH2Number;
            
            private global::System.Data.DataColumn columnStationName;
            
            private global::System.Data.DataColumn columnLocationDescription;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnLocationType;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnStatePlaneXFt;
            
            private global::System.Data.DataColumn columnStatePlaneYFt;
            
            private global::System.Data.DataColumn columnCreateDate;
            
            private global::System.Data.DataColumn columnCreateBy;
            
            private global::System.Data.DataColumn columnUpdateDate;
            
            private global::System.Data.DataColumn columnUpdateBy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StationDataTable() {
                this.TableName = "Station";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StationIDColumn {
                get {
                    return this.columnStationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn H2NumberColumn {
                get {
                    return this.columnH2Number;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StationNameColumn {
                get {
                    return this.columnStationName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationDescriptionColumn {
                get {
                    return this.columnLocationDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationTypeColumn {
                get {
                    return this.columnLocationType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatePlaneXFtColumn {
                get {
                    return this.columnStatePlaneXFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatePlaneYFtColumn {
                get {
                    return this.columnStatePlaneYFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateDateColumn {
                get {
                    return this.columnCreateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateByColumn {
                get {
                    return this.columnCreateBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateDateColumn {
                get {
                    return this.columnUpdateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateByColumn {
                get {
                    return this.columnUpdateBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StationRow this[int index] {
                get {
                    return ((StationRow)(this.Rows[index]));
                }
            }
            
            public event StationRowChangeEventHandler StationRowChanging;
            
            public event StationRowChangeEventHandler StationRowChanged;
            
            public event StationRowChangeEventHandler StationRowDeleting;
            
            public event StationRowChangeEventHandler StationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStationRow(StationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StationRow AddStationRow(int H2Number, string StationName, string LocationDescription, string Address, string LocationType, System.DateTime StartDate, System.DateTime EndDate, int StatePlaneXFt, int StatePlaneYFt, System.DateTime CreateDate, string CreateBy, System.DateTime UpdateDate, string UpdateBy) {
                StationRow rowStationRow = ((StationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        H2Number,
                        StationName,
                        LocationDescription,
                        Address,
                        LocationType,
                        StartDate,
                        EndDate,
                        StatePlaneXFt,
                        StatePlaneYFt,
                        CreateDate,
                        CreateBy,
                        UpdateDate,
                        UpdateBy};
                rowStationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStationRow);
                return rowStationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StationRow FindByStationID(int StationID) {
                return ((StationRow)(this.Rows.Find(new object[] {
                            StationID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StationDataTable cln = ((StationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStationID = base.Columns["StationID"];
                this.columnH2Number = base.Columns["H2Number"];
                this.columnStationName = base.Columns["StationName"];
                this.columnLocationDescription = base.Columns["LocationDescription"];
                this.columnAddress = base.Columns["Address"];
                this.columnLocationType = base.Columns["LocationType"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnStatePlaneXFt = base.Columns["StatePlaneXFt"];
                this.columnStatePlaneYFt = base.Columns["StatePlaneYFt"];
                this.columnCreateDate = base.Columns["CreateDate"];
                this.columnCreateBy = base.Columns["CreateBy"];
                this.columnUpdateDate = base.Columns["UpdateDate"];
                this.columnUpdateBy = base.Columns["UpdateBy"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStationID = new global::System.Data.DataColumn("StationID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStationID);
                this.columnH2Number = new global::System.Data.DataColumn("H2Number", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnH2Number);
                this.columnStationName = new global::System.Data.DataColumn("StationName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStationName);
                this.columnLocationDescription = new global::System.Data.DataColumn("LocationDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationDescription);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnLocationType = new global::System.Data.DataColumn("LocationType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationType);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnStatePlaneXFt = new global::System.Data.DataColumn("StatePlaneXFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatePlaneXFt);
                this.columnStatePlaneYFt = new global::System.Data.DataColumn("StatePlaneYFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatePlaneYFt);
                this.columnCreateDate = new global::System.Data.DataColumn("CreateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateDate);
                this.columnCreateBy = new global::System.Data.DataColumn("CreateBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateBy);
                this.columnUpdateDate = new global::System.Data.DataColumn("UpdateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateDate);
                this.columnUpdateBy = new global::System.Data.DataColumn("UpdateBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateBy);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStationID}, true));
                this.columnStationID.AutoIncrement = true;
                this.columnStationID.AllowDBNull = false;
                this.columnStationID.ReadOnly = true;
                this.columnStationID.Unique = true;
                this.columnStationID.Caption = "station_id";
                this.columnH2Number.AllowDBNull = false;
                this.columnH2Number.Caption = "h2_number";
                this.columnStationName.AllowDBNull = false;
                this.columnStationName.Caption = "station_name";
                this.columnStationName.MaxLength = 50;
                this.columnLocationDescription.Caption = "location_description";
                this.columnLocationDescription.MaxLength = 255;
                this.columnAddress.Caption = "address";
                this.columnAddress.MaxLength = 80;
                this.columnLocationType.Caption = "location_type";
                this.columnLocationType.MaxLength = 25;
                this.columnStartDate.AllowDBNull = false;
                this.columnStartDate.Caption = "start_date";
                this.columnEndDate.Caption = "end_date";
                this.columnStatePlaneXFt.Caption = "state_plane_x_ft";
                this.columnStatePlaneYFt.Caption = "state_plane_y_ft";
                this.columnCreateDate.AllowDBNull = false;
                this.columnCreateDate.Caption = "create_date";
                this.columnCreateBy.AllowDBNull = false;
                this.columnCreateBy.Caption = "create_by";
                this.columnCreateBy.MaxLength = 50;
                this.columnUpdateDate.AllowDBNull = false;
                this.columnUpdateDate.Caption = "update_date";
                this.columnUpdateBy.AllowDBNull = false;
                this.columnUpdateBy.Caption = "update_by";
                this.columnUpdateBy.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StationRow NewStationRow() {
                return ((StationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StationRowChanged != null)) {
                    this.StationRowChanged(this, new StationRowChangeEvent(((StationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StationRowChanging != null)) {
                    this.StationRowChanging(this, new StationRowChangeEvent(((StationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StationRowDeleted != null)) {
                    this.StationRowDeleted(this, new StationRowChangeEvent(((StationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StationRowDeleting != null)) {
                    this.StationRowDeleting(this, new StationRowChangeEvent(((StationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStationRow(StationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PumpCycleDataSet ds = new PumpCycleDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PumpDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPumpID;
            
            private global::System.Data.DataColumn columnStationID;
            
            private global::System.Data.DataColumn columnPumpNumber;
            
            private global::System.Data.DataColumn columnPumpRateGPM;
            
            private global::System.Data.DataColumn columnOperatorType;
            
            private global::System.Data.DataColumn columnDriveType;
            
            private global::System.Data.DataColumn columnMotorHP;
            
            private global::System.Data.DataColumn columnPercentBelowAvgPumpRate;
            
            private global::System.Data.DataColumn columnPercentAboveAvgPumpRate;
            
            private global::System.Data.DataColumn columnLevelToStartPumpInches;
            
            private global::System.Data.DataColumn columnLevelToStopPumpInches;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnCreateDate;
            
            private global::System.Data.DataColumn columnCreateBy;
            
            private global::System.Data.DataColumn columnUpdateDate;
            
            private global::System.Data.DataColumn columnUpdateBy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PumpDataTable() {
                this.TableName = "Pump";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PumpDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PumpDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PumpIDColumn {
                get {
                    return this.columnPumpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StationIDColumn {
                get {
                    return this.columnStationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PumpNumberColumn {
                get {
                    return this.columnPumpNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PumpRateGPMColumn {
                get {
                    return this.columnPumpRateGPM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OperatorTypeColumn {
                get {
                    return this.columnOperatorType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DriveTypeColumn {
                get {
                    return this.columnDriveType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotorHPColumn {
                get {
                    return this.columnMotorHP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PercentBelowAvgPumpRateColumn {
                get {
                    return this.columnPercentBelowAvgPumpRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PercentAboveAvgPumpRateColumn {
                get {
                    return this.columnPercentAboveAvgPumpRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LevelToStartPumpInchesColumn {
                get {
                    return this.columnLevelToStartPumpInches;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LevelToStopPumpInchesColumn {
                get {
                    return this.columnLevelToStopPumpInches;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateDateColumn {
                get {
                    return this.columnCreateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateByColumn {
                get {
                    return this.columnCreateBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateDateColumn {
                get {
                    return this.columnUpdateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateByColumn {
                get {
                    return this.columnUpdateBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PumpRow this[int index] {
                get {
                    return ((PumpRow)(this.Rows[index]));
                }
            }
            
            public event PumpRowChangeEventHandler PumpRowChanging;
            
            public event PumpRowChangeEventHandler PumpRowChanged;
            
            public event PumpRowChangeEventHandler PumpRowDeleting;
            
            public event PumpRowChangeEventHandler PumpRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPumpRow(PumpRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PumpRow AddPumpRow(
                        StationRow parentStationRowBySTATION_PUMP, 
                        short PumpNumber, 
                        int PumpRateGPM, 
                        string OperatorType, 
                        string DriveType, 
                        int MotorHP, 
                        int PercentBelowAvgPumpRate, 
                        int PercentAboveAvgPumpRate, 
                        decimal LevelToStartPumpInches, 
                        decimal LevelToStopPumpInches, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        System.DateTime CreateDate, 
                        string CreateBy, 
                        System.DateTime UpdateDate, 
                        string UpdateBy) {
                PumpRow rowPumpRow = ((PumpRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        PumpNumber,
                        PumpRateGPM,
                        OperatorType,
                        DriveType,
                        MotorHP,
                        PercentBelowAvgPumpRate,
                        PercentAboveAvgPumpRate,
                        LevelToStartPumpInches,
                        LevelToStopPumpInches,
                        StartDate,
                        EndDate,
                        CreateDate,
                        CreateBy,
                        UpdateDate,
                        UpdateBy};
                if ((parentStationRowBySTATION_PUMP != null)) {
                    columnValuesArray[1] = parentStationRowBySTATION_PUMP[0];
                }
                rowPumpRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPumpRow);
                return rowPumpRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PumpRow FindByPumpID(int PumpID) {
                return ((PumpRow)(this.Rows.Find(new object[] {
                            PumpID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PumpDataTable cln = ((PumpDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PumpDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPumpID = base.Columns["PumpID"];
                this.columnStationID = base.Columns["StationID"];
                this.columnPumpNumber = base.Columns["PumpNumber"];
                this.columnPumpRateGPM = base.Columns["PumpRateGPM"];
                this.columnOperatorType = base.Columns["OperatorType"];
                this.columnDriveType = base.Columns["DriveType"];
                this.columnMotorHP = base.Columns["MotorHP"];
                this.columnPercentBelowAvgPumpRate = base.Columns["PercentBelowAvgPumpRate"];
                this.columnPercentAboveAvgPumpRate = base.Columns["PercentAboveAvgPumpRate"];
                this.columnLevelToStartPumpInches = base.Columns["LevelToStartPumpInches"];
                this.columnLevelToStopPumpInches = base.Columns["LevelToStopPumpInches"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnCreateDate = base.Columns["CreateDate"];
                this.columnCreateBy = base.Columns["CreateBy"];
                this.columnUpdateDate = base.Columns["UpdateDate"];
                this.columnUpdateBy = base.Columns["UpdateBy"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPumpID = new global::System.Data.DataColumn("PumpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPumpID);
                this.columnStationID = new global::System.Data.DataColumn("StationID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStationID);
                this.columnPumpNumber = new global::System.Data.DataColumn("PumpNumber", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPumpNumber);
                this.columnPumpRateGPM = new global::System.Data.DataColumn("PumpRateGPM", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPumpRateGPM);
                this.columnOperatorType = new global::System.Data.DataColumn("OperatorType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperatorType);
                this.columnDriveType = new global::System.Data.DataColumn("DriveType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDriveType);
                this.columnMotorHP = new global::System.Data.DataColumn("MotorHP", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotorHP);
                this.columnPercentBelowAvgPumpRate = new global::System.Data.DataColumn("PercentBelowAvgPumpRate", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentBelowAvgPumpRate);
                this.columnPercentAboveAvgPumpRate = new global::System.Data.DataColumn("PercentAboveAvgPumpRate", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentAboveAvgPumpRate);
                this.columnLevelToStartPumpInches = new global::System.Data.DataColumn("LevelToStartPumpInches", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLevelToStartPumpInches);
                this.columnLevelToStopPumpInches = new global::System.Data.DataColumn("LevelToStopPumpInches", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLevelToStopPumpInches);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnCreateDate = new global::System.Data.DataColumn("CreateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateDate);
                this.columnCreateBy = new global::System.Data.DataColumn("CreateBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateBy);
                this.columnUpdateDate = new global::System.Data.DataColumn("UpdateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateDate);
                this.columnUpdateBy = new global::System.Data.DataColumn("UpdateBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateBy);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPumpID}, true));
                this.columnPumpID.AutoIncrement = true;
                this.columnPumpID.AllowDBNull = false;
                this.columnPumpID.ReadOnly = true;
                this.columnPumpID.Unique = true;
                this.columnPumpID.Caption = "pump_id";
                this.columnStationID.AllowDBNull = false;
                this.columnStationID.Caption = "station_id";
                this.columnPumpNumber.AllowDBNull = false;
                this.columnPumpNumber.Caption = "pump_number";
                this.columnPumpRateGPM.Caption = "pump_rate_gpm";
                this.columnOperatorType.Caption = "operator_type";
                this.columnOperatorType.MaxLength = 1;
                this.columnDriveType.Caption = "drive_type";
                this.columnDriveType.MaxLength = 1;
                this.columnMotorHP.Caption = "motor_hp";
                this.columnPercentBelowAvgPumpRate.Caption = "percent_below_avg_pump_rate";
                this.columnPercentAboveAvgPumpRate.Caption = "percent_above_avg_pump_rate";
                this.columnLevelToStartPumpInches.Caption = "level_to_start_pump_inches";
                this.columnLevelToStopPumpInches.Caption = "level_to_stop_pump_inches";
                this.columnStartDate.AllowDBNull = false;
                this.columnStartDate.Caption = "start_date";
                this.columnEndDate.Caption = "end_date";
                this.columnCreateDate.AllowDBNull = false;
                this.columnCreateDate.Caption = "create_date";
                this.columnCreateBy.AllowDBNull = false;
                this.columnCreateBy.Caption = "create_by";
                this.columnCreateBy.MaxLength = 50;
                this.columnUpdateDate.AllowDBNull = false;
                this.columnUpdateDate.Caption = "update_date";
                this.columnUpdateBy.AllowDBNull = false;
                this.columnUpdateBy.Caption = "update_by";
                this.columnUpdateBy.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PumpRow NewPumpRow() {
                return ((PumpRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PumpRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PumpRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PumpRowChanged != null)) {
                    this.PumpRowChanged(this, new PumpRowChangeEvent(((PumpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PumpRowChanging != null)) {
                    this.PumpRowChanging(this, new PumpRowChangeEvent(((PumpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PumpRowDeleted != null)) {
                    this.PumpRowDeleted(this, new PumpRowChangeEvent(((PumpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PumpRowDeleting != null)) {
                    this.PumpRowDeleting(this, new PumpRowChangeEvent(((PumpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePumpRow(PumpRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PumpCycleDataSet ds = new PumpCycleDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PumpDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CycleDataDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCycleDataID;
            
            private global::System.Data.DataColumn columnCalendarDateID;
            
            private global::System.Data.DataColumn columnTimeOfDayID;
            
            private global::System.Data.DataColumn columnStationID;
            
            private global::System.Data.DataColumn columnPumpID;
            
            private global::System.Data.DataColumn columnCycleChangeTime;
            
            private global::System.Data.DataColumn columnOnOffState;
            
            private global::System.Data.DataColumn columnLoadDate;
            
            private global::System.Data.DataColumn columnSourceFilename;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CycleDataDataTable() {
                this.TableName = "CycleData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CycleDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CycleDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CycleDataIDColumn {
                get {
                    return this.columnCycleDataID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CalendarDateIDColumn {
                get {
                    return this.columnCalendarDateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeOfDayIDColumn {
                get {
                    return this.columnTimeOfDayID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StationIDColumn {
                get {
                    return this.columnStationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PumpIDColumn {
                get {
                    return this.columnPumpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CycleChangeTimeColumn {
                get {
                    return this.columnCycleChangeTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OnOffStateColumn {
                get {
                    return this.columnOnOffState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoadDateColumn {
                get {
                    return this.columnLoadDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceFilenameColumn {
                get {
                    return this.columnSourceFilename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CycleDataRow this[int index] {
                get {
                    return ((CycleDataRow)(this.Rows[index]));
                }
            }
            
            public event CycleDataRowChangeEventHandler CycleDataRowChanging;
            
            public event CycleDataRowChangeEventHandler CycleDataRowChanged;
            
            public event CycleDataRowChangeEventHandler CycleDataRowDeleting;
            
            public event CycleDataRowChangeEventHandler CycleDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCycleDataRow(CycleDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CycleDataRow AddCycleDataRow(int CalendarDateID, int TimeOfDayID, StationRow parentStationRowBySTATION_CYCLE_DATA, int PumpID, System.DateTime CycleChangeTime, byte OnOffState, System.DateTime LoadDate, string SourceFilename) {
                CycleDataRow rowCycleDataRow = ((CycleDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CalendarDateID,
                        TimeOfDayID,
                        null,
                        PumpID,
                        CycleChangeTime,
                        OnOffState,
                        LoadDate,
                        SourceFilename};
                if ((parentStationRowBySTATION_CYCLE_DATA != null)) {
                    columnValuesArray[3] = parentStationRowBySTATION_CYCLE_DATA[0];
                }
                rowCycleDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCycleDataRow);
                return rowCycleDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CycleDataRow FindByCycleDataID(int CycleDataID) {
                return ((CycleDataRow)(this.Rows.Find(new object[] {
                            CycleDataID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CycleDataDataTable cln = ((CycleDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CycleDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCycleDataID = base.Columns["CycleDataID"];
                this.columnCalendarDateID = base.Columns["CalendarDateID"];
                this.columnTimeOfDayID = base.Columns["TimeOfDayID"];
                this.columnStationID = base.Columns["StationID"];
                this.columnPumpID = base.Columns["PumpID"];
                this.columnCycleChangeTime = base.Columns["CycleChangeTime"];
                this.columnOnOffState = base.Columns["OnOffState"];
                this.columnLoadDate = base.Columns["LoadDate"];
                this.columnSourceFilename = base.Columns["SourceFilename"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCycleDataID = new global::System.Data.DataColumn("CycleDataID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCycleDataID);
                this.columnCalendarDateID = new global::System.Data.DataColumn("CalendarDateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCalendarDateID);
                this.columnTimeOfDayID = new global::System.Data.DataColumn("TimeOfDayID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeOfDayID);
                this.columnStationID = new global::System.Data.DataColumn("StationID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStationID);
                this.columnPumpID = new global::System.Data.DataColumn("PumpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPumpID);
                this.columnCycleChangeTime = new global::System.Data.DataColumn("CycleChangeTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCycleChangeTime);
                this.columnOnOffState = new global::System.Data.DataColumn("OnOffState", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOnOffState);
                this.columnLoadDate = new global::System.Data.DataColumn("LoadDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoadDate);
                this.columnSourceFilename = new global::System.Data.DataColumn("SourceFilename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceFilename);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCycleDataID}, true));
                this.columnCycleDataID.AutoIncrement = true;
                this.columnCycleDataID.AllowDBNull = false;
                this.columnCycleDataID.ReadOnly = true;
                this.columnCycleDataID.Unique = true;
                this.columnCycleDataID.Caption = "cycle_data_id";
                this.columnCalendarDateID.AllowDBNull = false;
                this.columnCalendarDateID.Caption = "calendar_date_id";
                this.columnTimeOfDayID.AllowDBNull = false;
                this.columnTimeOfDayID.Caption = "time_of_day_id";
                this.columnStationID.AllowDBNull = false;
                this.columnStationID.Caption = "station_id";
                this.columnPumpID.AllowDBNull = false;
                this.columnPumpID.Caption = "pump_id";
                this.columnCycleChangeTime.AllowDBNull = false;
                this.columnCycleChangeTime.Caption = "cycle_change_time";
                this.columnOnOffState.AllowDBNull = false;
                this.columnOnOffState.Caption = "onoff_state";
                this.columnLoadDate.AllowDBNull = false;
                this.columnLoadDate.Caption = "load_date";
                this.columnSourceFilename.AllowDBNull = false;
                this.columnSourceFilename.Caption = "source_filename";
                this.columnSourceFilename.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CycleDataRow NewCycleDataRow() {
                return ((CycleDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CycleDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CycleDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CycleDataRowChanged != null)) {
                    this.CycleDataRowChanged(this, new CycleDataRowChangeEvent(((CycleDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CycleDataRowChanging != null)) {
                    this.CycleDataRowChanging(this, new CycleDataRowChangeEvent(((CycleDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CycleDataRowDeleted != null)) {
                    this.CycleDataRowDeleted(this, new CycleDataRowChangeEvent(((CycleDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CycleDataRowDeleting != null)) {
                    this.CycleDataRowDeleting(this, new CycleDataRowChangeEvent(((CycleDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCycleDataRow(CycleDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PumpCycleDataSet ds = new PumpCycleDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CycleDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OperationsDataDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnOperationsDataID;
            
            private global::System.Data.DataColumn columnCalendarDateID;
            
            private global::System.Data.DataColumn columnTimeOfDayID;
            
            private global::System.Data.DataColumn columnStationID;
            
            private global::System.Data.DataColumn columnChannel;
            
            private global::System.Data.DataColumn columnMessageTime;
            
            private global::System.Data.DataColumn columnMessageText;
            
            private global::System.Data.DataColumn columnLoadDate;
            
            private global::System.Data.DataColumn columnSourceFileName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsDataDataTable() {
                this.TableName = "OperationsData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OperationsDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OperationsDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OperationsDataIDColumn {
                get {
                    return this.columnOperationsDataID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CalendarDateIDColumn {
                get {
                    return this.columnCalendarDateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeOfDayIDColumn {
                get {
                    return this.columnTimeOfDayID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StationIDColumn {
                get {
                    return this.columnStationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChannelColumn {
                get {
                    return this.columnChannel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MessageTimeColumn {
                get {
                    return this.columnMessageTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MessageTextColumn {
                get {
                    return this.columnMessageText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoadDateColumn {
                get {
                    return this.columnLoadDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceFileNameColumn {
                get {
                    return this.columnSourceFileName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsDataRow this[int index] {
                get {
                    return ((OperationsDataRow)(this.Rows[index]));
                }
            }
            
            public event OperationsDataRowChangeEventHandler OperationsDataRowChanging;
            
            public event OperationsDataRowChangeEventHandler OperationsDataRowChanged;
            
            public event OperationsDataRowChangeEventHandler OperationsDataRowDeleting;
            
            public event OperationsDataRowChangeEventHandler OperationsDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOperationsDataRow(OperationsDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsDataRow AddOperationsDataRow(int CalendarDateID, int TimeOfDayID, StationRow parentStationRowByFK_Station_OperationsData, string Channel, System.DateTime MessageTime, string MessageText, System.DateTime LoadDate, string SourceFileName) {
                OperationsDataRow rowOperationsDataRow = ((OperationsDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CalendarDateID,
                        TimeOfDayID,
                        null,
                        Channel,
                        MessageTime,
                        MessageText,
                        LoadDate,
                        SourceFileName};
                if ((parentStationRowByFK_Station_OperationsData != null)) {
                    columnValuesArray[3] = parentStationRowByFK_Station_OperationsData[0];
                }
                rowOperationsDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOperationsDataRow);
                return rowOperationsDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsDataRow FindByOperationsDataID(int OperationsDataID) {
                return ((OperationsDataRow)(this.Rows.Find(new object[] {
                            OperationsDataID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OperationsDataDataTable cln = ((OperationsDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OperationsDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOperationsDataID = base.Columns["OperationsDataID"];
                this.columnCalendarDateID = base.Columns["CalendarDateID"];
                this.columnTimeOfDayID = base.Columns["TimeOfDayID"];
                this.columnStationID = base.Columns["StationID"];
                this.columnChannel = base.Columns["Channel"];
                this.columnMessageTime = base.Columns["MessageTime"];
                this.columnMessageText = base.Columns["MessageText"];
                this.columnLoadDate = base.Columns["LoadDate"];
                this.columnSourceFileName = base.Columns["SourceFileName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOperationsDataID = new global::System.Data.DataColumn("OperationsDataID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperationsDataID);
                this.columnCalendarDateID = new global::System.Data.DataColumn("CalendarDateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCalendarDateID);
                this.columnTimeOfDayID = new global::System.Data.DataColumn("TimeOfDayID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeOfDayID);
                this.columnStationID = new global::System.Data.DataColumn("StationID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStationID);
                this.columnChannel = new global::System.Data.DataColumn("Channel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChannel);
                this.columnMessageTime = new global::System.Data.DataColumn("MessageTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessageTime);
                this.columnMessageText = new global::System.Data.DataColumn("MessageText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessageText);
                this.columnLoadDate = new global::System.Data.DataColumn("LoadDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoadDate);
                this.columnSourceFileName = new global::System.Data.DataColumn("SourceFileName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceFileName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnOperationsDataID}, true));
                this.columnOperationsDataID.AutoIncrement = true;
                this.columnOperationsDataID.AllowDBNull = false;
                this.columnOperationsDataID.ReadOnly = true;
                this.columnOperationsDataID.Unique = true;
                this.columnOperationsDataID.Caption = "operations_data_id";
                this.columnCalendarDateID.AllowDBNull = false;
                this.columnCalendarDateID.Caption = "calendar_date_id";
                this.columnTimeOfDayID.AllowDBNull = false;
                this.columnTimeOfDayID.Caption = "time_of_day_id";
                this.columnStationID.AllowDBNull = false;
                this.columnStationID.Caption = "station_id";
                this.columnChannel.AllowDBNull = false;
                this.columnChannel.Caption = "channel";
                this.columnChannel.MaxLength = 1;
                this.columnMessageTime.AllowDBNull = false;
                this.columnMessageTime.Caption = "message_time";
                this.columnMessageText.AllowDBNull = false;
                this.columnMessageText.Caption = "message_text";
                this.columnMessageText.MaxLength = 50;
                this.columnLoadDate.AllowDBNull = false;
                this.columnLoadDate.Caption = "load_date";
                this.columnSourceFileName.AllowDBNull = false;
                this.columnSourceFileName.Caption = "source_filename";
                this.columnSourceFileName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsDataRow NewOperationsDataRow() {
                return ((OperationsDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OperationsDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OperationsDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OperationsDataRowChanged != null)) {
                    this.OperationsDataRowChanged(this, new OperationsDataRowChangeEvent(((OperationsDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OperationsDataRowChanging != null)) {
                    this.OperationsDataRowChanging(this, new OperationsDataRowChangeEvent(((OperationsDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OperationsDataRowDeleted != null)) {
                    this.OperationsDataRowDeleted(this, new OperationsDataRowChangeEvent(((OperationsDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OperationsDataRowDeleting != null)) {
                    this.OperationsDataRowDeleting(this, new OperationsDataRowChangeEvent(((OperationsDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOperationsDataRow(OperationsDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PumpCycleDataSet ds = new PumpCycleDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OperationsDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WetWellDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnWetWellID;
            
            private global::System.Data.DataColumn columnStationID;
            
            private global::System.Data.DataColumn columnWetWellVolumeGallons;
            
            private global::System.Data.DataColumn columnWetWellType;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnCreateDate;
            
            private global::System.Data.DataColumn columnCreateBy;
            
            private global::System.Data.DataColumn columnUpdateDate;
            
            private global::System.Data.DataColumn columnUpdateBy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WetWellDataTable() {
                this.TableName = "WetWell";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WetWellDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WetWellDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WetWellIDColumn {
                get {
                    return this.columnWetWellID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StationIDColumn {
                get {
                    return this.columnStationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WetWellVolumeGallonsColumn {
                get {
                    return this.columnWetWellVolumeGallons;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WetWellTypeColumn {
                get {
                    return this.columnWetWellType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateDateColumn {
                get {
                    return this.columnCreateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateByColumn {
                get {
                    return this.columnCreateBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateDateColumn {
                get {
                    return this.columnUpdateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateByColumn {
                get {
                    return this.columnUpdateBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WetWellRow this[int index] {
                get {
                    return ((WetWellRow)(this.Rows[index]));
                }
            }
            
            public event WetWellRowChangeEventHandler WetWellRowChanging;
            
            public event WetWellRowChangeEventHandler WetWellRowChanged;
            
            public event WetWellRowChangeEventHandler WetWellRowDeleting;
            
            public event WetWellRowChangeEventHandler WetWellRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWetWellRow(WetWellRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WetWellRow AddWetWellRow(StationRow parentStationRowByFK_Station_WetWell, int WetWellVolumeGallons, string WetWellType, System.DateTime StartDate, System.DateTime EndDate, System.DateTime CreateDate, string CreateBy, System.DateTime UpdateDate, string UpdateBy) {
                WetWellRow rowWetWellRow = ((WetWellRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        WetWellVolumeGallons,
                        WetWellType,
                        StartDate,
                        EndDate,
                        CreateDate,
                        CreateBy,
                        UpdateDate,
                        UpdateBy};
                if ((parentStationRowByFK_Station_WetWell != null)) {
                    columnValuesArray[1] = parentStationRowByFK_Station_WetWell[0];
                }
                rowWetWellRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWetWellRow);
                return rowWetWellRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WetWellRow FindByStationIDWetWellVolumeGallonsWetWellTypeStartDate(int StationID, int WetWellVolumeGallons, string WetWellType, System.DateTime StartDate) {
                return ((WetWellRow)(this.Rows.Find(new object[] {
                            StationID,
                            WetWellVolumeGallons,
                            WetWellType,
                            StartDate})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                WetWellDataTable cln = ((WetWellDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new WetWellDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWetWellID = base.Columns["WetWellID"];
                this.columnStationID = base.Columns["StationID"];
                this.columnWetWellVolumeGallons = base.Columns["WetWellVolumeGallons"];
                this.columnWetWellType = base.Columns["WetWellType"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnCreateDate = base.Columns["CreateDate"];
                this.columnCreateBy = base.Columns["CreateBy"];
                this.columnUpdateDate = base.Columns["UpdateDate"];
                this.columnUpdateBy = base.Columns["UpdateBy"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWetWellID = new global::System.Data.DataColumn("WetWellID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWetWellID);
                this.columnStationID = new global::System.Data.DataColumn("StationID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStationID);
                this.columnWetWellVolumeGallons = new global::System.Data.DataColumn("WetWellVolumeGallons", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWetWellVolumeGallons);
                this.columnWetWellType = new global::System.Data.DataColumn("WetWellType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWetWellType);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnCreateDate = new global::System.Data.DataColumn("CreateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateDate);
                this.columnCreateBy = new global::System.Data.DataColumn("CreateBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateBy);
                this.columnUpdateDate = new global::System.Data.DataColumn("UpdateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateDate);
                this.columnUpdateBy = new global::System.Data.DataColumn("UpdateBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateBy);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStationID,
                                this.columnWetWellVolumeGallons,
                                this.columnWetWellType,
                                this.columnStartDate}, true));
                this.columnWetWellID.AutoIncrement = true;
                this.columnWetWellID.AllowDBNull = false;
                this.columnWetWellID.ReadOnly = true;
                this.columnWetWellID.Caption = "wetwell_id";
                this.columnStationID.AllowDBNull = false;
                this.columnStationID.Caption = "station_id";
                this.columnWetWellVolumeGallons.AllowDBNull = false;
                this.columnWetWellVolumeGallons.Caption = "wetwell_volume_gallons";
                this.columnWetWellType.AllowDBNull = false;
                this.columnWetWellType.Caption = "wetwell_type";
                this.columnWetWellType.MaxLength = 20;
                this.columnStartDate.AllowDBNull = false;
                this.columnStartDate.Caption = "start_date";
                this.columnEndDate.Caption = "end_date";
                this.columnCreateDate.AllowDBNull = false;
                this.columnCreateDate.Caption = "create_date";
                this.columnCreateBy.AllowDBNull = false;
                this.columnCreateBy.Caption = "create_by";
                this.columnCreateBy.MaxLength = 50;
                this.columnUpdateDate.AllowDBNull = false;
                this.columnUpdateDate.Caption = "update_date";
                this.columnUpdateBy.AllowDBNull = false;
                this.columnUpdateBy.Caption = "update_by";
                this.columnUpdateBy.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WetWellRow NewWetWellRow() {
                return ((WetWellRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new WetWellRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(WetWellRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WetWellRowChanged != null)) {
                    this.WetWellRowChanged(this, new WetWellRowChangeEvent(((WetWellRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WetWellRowChanging != null)) {
                    this.WetWellRowChanging(this, new WetWellRowChangeEvent(((WetWellRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WetWellRowDeleted != null)) {
                    this.WetWellRowDeleted(this, new WetWellRowChangeEvent(((WetWellRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WetWellRowDeleting != null)) {
                    this.WetWellRowDeleting(this, new WetWellRowChangeEvent(((WetWellRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWetWellRow(WetWellRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PumpCycleDataSet ds = new PumpCycleDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WetWellDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EnvironSensorDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEnvironSensorID;
            
            private global::System.Data.DataColumn columnStationID;
            
            private global::System.Data.DataColumn columnXDataCategoryLocQualCombined;
            
            private global::System.Data.DataColumn columnDataCategory;
            
            private global::System.Data.DataColumn columnLocationQualifier;
            
            private global::System.Data.DataColumn columnChannel;
            
            private global::System.Data.DataColumn columnChannelName;
            
            private global::System.Data.DataColumn columnChannelDescription;
            
            private global::System.Data.DataColumn columnEngineeringUnitSpan;
            
            private global::System.Data.DataColumn columnEngineeringUnitZero;
            
            private global::System.Data.DataColumn columnEngineeringUnits;
            
            private global::System.Data.DataColumn columnHasDepthToFlow;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnCreateDate;
            
            private global::System.Data.DataColumn columnCreateBy;
            
            private global::System.Data.DataColumn columnUpdateDate;
            
            private global::System.Data.DataColumn columnUpdateBy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnvironSensorDataTable() {
                this.TableName = "EnvironSensor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EnvironSensorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EnvironSensorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnvironSensorIDColumn {
                get {
                    return this.columnEnvironSensorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StationIDColumn {
                get {
                    return this.columnStationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XDataCategoryLocQualCombinedColumn {
                get {
                    return this.columnXDataCategoryLocQualCombined;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataCategoryColumn {
                get {
                    return this.columnDataCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationQualifierColumn {
                get {
                    return this.columnLocationQualifier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChannelColumn {
                get {
                    return this.columnChannel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChannelNameColumn {
                get {
                    return this.columnChannelName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChannelDescriptionColumn {
                get {
                    return this.columnChannelDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EngineeringUnitSpanColumn {
                get {
                    return this.columnEngineeringUnitSpan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EngineeringUnitZeroColumn {
                get {
                    return this.columnEngineeringUnitZero;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EngineeringUnitsColumn {
                get {
                    return this.columnEngineeringUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasDepthToFlowColumn {
                get {
                    return this.columnHasDepthToFlow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateDateColumn {
                get {
                    return this.columnCreateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateByColumn {
                get {
                    return this.columnCreateBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateDateColumn {
                get {
                    return this.columnUpdateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateByColumn {
                get {
                    return this.columnUpdateBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnvironSensorRow this[int index] {
                get {
                    return ((EnvironSensorRow)(this.Rows[index]));
                }
            }
            
            public event EnvironSensorRowChangeEventHandler EnvironSensorRowChanging;
            
            public event EnvironSensorRowChangeEventHandler EnvironSensorRowChanged;
            
            public event EnvironSensorRowChangeEventHandler EnvironSensorRowDeleting;
            
            public event EnvironSensorRowChangeEventHandler EnvironSensorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEnvironSensorRow(EnvironSensorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnvironSensorRow AddEnvironSensorRow(
                        StationRow parentStationRowByFK_ENVIRON_SENSOR_STATION, 
                        string XDataCategoryLocQualCombined, 
                        string DataCategory, 
                        string LocationQualifier, 
                        string Channel, 
                        string ChannelName, 
                        string ChannelDescription, 
                        decimal EngineeringUnitSpan, 
                        decimal EngineeringUnitZero, 
                        string EngineeringUnits, 
                        string HasDepthToFlow, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        System.DateTime CreateDate, 
                        string CreateBy, 
                        System.DateTime UpdateDate, 
                        string UpdateBy) {
                EnvironSensorRow rowEnvironSensorRow = ((EnvironSensorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        XDataCategoryLocQualCombined,
                        DataCategory,
                        LocationQualifier,
                        Channel,
                        ChannelName,
                        ChannelDescription,
                        EngineeringUnitSpan,
                        EngineeringUnitZero,
                        EngineeringUnits,
                        HasDepthToFlow,
                        StartDate,
                        EndDate,
                        CreateDate,
                        CreateBy,
                        UpdateDate,
                        UpdateBy};
                if ((parentStationRowByFK_ENVIRON_SENSOR_STATION != null)) {
                    columnValuesArray[1] = parentStationRowByFK_ENVIRON_SENSOR_STATION[0];
                }
                rowEnvironSensorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEnvironSensorRow);
                return rowEnvironSensorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnvironSensorRow FindByEnvironSensorID(int EnvironSensorID) {
                return ((EnvironSensorRow)(this.Rows.Find(new object[] {
                            EnvironSensorID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EnvironSensorDataTable cln = ((EnvironSensorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EnvironSensorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEnvironSensorID = base.Columns["EnvironSensorID"];
                this.columnStationID = base.Columns["StationID"];
                this.columnXDataCategoryLocQualCombined = base.Columns["XDataCategoryLocQualCombined"];
                this.columnDataCategory = base.Columns["DataCategory"];
                this.columnLocationQualifier = base.Columns["LocationQualifier"];
                this.columnChannel = base.Columns["Channel"];
                this.columnChannelName = base.Columns["ChannelName"];
                this.columnChannelDescription = base.Columns["ChannelDescription"];
                this.columnEngineeringUnitSpan = base.Columns["EngineeringUnitSpan"];
                this.columnEngineeringUnitZero = base.Columns["EngineeringUnitZero"];
                this.columnEngineeringUnits = base.Columns["EngineeringUnits"];
                this.columnHasDepthToFlow = base.Columns["HasDepthToFlow"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnCreateDate = base.Columns["CreateDate"];
                this.columnCreateBy = base.Columns["CreateBy"];
                this.columnUpdateDate = base.Columns["UpdateDate"];
                this.columnUpdateBy = base.Columns["UpdateBy"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEnvironSensorID = new global::System.Data.DataColumn("EnvironSensorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnvironSensorID);
                this.columnStationID = new global::System.Data.DataColumn("StationID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStationID);
                this.columnXDataCategoryLocQualCombined = new global::System.Data.DataColumn("XDataCategoryLocQualCombined", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXDataCategoryLocQualCombined);
                this.columnDataCategory = new global::System.Data.DataColumn("DataCategory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataCategory);
                this.columnLocationQualifier = new global::System.Data.DataColumn("LocationQualifier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationQualifier);
                this.columnChannel = new global::System.Data.DataColumn("Channel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChannel);
                this.columnChannelName = new global::System.Data.DataColumn("ChannelName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChannelName);
                this.columnChannelDescription = new global::System.Data.DataColumn("ChannelDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChannelDescription);
                this.columnEngineeringUnitSpan = new global::System.Data.DataColumn("EngineeringUnitSpan", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEngineeringUnitSpan);
                this.columnEngineeringUnitZero = new global::System.Data.DataColumn("EngineeringUnitZero", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEngineeringUnitZero);
                this.columnEngineeringUnits = new global::System.Data.DataColumn("EngineeringUnits", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEngineeringUnits);
                this.columnHasDepthToFlow = new global::System.Data.DataColumn("HasDepthToFlow", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasDepthToFlow);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnCreateDate = new global::System.Data.DataColumn("CreateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateDate);
                this.columnCreateBy = new global::System.Data.DataColumn("CreateBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateBy);
                this.columnUpdateDate = new global::System.Data.DataColumn("UpdateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateDate);
                this.columnUpdateBy = new global::System.Data.DataColumn("UpdateBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateBy);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEnvironSensorID}, true));
                this.columnEnvironSensorID.AutoIncrement = true;
                this.columnEnvironSensorID.AllowDBNull = false;
                this.columnEnvironSensorID.ReadOnly = true;
                this.columnEnvironSensorID.Unique = true;
                this.columnEnvironSensorID.Caption = "environ_sensor_id";
                this.columnStationID.AllowDBNull = false;
                this.columnStationID.Caption = "station_id";
                this.columnXDataCategoryLocQualCombined.Caption = "x_data_category_loc_qual_combined";
                this.columnXDataCategoryLocQualCombined.MaxLength = 25;
                this.columnDataCategory.AllowDBNull = false;
                this.columnDataCategory.Caption = "data_category";
                this.columnDataCategory.MaxLength = 25;
                this.columnLocationQualifier.AllowDBNull = false;
                this.columnLocationQualifier.Caption = "location_qualifier";
                this.columnLocationQualifier.MaxLength = 25;
                this.columnChannel.AllowDBNull = false;
                this.columnChannel.Caption = "channel";
                this.columnChannel.MaxLength = 1;
                this.columnChannelName.AllowDBNull = false;
                this.columnChannelName.Caption = "channel_name";
                this.columnChannelName.MaxLength = 30;
                this.columnChannelDescription.Caption = "channel_description";
                this.columnChannelDescription.MaxLength = 255;
                this.columnEngineeringUnitSpan.AllowDBNull = false;
                this.columnEngineeringUnitSpan.Caption = "engineering_unit_span";
                this.columnEngineeringUnitZero.AllowDBNull = false;
                this.columnEngineeringUnitZero.Caption = "engineering_unit_zero";
                this.columnEngineeringUnits.AllowDBNull = false;
                this.columnEngineeringUnits.Caption = "engineering_units";
                this.columnEngineeringUnits.MaxLength = 10;
                this.columnHasDepthToFlow.AllowDBNull = false;
                this.columnHasDepthToFlow.Caption = "has_depth_to_flow";
                this.columnHasDepthToFlow.MaxLength = 1;
                this.columnStartDate.AllowDBNull = false;
                this.columnStartDate.Caption = "start_date";
                this.columnEndDate.Caption = "end_date";
                this.columnCreateDate.AllowDBNull = false;
                this.columnCreateDate.Caption = "create_date";
                this.columnCreateBy.AllowDBNull = false;
                this.columnCreateBy.Caption = "create_by";
                this.columnCreateBy.MaxLength = 50;
                this.columnUpdateDate.AllowDBNull = false;
                this.columnUpdateDate.Caption = "update_date";
                this.columnUpdateBy.AllowDBNull = false;
                this.columnUpdateBy.Caption = "update_by";
                this.columnUpdateBy.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnvironSensorRow NewEnvironSensorRow() {
                return ((EnvironSensorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EnvironSensorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EnvironSensorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EnvironSensorRowChanged != null)) {
                    this.EnvironSensorRowChanged(this, new EnvironSensorRowChangeEvent(((EnvironSensorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EnvironSensorRowChanging != null)) {
                    this.EnvironSensorRowChanging(this, new EnvironSensorRowChangeEvent(((EnvironSensorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EnvironSensorRowDeleted != null)) {
                    this.EnvironSensorRowDeleted(this, new EnvironSensorRowChangeEvent(((EnvironSensorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EnvironSensorRowDeleting != null)) {
                    this.EnvironSensorRowDeleting(this, new EnvironSensorRowChangeEvent(((EnvironSensorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEnvironSensorRow(EnvironSensorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PumpCycleDataSet ds = new PumpCycleDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EnvironSensorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DepthDataDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDepthDataID;
            
            private global::System.Data.DataColumn columnCalendarDateID;
            
            private global::System.Data.DataColumn columnTimeOfDayID;
            
            private global::System.Data.DataColumn columnStationID;
            
            private global::System.Data.DataColumn columnEnvironSensorID;
            
            private global::System.Data.DataColumn columnLocationQualifier;
            
            private global::System.Data.DataColumn columnOriginalSampleTime;
            
            private global::System.Data.DataColumn columnAssignedSampleTime;
            
            private global::System.Data.DataColumn columnRawValue;
            
            private global::System.Data.DataColumn columnFinalValue;
            
            private global::System.Data.DataColumn columnUnits;
            
            private global::System.Data.DataColumn columnLoadDate;
            
            private global::System.Data.DataColumn columnSourceFilename;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepthDataDataTable() {
                this.TableName = "DepthData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DepthDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DepthDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepthDataIDColumn {
                get {
                    return this.columnDepthDataID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CalendarDateIDColumn {
                get {
                    return this.columnCalendarDateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeOfDayIDColumn {
                get {
                    return this.columnTimeOfDayID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StationIDColumn {
                get {
                    return this.columnStationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnvironSensorIDColumn {
                get {
                    return this.columnEnvironSensorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationQualifierColumn {
                get {
                    return this.columnLocationQualifier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalSampleTimeColumn {
                get {
                    return this.columnOriginalSampleTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignedSampleTimeColumn {
                get {
                    return this.columnAssignedSampleTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RawValueColumn {
                get {
                    return this.columnRawValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalValueColumn {
                get {
                    return this.columnFinalValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitsColumn {
                get {
                    return this.columnUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoadDateColumn {
                get {
                    return this.columnLoadDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceFilenameColumn {
                get {
                    return this.columnSourceFilename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepthDataRow this[int index] {
                get {
                    return ((DepthDataRow)(this.Rows[index]));
                }
            }
            
            public event DepthDataRowChangeEventHandler DepthDataRowChanging;
            
            public event DepthDataRowChangeEventHandler DepthDataRowChanged;
            
            public event DepthDataRowChangeEventHandler DepthDataRowDeleting;
            
            public event DepthDataRowChangeEventHandler DepthDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDepthDataRow(DepthDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepthDataRow AddDepthDataRow(int CalendarDateID, int TimeOfDayID, StationRow parentStationRowByStation_DepthData, int EnvironSensorID, string LocationQualifier, System.DateTime OriginalSampleTime, System.DateTime AssignedSampleTime, int RawValue, decimal FinalValue, string Units, System.DateTime LoadDate, string SourceFilename) {
                DepthDataRow rowDepthDataRow = ((DepthDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CalendarDateID,
                        TimeOfDayID,
                        null,
                        EnvironSensorID,
                        LocationQualifier,
                        OriginalSampleTime,
                        AssignedSampleTime,
                        RawValue,
                        FinalValue,
                        Units,
                        LoadDate,
                        SourceFilename};
                if ((parentStationRowByStation_DepthData != null)) {
                    columnValuesArray[3] = parentStationRowByStation_DepthData[0];
                }
                rowDepthDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDepthDataRow);
                return rowDepthDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepthDataRow FindByDepthDataID(long DepthDataID) {
                return ((DepthDataRow)(this.Rows.Find(new object[] {
                            DepthDataID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DepthDataDataTable cln = ((DepthDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DepthDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDepthDataID = base.Columns["DepthDataID"];
                this.columnCalendarDateID = base.Columns["CalendarDateID"];
                this.columnTimeOfDayID = base.Columns["TimeOfDayID"];
                this.columnStationID = base.Columns["StationID"];
                this.columnEnvironSensorID = base.Columns["EnvironSensorID"];
                this.columnLocationQualifier = base.Columns["LocationQualifier"];
                this.columnOriginalSampleTime = base.Columns["OriginalSampleTime"];
                this.columnAssignedSampleTime = base.Columns["AssignedSampleTime"];
                this.columnRawValue = base.Columns["RawValue"];
                this.columnFinalValue = base.Columns["FinalValue"];
                this.columnUnits = base.Columns["Units"];
                this.columnLoadDate = base.Columns["LoadDate"];
                this.columnSourceFilename = base.Columns["SourceFilename"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDepthDataID = new global::System.Data.DataColumn("DepthDataID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepthDataID);
                this.columnCalendarDateID = new global::System.Data.DataColumn("CalendarDateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCalendarDateID);
                this.columnTimeOfDayID = new global::System.Data.DataColumn("TimeOfDayID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeOfDayID);
                this.columnStationID = new global::System.Data.DataColumn("StationID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStationID);
                this.columnEnvironSensorID = new global::System.Data.DataColumn("EnvironSensorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnvironSensorID);
                this.columnLocationQualifier = new global::System.Data.DataColumn("LocationQualifier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationQualifier);
                this.columnOriginalSampleTime = new global::System.Data.DataColumn("OriginalSampleTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOriginalSampleTime);
                this.columnAssignedSampleTime = new global::System.Data.DataColumn("AssignedSampleTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignedSampleTime);
                this.columnRawValue = new global::System.Data.DataColumn("RawValue", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRawValue);
                this.columnFinalValue = new global::System.Data.DataColumn("FinalValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalValue);
                this.columnUnits = new global::System.Data.DataColumn("Units", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnits);
                this.columnLoadDate = new global::System.Data.DataColumn("LoadDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoadDate);
                this.columnSourceFilename = new global::System.Data.DataColumn("SourceFilename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceFilename);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDepthDataID}, true));
                this.columnDepthDataID.AutoIncrement = true;
                this.columnDepthDataID.AllowDBNull = false;
                this.columnDepthDataID.ReadOnly = true;
                this.columnDepthDataID.Unique = true;
                this.columnDepthDataID.Caption = "depth_data_id";
                this.columnCalendarDateID.AllowDBNull = false;
                this.columnCalendarDateID.Caption = "calendar_date_id";
                this.columnTimeOfDayID.AllowDBNull = false;
                this.columnTimeOfDayID.Caption = "time_of_day_id";
                this.columnStationID.AllowDBNull = false;
                this.columnStationID.Caption = "station_id";
                this.columnEnvironSensorID.AllowDBNull = false;
                this.columnEnvironSensorID.Caption = "environ_sensor_id";
                this.columnLocationQualifier.AllowDBNull = false;
                this.columnLocationQualifier.Caption = "location_qualifier";
                this.columnLocationQualifier.MaxLength = 25;
                this.columnOriginalSampleTime.AllowDBNull = false;
                this.columnOriginalSampleTime.Caption = "original_sample_time";
                this.columnAssignedSampleTime.AllowDBNull = false;
                this.columnAssignedSampleTime.Caption = "assigned_sample_time";
                this.columnRawValue.AllowDBNull = false;
                this.columnRawValue.Caption = "raw_value";
                this.columnFinalValue.AllowDBNull = false;
                this.columnFinalValue.Caption = "final_value";
                this.columnUnits.AllowDBNull = false;
                this.columnUnits.Caption = "units";
                this.columnUnits.MaxLength = 10;
                this.columnLoadDate.AllowDBNull = false;
                this.columnLoadDate.Caption = "load_date";
                this.columnSourceFilename.AllowDBNull = false;
                this.columnSourceFilename.Caption = "source_filename";
                this.columnSourceFilename.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepthDataRow NewDepthDataRow() {
                return ((DepthDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DepthDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DepthDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DepthDataRowChanged != null)) {
                    this.DepthDataRowChanged(this, new DepthDataRowChangeEvent(((DepthDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DepthDataRowChanging != null)) {
                    this.DepthDataRowChanging(this, new DepthDataRowChangeEvent(((DepthDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DepthDataRowDeleted != null)) {
                    this.DepthDataRowDeleted(this, new DepthDataRowChangeEvent(((DepthDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DepthDataRowDeleting != null)) {
                    this.DepthDataRowDeleting(this, new DepthDataRowChangeEvent(((DepthDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDepthDataRow(DepthDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PumpCycleDataSet ds = new PumpCycleDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DepthDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RawDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnCycleNum;
            
            private global::System.Data.DataColumn columnTimeOn;
            
            private global::System.Data.DataColumn columnTimeOff;
            
            private global::System.Data.DataColumn columnPumpRun;
            
            private global::System.Data.DataColumn columnInflow;
            
            private global::System.Data.DataColumn columnPump1;
            
            private global::System.Data.DataColumn columnPump2;
            
            private global::System.Data.DataColumn columnPump3;
            
            private global::System.Data.DataColumn columnPump4;
            
            private global::System.Data.DataColumn columnMulti;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RawDataTable() {
                this.TableName = "Raw";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RawDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RawDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CycleNumColumn {
                get {
                    return this.columnCycleNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeOnColumn {
                get {
                    return this.columnTimeOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeOffColumn {
                get {
                    return this.columnTimeOff;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PumpRunColumn {
                get {
                    return this.columnPumpRun;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InflowColumn {
                get {
                    return this.columnInflow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Pump1Column {
                get {
                    return this.columnPump1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Pump2Column {
                get {
                    return this.columnPump2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Pump3Column {
                get {
                    return this.columnPump3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Pump4Column {
                get {
                    return this.columnPump4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MultiColumn {
                get {
                    return this.columnMulti;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RawRow this[int index] {
                get {
                    return ((RawRow)(this.Rows[index]));
                }
            }
            
            public event RawRowChangeEventHandler RawRowChanging;
            
            public event RawRowChangeEventHandler RawRowChanged;
            
            public event RawRowChangeEventHandler RawRowDeleting;
            
            public event RawRowChangeEventHandler RawRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRawRow(RawRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RawRow AddRawRow(int CycleNum, int TimeOn, int TimeOff, int PumpRun, double Inflow, double Pump1, double Pump2, double Pump3, double Pump4, bool Multi) {
                RawRow rowRawRow = ((RawRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CycleNum,
                        TimeOn,
                        TimeOff,
                        PumpRun,
                        Inflow,
                        Pump1,
                        Pump2,
                        Pump3,
                        Pump4,
                        Multi};
                rowRawRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRawRow);
                return rowRawRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RawRow FindByID(int ID) {
                return ((RawRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RawDataTable cln = ((RawDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RawDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnCycleNum = base.Columns["CycleNum"];
                this.columnTimeOn = base.Columns["TimeOn"];
                this.columnTimeOff = base.Columns["TimeOff"];
                this.columnPumpRun = base.Columns["PumpRun"];
                this.columnInflow = base.Columns["Inflow"];
                this.columnPump1 = base.Columns["Pump1"];
                this.columnPump2 = base.Columns["Pump2"];
                this.columnPump3 = base.Columns["Pump3"];
                this.columnPump4 = base.Columns["Pump4"];
                this.columnMulti = base.Columns["Multi"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnCycleNum = new global::System.Data.DataColumn("CycleNum", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCycleNum);
                this.columnTimeOn = new global::System.Data.DataColumn("TimeOn", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeOn);
                this.columnTimeOff = new global::System.Data.DataColumn("TimeOff", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeOff);
                this.columnPumpRun = new global::System.Data.DataColumn("PumpRun", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPumpRun);
                this.columnInflow = new global::System.Data.DataColumn("Inflow", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInflow);
                this.columnPump1 = new global::System.Data.DataColumn("Pump1", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPump1);
                this.columnPump2 = new global::System.Data.DataColumn("Pump2", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPump2);
                this.columnPump3 = new global::System.Data.DataColumn("Pump3", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPump3);
                this.columnPump4 = new global::System.Data.DataColumn("Pump4", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPump4);
                this.columnMulti = new global::System.Data.DataColumn("Multi", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMulti);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RawRow NewRawRow() {
                return ((RawRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RawRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RawRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RawRowChanged != null)) {
                    this.RawRowChanged(this, new RawRowChangeEvent(((RawRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RawRowChanging != null)) {
                    this.RawRowChanging(this, new RawRowChangeEvent(((RawRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RawRowDeleted != null)) {
                    this.RawRowDeleted(this, new RawRowChangeEvent(((RawRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RawRowDeleting != null)) {
                    this.RawRowDeleting(this, new RawRowChangeEvent(((RawRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRawRow(RawRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PumpCycleDataSet ds = new PumpCycleDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RawDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CalculatedDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnTimeOn;
            
            private global::System.Data.DataColumn columnTimeOff;
            
            private global::System.Data.DataColumn columnTimeAvg;
            
            private global::System.Data.DataColumn columnPumpDownTime;
            
            private global::System.Data.DataColumn columnFillTime;
            
            private global::System.Data.DataColumn columnInflowRate;
            
            private global::System.Data.DataColumn columnPumpRate;
            
            private global::System.Data.DataColumn columnMulti;
            
            private global::System.Data.DataColumn columnFlagged;
            
            private global::System.Data.DataColumn columnPumpNum;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalculatedDataTable() {
                this.TableName = "Calculated";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CalculatedDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CalculatedDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeOnColumn {
                get {
                    return this.columnTimeOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeOffColumn {
                get {
                    return this.columnTimeOff;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeAvgColumn {
                get {
                    return this.columnTimeAvg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PumpDownTimeColumn {
                get {
                    return this.columnPumpDownTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FillTimeColumn {
                get {
                    return this.columnFillTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InflowRateColumn {
                get {
                    return this.columnInflowRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PumpRateColumn {
                get {
                    return this.columnPumpRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MultiColumn {
                get {
                    return this.columnMulti;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlaggedColumn {
                get {
                    return this.columnFlagged;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PumpNumColumn {
                get {
                    return this.columnPumpNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalculatedRow this[int index] {
                get {
                    return ((CalculatedRow)(this.Rows[index]));
                }
            }
            
            public event CalculatedRowChangeEventHandler CalculatedRowChanging;
            
            public event CalculatedRowChangeEventHandler CalculatedRowChanged;
            
            public event CalculatedRowChangeEventHandler CalculatedRowDeleting;
            
            public event CalculatedRowChangeEventHandler CalculatedRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCalculatedRow(CalculatedRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalculatedRow AddCalculatedRow(System.DateTime TimeOn, System.DateTime TimeOff, System.DateTime TimeAvg, double PumpDownTime, double FillTime, double InflowRate, double PumpRate, bool Multi, bool Flagged, int PumpNum) {
                CalculatedRow rowCalculatedRow = ((CalculatedRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        TimeOn,
                        TimeOff,
                        TimeAvg,
                        PumpDownTime,
                        FillTime,
                        InflowRate,
                        PumpRate,
                        Multi,
                        Flagged,
                        PumpNum};
                rowCalculatedRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCalculatedRow);
                return rowCalculatedRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalculatedRow FindByID(int ID) {
                return ((CalculatedRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CalculatedDataTable cln = ((CalculatedDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CalculatedDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTimeOn = base.Columns["TimeOn"];
                this.columnTimeOff = base.Columns["TimeOff"];
                this.columnTimeAvg = base.Columns["TimeAvg"];
                this.columnPumpDownTime = base.Columns["PumpDownTime"];
                this.columnFillTime = base.Columns["FillTime"];
                this.columnInflowRate = base.Columns["InflowRate"];
                this.columnPumpRate = base.Columns["PumpRate"];
                this.columnMulti = base.Columns["Multi"];
                this.columnFlagged = base.Columns["Flagged"];
                this.columnPumpNum = base.Columns["PumpNum"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTimeOn = new global::System.Data.DataColumn("TimeOn", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeOn);
                this.columnTimeOff = new global::System.Data.DataColumn("TimeOff", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeOff);
                this.columnTimeAvg = new global::System.Data.DataColumn("TimeAvg", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeAvg);
                this.columnPumpDownTime = new global::System.Data.DataColumn("PumpDownTime", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPumpDownTime);
                this.columnFillTime = new global::System.Data.DataColumn("FillTime", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFillTime);
                this.columnInflowRate = new global::System.Data.DataColumn("InflowRate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInflowRate);
                this.columnPumpRate = new global::System.Data.DataColumn("PumpRate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPumpRate);
                this.columnMulti = new global::System.Data.DataColumn("Multi", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMulti);
                this.columnFlagged = new global::System.Data.DataColumn("Flagged", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlagged);
                this.columnPumpNum = new global::System.Data.DataColumn("PumpNum", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPumpNum);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("CalculatedKey1", new global::System.Data.DataColumn[] {
                                this.columnTimeAvg}, false));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnTimeAvg.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalculatedRow NewCalculatedRow() {
                return ((CalculatedRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CalculatedRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CalculatedRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CalculatedRowChanged != null)) {
                    this.CalculatedRowChanged(this, new CalculatedRowChangeEvent(((CalculatedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CalculatedRowChanging != null)) {
                    this.CalculatedRowChanging(this, new CalculatedRowChangeEvent(((CalculatedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CalculatedRowDeleted != null)) {
                    this.CalculatedRowDeleted(this, new CalculatedRowChangeEvent(((CalculatedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CalculatedRowDeleting != null)) {
                    this.CalculatedRowDeleting(this, new CalculatedRowChangeEvent(((CalculatedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCalculatedRow(CalculatedRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PumpCycleDataSet ds = new PumpCycleDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CalculatedDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DistributedDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDateTime;
            
            private global::System.Data.DataColumn columnLesserSampleTime;
            
            private global::System.Data.DataColumn columnGreaterSampleTime;
            
            private global::System.Data.DataColumn columnLesserWeight;
            
            private global::System.Data.DataColumn columnGreaterWeight;
            
            private global::System.Data.DataColumn columnLesserInflow;
            
            private global::System.Data.DataColumn columnGreaterInflow;
            
            private global::System.Data.DataColumn columnWeightedFlow;
            
            private global::System.Data.DataColumn columnMulti;
            
            private global::System.Data.DataColumn columnFlagged;
            
            private global::System.Data.DataColumn columnRunningPumpCount;
            
            private global::System.Data.DataColumn columnWeightedPumpingRate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributedDataTable() {
                this.TableName = "Distributed";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DistributedDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DistributedDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTimeColumn {
                get {
                    return this.columnDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LesserSampleTimeColumn {
                get {
                    return this.columnLesserSampleTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GreaterSampleTimeColumn {
                get {
                    return this.columnGreaterSampleTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LesserWeightColumn {
                get {
                    return this.columnLesserWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GreaterWeightColumn {
                get {
                    return this.columnGreaterWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LesserInflowColumn {
                get {
                    return this.columnLesserInflow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GreaterInflowColumn {
                get {
                    return this.columnGreaterInflow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightedFlowColumn {
                get {
                    return this.columnWeightedFlow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MultiColumn {
                get {
                    return this.columnMulti;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlaggedColumn {
                get {
                    return this.columnFlagged;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunningPumpCountColumn {
                get {
                    return this.columnRunningPumpCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightedPumpingRateColumn {
                get {
                    return this.columnWeightedPumpingRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributedRow this[int index] {
                get {
                    return ((DistributedRow)(this.Rows[index]));
                }
            }
            
            public event DistributedRowChangeEventHandler DistributedRowChanging;
            
            public event DistributedRowChangeEventHandler DistributedRowChanged;
            
            public event DistributedRowChangeEventHandler DistributedRowDeleting;
            
            public event DistributedRowChangeEventHandler DistributedRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDistributedRow(DistributedRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributedRow AddDistributedRow(System.DateTime DateTime, System.DateTime LesserSampleTime, System.DateTime GreaterSampleTime, double LesserWeight, double GreaterWeight, double LesserInflow, double GreaterInflow, double WeightedFlow, bool Multi, bool Flagged, int RunningPumpCount, double WeightedPumpingRate) {
                DistributedRow rowDistributedRow = ((DistributedRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DateTime,
                        LesserSampleTime,
                        GreaterSampleTime,
                        LesserWeight,
                        GreaterWeight,
                        LesserInflow,
                        GreaterInflow,
                        WeightedFlow,
                        Multi,
                        Flagged,
                        RunningPumpCount,
                        WeightedPumpingRate};
                rowDistributedRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDistributedRow);
                return rowDistributedRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributedRow FindByDateTime(System.DateTime DateTime) {
                return ((DistributedRow)(this.Rows.Find(new object[] {
                            DateTime})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DistributedDataTable cln = ((DistributedDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DistributedDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDateTime = base.Columns["DateTime"];
                this.columnLesserSampleTime = base.Columns["LesserSampleTime"];
                this.columnGreaterSampleTime = base.Columns["GreaterSampleTime"];
                this.columnLesserWeight = base.Columns["LesserWeight"];
                this.columnGreaterWeight = base.Columns["GreaterWeight"];
                this.columnLesserInflow = base.Columns["LesserInflow"];
                this.columnGreaterInflow = base.Columns["GreaterInflow"];
                this.columnWeightedFlow = base.Columns["WeightedFlow"];
                this.columnMulti = base.Columns["Multi"];
                this.columnFlagged = base.Columns["Flagged"];
                this.columnRunningPumpCount = base.Columns["RunningPumpCount"];
                this.columnWeightedPumpingRate = base.Columns["WeightedPumpingRate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDateTime = new global::System.Data.DataColumn("DateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTime);
                this.columnLesserSampleTime = new global::System.Data.DataColumn("LesserSampleTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLesserSampleTime);
                this.columnGreaterSampleTime = new global::System.Data.DataColumn("GreaterSampleTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGreaterSampleTime);
                this.columnLesserWeight = new global::System.Data.DataColumn("LesserWeight", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLesserWeight);
                this.columnGreaterWeight = new global::System.Data.DataColumn("GreaterWeight", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGreaterWeight);
                this.columnLesserInflow = new global::System.Data.DataColumn("LesserInflow", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLesserInflow);
                this.columnGreaterInflow = new global::System.Data.DataColumn("GreaterInflow", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGreaterInflow);
                this.columnWeightedFlow = new global::System.Data.DataColumn("WeightedFlow", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeightedFlow);
                this.columnMulti = new global::System.Data.DataColumn("Multi", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMulti);
                this.columnFlagged = new global::System.Data.DataColumn("Flagged", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlagged);
                this.columnRunningPumpCount = new global::System.Data.DataColumn("RunningPumpCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunningPumpCount);
                this.columnWeightedPumpingRate = new global::System.Data.DataColumn("WeightedPumpingRate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeightedPumpingRate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDateTime}, true));
                this.columnDateTime.AllowDBNull = false;
                this.columnDateTime.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributedRow NewDistributedRow() {
                return ((DistributedRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DistributedRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DistributedRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DistributedRowChanged != null)) {
                    this.DistributedRowChanged(this, new DistributedRowChangeEvent(((DistributedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DistributedRowChanging != null)) {
                    this.DistributedRowChanging(this, new DistributedRowChangeEvent(((DistributedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DistributedRowDeleted != null)) {
                    this.DistributedRowDeleted(this, new DistributedRowChangeEvent(((DistributedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DistributedRowDeleting != null)) {
                    this.DistributedRowDeleting(this, new DistributedRowChangeEvent(((DistributedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDistributedRow(DistributedRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PumpCycleDataSet ds = new PumpCycleDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DistributedDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CycleSummaryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCycleSummaryID;
            
            private global::System.Data.DataColumn columnPumpID;
            
            private global::System.Data.DataColumn columnCycleCount;
            
            private global::System.Data.DataColumn columnPumpOnDuration;
            
            private global::System.Data.DataColumn columnPumpOffDuration;
            
            private global::System.Data.DataColumn columnCalculatedPumpingRateGPM;
            
            private global::System.Data.DataColumn columnPumpOnPercent;
            
            private global::System.Data.DataColumn columnAverageCycleTime;
            
            private global::System.Data.DataColumn columnReportedPumpingRateGPM;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CycleSummaryDataTable() {
                this.TableName = "CycleSummary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CycleSummaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CycleSummaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CycleSummaryIDColumn {
                get {
                    return this.columnCycleSummaryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PumpIDColumn {
                get {
                    return this.columnPumpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CycleCountColumn {
                get {
                    return this.columnCycleCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PumpOnDurationColumn {
                get {
                    return this.columnPumpOnDuration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PumpOffDurationColumn {
                get {
                    return this.columnPumpOffDuration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CalculatedPumpingRateGPMColumn {
                get {
                    return this.columnCalculatedPumpingRateGPM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PumpOnPercentColumn {
                get {
                    return this.columnPumpOnPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AverageCycleTimeColumn {
                get {
                    return this.columnAverageCycleTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReportedPumpingRateGPMColumn {
                get {
                    return this.columnReportedPumpingRateGPM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CycleSummaryRow this[int index] {
                get {
                    return ((CycleSummaryRow)(this.Rows[index]));
                }
            }
            
            public event CycleSummaryRowChangeEventHandler CycleSummaryRowChanging;
            
            public event CycleSummaryRowChangeEventHandler CycleSummaryRowChanged;
            
            public event CycleSummaryRowChangeEventHandler CycleSummaryRowDeleting;
            
            public event CycleSummaryRowChangeEventHandler CycleSummaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCycleSummaryRow(CycleSummaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CycleSummaryRow AddCycleSummaryRow(int PumpID, int CycleCount, double PumpOnDuration, double PumpOffDuration, double CalculatedPumpingRateGPM, double PumpOnPercent, double AverageCycleTime, int ReportedPumpingRateGPM) {
                CycleSummaryRow rowCycleSummaryRow = ((CycleSummaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PumpID,
                        CycleCount,
                        PumpOnDuration,
                        PumpOffDuration,
                        CalculatedPumpingRateGPM,
                        PumpOnPercent,
                        AverageCycleTime,
                        ReportedPumpingRateGPM};
                rowCycleSummaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCycleSummaryRow);
                return rowCycleSummaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CycleSummaryRow FindByPumpID(int PumpID) {
                return ((CycleSummaryRow)(this.Rows.Find(new object[] {
                            PumpID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CycleSummaryDataTable cln = ((CycleSummaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CycleSummaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCycleSummaryID = base.Columns["CycleSummaryID"];
                this.columnPumpID = base.Columns["PumpID"];
                this.columnCycleCount = base.Columns["CycleCount"];
                this.columnPumpOnDuration = base.Columns["PumpOnDuration"];
                this.columnPumpOffDuration = base.Columns["PumpOffDuration"];
                this.columnCalculatedPumpingRateGPM = base.Columns["CalculatedPumpingRateGPM"];
                this.columnPumpOnPercent = base.Columns["PumpOnPercent"];
                this.columnAverageCycleTime = base.Columns["AverageCycleTime"];
                this.columnReportedPumpingRateGPM = base.Columns["ReportedPumpingRateGPM"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCycleSummaryID = new global::System.Data.DataColumn("CycleSummaryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCycleSummaryID);
                this.columnPumpID = new global::System.Data.DataColumn("PumpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPumpID);
                this.columnCycleCount = new global::System.Data.DataColumn("CycleCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCycleCount);
                this.columnPumpOnDuration = new global::System.Data.DataColumn("PumpOnDuration", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPumpOnDuration);
                this.columnPumpOffDuration = new global::System.Data.DataColumn("PumpOffDuration", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPumpOffDuration);
                this.columnCalculatedPumpingRateGPM = new global::System.Data.DataColumn("CalculatedPumpingRateGPM", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCalculatedPumpingRateGPM);
                this.columnPumpOnPercent = new global::System.Data.DataColumn("PumpOnPercent", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPumpOnPercent);
                this.columnAverageCycleTime = new global::System.Data.DataColumn("AverageCycleTime", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverageCycleTime);
                this.columnReportedPumpingRateGPM = new global::System.Data.DataColumn("ReportedPumpingRateGPM", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportedPumpingRateGPM);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPumpID}, true));
                this.columnCycleSummaryID.AutoIncrement = true;
                this.columnCycleSummaryID.AllowDBNull = false;
                this.columnPumpID.AllowDBNull = false;
                this.columnPumpID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CycleSummaryRow NewCycleSummaryRow() {
                return ((CycleSummaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CycleSummaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CycleSummaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CycleSummaryRowChanged != null)) {
                    this.CycleSummaryRowChanged(this, new CycleSummaryRowChangeEvent(((CycleSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CycleSummaryRowChanging != null)) {
                    this.CycleSummaryRowChanging(this, new CycleSummaryRowChangeEvent(((CycleSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CycleSummaryRowDeleted != null)) {
                    this.CycleSummaryRowDeleted(this, new CycleSummaryRowChangeEvent(((CycleSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CycleSummaryRowDeleting != null)) {
                    this.CycleSummaryRowDeleting(this, new CycleSummaryRowChangeEvent(((CycleSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCycleSummaryRow(CycleSummaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PumpCycleDataSet ds = new PumpCycleDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CycleSummaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StationRow : global::System.Data.DataRow {
            
            private StationDataTable tableStation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStation = ((StationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StationID {
                get {
                    return ((int)(this[this.tableStation.StationIDColumn]));
                }
                set {
                    this[this.tableStation.StationIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int H2Number {
                get {
                    return ((int)(this[this.tableStation.H2NumberColumn]));
                }
                set {
                    this[this.tableStation.H2NumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StationName {
                get {
                    return ((string)(this[this.tableStation.StationNameColumn]));
                }
                set {
                    this[this.tableStation.StationNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationDescription {
                get {
                    try {
                        return ((string)(this[this.tableStation.LocationDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationDescription\' in table \'Station\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStation.LocationDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableStation.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'Station\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStation.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationType {
                get {
                    try {
                        return ((string)(this[this.tableStation.LocationTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationType\' in table \'Station\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStation.LocationTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableStation.StartDateColumn]));
                }
                set {
                    this[this.tableStation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableStation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'Station\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatePlaneXFt {
                get {
                    try {
                        return ((int)(this[this.tableStation.StatePlaneXFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatePlaneXFt\' in table \'Station\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStation.StatePlaneXFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatePlaneYFt {
                get {
                    try {
                        return ((int)(this[this.tableStation.StatePlaneYFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatePlaneYFt\' in table \'Station\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStation.StatePlaneYFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreateDate {
                get {
                    return ((global::System.DateTime)(this[this.tableStation.CreateDateColumn]));
                }
                set {
                    this[this.tableStation.CreateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreateBy {
                get {
                    return ((string)(this[this.tableStation.CreateByColumn]));
                }
                set {
                    this[this.tableStation.CreateByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UpdateDate {
                get {
                    return ((global::System.DateTime)(this[this.tableStation.UpdateDateColumn]));
                }
                set {
                    this[this.tableStation.UpdateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdateBy {
                get {
                    return ((string)(this[this.tableStation.UpdateByColumn]));
                }
                set {
                    this[this.tableStation.UpdateByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationDescriptionNull() {
                return this.IsNull(this.tableStation.LocationDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationDescriptionNull() {
                this[this.tableStation.LocationDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableStation.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableStation.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationTypeNull() {
                return this.IsNull(this.tableStation.LocationTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationTypeNull() {
                this[this.tableStation.LocationTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableStation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableStation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatePlaneXFtNull() {
                return this.IsNull(this.tableStation.StatePlaneXFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatePlaneXFtNull() {
                this[this.tableStation.StatePlaneXFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatePlaneYFtNull() {
                return this.IsNull(this.tableStation.StatePlaneYFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatePlaneYFtNull() {
                this[this.tableStation.StatePlaneYFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WetWellRow[] GetWetWellRows() {
                if ((this.Table.ChildRelations["FK_Station_WetWell"] == null)) {
                    return new WetWellRow[0];
                }
                else {
                    return ((WetWellRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Station_WetWell"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsDataRow[] GetOperationsDataRows() {
                if ((this.Table.ChildRelations["FK_Station_OperationsData"] == null)) {
                    return new OperationsDataRow[0];
                }
                else {
                    return ((OperationsDataRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Station_OperationsData"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CycleDataRow[] GetCycleDataRows() {
                if ((this.Table.ChildRelations["STATION_CYCLE_DATA"] == null)) {
                    return new CycleDataRow[0];
                }
                else {
                    return ((CycleDataRow[])(base.GetChildRows(this.Table.ChildRelations["STATION_CYCLE_DATA"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PumpRow[] GetPumpRows() {
                if ((this.Table.ChildRelations["STATION_PUMP"] == null)) {
                    return new PumpRow[0];
                }
                else {
                    return ((PumpRow[])(base.GetChildRows(this.Table.ChildRelations["STATION_PUMP"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnvironSensorRow[] GetEnvironSensorRows() {
                if ((this.Table.ChildRelations["FK_ENVIRON_SENSOR_STATION"] == null)) {
                    return new EnvironSensorRow[0];
                }
                else {
                    return ((EnvironSensorRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ENVIRON_SENSOR_STATION"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepthDataRow[] GetDepthDataRows() {
                if ((this.Table.ChildRelations["Station_DepthData"] == null)) {
                    return new DepthDataRow[0];
                }
                else {
                    return ((DepthDataRow[])(base.GetChildRows(this.Table.ChildRelations["Station_DepthData"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PumpRow : global::System.Data.DataRow {
            
            private PumpDataTable tablePump;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PumpRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePump = ((PumpDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PumpID {
                get {
                    return ((int)(this[this.tablePump.PumpIDColumn]));
                }
                set {
                    this[this.tablePump.PumpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StationID {
                get {
                    return ((int)(this[this.tablePump.StationIDColumn]));
                }
                set {
                    this[this.tablePump.StationIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short PumpNumber {
                get {
                    return ((short)(this[this.tablePump.PumpNumberColumn]));
                }
                set {
                    this[this.tablePump.PumpNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PumpRateGPM {
                get {
                    try {
                        return ((int)(this[this.tablePump.PumpRateGPMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PumpRateGPM\' in table \'Pump\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePump.PumpRateGPMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OperatorType {
                get {
                    try {
                        return ((string)(this[this.tablePump.OperatorTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OperatorType\' in table \'Pump\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePump.OperatorTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DriveType {
                get {
                    try {
                        return ((string)(this[this.tablePump.DriveTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DriveType\' in table \'Pump\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePump.DriveTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MotorHP {
                get {
                    try {
                        return ((int)(this[this.tablePump.MotorHPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotorHP\' in table \'Pump\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePump.MotorHPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PercentBelowAvgPumpRate {
                get {
                    try {
                        return ((int)(this[this.tablePump.PercentBelowAvgPumpRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PercentBelowAvgPumpRate\' in table \'Pump\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePump.PercentBelowAvgPumpRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PercentAboveAvgPumpRate {
                get {
                    try {
                        return ((int)(this[this.tablePump.PercentAboveAvgPumpRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PercentAboveAvgPumpRate\' in table \'Pump\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePump.PercentAboveAvgPumpRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LevelToStartPumpInches {
                get {
                    try {
                        return ((decimal)(this[this.tablePump.LevelToStartPumpInchesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LevelToStartPumpInches\' in table \'Pump\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePump.LevelToStartPumpInchesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LevelToStopPumpInches {
                get {
                    try {
                        return ((decimal)(this[this.tablePump.LevelToStopPumpInchesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LevelToStopPumpInches\' in table \'Pump\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePump.LevelToStopPumpInchesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    return ((global::System.DateTime)(this[this.tablePump.StartDateColumn]));
                }
                set {
                    this[this.tablePump.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePump.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'Pump\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePump.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreateDate {
                get {
                    return ((global::System.DateTime)(this[this.tablePump.CreateDateColumn]));
                }
                set {
                    this[this.tablePump.CreateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreateBy {
                get {
                    return ((string)(this[this.tablePump.CreateByColumn]));
                }
                set {
                    this[this.tablePump.CreateByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UpdateDate {
                get {
                    return ((global::System.DateTime)(this[this.tablePump.UpdateDateColumn]));
                }
                set {
                    this[this.tablePump.UpdateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdateBy {
                get {
                    return ((string)(this[this.tablePump.UpdateByColumn]));
                }
                set {
                    this[this.tablePump.UpdateByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StationRow STATIONRow {
                get {
                    return ((StationRow)(this.GetParentRow(this.Table.ParentRelations["STATION_PUMP"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["STATION_PUMP"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPumpRateGPMNull() {
                return this.IsNull(this.tablePump.PumpRateGPMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPumpRateGPMNull() {
                this[this.tablePump.PumpRateGPMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOperatorTypeNull() {
                return this.IsNull(this.tablePump.OperatorTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOperatorTypeNull() {
                this[this.tablePump.OperatorTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDriveTypeNull() {
                return this.IsNull(this.tablePump.DriveTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDriveTypeNull() {
                this[this.tablePump.DriveTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotorHPNull() {
                return this.IsNull(this.tablePump.MotorHPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotorHPNull() {
                this[this.tablePump.MotorHPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPercentBelowAvgPumpRateNull() {
                return this.IsNull(this.tablePump.PercentBelowAvgPumpRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPercentBelowAvgPumpRateNull() {
                this[this.tablePump.PercentBelowAvgPumpRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPercentAboveAvgPumpRateNull() {
                return this.IsNull(this.tablePump.PercentAboveAvgPumpRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPercentAboveAvgPumpRateNull() {
                this[this.tablePump.PercentAboveAvgPumpRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLevelToStartPumpInchesNull() {
                return this.IsNull(this.tablePump.LevelToStartPumpInchesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLevelToStartPumpInchesNull() {
                this[this.tablePump.LevelToStartPumpInchesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLevelToStopPumpInchesNull() {
                return this.IsNull(this.tablePump.LevelToStopPumpInchesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLevelToStopPumpInchesNull() {
                this[this.tablePump.LevelToStopPumpInchesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tablePump.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tablePump.EndDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CycleDataRow : global::System.Data.DataRow {
            
            private CycleDataDataTable tableCycleData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CycleDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCycleData = ((CycleDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CycleDataID {
                get {
                    return ((int)(this[this.tableCycleData.CycleDataIDColumn]));
                }
                set {
                    this[this.tableCycleData.CycleDataIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CalendarDateID {
                get {
                    return ((int)(this[this.tableCycleData.CalendarDateIDColumn]));
                }
                set {
                    this[this.tableCycleData.CalendarDateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TimeOfDayID {
                get {
                    return ((int)(this[this.tableCycleData.TimeOfDayIDColumn]));
                }
                set {
                    this[this.tableCycleData.TimeOfDayIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StationID {
                get {
                    return ((int)(this[this.tableCycleData.StationIDColumn]));
                }
                set {
                    this[this.tableCycleData.StationIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PumpID {
                get {
                    return ((int)(this[this.tableCycleData.PumpIDColumn]));
                }
                set {
                    this[this.tableCycleData.PumpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CycleChangeTime {
                get {
                    return ((global::System.DateTime)(this[this.tableCycleData.CycleChangeTimeColumn]));
                }
                set {
                    this[this.tableCycleData.CycleChangeTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte OnOffState {
                get {
                    return ((byte)(this[this.tableCycleData.OnOffStateColumn]));
                }
                set {
                    this[this.tableCycleData.OnOffStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LoadDate {
                get {
                    return ((global::System.DateTime)(this[this.tableCycleData.LoadDateColumn]));
                }
                set {
                    this[this.tableCycleData.LoadDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceFilename {
                get {
                    return ((string)(this[this.tableCycleData.SourceFilenameColumn]));
                }
                set {
                    this[this.tableCycleData.SourceFilenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StationRow STATIONRow {
                get {
                    return ((StationRow)(this.GetParentRow(this.Table.ParentRelations["STATION_CYCLE_DATA"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["STATION_CYCLE_DATA"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OperationsDataRow : global::System.Data.DataRow {
            
            private OperationsDataDataTable tableOperationsData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OperationsDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOperationsData = ((OperationsDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OperationsDataID {
                get {
                    return ((int)(this[this.tableOperationsData.OperationsDataIDColumn]));
                }
                set {
                    this[this.tableOperationsData.OperationsDataIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CalendarDateID {
                get {
                    return ((int)(this[this.tableOperationsData.CalendarDateIDColumn]));
                }
                set {
                    this[this.tableOperationsData.CalendarDateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TimeOfDayID {
                get {
                    return ((int)(this[this.tableOperationsData.TimeOfDayIDColumn]));
                }
                set {
                    this[this.tableOperationsData.TimeOfDayIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StationID {
                get {
                    return ((int)(this[this.tableOperationsData.StationIDColumn]));
                }
                set {
                    this[this.tableOperationsData.StationIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Channel {
                get {
                    return ((string)(this[this.tableOperationsData.ChannelColumn]));
                }
                set {
                    this[this.tableOperationsData.ChannelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MessageTime {
                get {
                    return ((global::System.DateTime)(this[this.tableOperationsData.MessageTimeColumn]));
                }
                set {
                    this[this.tableOperationsData.MessageTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MessageText {
                get {
                    return ((string)(this[this.tableOperationsData.MessageTextColumn]));
                }
                set {
                    this[this.tableOperationsData.MessageTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LoadDate {
                get {
                    return ((global::System.DateTime)(this[this.tableOperationsData.LoadDateColumn]));
                }
                set {
                    this[this.tableOperationsData.LoadDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceFileName {
                get {
                    return ((string)(this[this.tableOperationsData.SourceFileNameColumn]));
                }
                set {
                    this[this.tableOperationsData.SourceFileNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StationRow StationRow {
                get {
                    return ((StationRow)(this.GetParentRow(this.Table.ParentRelations["FK_Station_OperationsData"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Station_OperationsData"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WetWellRow : global::System.Data.DataRow {
            
            private WetWellDataTable tableWetWell;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WetWellRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWetWell = ((WetWellDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WetWellID {
                get {
                    return ((int)(this[this.tableWetWell.WetWellIDColumn]));
                }
                set {
                    this[this.tableWetWell.WetWellIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StationID {
                get {
                    return ((int)(this[this.tableWetWell.StationIDColumn]));
                }
                set {
                    this[this.tableWetWell.StationIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WetWellVolumeGallons {
                get {
                    return ((int)(this[this.tableWetWell.WetWellVolumeGallonsColumn]));
                }
                set {
                    this[this.tableWetWell.WetWellVolumeGallonsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WetWellType {
                get {
                    return ((string)(this[this.tableWetWell.WetWellTypeColumn]));
                }
                set {
                    this[this.tableWetWell.WetWellTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableWetWell.StartDateColumn]));
                }
                set {
                    this[this.tableWetWell.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableWetWell.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'WetWell\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWetWell.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreateDate {
                get {
                    return ((global::System.DateTime)(this[this.tableWetWell.CreateDateColumn]));
                }
                set {
                    this[this.tableWetWell.CreateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreateBy {
                get {
                    return ((string)(this[this.tableWetWell.CreateByColumn]));
                }
                set {
                    this[this.tableWetWell.CreateByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UpdateDate {
                get {
                    return ((global::System.DateTime)(this[this.tableWetWell.UpdateDateColumn]));
                }
                set {
                    this[this.tableWetWell.UpdateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdateBy {
                get {
                    return ((string)(this[this.tableWetWell.UpdateByColumn]));
                }
                set {
                    this[this.tableWetWell.UpdateByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StationRow StationRow {
                get {
                    return ((StationRow)(this.GetParentRow(this.Table.ParentRelations["FK_Station_WetWell"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Station_WetWell"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableWetWell.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableWetWell.EndDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EnvironSensorRow : global::System.Data.DataRow {
            
            private EnvironSensorDataTable tableEnvironSensor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EnvironSensorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEnvironSensor = ((EnvironSensorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EnvironSensorID {
                get {
                    return ((int)(this[this.tableEnvironSensor.EnvironSensorIDColumn]));
                }
                set {
                    this[this.tableEnvironSensor.EnvironSensorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StationID {
                get {
                    return ((int)(this[this.tableEnvironSensor.StationIDColumn]));
                }
                set {
                    this[this.tableEnvironSensor.StationIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string XDataCategoryLocQualCombined {
                get {
                    try {
                        return ((string)(this[this.tableEnvironSensor.XDataCategoryLocQualCombinedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'XDataCategoryLocQualCombined\' in table \'EnvironSensor\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableEnvironSensor.XDataCategoryLocQualCombinedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataCategory {
                get {
                    return ((string)(this[this.tableEnvironSensor.DataCategoryColumn]));
                }
                set {
                    this[this.tableEnvironSensor.DataCategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationQualifier {
                get {
                    return ((string)(this[this.tableEnvironSensor.LocationQualifierColumn]));
                }
                set {
                    this[this.tableEnvironSensor.LocationQualifierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Channel {
                get {
                    return ((string)(this[this.tableEnvironSensor.ChannelColumn]));
                }
                set {
                    this[this.tableEnvironSensor.ChannelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChannelName {
                get {
                    return ((string)(this[this.tableEnvironSensor.ChannelNameColumn]));
                }
                set {
                    this[this.tableEnvironSensor.ChannelNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChannelDescription {
                get {
                    try {
                        return ((string)(this[this.tableEnvironSensor.ChannelDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChannelDescription\' in table \'EnvironSensor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnvironSensor.ChannelDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EngineeringUnitSpan {
                get {
                    return ((decimal)(this[this.tableEnvironSensor.EngineeringUnitSpanColumn]));
                }
                set {
                    this[this.tableEnvironSensor.EngineeringUnitSpanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EngineeringUnitZero {
                get {
                    return ((decimal)(this[this.tableEnvironSensor.EngineeringUnitZeroColumn]));
                }
                set {
                    this[this.tableEnvironSensor.EngineeringUnitZeroColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EngineeringUnits {
                get {
                    return ((string)(this[this.tableEnvironSensor.EngineeringUnitsColumn]));
                }
                set {
                    this[this.tableEnvironSensor.EngineeringUnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HasDepthToFlow {
                get {
                    return ((string)(this[this.tableEnvironSensor.HasDepthToFlowColumn]));
                }
                set {
                    this[this.tableEnvironSensor.HasDepthToFlowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableEnvironSensor.StartDateColumn]));
                }
                set {
                    this[this.tableEnvironSensor.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEnvironSensor.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'EnvironSensor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnvironSensor.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreateDate {
                get {
                    return ((global::System.DateTime)(this[this.tableEnvironSensor.CreateDateColumn]));
                }
                set {
                    this[this.tableEnvironSensor.CreateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreateBy {
                get {
                    return ((string)(this[this.tableEnvironSensor.CreateByColumn]));
                }
                set {
                    this[this.tableEnvironSensor.CreateByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UpdateDate {
                get {
                    return ((global::System.DateTime)(this[this.tableEnvironSensor.UpdateDateColumn]));
                }
                set {
                    this[this.tableEnvironSensor.UpdateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdateBy {
                get {
                    return ((string)(this[this.tableEnvironSensor.UpdateByColumn]));
                }
                set {
                    this[this.tableEnvironSensor.UpdateByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StationRow StationRow {
                get {
                    return ((StationRow)(this.GetParentRow(this.Table.ParentRelations["FK_ENVIRON_SENSOR_STATION"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ENVIRON_SENSOR_STATION"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXDataCategoryLocQualCombinedNull() {
                return this.IsNull(this.tableEnvironSensor.XDataCategoryLocQualCombinedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXDataCategoryLocQualCombinedNull() {
                this[this.tableEnvironSensor.XDataCategoryLocQualCombinedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChannelDescriptionNull() {
                return this.IsNull(this.tableEnvironSensor.ChannelDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChannelDescriptionNull() {
                this[this.tableEnvironSensor.ChannelDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableEnvironSensor.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableEnvironSensor.EndDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DepthDataRow : global::System.Data.DataRow {
            
            private DepthDataDataTable tableDepthData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DepthDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDepthData = ((DepthDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long DepthDataID {
                get {
                    return ((long)(this[this.tableDepthData.DepthDataIDColumn]));
                }
                set {
                    this[this.tableDepthData.DepthDataIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CalendarDateID {
                get {
                    return ((int)(this[this.tableDepthData.CalendarDateIDColumn]));
                }
                set {
                    this[this.tableDepthData.CalendarDateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TimeOfDayID {
                get {
                    return ((int)(this[this.tableDepthData.TimeOfDayIDColumn]));
                }
                set {
                    this[this.tableDepthData.TimeOfDayIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StationID {
                get {
                    return ((int)(this[this.tableDepthData.StationIDColumn]));
                }
                set {
                    this[this.tableDepthData.StationIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EnvironSensorID {
                get {
                    return ((int)(this[this.tableDepthData.EnvironSensorIDColumn]));
                }
                set {
                    this[this.tableDepthData.EnvironSensorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationQualifier {
                get {
                    return ((string)(this[this.tableDepthData.LocationQualifierColumn]));
                }
                set {
                    this[this.tableDepthData.LocationQualifierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime OriginalSampleTime {
                get {
                    return ((global::System.DateTime)(this[this.tableDepthData.OriginalSampleTimeColumn]));
                }
                set {
                    this[this.tableDepthData.OriginalSampleTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AssignedSampleTime {
                get {
                    return ((global::System.DateTime)(this[this.tableDepthData.AssignedSampleTimeColumn]));
                }
                set {
                    this[this.tableDepthData.AssignedSampleTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RawValue {
                get {
                    return ((int)(this[this.tableDepthData.RawValueColumn]));
                }
                set {
                    this[this.tableDepthData.RawValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FinalValue {
                get {
                    return ((decimal)(this[this.tableDepthData.FinalValueColumn]));
                }
                set {
                    this[this.tableDepthData.FinalValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Units {
                get {
                    return ((string)(this[this.tableDepthData.UnitsColumn]));
                }
                set {
                    this[this.tableDepthData.UnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LoadDate {
                get {
                    return ((global::System.DateTime)(this[this.tableDepthData.LoadDateColumn]));
                }
                set {
                    this[this.tableDepthData.LoadDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceFilename {
                get {
                    return ((string)(this[this.tableDepthData.SourceFilenameColumn]));
                }
                set {
                    this[this.tableDepthData.SourceFilenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StationRow StationRow {
                get {
                    return ((StationRow)(this.GetParentRow(this.Table.ParentRelations["Station_DepthData"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Station_DepthData"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RawRow : global::System.Data.DataRow {
            
            private RawDataTable tableRaw;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RawRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRaw = ((RawDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableRaw.IDColumn]));
                }
                set {
                    this[this.tableRaw.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CycleNum {
                get {
                    try {
                        return ((int)(this[this.tableRaw.CycleNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CycleNum\' in table \'Raw\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRaw.CycleNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TimeOn {
                get {
                    try {
                        return ((int)(this[this.tableRaw.TimeOnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeOn\' in table \'Raw\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRaw.TimeOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TimeOff {
                get {
                    try {
                        return ((int)(this[this.tableRaw.TimeOffColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeOff\' in table \'Raw\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRaw.TimeOffColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PumpRun {
                get {
                    try {
                        return ((int)(this[this.tableRaw.PumpRunColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PumpRun\' in table \'Raw\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRaw.PumpRunColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Inflow {
                get {
                    try {
                        return ((double)(this[this.tableRaw.InflowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Inflow\' in table \'Raw\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRaw.InflowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Pump1 {
                get {
                    try {
                        return ((double)(this[this.tableRaw.Pump1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Pump1\' in table \'Raw\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRaw.Pump1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Pump2 {
                get {
                    try {
                        return ((double)(this[this.tableRaw.Pump2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Pump2\' in table \'Raw\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRaw.Pump2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Pump3 {
                get {
                    try {
                        return ((double)(this[this.tableRaw.Pump3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Pump3\' in table \'Raw\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRaw.Pump3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Pump4 {
                get {
                    try {
                        return ((double)(this[this.tableRaw.Pump4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Pump4\' in table \'Raw\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRaw.Pump4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Multi {
                get {
                    try {
                        return ((bool)(this[this.tableRaw.MultiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Multi\' in table \'Raw\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRaw.MultiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCycleNumNull() {
                return this.IsNull(this.tableRaw.CycleNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCycleNumNull() {
                this[this.tableRaw.CycleNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeOnNull() {
                return this.IsNull(this.tableRaw.TimeOnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeOnNull() {
                this[this.tableRaw.TimeOnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeOffNull() {
                return this.IsNull(this.tableRaw.TimeOffColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeOffNull() {
                this[this.tableRaw.TimeOffColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPumpRunNull() {
                return this.IsNull(this.tableRaw.PumpRunColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPumpRunNull() {
                this[this.tableRaw.PumpRunColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInflowNull() {
                return this.IsNull(this.tableRaw.InflowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInflowNull() {
                this[this.tableRaw.InflowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPump1Null() {
                return this.IsNull(this.tableRaw.Pump1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPump1Null() {
                this[this.tableRaw.Pump1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPump2Null() {
                return this.IsNull(this.tableRaw.Pump2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPump2Null() {
                this[this.tableRaw.Pump2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPump3Null() {
                return this.IsNull(this.tableRaw.Pump3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPump3Null() {
                this[this.tableRaw.Pump3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPump4Null() {
                return this.IsNull(this.tableRaw.Pump4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPump4Null() {
                this[this.tableRaw.Pump4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMultiNull() {
                return this.IsNull(this.tableRaw.MultiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMultiNull() {
                this[this.tableRaw.MultiColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CalculatedRow : global::System.Data.DataRow {
            
            private CalculatedDataTable tableCalculated;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CalculatedRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCalculated = ((CalculatedDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableCalculated.IDColumn]));
                }
                set {
                    this[this.tableCalculated.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TimeOn {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCalculated.TimeOnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeOn\' in table \'Calculated\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculated.TimeOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TimeOff {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCalculated.TimeOffColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeOff\' in table \'Calculated\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculated.TimeOffColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TimeAvg {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCalculated.TimeAvgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeAvg\' in table \'Calculated\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculated.TimeAvgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PumpDownTime {
                get {
                    try {
                        return ((double)(this[this.tableCalculated.PumpDownTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PumpDownTime\' in table \'Calculated\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculated.PumpDownTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FillTime {
                get {
                    try {
                        return ((double)(this[this.tableCalculated.FillTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FillTime\' in table \'Calculated\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculated.FillTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double InflowRate {
                get {
                    try {
                        return ((double)(this[this.tableCalculated.InflowRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InflowRate\' in table \'Calculated\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculated.InflowRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PumpRate {
                get {
                    try {
                        return ((double)(this[this.tableCalculated.PumpRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PumpRate\' in table \'Calculated\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculated.PumpRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Multi {
                get {
                    try {
                        return ((bool)(this[this.tableCalculated.MultiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Multi\' in table \'Calculated\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculated.MultiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Flagged {
                get {
                    try {
                        return ((bool)(this[this.tableCalculated.FlaggedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Flagged\' in table \'Calculated\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculated.FlaggedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PumpNum {
                get {
                    try {
                        return ((int)(this[this.tableCalculated.PumpNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PumpNum\' in table \'Calculated\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalculated.PumpNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeOnNull() {
                return this.IsNull(this.tableCalculated.TimeOnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeOnNull() {
                this[this.tableCalculated.TimeOnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeOffNull() {
                return this.IsNull(this.tableCalculated.TimeOffColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeOffNull() {
                this[this.tableCalculated.TimeOffColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeAvgNull() {
                return this.IsNull(this.tableCalculated.TimeAvgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeAvgNull() {
                this[this.tableCalculated.TimeAvgColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPumpDownTimeNull() {
                return this.IsNull(this.tableCalculated.PumpDownTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPumpDownTimeNull() {
                this[this.tableCalculated.PumpDownTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFillTimeNull() {
                return this.IsNull(this.tableCalculated.FillTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFillTimeNull() {
                this[this.tableCalculated.FillTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInflowRateNull() {
                return this.IsNull(this.tableCalculated.InflowRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInflowRateNull() {
                this[this.tableCalculated.InflowRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPumpRateNull() {
                return this.IsNull(this.tableCalculated.PumpRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPumpRateNull() {
                this[this.tableCalculated.PumpRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMultiNull() {
                return this.IsNull(this.tableCalculated.MultiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMultiNull() {
                this[this.tableCalculated.MultiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlaggedNull() {
                return this.IsNull(this.tableCalculated.FlaggedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlaggedNull() {
                this[this.tableCalculated.FlaggedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPumpNumNull() {
                return this.IsNull(this.tableCalculated.PumpNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPumpNumNull() {
                this[this.tableCalculated.PumpNumColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DistributedRow : global::System.Data.DataRow {
            
            private DistributedDataTable tableDistributed;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DistributedRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDistributed = ((DistributedDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableDistributed.DateTimeColumn]));
                }
                set {
                    this[this.tableDistributed.DateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LesserSampleTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDistributed.LesserSampleTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LesserSampleTime\' in table \'Distributed\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributed.LesserSampleTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime GreaterSampleTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDistributed.GreaterSampleTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GreaterSampleTime\' in table \'Distributed\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributed.GreaterSampleTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LesserWeight {
                get {
                    try {
                        return ((double)(this[this.tableDistributed.LesserWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LesserWeight\' in table \'Distributed\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributed.LesserWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double GreaterWeight {
                get {
                    try {
                        return ((double)(this[this.tableDistributed.GreaterWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GreaterWeight\' in table \'Distributed\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributed.GreaterWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LesserInflow {
                get {
                    try {
                        return ((double)(this[this.tableDistributed.LesserInflowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LesserInflow\' in table \'Distributed\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributed.LesserInflowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double GreaterInflow {
                get {
                    try {
                        return ((double)(this[this.tableDistributed.GreaterInflowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GreaterInflow\' in table \'Distributed\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributed.GreaterInflowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double WeightedFlow {
                get {
                    try {
                        return ((double)(this[this.tableDistributed.WeightedFlowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WeightedFlow\' in table \'Distributed\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributed.WeightedFlowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Multi {
                get {
                    try {
                        return ((bool)(this[this.tableDistributed.MultiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Multi\' in table \'Distributed\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributed.MultiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Flagged {
                get {
                    try {
                        return ((bool)(this[this.tableDistributed.FlaggedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Flagged\' in table \'Distributed\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributed.FlaggedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RunningPumpCount {
                get {
                    try {
                        return ((int)(this[this.tableDistributed.RunningPumpCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunningPumpCount\' in table \'Distributed\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributed.RunningPumpCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double WeightedPumpingRate {
                get {
                    try {
                        return ((double)(this[this.tableDistributed.WeightedPumpingRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WeightedPumpingRate\' in table \'Distributed\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributed.WeightedPumpingRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLesserSampleTimeNull() {
                return this.IsNull(this.tableDistributed.LesserSampleTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLesserSampleTimeNull() {
                this[this.tableDistributed.LesserSampleTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGreaterSampleTimeNull() {
                return this.IsNull(this.tableDistributed.GreaterSampleTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGreaterSampleTimeNull() {
                this[this.tableDistributed.GreaterSampleTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLesserWeightNull() {
                return this.IsNull(this.tableDistributed.LesserWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLesserWeightNull() {
                this[this.tableDistributed.LesserWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGreaterWeightNull() {
                return this.IsNull(this.tableDistributed.GreaterWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGreaterWeightNull() {
                this[this.tableDistributed.GreaterWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLesserInflowNull() {
                return this.IsNull(this.tableDistributed.LesserInflowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLesserInflowNull() {
                this[this.tableDistributed.LesserInflowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGreaterInflowNull() {
                return this.IsNull(this.tableDistributed.GreaterInflowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGreaterInflowNull() {
                this[this.tableDistributed.GreaterInflowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeightedFlowNull() {
                return this.IsNull(this.tableDistributed.WeightedFlowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeightedFlowNull() {
                this[this.tableDistributed.WeightedFlowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMultiNull() {
                return this.IsNull(this.tableDistributed.MultiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMultiNull() {
                this[this.tableDistributed.MultiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlaggedNull() {
                return this.IsNull(this.tableDistributed.FlaggedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlaggedNull() {
                this[this.tableDistributed.FlaggedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunningPumpCountNull() {
                return this.IsNull(this.tableDistributed.RunningPumpCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunningPumpCountNull() {
                this[this.tableDistributed.RunningPumpCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeightedPumpingRateNull() {
                return this.IsNull(this.tableDistributed.WeightedPumpingRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeightedPumpingRateNull() {
                this[this.tableDistributed.WeightedPumpingRateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CycleSummaryRow : global::System.Data.DataRow {
            
            private CycleSummaryDataTable tableCycleSummary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CycleSummaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCycleSummary = ((CycleSummaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CycleSummaryID {
                get {
                    return ((int)(this[this.tableCycleSummary.CycleSummaryIDColumn]));
                }
                set {
                    this[this.tableCycleSummary.CycleSummaryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PumpID {
                get {
                    return ((int)(this[this.tableCycleSummary.PumpIDColumn]));
                }
                set {
                    this[this.tableCycleSummary.PumpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CycleCount {
                get {
                    try {
                        return ((int)(this[this.tableCycleSummary.CycleCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CycleCount\' in table \'CycleSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCycleSummary.CycleCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PumpOnDuration {
                get {
                    try {
                        return ((double)(this[this.tableCycleSummary.PumpOnDurationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PumpOnDuration\' in table \'CycleSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCycleSummary.PumpOnDurationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PumpOffDuration {
                get {
                    try {
                        return ((double)(this[this.tableCycleSummary.PumpOffDurationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PumpOffDuration\' in table \'CycleSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCycleSummary.PumpOffDurationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CalculatedPumpingRateGPM {
                get {
                    try {
                        return ((double)(this[this.tableCycleSummary.CalculatedPumpingRateGPMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CalculatedPumpingRateGPM\' in table \'CycleSummary\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableCycleSummary.CalculatedPumpingRateGPMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PumpOnPercent {
                get {
                    try {
                        return ((double)(this[this.tableCycleSummary.PumpOnPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PumpOnPercent\' in table \'CycleSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCycleSummary.PumpOnPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AverageCycleTime {
                get {
                    try {
                        return ((double)(this[this.tableCycleSummary.AverageCycleTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AverageCycleTime\' in table \'CycleSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCycleSummary.AverageCycleTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReportedPumpingRateGPM {
                get {
                    try {
                        return ((int)(this[this.tableCycleSummary.ReportedPumpingRateGPMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReportedPumpingRateGPM\' in table \'CycleSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCycleSummary.ReportedPumpingRateGPMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCycleCountNull() {
                return this.IsNull(this.tableCycleSummary.CycleCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCycleCountNull() {
                this[this.tableCycleSummary.CycleCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPumpOnDurationNull() {
                return this.IsNull(this.tableCycleSummary.PumpOnDurationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPumpOnDurationNull() {
                this[this.tableCycleSummary.PumpOnDurationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPumpOffDurationNull() {
                return this.IsNull(this.tableCycleSummary.PumpOffDurationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPumpOffDurationNull() {
                this[this.tableCycleSummary.PumpOffDurationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCalculatedPumpingRateGPMNull() {
                return this.IsNull(this.tableCycleSummary.CalculatedPumpingRateGPMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCalculatedPumpingRateGPMNull() {
                this[this.tableCycleSummary.CalculatedPumpingRateGPMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPumpOnPercentNull() {
                return this.IsNull(this.tableCycleSummary.PumpOnPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPumpOnPercentNull() {
                this[this.tableCycleSummary.PumpOnPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAverageCycleTimeNull() {
                return this.IsNull(this.tableCycleSummary.AverageCycleTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAverageCycleTimeNull() {
                this[this.tableCycleSummary.AverageCycleTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReportedPumpingRateGPMNull() {
                return this.IsNull(this.tableCycleSummary.ReportedPumpingRateGPMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReportedPumpingRateGPMNull() {
                this[this.tableCycleSummary.ReportedPumpingRateGPMColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StationRowChangeEvent : global::System.EventArgs {
            
            private StationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StationRowChangeEvent(StationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PumpRowChangeEvent : global::System.EventArgs {
            
            private PumpRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PumpRowChangeEvent(PumpRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PumpRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CycleDataRowChangeEvent : global::System.EventArgs {
            
            private CycleDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CycleDataRowChangeEvent(CycleDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CycleDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OperationsDataRowChangeEvent : global::System.EventArgs {
            
            private OperationsDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsDataRowChangeEvent(OperationsDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WetWellRowChangeEvent : global::System.EventArgs {
            
            private WetWellRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WetWellRowChangeEvent(WetWellRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WetWellRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EnvironSensorRowChangeEvent : global::System.EventArgs {
            
            private EnvironSensorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnvironSensorRowChangeEvent(EnvironSensorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnvironSensorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DepthDataRowChangeEvent : global::System.EventArgs {
            
            private DepthDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepthDataRowChangeEvent(DepthDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepthDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RawRowChangeEvent : global::System.EventArgs {
            
            private RawRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RawRowChangeEvent(RawRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RawRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CalculatedRowChangeEvent : global::System.EventArgs {
            
            private CalculatedRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalculatedRowChangeEvent(CalculatedRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CalculatedRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DistributedRowChangeEvent : global::System.EventArgs {
            
            private DistributedRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributedRowChangeEvent(DistributedRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributedRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CycleSummaryRowChangeEvent : global::System.EventArgs {
            
            private CycleSummaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CycleSummaryRowChangeEvent(CycleSummaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CycleSummaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace PumpCycleDataAnalyzer.PumpCycleDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class StationTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StationTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Station";
            tableMapping.ColumnMappings.Add("station_id", "StationID");
            tableMapping.ColumnMappings.Add("h2_number", "H2Number");
            tableMapping.ColumnMappings.Add("station_name", "StationName");
            tableMapping.ColumnMappings.Add("location_description", "LocationDescription");
            tableMapping.ColumnMappings.Add("address", "Address");
            tableMapping.ColumnMappings.Add("location_type", "LocationType");
            tableMapping.ColumnMappings.Add("start_date", "StartDate");
            tableMapping.ColumnMappings.Add("end_date", "EndDate");
            tableMapping.ColumnMappings.Add("state_plane_x_ft", "StatePlaneXFt");
            tableMapping.ColumnMappings.Add("state_plane_y_ft", "StatePlaneYFt");
            tableMapping.ColumnMappings.Add("create_date", "CreateDate");
            tableMapping.ColumnMappings.Add("create_by", "CreateBy");
            tableMapping.ColumnMappings.Add("update_date", "UpdateDate");
            tableMapping.ColumnMappings.Add("update_by", "UpdateBy");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[STATION] WHERE (([station_id] = @Original_station_id) AND ([h2_number] = @Original_h2_number) AND ([station_name] = @Original_station_name) AND ((@IsNull_location_description = 1 AND [location_description] IS NULL) OR ([location_description] = @Original_location_description)) AND ((@IsNull_address = 1 AND [address] IS NULL) OR ([address] = @Original_address)) AND ((@IsNull_location_type = 1 AND [location_type] IS NULL) OR ([location_type] = @Original_location_type)) AND ([start_date] = @Original_start_date) AND ((@IsNull_end_date = 1 AND [end_date] IS NULL) OR ([end_date] = @Original_end_date)) AND ((@IsNull_state_plane_x_ft = 1 AND [state_plane_x_ft] IS NULL) OR ([state_plane_x_ft] = @Original_state_plane_x_ft)) AND ((@IsNull_state_plane_y_ft = 1 AND [state_plane_y_ft] IS NULL) OR ([state_plane_y_ft] = @Original_state_plane_y_ft)) AND ([create_date] = @Original_create_date) AND ([create_by] = @Original_create_by) AND ([update_date] = @Original_update_date) AND ([update_by] = @Original_update_by))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_h2_number", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "h2_number", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_location_description", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_description", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_address", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "address", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "address", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_location_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_type", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_start_date", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "start_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_end_date", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "end_date", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_end_date", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "end_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_state_plane_x_ft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "state_plane_x_ft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_state_plane_x_ft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "state_plane_x_ft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_state_plane_y_ft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "state_plane_y_ft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_state_plane_y_ft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "state_plane_y_ft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_create_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "create_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_create_by", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "create_by", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_update_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_update_by", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_by", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::PumpCycleDataAnalyzer.Properties.Settings.Default.NEPTUNEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT          station_id, h2_number, station_name, location_description, address, location_type, start_date, end_date, state_plane_x_ft, state_plane_y_ft, 
                                create_date, create_by, update_date, update_by
FROM               dbo.STATION
ORDER BY   station_name";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PumpCycleDataSet.StationDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PumpCycleDataSet.StationDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PumpCycleDataSet.StationDataTable dataTable = new PumpCycleDataSet.StationDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PumpCycleDataSet.StationDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PumpCycleDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Station");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_station_id, int Original_h2_number, string Original_station_name, string Original_location_description, string Original_address, string Original_location_type, System.DateTime Original_start_date, global::System.Nullable<global::System.DateTime> Original_end_date, global::System.Nullable<int> Original_state_plane_x_ft, global::System.Nullable<int> Original_state_plane_y_ft, System.DateTime Original_create_date, string Original_create_by, System.DateTime Original_update_date, string Original_update_by) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_station_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_h2_number));
            if ((Original_station_name == null)) {
                throw new global::System.ArgumentNullException("Original_station_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_station_name));
            }
            if ((Original_location_description == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_location_description));
            }
            if ((Original_address == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_address));
            }
            if ((Original_location_type == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_location_type));
            }
            this.Adapter.DeleteCommand.Parameters[9].Value = ((System.DateTime)(Original_start_date));
            if ((Original_end_date.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((System.DateTime)(Original_end_date.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_state_plane_x_ft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((int)(Original_state_plane_x_ft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_state_plane_y_ft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((int)(Original_state_plane_y_ft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[16].Value = ((System.DateTime)(Original_create_date));
            if ((Original_create_by == null)) {
                throw new global::System.ArgumentNullException("Original_create_by");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_create_by));
            }
            this.Adapter.DeleteCommand.Parameters[18].Value = ((System.DateTime)(Original_update_date));
            if ((Original_update_by == null)) {
                throw new global::System.ArgumentNullException("Original_update_by");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((string)(Original_update_by));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PumpTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PumpTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Pump";
            tableMapping.ColumnMappings.Add("pump_id", "PumpID");
            tableMapping.ColumnMappings.Add("station_id", "StationID");
            tableMapping.ColumnMappings.Add("pump_number", "PumpNumber");
            tableMapping.ColumnMappings.Add("pump_rate_gpm", "PumpRateGPM");
            tableMapping.ColumnMappings.Add("operator_type", "OperatorType");
            tableMapping.ColumnMappings.Add("drive_type", "DriveType");
            tableMapping.ColumnMappings.Add("motor_hp", "MotorHP");
            tableMapping.ColumnMappings.Add("percent_below_avg_pump_rate", "PercentBelowAvgPumpRate");
            tableMapping.ColumnMappings.Add("percent_above_avg_pump_rate", "PercentAboveAvgPumpRate");
            tableMapping.ColumnMappings.Add("level_to_start_pump_inches", "LevelToStartPumpInches");
            tableMapping.ColumnMappings.Add("level_to_stop_pump_inches", "LevelToStopPumpInches");
            tableMapping.ColumnMappings.Add("start_date", "StartDate");
            tableMapping.ColumnMappings.Add("end_date", "EndDate");
            tableMapping.ColumnMappings.Add("create_date", "CreateDate");
            tableMapping.ColumnMappings.Add("create_by", "CreateBy");
            tableMapping.ColumnMappings.Add("update_date", "UpdateDate");
            tableMapping.ColumnMappings.Add("update_by", "UpdateBy");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::PumpCycleDataAnalyzer.Properties.Settings.Default.NEPTUNEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT pump_id, station_id, pump_number, pump_rate_gpm, operator_type, drive_type, motor_hp, percent_below_avg_pump_rate, percent_above_avg_pump_rate, level_to_start_pump_inches, level_to_stop_pump_inches, start_date, end_date, create_date, create_by, update_date, update_by FROM dbo.PUMP";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PumpCycleDataSet.PumpDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PumpCycleDataSet.PumpDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PumpCycleDataSet.PumpDataTable dataTable = new PumpCycleDataSet.PumpDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CycleDataTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CycleDataTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CycleData";
            tableMapping.ColumnMappings.Add("cycle_data_id", "CycleDataID");
            tableMapping.ColumnMappings.Add("calendar_date_id", "CalendarDateID");
            tableMapping.ColumnMappings.Add("time_of_day_id", "TimeOfDayID");
            tableMapping.ColumnMappings.Add("station_id", "StationID");
            tableMapping.ColumnMappings.Add("pump_id", "PumpID");
            tableMapping.ColumnMappings.Add("cycle_change_time", "CycleChangeTime");
            tableMapping.ColumnMappings.Add("onoff_state", "OnOffState");
            tableMapping.ColumnMappings.Add("load_date", "LoadDate");
            tableMapping.ColumnMappings.Add("source_filename", "SourceFilename");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::PumpCycleDataAnalyzer.Properties.Settings.Default.NEPTUNEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT          cycle_data_id, calendar_date_id, time_of_day_id, station_id, pump_id, cycle_change_time, onoff_state, load_date, source_filename
FROM               dbo.CYCLE_DATA
WHERE           (station_id = @StationID) AND (cycle_change_time >= @BeginDateTime) AND (cycle_change_time <= @EndDateTime)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StationID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BeginDateTime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "cycle_change_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDateTime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "cycle_change_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PumpCycleDataSet.CycleDataDataTable dataTable, int StationID, System.DateTime BeginDateTime, System.DateTime EndDateTime) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(StationID));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(BeginDateTime));
            this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(EndDateTime));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PumpCycleDataSet.CycleDataDataTable GetData(int StationID, System.DateTime BeginDateTime, System.DateTime EndDateTime) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(StationID));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(BeginDateTime));
            this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(EndDateTime));
            PumpCycleDataSet.CycleDataDataTable dataTable = new PumpCycleDataSet.CycleDataDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OperationsDataTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OperationsDataTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OperationsData";
            tableMapping.ColumnMappings.Add("operations_data_id", "OperationsDataID");
            tableMapping.ColumnMappings.Add("calendar_date_id", "CalendarDateID");
            tableMapping.ColumnMappings.Add("time_of_day_id", "TimeOfDayID");
            tableMapping.ColumnMappings.Add("station_id", "StationID");
            tableMapping.ColumnMappings.Add("channel", "Channel");
            tableMapping.ColumnMappings.Add("message_time", "MessageTime");
            tableMapping.ColumnMappings.Add("message_text", "MessageText");
            tableMapping.ColumnMappings.Add("load_date", "LoadDate");
            tableMapping.ColumnMappings.Add("source_filename", "SourceFileName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::PumpCycleDataAnalyzer.Properties.Settings.Default.NEPTUNEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT          operations_data_id, calendar_date_id, time_of_day_id, station_id, channel, message_time, message_text, load_date, source_filename
FROM               dbo.OPERATIONS_DATA
WHERE           (message_time >= @BeginDate) AND (station_id = @StationID) AND (message_time <= @EndDate)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StationID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BeginDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "message_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "message_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PumpCycleDataSet.OperationsDataDataTable dataTable, int StationID, System.DateTime BeginDate, System.DateTime EndDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(StationID));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(BeginDate));
            this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(EndDate));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PumpCycleDataSet.OperationsDataDataTable GetData(int StationID, System.DateTime BeginDate, System.DateTime EndDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(StationID));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(BeginDate));
            this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(EndDate));
            PumpCycleDataSet.OperationsDataDataTable dataTable = new PumpCycleDataSet.OperationsDataDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class WetWellTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public WetWellTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "WetWell";
            tableMapping.ColumnMappings.Add("wetwell_id", "WetWellID");
            tableMapping.ColumnMappings.Add("station_id", "StationID");
            tableMapping.ColumnMappings.Add("wetwell_volume_gallons", "WetWellVolumeGallons");
            tableMapping.ColumnMappings.Add("wetwell_type", "WetWellType");
            tableMapping.ColumnMappings.Add("start_date", "StartDate");
            tableMapping.ColumnMappings.Add("end_date", "EndDate");
            tableMapping.ColumnMappings.Add("create_date", "CreateDate");
            tableMapping.ColumnMappings.Add("create_by", "CreateBy");
            tableMapping.ColumnMappings.Add("update_date", "UpdateDate");
            tableMapping.ColumnMappings.Add("update_by", "UpdateBy");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::PumpCycleDataAnalyzer.Properties.Settings.Default.NEPTUNEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT          wetwell_id, station_id, wetwell_volume_gallons, wetwell_type, sta" +
                "rt_date, end_date, create_date, create_by, update_date, update_by\r\nFROM         " +
                "      dbo.WETWELL\r\nWHERE           (station_id = @station_id)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PumpCycleDataSet.WetWellDataTable dataTable, int station_id) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(station_id));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PumpCycleDataSet.WetWellDataTable GetData(int station_id) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(station_id));
            PumpCycleDataSet.WetWellDataTable dataTable = new PumpCycleDataSet.WetWellDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EnvironSensorTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EnvironSensorTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "EnvironSensor";
            tableMapping.ColumnMappings.Add("environ_sensor_id", "EnvironSensorID");
            tableMapping.ColumnMappings.Add("station_id", "StationID");
            tableMapping.ColumnMappings.Add("x_data_category_loc_qual_combined", "XDataCategoryLocQualCombined");
            tableMapping.ColumnMappings.Add("data_category", "DataCategory");
            tableMapping.ColumnMappings.Add("location_qualifier", "LocationQualifier");
            tableMapping.ColumnMappings.Add("channel", "Channel");
            tableMapping.ColumnMappings.Add("channel_name", "ChannelName");
            tableMapping.ColumnMappings.Add("channel_description", "ChannelDescription");
            tableMapping.ColumnMappings.Add("engineering_unit_span", "EngineeringUnitSpan");
            tableMapping.ColumnMappings.Add("engineering_unit_zero", "EngineeringUnitZero");
            tableMapping.ColumnMappings.Add("engineering_units", "EngineeringUnits");
            tableMapping.ColumnMappings.Add("has_depth_to_flow", "HasDepthToFlow");
            tableMapping.ColumnMappings.Add("start_date", "StartDate");
            tableMapping.ColumnMappings.Add("end_date", "EndDate");
            tableMapping.ColumnMappings.Add("create_date", "CreateDate");
            tableMapping.ColumnMappings.Add("create_by", "CreateBy");
            tableMapping.ColumnMappings.Add("update_date", "UpdateDate");
            tableMapping.ColumnMappings.Add("update_by", "UpdateBy");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::PumpCycleDataAnalyzer.Properties.Settings.Default.NEPTUNEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT          dbo.ENVIRON_SENSOR.*\r\nFROM               dbo.ENVIRON_SENSOR\r\nWHER" +
                "E           (station_id = @station_id)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PumpCycleDataSet.EnvironSensorDataTable dataTable, int station_id) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(station_id));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PumpCycleDataSet.EnvironSensorDataTable GetData(int station_id) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(station_id));
            PumpCycleDataSet.EnvironSensorDataTable dataTable = new PumpCycleDataSet.EnvironSensorDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DepthDataTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DepthDataTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DepthData";
            tableMapping.ColumnMappings.Add("depth_data_id", "DepthDataID");
            tableMapping.ColumnMappings.Add("calendar_date_id", "CalendarDateID");
            tableMapping.ColumnMappings.Add("time_of_day_id", "TimeOfDayID");
            tableMapping.ColumnMappings.Add("station_id", "StationID");
            tableMapping.ColumnMappings.Add("environ_sensor_id", "EnvironSensorID");
            tableMapping.ColumnMappings.Add("location_qualifier", "LocationQualifier");
            tableMapping.ColumnMappings.Add("original_sample_time", "OriginalSampleTime");
            tableMapping.ColumnMappings.Add("assigned_sample_time", "AssignedSampleTime");
            tableMapping.ColumnMappings.Add("raw_value", "RawValue");
            tableMapping.ColumnMappings.Add("final_value", "FinalValue");
            tableMapping.ColumnMappings.Add("units", "Units");
            tableMapping.ColumnMappings.Add("load_date", "LoadDate");
            tableMapping.ColumnMappings.Add("source_filename", "SourceFilename");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[DEPTH_DATA] WHERE (([depth_data_id] = @Original_depth_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([units] = @Original_units) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_depth_data_id", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "depth_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_units", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "units", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::PumpCycleDataAnalyzer.Properties.Settings.Default.NEPTUNEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT          depth_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, 
                                raw_value, final_value, units, load_date, source_filename
FROM               dbo.DEPTH_DATA
WHERE           (station_id = @station_id) AND (assigned_sample_time BETWEEN @start_date AND @end_date) AND (location_qualifier = 'WETWELL')
ORDER BY   assigned_sample_time";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@start_date", global::System.Data.SqlDbType.SmallDateTime, 4, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@end_date", global::System.Data.SqlDbType.SmallDateTime, 4, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PumpCycleDataSet.DepthDataDataTable dataTable, int station_id, System.DateTime start_date, System.DateTime end_date) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(station_id));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(start_date));
            this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(end_date));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PumpCycleDataSet.DepthDataDataTable GetData(int station_id, System.DateTime start_date, System.DateTime end_date) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(station_id));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(start_date));
            this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(end_date));
            PumpCycleDataSet.DepthDataDataTable dataTable = new PumpCycleDataSet.DepthDataDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PumpCycleDataSet.DepthDataDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PumpCycleDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DepthData");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_depth_data_id, int Original_calendar_date_id, int Original_time_of_day_id, int Original_station_id, int Original_environ_sensor_id, string Original_location_qualifier, System.DateTime p2, System.DateTime Original_assigned_sample_time, int Original_raw_value, decimal Original_final_value, string Original_units, System.DateTime Original_load_date, string Original_source_filename) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_depth_data_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_calendar_date_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_time_of_day_id));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_station_id));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(p2));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_raw_value));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_final_value));
            if ((Original_units == null)) {
                throw new global::System.ArgumentNullException("Original_units");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_units));
            }
            this.Adapter.DeleteCommand.Parameters[11].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591
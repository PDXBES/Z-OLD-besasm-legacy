//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace BREPrototype {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("BREDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class BREDataSet : System.Data.DataSet {
        
        private CostPerComponentDataTable tableCostPerComponent;
        
        private LevelOfServiceDataTable tableLevelOfService;
        
        private BRECostDataTable tableBRECost;
        
        private CostPerLevelOfServiceDataTable tableCostPerLevelOfService;
        
        private System.Data.DataRelation relationLevelOfService_BREDataTable;
        
        private System.Data.DataRelation relationBRECost_LevelOfService;
        
        private System.Data.DataRelation relationLevelOfService_CostPerLevelOfService;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BREDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected BREDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["CostPerComponent"] != null)) {
                    base.Tables.Add(new CostPerComponentDataTable(ds.Tables["CostPerComponent"]));
                }
                if ((ds.Tables["LevelOfService"] != null)) {
                    base.Tables.Add(new LevelOfServiceDataTable(ds.Tables["LevelOfService"]));
                }
                if ((ds.Tables["BRECost"] != null)) {
                    base.Tables.Add(new BRECostDataTable(ds.Tables["BRECost"]));
                }
                if ((ds.Tables["CostPerLevelOfService"] != null)) {
                    base.Tables.Add(new CostPerLevelOfServiceDataTable(ds.Tables["CostPerLevelOfService"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CostPerComponentDataTable CostPerComponent {
            get {
                return this.tableCostPerComponent;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LevelOfServiceDataTable LevelOfService {
            get {
                return this.tableLevelOfService;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BRECostDataTable BRECost {
            get {
                return this.tableBRECost;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CostPerLevelOfServiceDataTable CostPerLevelOfService {
            get {
                return this.tableCostPerLevelOfService;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            BREDataSet cln = ((BREDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["CostPerComponent"] != null)) {
                    base.Tables.Add(new CostPerComponentDataTable(ds.Tables["CostPerComponent"]));
                }
                if ((ds.Tables["LevelOfService"] != null)) {
                    base.Tables.Add(new LevelOfServiceDataTable(ds.Tables["LevelOfService"]));
                }
                if ((ds.Tables["BRECost"] != null)) {
                    base.Tables.Add(new BRECostDataTable(ds.Tables["BRECost"]));
                }
                if ((ds.Tables["CostPerLevelOfService"] != null)) {
                    base.Tables.Add(new CostPerLevelOfServiceDataTable(ds.Tables["CostPerLevelOfService"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableCostPerComponent = ((CostPerComponentDataTable)(base.Tables["CostPerComponent"]));
            if ((initTable == true)) {
                if ((this.tableCostPerComponent != null)) {
                    this.tableCostPerComponent.InitVars();
                }
            }
            this.tableLevelOfService = ((LevelOfServiceDataTable)(base.Tables["LevelOfService"]));
            if ((initTable == true)) {
                if ((this.tableLevelOfService != null)) {
                    this.tableLevelOfService.InitVars();
                }
            }
            this.tableBRECost = ((BRECostDataTable)(base.Tables["BRECost"]));
            if ((initTable == true)) {
                if ((this.tableBRECost != null)) {
                    this.tableBRECost.InitVars();
                }
            }
            this.tableCostPerLevelOfService = ((CostPerLevelOfServiceDataTable)(base.Tables["CostPerLevelOfService"]));
            if ((initTable == true)) {
                if ((this.tableCostPerLevelOfService != null)) {
                    this.tableCostPerLevelOfService.InitVars();
                }
            }
            this.relationLevelOfService_BREDataTable = this.Relations["LevelOfService_BREDataTable"];
            this.relationBRECost_LevelOfService = this.Relations["BRECost_LevelOfService"];
            this.relationLevelOfService_CostPerLevelOfService = this.Relations["LevelOfService_CostPerLevelOfService"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "BREDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/BREDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCostPerComponent = new CostPerComponentDataTable();
            base.Tables.Add(this.tableCostPerComponent);
            this.tableLevelOfService = new LevelOfServiceDataTable();
            base.Tables.Add(this.tableLevelOfService);
            this.tableBRECost = new BRECostDataTable();
            base.Tables.Add(this.tableBRECost);
            this.tableCostPerLevelOfService = new CostPerLevelOfServiceDataTable();
            base.Tables.Add(this.tableCostPerLevelOfService);
            this.relationLevelOfService_BREDataTable = new System.Data.DataRelation("LevelOfService_BREDataTable", new System.Data.DataColumn[] {
                        this.tableCostPerComponent.LevelOfServiceIDColumn}, new System.Data.DataColumn[] {
                        this.tableLevelOfService.LevelOfServiceIDColumn}, false);
            this.Relations.Add(this.relationLevelOfService_BREDataTable);
            this.relationBRECost_LevelOfService = new System.Data.DataRelation("BRECost_LevelOfService", new System.Data.DataColumn[] {
                        this.tableBRECost.BRECostIDColumn}, new System.Data.DataColumn[] {
                        this.tableLevelOfService.BRECostIDColumn}, false);
            this.Relations.Add(this.relationBRECost_LevelOfService);
            this.relationLevelOfService_CostPerLevelOfService = new System.Data.DataRelation("LevelOfService_CostPerLevelOfService", new System.Data.DataColumn[] {
                        this.tableCostPerLevelOfService.LevelOfServiceIDColumn}, new System.Data.DataColumn[] {
                        this.tableLevelOfService.LevelOfServiceIDColumn}, false);
            this.Relations.Add(this.relationLevelOfService_CostPerLevelOfService);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCostPerComponent() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLevelOfService() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBRECost() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCostPerLevelOfService() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            BREDataSet ds = new BREDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void CostPerComponentRowChangeEventHandler(object sender, CostPerComponentRowChangeEvent e);
        
        public delegate void LevelOfServiceRowChangeEventHandler(object sender, LevelOfServiceRowChangeEvent e);
        
        public delegate void BRECostRowChangeEventHandler(object sender, BRECostRowChangeEvent e);
        
        public delegate void CostPerLevelOfServiceRowChangeEventHandler(object sender, CostPerLevelOfServiceRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CostPerComponentDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCostPerComponentID;
            
            private System.Data.DataColumn columnMLinkID;
            
            private System.Data.DataColumn columnLevelOfServiceID;
            
            private System.Data.DataColumn columnYear;
            
            private System.Data.DataColumn columnBRECost;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostPerComponentDataTable() {
                this.TableName = "CostPerComponent";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CostPerComponentDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CostPerComponentDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CostPerComponentIDColumn {
                get {
                    return this.columnCostPerComponentID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MLinkIDColumn {
                get {
                    return this.columnMLinkID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LevelOfServiceIDColumn {
                get {
                    return this.columnLevelOfServiceID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BRECostColumn {
                get {
                    return this.columnBRECost;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostPerComponentRow this[int index] {
                get {
                    return ((CostPerComponentRow)(this.Rows[index]));
                }
            }
            
            public event CostPerComponentRowChangeEventHandler CostPerComponentRowChanging;
            
            public event CostPerComponentRowChangeEventHandler CostPerComponentRowChanged;
            
            public event CostPerComponentRowChangeEventHandler CostPerComponentRowDeleting;
            
            public event CostPerComponentRowChangeEventHandler CostPerComponentRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCostPerComponentRow(CostPerComponentRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostPerComponentRow AddCostPerComponentRow(int MLinkID, int LevelOfServiceID, int Year, double BRECost) {
                CostPerComponentRow rowCostPerComponentRow = ((CostPerComponentRow)(this.NewRow()));
                rowCostPerComponentRow.ItemArray = new object[] {
                        null,
                        MLinkID,
                        LevelOfServiceID,
                        Year,
                        BRECost};
                this.Rows.Add(rowCostPerComponentRow);
                return rowCostPerComponentRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostPerComponentRow FindByMLinkIDLevelOfServiceIDYear(int MLinkID, int LevelOfServiceID, int Year) {
                return ((CostPerComponentRow)(this.Rows.Find(new object[] {
                            MLinkID,
                            LevelOfServiceID,
                            Year})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CostPerComponentDataTable cln = ((CostPerComponentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CostPerComponentDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostPerComponentID = base.Columns["CostPerComponentID"];
                this.columnMLinkID = base.Columns["MLinkID"];
                this.columnLevelOfServiceID = base.Columns["LevelOfServiceID"];
                this.columnYear = base.Columns["Year"];
                this.columnBRECost = base.Columns["BRECost"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostPerComponentID = new System.Data.DataColumn("CostPerComponentID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostPerComponentID);
                this.columnMLinkID = new System.Data.DataColumn("MLinkID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMLinkID);
                this.columnLevelOfServiceID = new System.Data.DataColumn("LevelOfServiceID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLevelOfServiceID);
                this.columnYear = new System.Data.DataColumn("Year", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnBRECost = new System.Data.DataColumn("BRECost", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBRECost);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnMLinkID,
                                this.columnLevelOfServiceID,
                                this.columnYear}, true));
                this.columnCostPerComponentID.AutoIncrement = true;
                this.columnCostPerComponentID.AllowDBNull = false;
                this.columnMLinkID.AllowDBNull = false;
                this.columnLevelOfServiceID.AllowDBNull = false;
                this.columnYear.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostPerComponentRow NewCostPerComponentRow() {
                return ((CostPerComponentRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CostPerComponentRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CostPerComponentRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CostPerComponentRowChanged != null)) {
                    this.CostPerComponentRowChanged(this, new CostPerComponentRowChangeEvent(((CostPerComponentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CostPerComponentRowChanging != null)) {
                    this.CostPerComponentRowChanging(this, new CostPerComponentRowChangeEvent(((CostPerComponentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CostPerComponentRowDeleted != null)) {
                    this.CostPerComponentRowDeleted(this, new CostPerComponentRowChangeEvent(((CostPerComponentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CostPerComponentRowDeleting != null)) {
                    this.CostPerComponentRowDeleting(this, new CostPerComponentRowChangeEvent(((CostPerComponentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCostPerComponentRow(CostPerComponentRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BREDataSet ds = new BREDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CostPerComponentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LevelOfServiceDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLevelOfServiceID;
            
            private System.Data.DataColumn columnLevelOfServiceType;
            
            private System.Data.DataColumn columnServiceFailureMechanism;
            
            private System.Data.DataColumn columnDescriptionOfFailure;
            
            private System.Data.DataColumn columnBRECostID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LevelOfServiceDataTable() {
                this.TableName = "LevelOfService";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LevelOfServiceDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LevelOfServiceDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LevelOfServiceIDColumn {
                get {
                    return this.columnLevelOfServiceID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LevelOfServiceTypeColumn {
                get {
                    return this.columnLevelOfServiceType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServiceFailureMechanismColumn {
                get {
                    return this.columnServiceFailureMechanism;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionOfFailureColumn {
                get {
                    return this.columnDescriptionOfFailure;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BRECostIDColumn {
                get {
                    return this.columnBRECostID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LevelOfServiceRow this[int index] {
                get {
                    return ((LevelOfServiceRow)(this.Rows[index]));
                }
            }
            
            public event LevelOfServiceRowChangeEventHandler LevelOfServiceRowChanging;
            
            public event LevelOfServiceRowChangeEventHandler LevelOfServiceRowChanged;
            
            public event LevelOfServiceRowChangeEventHandler LevelOfServiceRowDeleting;
            
            public event LevelOfServiceRowChangeEventHandler LevelOfServiceRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLevelOfServiceRow(LevelOfServiceRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LevelOfServiceRow AddLevelOfServiceRow(string LevelOfServiceType, string ServiceFailureMechanism, string DescriptionOfFailure, BRECostRow parentBRECostRowByBRECost_LevelOfService) {
                LevelOfServiceRow rowLevelOfServiceRow = ((LevelOfServiceRow)(this.NewRow()));
                rowLevelOfServiceRow.ItemArray = new object[] {
                        null,
                        LevelOfServiceType,
                        ServiceFailureMechanism,
                        DescriptionOfFailure,
                        parentBRECostRowByBRECost_LevelOfService[0]};
                this.Rows.Add(rowLevelOfServiceRow);
                return rowLevelOfServiceRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LevelOfServiceRow FindByLevelOfServiceID(int LevelOfServiceID) {
                return ((LevelOfServiceRow)(this.Rows.Find(new object[] {
                            LevelOfServiceID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LevelOfServiceDataTable cln = ((LevelOfServiceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LevelOfServiceDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLevelOfServiceID = base.Columns["LevelOfServiceID"];
                this.columnLevelOfServiceType = base.Columns["LevelOfServiceType"];
                this.columnServiceFailureMechanism = base.Columns["ServiceFailureMechanism"];
                this.columnDescriptionOfFailure = base.Columns["DescriptionOfFailure"];
                this.columnBRECostID = base.Columns["BRECostID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLevelOfServiceID = new System.Data.DataColumn("LevelOfServiceID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLevelOfServiceID);
                this.columnLevelOfServiceType = new System.Data.DataColumn("LevelOfServiceType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLevelOfServiceType);
                this.columnServiceFailureMechanism = new System.Data.DataColumn("ServiceFailureMechanism", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceFailureMechanism);
                this.columnDescriptionOfFailure = new System.Data.DataColumn("DescriptionOfFailure", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescriptionOfFailure);
                this.columnBRECostID = new System.Data.DataColumn("BRECostID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBRECostID);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnLevelOfServiceID}, true));
                this.columnLevelOfServiceID.AutoIncrement = true;
                this.columnLevelOfServiceID.AllowDBNull = false;
                this.columnLevelOfServiceID.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LevelOfServiceRow NewLevelOfServiceRow() {
                return ((LevelOfServiceRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LevelOfServiceRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LevelOfServiceRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LevelOfServiceRowChanged != null)) {
                    this.LevelOfServiceRowChanged(this, new LevelOfServiceRowChangeEvent(((LevelOfServiceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LevelOfServiceRowChanging != null)) {
                    this.LevelOfServiceRowChanging(this, new LevelOfServiceRowChangeEvent(((LevelOfServiceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LevelOfServiceRowDeleted != null)) {
                    this.LevelOfServiceRowDeleted(this, new LevelOfServiceRowChangeEvent(((LevelOfServiceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LevelOfServiceRowDeleting != null)) {
                    this.LevelOfServiceRowDeleting(this, new LevelOfServiceRowChangeEvent(((LevelOfServiceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLevelOfServiceRow(LevelOfServiceRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BREDataSet ds = new BREDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LevelOfServiceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BRECostDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnBRECostID;
            
            private System.Data.DataColumn columnBRECostDescription;
            
            private System.Data.DataColumn columnBRECost;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRECostDataTable() {
                this.TableName = "BRECost";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BRECostDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BRECostDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BRECostIDColumn {
                get {
                    return this.columnBRECostID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BRECostDescriptionColumn {
                get {
                    return this.columnBRECostDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BRECostColumn {
                get {
                    return this.columnBRECost;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRECostRow this[int index] {
                get {
                    return ((BRECostRow)(this.Rows[index]));
                }
            }
            
            public event BRECostRowChangeEventHandler BRECostRowChanging;
            
            public event BRECostRowChangeEventHandler BRECostRowChanged;
            
            public event BRECostRowChangeEventHandler BRECostRowDeleting;
            
            public event BRECostRowChangeEventHandler BRECostRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBRECostRow(BRECostRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRECostRow AddBRECostRow(string BRECostDescription, double BRECost) {
                BRECostRow rowBRECostRow = ((BRECostRow)(this.NewRow()));
                rowBRECostRow.ItemArray = new object[] {
                        null,
                        BRECostDescription,
                        BRECost};
                this.Rows.Add(rowBRECostRow);
                return rowBRECostRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRECostRow FindByBRECostID(int BRECostID) {
                return ((BRECostRow)(this.Rows.Find(new object[] {
                            BRECostID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BRECostDataTable cln = ((BRECostDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BRECostDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBRECostID = base.Columns["BRECostID"];
                this.columnBRECostDescription = base.Columns["BRECostDescription"];
                this.columnBRECost = base.Columns["BRECost"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBRECostID = new System.Data.DataColumn("BRECostID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBRECostID);
                this.columnBRECostDescription = new System.Data.DataColumn("BRECostDescription", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBRECostDescription);
                this.columnBRECost = new System.Data.DataColumn("BRECost", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBRECost);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnBRECostID}, true));
                this.columnBRECostID.AutoIncrement = true;
                this.columnBRECostID.AllowDBNull = false;
                this.columnBRECostID.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRECostRow NewBRECostRow() {
                return ((BRECostRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BRECostRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BRECostRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BRECostRowChanged != null)) {
                    this.BRECostRowChanged(this, new BRECostRowChangeEvent(((BRECostRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BRECostRowChanging != null)) {
                    this.BRECostRowChanging(this, new BRECostRowChangeEvent(((BRECostRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BRECostRowDeleted != null)) {
                    this.BRECostRowDeleted(this, new BRECostRowChangeEvent(((BRECostRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BRECostRowDeleting != null)) {
                    this.BRECostRowDeleting(this, new BRECostRowChangeEvent(((BRECostRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBRECostRow(BRECostRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BREDataSet ds = new BREDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BRECostDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CostPerLevelOfServiceDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCostPerLevelOfServiceID;
            
            private System.Data.DataColumn columnLevelOfServiceID;
            
            private System.Data.DataColumn columnYear;
            
            private System.Data.DataColumn columnBRECost;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostPerLevelOfServiceDataTable() {
                this.TableName = "CostPerLevelOfService";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CostPerLevelOfServiceDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CostPerLevelOfServiceDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CostPerLevelOfServiceIDColumn {
                get {
                    return this.columnCostPerLevelOfServiceID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LevelOfServiceIDColumn {
                get {
                    return this.columnLevelOfServiceID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BRECostColumn {
                get {
                    return this.columnBRECost;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostPerLevelOfServiceRow this[int index] {
                get {
                    return ((CostPerLevelOfServiceRow)(this.Rows[index]));
                }
            }
            
            public event CostPerLevelOfServiceRowChangeEventHandler CostPerLevelOfServiceRowChanging;
            
            public event CostPerLevelOfServiceRowChangeEventHandler CostPerLevelOfServiceRowChanged;
            
            public event CostPerLevelOfServiceRowChangeEventHandler CostPerLevelOfServiceRowDeleting;
            
            public event CostPerLevelOfServiceRowChangeEventHandler CostPerLevelOfServiceRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCostPerLevelOfServiceRow(CostPerLevelOfServiceRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostPerLevelOfServiceRow AddCostPerLevelOfServiceRow(int LevelOfServiceID, int Year, double BRECost) {
                CostPerLevelOfServiceRow rowCostPerLevelOfServiceRow = ((CostPerLevelOfServiceRow)(this.NewRow()));
                rowCostPerLevelOfServiceRow.ItemArray = new object[] {
                        null,
                        LevelOfServiceID,
                        Year,
                        BRECost};
                this.Rows.Add(rowCostPerLevelOfServiceRow);
                return rowCostPerLevelOfServiceRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostPerLevelOfServiceRow FindByLevelOfServiceIDYear(int LevelOfServiceID, int Year) {
                return ((CostPerLevelOfServiceRow)(this.Rows.Find(new object[] {
                            LevelOfServiceID,
                            Year})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CostPerLevelOfServiceDataTable cln = ((CostPerLevelOfServiceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CostPerLevelOfServiceDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostPerLevelOfServiceID = base.Columns["CostPerLevelOfServiceID"];
                this.columnLevelOfServiceID = base.Columns["LevelOfServiceID"];
                this.columnYear = base.Columns["Year"];
                this.columnBRECost = base.Columns["BRECost"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostPerLevelOfServiceID = new System.Data.DataColumn("CostPerLevelOfServiceID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostPerLevelOfServiceID);
                this.columnLevelOfServiceID = new System.Data.DataColumn("LevelOfServiceID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLevelOfServiceID);
                this.columnYear = new System.Data.DataColumn("Year", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnBRECost = new System.Data.DataColumn("BRECost", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBRECost);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnLevelOfServiceID,
                                this.columnYear}, true));
                this.columnCostPerLevelOfServiceID.AutoIncrement = true;
                this.columnLevelOfServiceID.AllowDBNull = false;
                this.columnYear.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostPerLevelOfServiceRow NewCostPerLevelOfServiceRow() {
                return ((CostPerLevelOfServiceRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CostPerLevelOfServiceRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CostPerLevelOfServiceRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CostPerLevelOfServiceRowChanged != null)) {
                    this.CostPerLevelOfServiceRowChanged(this, new CostPerLevelOfServiceRowChangeEvent(((CostPerLevelOfServiceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CostPerLevelOfServiceRowChanging != null)) {
                    this.CostPerLevelOfServiceRowChanging(this, new CostPerLevelOfServiceRowChangeEvent(((CostPerLevelOfServiceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CostPerLevelOfServiceRowDeleted != null)) {
                    this.CostPerLevelOfServiceRowDeleted(this, new CostPerLevelOfServiceRowChangeEvent(((CostPerLevelOfServiceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CostPerLevelOfServiceRowDeleting != null)) {
                    this.CostPerLevelOfServiceRowDeleting(this, new CostPerLevelOfServiceRowChangeEvent(((CostPerLevelOfServiceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCostPerLevelOfServiceRow(CostPerLevelOfServiceRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BREDataSet ds = new BREDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CostPerLevelOfServiceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CostPerComponentRow : System.Data.DataRow {
            
            private CostPerComponentDataTable tableCostPerComponent;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CostPerComponentRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCostPerComponent = ((CostPerComponentDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostPerComponentID {
                get {
                    return ((int)(this[this.tableCostPerComponent.CostPerComponentIDColumn]));
                }
                set {
                    this[this.tableCostPerComponent.CostPerComponentIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MLinkID {
                get {
                    return ((int)(this[this.tableCostPerComponent.MLinkIDColumn]));
                }
                set {
                    this[this.tableCostPerComponent.MLinkIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LevelOfServiceID {
                get {
                    return ((int)(this[this.tableCostPerComponent.LevelOfServiceIDColumn]));
                }
                set {
                    this[this.tableCostPerComponent.LevelOfServiceIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Year {
                get {
                    return ((int)(this[this.tableCostPerComponent.YearColumn]));
                }
                set {
                    this[this.tableCostPerComponent.YearColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BRECost {
                get {
                    try {
                        return ((double)(this[this.tableCostPerComponent.BRECostColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BRECost\' in table \'CostPerComponent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCostPerComponent.BRECostColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBRECostNull() {
                return this.IsNull(this.tableCostPerComponent.BRECostColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBRECostNull() {
                this[this.tableCostPerComponent.BRECostColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LevelOfServiceRow[] GetLevelOfServiceRows() {
                return ((LevelOfServiceRow[])(base.GetChildRows(this.Table.ChildRelations["LevelOfService_BREDataTable"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LevelOfServiceRow : System.Data.DataRow {
            
            private LevelOfServiceDataTable tableLevelOfService;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LevelOfServiceRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLevelOfService = ((LevelOfServiceDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LevelOfServiceID {
                get {
                    return ((int)(this[this.tableLevelOfService.LevelOfServiceIDColumn]));
                }
                set {
                    this[this.tableLevelOfService.LevelOfServiceIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LevelOfServiceType {
                get {
                    try {
                        return ((string)(this[this.tableLevelOfService.LevelOfServiceTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LevelOfServiceType\' in table \'LevelOfService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLevelOfService.LevelOfServiceTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceFailureMechanism {
                get {
                    try {
                        return ((string)(this[this.tableLevelOfService.ServiceFailureMechanismColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ServiceFailureMechanism\' in table \'LevelOfService\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableLevelOfService.ServiceFailureMechanismColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DescriptionOfFailure {
                get {
                    try {
                        return ((string)(this[this.tableLevelOfService.DescriptionOfFailureColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DescriptionOfFailure\' in table \'LevelOfService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLevelOfService.DescriptionOfFailureColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BRECostID {
                get {
                    try {
                        return ((int)(this[this.tableLevelOfService.BRECostIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BRECostID\' in table \'LevelOfService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLevelOfService.BRECostIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostPerComponentRow BREDataTableRow {
                get {
                    return ((CostPerComponentRow)(this.GetParentRow(this.Table.ParentRelations["LevelOfService_BREDataTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LevelOfService_BREDataTable"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRECostRow BRECostRow {
                get {
                    return ((BRECostRow)(this.GetParentRow(this.Table.ParentRelations["BRECost_LevelOfService"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["BRECost_LevelOfService"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostPerLevelOfServiceRow CostPerLevelOfServiceRow {
                get {
                    return ((CostPerLevelOfServiceRow)(this.GetParentRow(this.Table.ParentRelations["LevelOfService_CostPerLevelOfService"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LevelOfService_CostPerLevelOfService"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLevelOfServiceTypeNull() {
                return this.IsNull(this.tableLevelOfService.LevelOfServiceTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLevelOfServiceTypeNull() {
                this[this.tableLevelOfService.LevelOfServiceTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceFailureMechanismNull() {
                return this.IsNull(this.tableLevelOfService.ServiceFailureMechanismColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceFailureMechanismNull() {
                this[this.tableLevelOfService.ServiceFailureMechanismColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionOfFailureNull() {
                return this.IsNull(this.tableLevelOfService.DescriptionOfFailureColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionOfFailureNull() {
                this[this.tableLevelOfService.DescriptionOfFailureColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBRECostIDNull() {
                return this.IsNull(this.tableLevelOfService.BRECostIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBRECostIDNull() {
                this[this.tableLevelOfService.BRECostIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BRECostRow : System.Data.DataRow {
            
            private BRECostDataTable tableBRECost;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BRECostRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBRECost = ((BRECostDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BRECostID {
                get {
                    return ((int)(this[this.tableBRECost.BRECostIDColumn]));
                }
                set {
                    this[this.tableBRECost.BRECostIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BRECostDescription {
                get {
                    try {
                        return ((string)(this[this.tableBRECost.BRECostDescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BRECostDescription\' in table \'BRECost\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBRECost.BRECostDescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BRECost {
                get {
                    try {
                        return ((double)(this[this.tableBRECost.BRECostColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BRECost\' in table \'BRECost\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBRECost.BRECostColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBRECostDescriptionNull() {
                return this.IsNull(this.tableBRECost.BRECostDescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBRECostDescriptionNull() {
                this[this.tableBRECost.BRECostDescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBRECostNull() {
                return this.IsNull(this.tableBRECost.BRECostColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBRECostNull() {
                this[this.tableBRECost.BRECostColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LevelOfServiceRow[] GetLevelOfServiceRows() {
                return ((LevelOfServiceRow[])(base.GetChildRows(this.Table.ChildRelations["BRECost_LevelOfService"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CostPerLevelOfServiceRow : System.Data.DataRow {
            
            private CostPerLevelOfServiceDataTable tableCostPerLevelOfService;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CostPerLevelOfServiceRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCostPerLevelOfService = ((CostPerLevelOfServiceDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostPerLevelOfServiceID {
                get {
                    try {
                        return ((int)(this[this.tableCostPerLevelOfService.CostPerLevelOfServiceIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CostPerLevelOfServiceID\' in table \'CostPerLevelOfService\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableCostPerLevelOfService.CostPerLevelOfServiceIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LevelOfServiceID {
                get {
                    return ((int)(this[this.tableCostPerLevelOfService.LevelOfServiceIDColumn]));
                }
                set {
                    this[this.tableCostPerLevelOfService.LevelOfServiceIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Year {
                get {
                    return ((int)(this[this.tableCostPerLevelOfService.YearColumn]));
                }
                set {
                    this[this.tableCostPerLevelOfService.YearColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BRECost {
                get {
                    try {
                        return ((double)(this[this.tableCostPerLevelOfService.BRECostColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BRECost\' in table \'CostPerLevelOfService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCostPerLevelOfService.BRECostColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostPerLevelOfServiceIDNull() {
                return this.IsNull(this.tableCostPerLevelOfService.CostPerLevelOfServiceIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostPerLevelOfServiceIDNull() {
                this[this.tableCostPerLevelOfService.CostPerLevelOfServiceIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBRECostNull() {
                return this.IsNull(this.tableCostPerLevelOfService.BRECostColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBRECostNull() {
                this[this.tableCostPerLevelOfService.BRECostColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LevelOfServiceRow[] GetLevelOfServiceRows() {
                return ((LevelOfServiceRow[])(base.GetChildRows(this.Table.ChildRelations["LevelOfService_CostPerLevelOfService"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CostPerComponentRowChangeEvent : System.EventArgs {
            
            private CostPerComponentRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostPerComponentRowChangeEvent(CostPerComponentRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostPerComponentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LevelOfServiceRowChangeEvent : System.EventArgs {
            
            private LevelOfServiceRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LevelOfServiceRowChangeEvent(LevelOfServiceRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LevelOfServiceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BRECostRowChangeEvent : System.EventArgs {
            
            private BRECostRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRECostRowChangeEvent(BRECostRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BRECostRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CostPerLevelOfServiceRowChangeEvent : System.EventArgs {
            
            private CostPerLevelOfServiceRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostPerLevelOfServiceRowChangeEvent(CostPerLevelOfServiceRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostPerLevelOfServiceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591
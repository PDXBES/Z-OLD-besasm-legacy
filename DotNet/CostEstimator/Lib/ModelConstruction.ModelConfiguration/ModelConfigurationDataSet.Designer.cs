//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SystemsAnalysis.ModelConstruction {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ModelConfigurationDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ModelConfigurationDataSet : global::System.Data.DataSet {
        
        private ControlDataTable tableControl;
        
        private ModelStateDataTable tableModelState;
        
        private AdminDataTable tableAdmin;
        
        private MasterComponentsDataTable tableMasterComponents;
        
        private MasterDataSourceDataTable tableMasterDataSource;
        
        private ModelComponentsDataTable tableModelComponents;
        
        private ModelDataSourceDataTable tableModelDataSource;
        
        private CodeLibraryDataTable tableCodeLibrary;
        
        private RequiredModelDatabasesDataTable tableRequiredModelDatabases;
        
        private ModelDatabaseDataTable tableModelDatabase;
        
        private LinkedTableDataTable tableLinkedTable;
        
        private TreeverseDataTable tableTreeverse;
        
        private RetraceDataTable tableRetrace;
        
        private TraceLinksDataTable tableTraceLinks;
        
        private RootLinksDataTable tableRootLinks;
        
        private RootLinkDataTable tableRootLink;
        
        private StopLinksDataTable tableStopLinks;
        
        private StopLinkDataTable tableStopLink;
        
        private SimulationFilesDataTable tableSimulationFiles;
        
        private IncludedAlternativesDataTable tableIncludedAlternatives;
        
        private AlternativeDataTable tableAlternative;
        
        private DataAccessDataTable tableDataAccess;
        
        private DataSourceDataTable tableDataSource;
        
        private global::System.Data.DataRelation relationMasterComponents_MasterDataSource;
        
        private global::System.Data.DataRelation relationModelComponents_ModelDataSource;
        
        private global::System.Data.DataRelation relationRequiredAccessDatabases_MasterDatabase;
        
        private global::System.Data.DataRelation relationMasterDatabase_LinkedTables;
        
        private global::System.Data.DataRelation relationModelDataSourceLinkedTables;
        
        private global::System.Data.DataRelation relationRootLinks_RootLink;
        
        private global::System.Data.DataRelation relationStopLinks_StopLink;
        
        private global::System.Data.DataRelation relationFK_IncludedAlternatives_Alternative;
        
        private global::System.Data.DataRelation relationFK_DataAccess_DataSource;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ModelConfigurationDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ModelConfigurationDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Control"] != null)) {
                    base.Tables.Add(new ControlDataTable(ds.Tables["Control"]));
                }
                if ((ds.Tables["ModelState"] != null)) {
                    base.Tables.Add(new ModelStateDataTable(ds.Tables["ModelState"]));
                }
                if ((ds.Tables["Admin"] != null)) {
                    base.Tables.Add(new AdminDataTable(ds.Tables["Admin"]));
                }
                if ((ds.Tables["MasterComponents"] != null)) {
                    base.Tables.Add(new MasterComponentsDataTable(ds.Tables["MasterComponents"]));
                }
                if ((ds.Tables["MasterDataSource"] != null)) {
                    base.Tables.Add(new MasterDataSourceDataTable(ds.Tables["MasterDataSource"]));
                }
                if ((ds.Tables["ModelComponents"] != null)) {
                    base.Tables.Add(new ModelComponentsDataTable(ds.Tables["ModelComponents"]));
                }
                if ((ds.Tables["ModelDataSource"] != null)) {
                    base.Tables.Add(new ModelDataSourceDataTable(ds.Tables["ModelDataSource"]));
                }
                if ((ds.Tables["CodeLibrary"] != null)) {
                    base.Tables.Add(new CodeLibraryDataTable(ds.Tables["CodeLibrary"]));
                }
                if ((ds.Tables["RequiredModelDatabases"] != null)) {
                    base.Tables.Add(new RequiredModelDatabasesDataTable(ds.Tables["RequiredModelDatabases"]));
                }
                if ((ds.Tables["ModelDatabase"] != null)) {
                    base.Tables.Add(new ModelDatabaseDataTable(ds.Tables["ModelDatabase"]));
                }
                if ((ds.Tables["LinkedTable"] != null)) {
                    base.Tables.Add(new LinkedTableDataTable(ds.Tables["LinkedTable"]));
                }
                if ((ds.Tables["Treeverse"] != null)) {
                    base.Tables.Add(new TreeverseDataTable(ds.Tables["Treeverse"]));
                }
                if ((ds.Tables["Retrace"] != null)) {
                    base.Tables.Add(new RetraceDataTable(ds.Tables["Retrace"]));
                }
                if ((ds.Tables["TraceLinks"] != null)) {
                    base.Tables.Add(new TraceLinksDataTable(ds.Tables["TraceLinks"]));
                }
                if ((ds.Tables["RootLinks"] != null)) {
                    base.Tables.Add(new RootLinksDataTable(ds.Tables["RootLinks"]));
                }
                if ((ds.Tables["RootLink"] != null)) {
                    base.Tables.Add(new RootLinkDataTable(ds.Tables["RootLink"]));
                }
                if ((ds.Tables["StopLinks"] != null)) {
                    base.Tables.Add(new StopLinksDataTable(ds.Tables["StopLinks"]));
                }
                if ((ds.Tables["StopLink"] != null)) {
                    base.Tables.Add(new StopLinkDataTable(ds.Tables["StopLink"]));
                }
                if ((ds.Tables["SimulationFiles"] != null)) {
                    base.Tables.Add(new SimulationFilesDataTable(ds.Tables["SimulationFiles"]));
                }
                if ((ds.Tables["IncludedAlternatives"] != null)) {
                    base.Tables.Add(new IncludedAlternativesDataTable(ds.Tables["IncludedAlternatives"]));
                }
                if ((ds.Tables["Alternative"] != null)) {
                    base.Tables.Add(new AlternativeDataTable(ds.Tables["Alternative"]));
                }
                if ((ds.Tables["DataAccess"] != null)) {
                    base.Tables.Add(new DataAccessDataTable(ds.Tables["DataAccess"]));
                }
                if ((ds.Tables["DataSource"] != null)) {
                    base.Tables.Add(new DataSourceDataTable(ds.Tables["DataSource"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ControlDataTable Control {
            get {
                return this.tableControl;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ModelStateDataTable ModelState {
            get {
                return this.tableModelState;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AdminDataTable Admin {
            get {
                return this.tableAdmin;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MasterComponentsDataTable MasterComponents {
            get {
                return this.tableMasterComponents;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MasterDataSourceDataTable MasterDataSource {
            get {
                return this.tableMasterDataSource;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ModelComponentsDataTable ModelComponents {
            get {
                return this.tableModelComponents;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ModelDataSourceDataTable ModelDataSource {
            get {
                return this.tableModelDataSource;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CodeLibraryDataTable CodeLibrary {
            get {
                return this.tableCodeLibrary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RequiredModelDatabasesDataTable RequiredModelDatabases {
            get {
                return this.tableRequiredModelDatabases;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ModelDatabaseDataTable ModelDatabase {
            get {
                return this.tableModelDatabase;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LinkedTableDataTable LinkedTable {
            get {
                return this.tableLinkedTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TreeverseDataTable Treeverse {
            get {
                return this.tableTreeverse;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RetraceDataTable Retrace {
            get {
                return this.tableRetrace;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TraceLinksDataTable TraceLinks {
            get {
                return this.tableTraceLinks;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RootLinksDataTable RootLinks {
            get {
                return this.tableRootLinks;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RootLinkDataTable RootLink {
            get {
                return this.tableRootLink;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StopLinksDataTable StopLinks {
            get {
                return this.tableStopLinks;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StopLinkDataTable StopLink {
            get {
                return this.tableStopLink;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SimulationFilesDataTable SimulationFiles {
            get {
                return this.tableSimulationFiles;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IncludedAlternativesDataTable IncludedAlternatives {
            get {
                return this.tableIncludedAlternatives;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AlternativeDataTable Alternative {
            get {
                return this.tableAlternative;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataAccessDataTable DataAccess {
            get {
                return this.tableDataAccess;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataSourceDataTable DataSource {
            get {
                return this.tableDataSource;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ModelConfigurationDataSet cln = ((ModelConfigurationDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Control"] != null)) {
                    base.Tables.Add(new ControlDataTable(ds.Tables["Control"]));
                }
                if ((ds.Tables["ModelState"] != null)) {
                    base.Tables.Add(new ModelStateDataTable(ds.Tables["ModelState"]));
                }
                if ((ds.Tables["Admin"] != null)) {
                    base.Tables.Add(new AdminDataTable(ds.Tables["Admin"]));
                }
                if ((ds.Tables["MasterComponents"] != null)) {
                    base.Tables.Add(new MasterComponentsDataTable(ds.Tables["MasterComponents"]));
                }
                if ((ds.Tables["MasterDataSource"] != null)) {
                    base.Tables.Add(new MasterDataSourceDataTable(ds.Tables["MasterDataSource"]));
                }
                if ((ds.Tables["ModelComponents"] != null)) {
                    base.Tables.Add(new ModelComponentsDataTable(ds.Tables["ModelComponents"]));
                }
                if ((ds.Tables["ModelDataSource"] != null)) {
                    base.Tables.Add(new ModelDataSourceDataTable(ds.Tables["ModelDataSource"]));
                }
                if ((ds.Tables["CodeLibrary"] != null)) {
                    base.Tables.Add(new CodeLibraryDataTable(ds.Tables["CodeLibrary"]));
                }
                if ((ds.Tables["RequiredModelDatabases"] != null)) {
                    base.Tables.Add(new RequiredModelDatabasesDataTable(ds.Tables["RequiredModelDatabases"]));
                }
                if ((ds.Tables["ModelDatabase"] != null)) {
                    base.Tables.Add(new ModelDatabaseDataTable(ds.Tables["ModelDatabase"]));
                }
                if ((ds.Tables["LinkedTable"] != null)) {
                    base.Tables.Add(new LinkedTableDataTable(ds.Tables["LinkedTable"]));
                }
                if ((ds.Tables["Treeverse"] != null)) {
                    base.Tables.Add(new TreeverseDataTable(ds.Tables["Treeverse"]));
                }
                if ((ds.Tables["Retrace"] != null)) {
                    base.Tables.Add(new RetraceDataTable(ds.Tables["Retrace"]));
                }
                if ((ds.Tables["TraceLinks"] != null)) {
                    base.Tables.Add(new TraceLinksDataTable(ds.Tables["TraceLinks"]));
                }
                if ((ds.Tables["RootLinks"] != null)) {
                    base.Tables.Add(new RootLinksDataTable(ds.Tables["RootLinks"]));
                }
                if ((ds.Tables["RootLink"] != null)) {
                    base.Tables.Add(new RootLinkDataTable(ds.Tables["RootLink"]));
                }
                if ((ds.Tables["StopLinks"] != null)) {
                    base.Tables.Add(new StopLinksDataTable(ds.Tables["StopLinks"]));
                }
                if ((ds.Tables["StopLink"] != null)) {
                    base.Tables.Add(new StopLinkDataTable(ds.Tables["StopLink"]));
                }
                if ((ds.Tables["SimulationFiles"] != null)) {
                    base.Tables.Add(new SimulationFilesDataTable(ds.Tables["SimulationFiles"]));
                }
                if ((ds.Tables["IncludedAlternatives"] != null)) {
                    base.Tables.Add(new IncludedAlternativesDataTable(ds.Tables["IncludedAlternatives"]));
                }
                if ((ds.Tables["Alternative"] != null)) {
                    base.Tables.Add(new AlternativeDataTable(ds.Tables["Alternative"]));
                }
                if ((ds.Tables["DataAccess"] != null)) {
                    base.Tables.Add(new DataAccessDataTable(ds.Tables["DataAccess"]));
                }
                if ((ds.Tables["DataSource"] != null)) {
                    base.Tables.Add(new DataSourceDataTable(ds.Tables["DataSource"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableControl = ((ControlDataTable)(base.Tables["Control"]));
            if ((initTable == true)) {
                if ((this.tableControl != null)) {
                    this.tableControl.InitVars();
                }
            }
            this.tableModelState = ((ModelStateDataTable)(base.Tables["ModelState"]));
            if ((initTable == true)) {
                if ((this.tableModelState != null)) {
                    this.tableModelState.InitVars();
                }
            }
            this.tableAdmin = ((AdminDataTable)(base.Tables["Admin"]));
            if ((initTable == true)) {
                if ((this.tableAdmin != null)) {
                    this.tableAdmin.InitVars();
                }
            }
            this.tableMasterComponents = ((MasterComponentsDataTable)(base.Tables["MasterComponents"]));
            if ((initTable == true)) {
                if ((this.tableMasterComponents != null)) {
                    this.tableMasterComponents.InitVars();
                }
            }
            this.tableMasterDataSource = ((MasterDataSourceDataTable)(base.Tables["MasterDataSource"]));
            if ((initTable == true)) {
                if ((this.tableMasterDataSource != null)) {
                    this.tableMasterDataSource.InitVars();
                }
            }
            this.tableModelComponents = ((ModelComponentsDataTable)(base.Tables["ModelComponents"]));
            if ((initTable == true)) {
                if ((this.tableModelComponents != null)) {
                    this.tableModelComponents.InitVars();
                }
            }
            this.tableModelDataSource = ((ModelDataSourceDataTable)(base.Tables["ModelDataSource"]));
            if ((initTable == true)) {
                if ((this.tableModelDataSource != null)) {
                    this.tableModelDataSource.InitVars();
                }
            }
            this.tableCodeLibrary = ((CodeLibraryDataTable)(base.Tables["CodeLibrary"]));
            if ((initTable == true)) {
                if ((this.tableCodeLibrary != null)) {
                    this.tableCodeLibrary.InitVars();
                }
            }
            this.tableRequiredModelDatabases = ((RequiredModelDatabasesDataTable)(base.Tables["RequiredModelDatabases"]));
            if ((initTable == true)) {
                if ((this.tableRequiredModelDatabases != null)) {
                    this.tableRequiredModelDatabases.InitVars();
                }
            }
            this.tableModelDatabase = ((ModelDatabaseDataTable)(base.Tables["ModelDatabase"]));
            if ((initTable == true)) {
                if ((this.tableModelDatabase != null)) {
                    this.tableModelDatabase.InitVars();
                }
            }
            this.tableLinkedTable = ((LinkedTableDataTable)(base.Tables["LinkedTable"]));
            if ((initTable == true)) {
                if ((this.tableLinkedTable != null)) {
                    this.tableLinkedTable.InitVars();
                }
            }
            this.tableTreeverse = ((TreeverseDataTable)(base.Tables["Treeverse"]));
            if ((initTable == true)) {
                if ((this.tableTreeverse != null)) {
                    this.tableTreeverse.InitVars();
                }
            }
            this.tableRetrace = ((RetraceDataTable)(base.Tables["Retrace"]));
            if ((initTable == true)) {
                if ((this.tableRetrace != null)) {
                    this.tableRetrace.InitVars();
                }
            }
            this.tableTraceLinks = ((TraceLinksDataTable)(base.Tables["TraceLinks"]));
            if ((initTable == true)) {
                if ((this.tableTraceLinks != null)) {
                    this.tableTraceLinks.InitVars();
                }
            }
            this.tableRootLinks = ((RootLinksDataTable)(base.Tables["RootLinks"]));
            if ((initTable == true)) {
                if ((this.tableRootLinks != null)) {
                    this.tableRootLinks.InitVars();
                }
            }
            this.tableRootLink = ((RootLinkDataTable)(base.Tables["RootLink"]));
            if ((initTable == true)) {
                if ((this.tableRootLink != null)) {
                    this.tableRootLink.InitVars();
                }
            }
            this.tableStopLinks = ((StopLinksDataTable)(base.Tables["StopLinks"]));
            if ((initTable == true)) {
                if ((this.tableStopLinks != null)) {
                    this.tableStopLinks.InitVars();
                }
            }
            this.tableStopLink = ((StopLinkDataTable)(base.Tables["StopLink"]));
            if ((initTable == true)) {
                if ((this.tableStopLink != null)) {
                    this.tableStopLink.InitVars();
                }
            }
            this.tableSimulationFiles = ((SimulationFilesDataTable)(base.Tables["SimulationFiles"]));
            if ((initTable == true)) {
                if ((this.tableSimulationFiles != null)) {
                    this.tableSimulationFiles.InitVars();
                }
            }
            this.tableIncludedAlternatives = ((IncludedAlternativesDataTable)(base.Tables["IncludedAlternatives"]));
            if ((initTable == true)) {
                if ((this.tableIncludedAlternatives != null)) {
                    this.tableIncludedAlternatives.InitVars();
                }
            }
            this.tableAlternative = ((AlternativeDataTable)(base.Tables["Alternative"]));
            if ((initTable == true)) {
                if ((this.tableAlternative != null)) {
                    this.tableAlternative.InitVars();
                }
            }
            this.tableDataAccess = ((DataAccessDataTable)(base.Tables["DataAccess"]));
            if ((initTable == true)) {
                if ((this.tableDataAccess != null)) {
                    this.tableDataAccess.InitVars();
                }
            }
            this.tableDataSource = ((DataSourceDataTable)(base.Tables["DataSource"]));
            if ((initTable == true)) {
                if ((this.tableDataSource != null)) {
                    this.tableDataSource.InitVars();
                }
            }
            this.relationMasterComponents_MasterDataSource = this.Relations["MasterComponents_MasterDataSource"];
            this.relationModelComponents_ModelDataSource = this.Relations["ModelComponents_ModelDataSource"];
            this.relationRequiredAccessDatabases_MasterDatabase = this.Relations["RequiredAccessDatabases_MasterDatabase"];
            this.relationMasterDatabase_LinkedTables = this.Relations["MasterDatabase_LinkedTables"];
            this.relationModelDataSourceLinkedTables = this.Relations["ModelDataSourceLinkedTables"];
            this.relationRootLinks_RootLink = this.Relations["RootLinks_RootLink"];
            this.relationStopLinks_StopLink = this.Relations["StopLinks_StopLink"];
            this.relationFK_IncludedAlternatives_Alternative = this.Relations["FK_IncludedAlternatives_Alternative"];
            this.relationFK_DataAccess_DataSource = this.Relations["FK_DataAccess_DataSource"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ModelConfigurationDataSet";
            this.Prefix = "";
            this.Namespace = "SystemsAnalysis.ModelConstruction";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableControl = new ControlDataTable();
            base.Tables.Add(this.tableControl);
            this.tableModelState = new ModelStateDataTable();
            base.Tables.Add(this.tableModelState);
            this.tableAdmin = new AdminDataTable();
            base.Tables.Add(this.tableAdmin);
            this.tableMasterComponents = new MasterComponentsDataTable();
            base.Tables.Add(this.tableMasterComponents);
            this.tableMasterDataSource = new MasterDataSourceDataTable();
            base.Tables.Add(this.tableMasterDataSource);
            this.tableModelComponents = new ModelComponentsDataTable();
            base.Tables.Add(this.tableModelComponents);
            this.tableModelDataSource = new ModelDataSourceDataTable();
            base.Tables.Add(this.tableModelDataSource);
            this.tableCodeLibrary = new CodeLibraryDataTable();
            base.Tables.Add(this.tableCodeLibrary);
            this.tableRequiredModelDatabases = new RequiredModelDatabasesDataTable();
            base.Tables.Add(this.tableRequiredModelDatabases);
            this.tableModelDatabase = new ModelDatabaseDataTable();
            base.Tables.Add(this.tableModelDatabase);
            this.tableLinkedTable = new LinkedTableDataTable();
            base.Tables.Add(this.tableLinkedTable);
            this.tableTreeverse = new TreeverseDataTable();
            base.Tables.Add(this.tableTreeverse);
            this.tableRetrace = new RetraceDataTable();
            base.Tables.Add(this.tableRetrace);
            this.tableTraceLinks = new TraceLinksDataTable();
            base.Tables.Add(this.tableTraceLinks);
            this.tableRootLinks = new RootLinksDataTable();
            base.Tables.Add(this.tableRootLinks);
            this.tableRootLink = new RootLinkDataTable();
            base.Tables.Add(this.tableRootLink);
            this.tableStopLinks = new StopLinksDataTable();
            base.Tables.Add(this.tableStopLinks);
            this.tableStopLink = new StopLinkDataTable();
            base.Tables.Add(this.tableStopLink);
            this.tableSimulationFiles = new SimulationFilesDataTable();
            base.Tables.Add(this.tableSimulationFiles);
            this.tableIncludedAlternatives = new IncludedAlternativesDataTable();
            base.Tables.Add(this.tableIncludedAlternatives);
            this.tableAlternative = new AlternativeDataTable();
            base.Tables.Add(this.tableAlternative);
            this.tableDataAccess = new DataAccessDataTable();
            base.Tables.Add(this.tableDataAccess);
            this.tableDataSource = new DataSourceDataTable();
            base.Tables.Add(this.tableDataSource);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("MasterComponents_MasterDataSource", new global::System.Data.DataColumn[] {
                        this.tableMasterComponents.MasterComponents_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMasterDataSource.MasterComponents_IdColumn});
            this.tableMasterDataSource.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("ModelComponents_ModelDataSource", new global::System.Data.DataColumn[] {
                        this.tableModelComponents.ModelComponents_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableModelDataSource.ModelComponents_IdColumn});
            this.tableModelDataSource.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("RequiredAccessDatabases_MasterDatabase", new global::System.Data.DataColumn[] {
                        this.tableRequiredModelDatabases.RequiredModelDatabases_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableModelDatabase.RequiredModelDatabases_IdColumn});
            this.tableModelDatabase.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("MasterDatabase_LinkedTables", new global::System.Data.DataColumn[] {
                        this.tableModelDatabase.ModelDatabase_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLinkedTable.ModelDatabase_IdColumn});
            this.tableLinkedTable.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("ModelDataSourceLinkedTables", new global::System.Data.DataColumn[] {
                        this.tableModelDataSource.DataSourceNameColumn}, new global::System.Data.DataColumn[] {
                        this.tableLinkedTable.LinkColumn});
            this.tableLinkedTable.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("RootLinks_RootLink", new global::System.Data.DataColumn[] {
                        this.tableRootLinks.RootLinks_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRootLink.RootLinks_IdColumn});
            this.tableRootLink.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("StopLinks_StopLink", new global::System.Data.DataColumn[] {
                        this.tableStopLinks.StopLinks_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableStopLink.StopLinks_IdColumn});
            this.tableStopLink.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_IncludedAlternatives_Alternative", new global::System.Data.DataColumn[] {
                        this.tableIncludedAlternatives.IncludedAlternatives_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableAlternative.IncludedAlternatives_IdColumn});
            this.tableAlternative.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_DataAccess_DataSource", new global::System.Data.DataColumn[] {
                        this.tableDataAccess.DataAccess_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableDataSource.DataAccess_IdColumn});
            this.tableDataSource.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationMasterComponents_MasterDataSource = new global::System.Data.DataRelation("MasterComponents_MasterDataSource", new global::System.Data.DataColumn[] {
                        this.tableMasterComponents.MasterComponents_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMasterDataSource.MasterComponents_IdColumn}, false);
            this.relationMasterComponents_MasterDataSource.Nested = true;
            this.Relations.Add(this.relationMasterComponents_MasterDataSource);
            this.relationModelComponents_ModelDataSource = new global::System.Data.DataRelation("ModelComponents_ModelDataSource", new global::System.Data.DataColumn[] {
                        this.tableModelComponents.ModelComponents_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableModelDataSource.ModelComponents_IdColumn}, false);
            this.relationModelComponents_ModelDataSource.Nested = true;
            this.Relations.Add(this.relationModelComponents_ModelDataSource);
            this.relationRequiredAccessDatabases_MasterDatabase = new global::System.Data.DataRelation("RequiredAccessDatabases_MasterDatabase", new global::System.Data.DataColumn[] {
                        this.tableRequiredModelDatabases.RequiredModelDatabases_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableModelDatabase.RequiredModelDatabases_IdColumn}, false);
            this.relationRequiredAccessDatabases_MasterDatabase.Nested = true;
            this.Relations.Add(this.relationRequiredAccessDatabases_MasterDatabase);
            this.relationMasterDatabase_LinkedTables = new global::System.Data.DataRelation("MasterDatabase_LinkedTables", new global::System.Data.DataColumn[] {
                        this.tableModelDatabase.ModelDatabase_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLinkedTable.ModelDatabase_IdColumn}, false);
            this.relationMasterDatabase_LinkedTables.Nested = true;
            this.Relations.Add(this.relationMasterDatabase_LinkedTables);
            this.relationModelDataSourceLinkedTables = new global::System.Data.DataRelation("ModelDataSourceLinkedTables", new global::System.Data.DataColumn[] {
                        this.tableModelDataSource.DataSourceNameColumn}, new global::System.Data.DataColumn[] {
                        this.tableLinkedTable.LinkColumn}, false);
            this.Relations.Add(this.relationModelDataSourceLinkedTables);
            this.relationRootLinks_RootLink = new global::System.Data.DataRelation("RootLinks_RootLink", new global::System.Data.DataColumn[] {
                        this.tableRootLinks.RootLinks_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRootLink.RootLinks_IdColumn}, false);
            this.relationRootLinks_RootLink.Nested = true;
            this.Relations.Add(this.relationRootLinks_RootLink);
            this.relationStopLinks_StopLink = new global::System.Data.DataRelation("StopLinks_StopLink", new global::System.Data.DataColumn[] {
                        this.tableStopLinks.StopLinks_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableStopLink.StopLinks_IdColumn}, false);
            this.relationStopLinks_StopLink.Nested = true;
            this.Relations.Add(this.relationStopLinks_StopLink);
            this.relationFK_IncludedAlternatives_Alternative = new global::System.Data.DataRelation("FK_IncludedAlternatives_Alternative", new global::System.Data.DataColumn[] {
                        this.tableIncludedAlternatives.IncludedAlternatives_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableAlternative.IncludedAlternatives_IdColumn}, false);
            this.relationFK_IncludedAlternatives_Alternative.Nested = true;
            this.Relations.Add(this.relationFK_IncludedAlternatives_Alternative);
            this.relationFK_DataAccess_DataSource = new global::System.Data.DataRelation("FK_DataAccess_DataSource", new global::System.Data.DataColumn[] {
                        this.tableDataAccess.DataAccess_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableDataSource.DataAccess_IdColumn}, false);
            this.relationFK_DataAccess_DataSource.Nested = true;
            this.Relations.Add(this.relationFK_DataAccess_DataSource);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeControl() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeModelState() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAdmin() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMasterComponents() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMasterDataSource() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeModelComponents() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeModelDataSource() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCodeLibrary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRequiredModelDatabases() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeModelDatabase() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLinkedTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTreeverse() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRetrace() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTraceLinks() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRootLinks() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRootLink() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStopLinks() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStopLink() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSimulationFiles() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIncludedAlternatives() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAlternative() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataAccess() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataSource() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ControlRowChangeEventHandler(object sender, ControlRowChangeEvent e);
        
        public delegate void ModelStateRowChangeEventHandler(object sender, ModelStateRowChangeEvent e);
        
        public delegate void AdminRowChangeEventHandler(object sender, AdminRowChangeEvent e);
        
        public delegate void MasterComponentsRowChangeEventHandler(object sender, MasterComponentsRowChangeEvent e);
        
        public delegate void MasterDataSourceRowChangeEventHandler(object sender, MasterDataSourceRowChangeEvent e);
        
        public delegate void ModelComponentsRowChangeEventHandler(object sender, ModelComponentsRowChangeEvent e);
        
        public delegate void ModelDataSourceRowChangeEventHandler(object sender, ModelDataSourceRowChangeEvent e);
        
        public delegate void CodeLibraryRowChangeEventHandler(object sender, CodeLibraryRowChangeEvent e);
        
        public delegate void RequiredModelDatabasesRowChangeEventHandler(object sender, RequiredModelDatabasesRowChangeEvent e);
        
        public delegate void ModelDatabaseRowChangeEventHandler(object sender, ModelDatabaseRowChangeEvent e);
        
        public delegate void LinkedTableRowChangeEventHandler(object sender, LinkedTableRowChangeEvent e);
        
        public delegate void TreeverseRowChangeEventHandler(object sender, TreeverseRowChangeEvent e);
        
        public delegate void RetraceRowChangeEventHandler(object sender, RetraceRowChangeEvent e);
        
        public delegate void TraceLinksRowChangeEventHandler(object sender, TraceLinksRowChangeEvent e);
        
        public delegate void RootLinksRowChangeEventHandler(object sender, RootLinksRowChangeEvent e);
        
        public delegate void RootLinkRowChangeEventHandler(object sender, RootLinkRowChangeEvent e);
        
        public delegate void StopLinksRowChangeEventHandler(object sender, StopLinksRowChangeEvent e);
        
        public delegate void StopLinkRowChangeEventHandler(object sender, StopLinkRowChangeEvent e);
        
        public delegate void SimulationFilesRowChangeEventHandler(object sender, SimulationFilesRowChangeEvent e);
        
        public delegate void IncludedAlternativesRowChangeEventHandler(object sender, IncludedAlternativesRowChangeEvent e);
        
        public delegate void AlternativeRowChangeEventHandler(object sender, AlternativeRowChangeEvent e);
        
        public delegate void DataAccessRowChangeEventHandler(object sender, DataAccessRowChangeEvent e);
        
        public delegate void DataSourceRowChangeEventHandler(object sender, DataSourceRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ControlDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnVersion;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlDataTable() {
                this.TableName = "Control";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ControlDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ControlDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VersionColumn {
                get {
                    return this.columnVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlRow this[int index] {
                get {
                    return ((ControlRow)(this.Rows[index]));
                }
            }
            
            public event ControlRowChangeEventHandler ControlRowChanging;
            
            public event ControlRowChangeEventHandler ControlRowChanged;
            
            public event ControlRowChangeEventHandler ControlRowDeleting;
            
            public event ControlRowChangeEventHandler ControlRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddControlRow(ControlRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlRow AddControlRow(double Version) {
                ControlRow rowControlRow = ((ControlRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Version};
                rowControlRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowControlRow);
                return rowControlRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ControlDataTable cln = ((ControlDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ControlDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnVersion = base.Columns["Version"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnVersion = new global::System.Data.DataColumn("Version", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersion);
                this.columnVersion.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlRow NewControlRow() {
                return ((ControlRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ControlRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ControlRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ControlRowChanged != null)) {
                    this.ControlRowChanged(this, new ControlRowChangeEvent(((ControlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ControlRowChanging != null)) {
                    this.ControlRowChanging(this, new ControlRowChangeEvent(((ControlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ControlRowDeleted != null)) {
                    this.ControlRowDeleted(this, new ControlRowChangeEvent(((ControlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ControlRowDeleting != null)) {
                    this.ControlRowDeleting(this, new ControlRowChangeEvent(((ControlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveControlRow(ControlRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ControlDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ModelStateDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTimeFrame;
            
            private global::System.Data.DataColumn columnHasSubcatchments;
            
            private global::System.Data.DataColumn columnHasParcels;
            
            private global::System.Data.DataColumn columnHasPipeSystem;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelStateDataTable() {
                this.TableName = "ModelState";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModelStateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ModelStateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeFrameColumn {
                get {
                    return this.columnTimeFrame;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasSubcatchmentsColumn {
                get {
                    return this.columnHasSubcatchments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasParcelsColumn {
                get {
                    return this.columnHasParcels;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasPipeSystemColumn {
                get {
                    return this.columnHasPipeSystem;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelStateRow this[int index] {
                get {
                    return ((ModelStateRow)(this.Rows[index]));
                }
            }
            
            public event ModelStateRowChangeEventHandler ModelStateRowChanging;
            
            public event ModelStateRowChangeEventHandler ModelStateRowChanged;
            
            public event ModelStateRowChangeEventHandler ModelStateRowDeleting;
            
            public event ModelStateRowChangeEventHandler ModelStateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddModelStateRow(ModelStateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelStateRow AddModelStateRow(string TimeFrame, bool HasSubcatchments, bool HasParcels, bool HasPipeSystem) {
                ModelStateRow rowModelStateRow = ((ModelStateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TimeFrame,
                        HasSubcatchments,
                        HasParcels,
                        HasPipeSystem};
                rowModelStateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowModelStateRow);
                return rowModelStateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ModelStateDataTable cln = ((ModelStateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ModelStateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTimeFrame = base.Columns["TimeFrame"];
                this.columnHasSubcatchments = base.Columns["HasSubcatchments"];
                this.columnHasParcels = base.Columns["HasParcels"];
                this.columnHasPipeSystem = base.Columns["HasPipeSystem"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTimeFrame = new global::System.Data.DataColumn("TimeFrame", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeFrame);
                this.columnHasSubcatchments = new global::System.Data.DataColumn("HasSubcatchments", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasSubcatchments);
                this.columnHasParcels = new global::System.Data.DataColumn("HasParcels", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasParcels);
                this.columnHasPipeSystem = new global::System.Data.DataColumn("HasPipeSystem", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasPipeSystem);
                this.columnTimeFrame.AllowDBNull = false;
                this.columnTimeFrame.DefaultValue = ((string)("EX"));
                this.columnHasSubcatchments.AllowDBNull = false;
                this.columnHasSubcatchments.DefaultValue = ((bool)(false));
                this.columnHasParcels.AllowDBNull = false;
                this.columnHasParcels.DefaultValue = ((bool)(false));
                this.columnHasPipeSystem.AllowDBNull = false;
                this.columnHasPipeSystem.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelStateRow NewModelStateRow() {
                return ((ModelStateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ModelStateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ModelStateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ModelStateRowChanged != null)) {
                    this.ModelStateRowChanged(this, new ModelStateRowChangeEvent(((ModelStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ModelStateRowChanging != null)) {
                    this.ModelStateRowChanging(this, new ModelStateRowChangeEvent(((ModelStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ModelStateRowDeleted != null)) {
                    this.ModelStateRowDeleted(this, new ModelStateRowChangeEvent(((ModelStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ModelStateRowDeleting != null)) {
                    this.ModelStateRowDeleting(this, new ModelStateRowChangeEvent(((ModelStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveModelStateRow(ModelStateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ModelStateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AdminDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDisable;
            
            private global::System.Data.DataColumn columnRefreshMDBs;
            
            private global::System.Data.DataColumn columnSysMDBDate;
            
            private global::System.Data.DataColumn columnCreated;
            
            private global::System.Data.DataColumn columnModified;
            
            private global::System.Data.DataColumn columnEntered;
            
            private global::System.Data.DataColumn columnMDBDate;
            
            private global::System.Data.DataColumn columnDeployedRunoff;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdminDataTable() {
                this.TableName = "Admin";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AdminDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AdminDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DisableColumn {
                get {
                    return this.columnDisable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefreshMDBsColumn {
                get {
                    return this.columnRefreshMDBs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SysMDBDateColumn {
                get {
                    return this.columnSysMDBDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedColumn {
                get {
                    return this.columnModified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnteredColumn {
                get {
                    return this.columnEntered;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MDBDateColumn {
                get {
                    return this.columnMDBDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeployedRunoffColumn {
                get {
                    return this.columnDeployedRunoff;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdminRow this[int index] {
                get {
                    return ((AdminRow)(this.Rows[index]));
                }
            }
            
            public event AdminRowChangeEventHandler AdminRowChanging;
            
            public event AdminRowChangeEventHandler AdminRowChanged;
            
            public event AdminRowChangeEventHandler AdminRowDeleting;
            
            public event AdminRowChangeEventHandler AdminRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAdminRow(AdminRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdminRow AddAdminRow(bool Disable, bool RefreshMDBs, System.DateTime SysMDBDate, System.DateTime Created, System.DateTime Modified, System.DateTime Entered, System.DateTime MDBDate, System.DateTime DeployedRunoff) {
                AdminRow rowAdminRow = ((AdminRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Disable,
                        RefreshMDBs,
                        SysMDBDate,
                        Created,
                        Modified,
                        Entered,
                        MDBDate,
                        DeployedRunoff};
                rowAdminRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAdminRow);
                return rowAdminRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AdminDataTable cln = ((AdminDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AdminDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDisable = base.Columns["Disable"];
                this.columnRefreshMDBs = base.Columns["RefreshMDBs"];
                this.columnSysMDBDate = base.Columns["SysMDBDate"];
                this.columnCreated = base.Columns["Created"];
                this.columnModified = base.Columns["Modified"];
                this.columnEntered = base.Columns["Entered"];
                this.columnMDBDate = base.Columns["MDBDate"];
                this.columnDeployedRunoff = base.Columns["DeployedRunoff"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDisable = new global::System.Data.DataColumn("Disable", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisable);
                this.columnRefreshMDBs = new global::System.Data.DataColumn("RefreshMDBs", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefreshMDBs);
                this.columnSysMDBDate = new global::System.Data.DataColumn("SysMDBDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSysMDBDate);
                this.columnCreated = new global::System.Data.DataColumn("Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnModified = new global::System.Data.DataColumn("Modified", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModified);
                this.columnEntered = new global::System.Data.DataColumn("Entered", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntered);
                this.columnMDBDate = new global::System.Data.DataColumn("MDBDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMDBDate);
                this.columnDeployedRunoff = new global::System.Data.DataColumn("DeployedRunoff", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeployedRunoff);
                this.columnDisable.DefaultValue = ((bool)(false));
                this.columnRefreshMDBs.DefaultValue = ((bool)(true));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdminRow NewAdminRow() {
                return ((AdminRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AdminRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AdminRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AdminRowChanged != null)) {
                    this.AdminRowChanged(this, new AdminRowChangeEvent(((AdminRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AdminRowChanging != null)) {
                    this.AdminRowChanging(this, new AdminRowChangeEvent(((AdminRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AdminRowDeleted != null)) {
                    this.AdminRowDeleted(this, new AdminRowChangeEvent(((AdminRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AdminRowDeleting != null)) {
                    this.AdminRowDeleting(this, new AdminRowChangeEvent(((AdminRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAdminRow(AdminRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AdminDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MasterComponentsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMasterComponents_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MasterComponentsDataTable() {
                this.TableName = "MasterComponents";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MasterComponentsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MasterComponentsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MasterComponents_IdColumn {
                get {
                    return this.columnMasterComponents_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MasterComponentsRow this[int index] {
                get {
                    return ((MasterComponentsRow)(this.Rows[index]));
                }
            }
            
            public event MasterComponentsRowChangeEventHandler MasterComponentsRowChanging;
            
            public event MasterComponentsRowChangeEventHandler MasterComponentsRowChanged;
            
            public event MasterComponentsRowChangeEventHandler MasterComponentsRowDeleting;
            
            public event MasterComponentsRowChangeEventHandler MasterComponentsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMasterComponentsRow(MasterComponentsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MasterComponentsRow AddMasterComponentsRow() {
                MasterComponentsRow rowMasterComponentsRow = ((MasterComponentsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null};
                rowMasterComponentsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMasterComponentsRow);
                return rowMasterComponentsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MasterComponentsDataTable cln = ((MasterComponentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MasterComponentsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMasterComponents_Id = base.Columns["MasterComponents_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMasterComponents_Id = new global::System.Data.DataColumn("MasterComponents_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMasterComponents_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMasterComponents_Id}, true));
                this.columnMasterComponents_Id.AutoIncrement = true;
                this.columnMasterComponents_Id.AllowDBNull = false;
                this.columnMasterComponents_Id.Unique = true;
                this.columnMasterComponents_Id.Namespace = "SystemsAnalysis.ModelConstruction";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MasterComponentsRow NewMasterComponentsRow() {
                return ((MasterComponentsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MasterComponentsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MasterComponentsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MasterComponentsRowChanged != null)) {
                    this.MasterComponentsRowChanged(this, new MasterComponentsRowChangeEvent(((MasterComponentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MasterComponentsRowChanging != null)) {
                    this.MasterComponentsRowChanging(this, new MasterComponentsRowChangeEvent(((MasterComponentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MasterComponentsRowDeleted != null)) {
                    this.MasterComponentsRowDeleted(this, new MasterComponentsRowChangeEvent(((MasterComponentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MasterComponentsRowDeleting != null)) {
                    this.MasterComponentsRowDeleting(this, new MasterComponentsRowChangeEvent(((MasterComponentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMasterComponentsRow(MasterComponentsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MasterComponentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MasterDataSourceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnComponentType;
            
            private global::System.Data.DataColumn columnDataSourceName;
            
            private global::System.Data.DataColumn columnDatabase;
            
            private global::System.Data.DataColumn columnPath;
            
            private global::System.Data.DataColumn columnShortName;
            
            private global::System.Data.DataColumn columnMasterComponents_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MasterDataSourceDataTable() {
                this.TableName = "MasterDataSource";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MasterDataSourceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MasterDataSourceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ComponentTypeColumn {
                get {
                    return this.columnComponentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataSourceNameColumn {
                get {
                    return this.columnDataSourceName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DatabaseColumn {
                get {
                    return this.columnDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PathColumn {
                get {
                    return this.columnPath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShortNameColumn {
                get {
                    return this.columnShortName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MasterComponents_IdColumn {
                get {
                    return this.columnMasterComponents_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MasterDataSourceRow this[int index] {
                get {
                    return ((MasterDataSourceRow)(this.Rows[index]));
                }
            }
            
            public event MasterDataSourceRowChangeEventHandler MasterDataSourceRowChanging;
            
            public event MasterDataSourceRowChangeEventHandler MasterDataSourceRowChanged;
            
            public event MasterDataSourceRowChangeEventHandler MasterDataSourceRowDeleting;
            
            public event MasterDataSourceRowChangeEventHandler MasterDataSourceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMasterDataSourceRow(MasterDataSourceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MasterDataSourceRow AddMasterDataSourceRow(string Type, string ComponentType, string DataSourceName, string Database, string Path, string ShortName, MasterComponentsRow parentMasterComponentsRowByMasterComponents_MasterDataSource) {
                MasterDataSourceRow rowMasterDataSourceRow = ((MasterDataSourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Type,
                        ComponentType,
                        DataSourceName,
                        Database,
                        Path,
                        ShortName,
                        null};
                if ((parentMasterComponentsRowByMasterComponents_MasterDataSource != null)) {
                    columnValuesArray[6] = parentMasterComponentsRowByMasterComponents_MasterDataSource[0];
                }
                rowMasterDataSourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMasterDataSourceRow);
                return rowMasterDataSourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MasterDataSourceDataTable cln = ((MasterDataSourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MasterDataSourceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnType = base.Columns["Type"];
                this.columnComponentType = base.Columns["ComponentType"];
                this.columnDataSourceName = base.Columns["DataSourceName"];
                this.columnDatabase = base.Columns["Database"];
                this.columnPath = base.Columns["Path"];
                this.columnShortName = base.Columns["ShortName"];
                this.columnMasterComponents_Id = base.Columns["MasterComponents_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnType);
                this.columnComponentType = new global::System.Data.DataColumn("ComponentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComponentType);
                this.columnDataSourceName = new global::System.Data.DataColumn("DataSourceName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataSourceName);
                this.columnDatabase = new global::System.Data.DataColumn("Database", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatabase);
                this.columnPath = new global::System.Data.DataColumn("Path", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPath);
                this.columnShortName = new global::System.Data.DataColumn("ShortName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShortName);
                this.columnMasterComponents_Id = new global::System.Data.DataColumn("MasterComponents_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMasterComponents_Id);
                this.columnType.Namespace = "SystemsAnalysis.ModelConstruction";
                this.columnComponentType.AllowDBNull = false;
                this.columnDataSourceName.AllowDBNull = false;
                this.columnPath.AllowDBNull = false;
                this.columnShortName.AllowDBNull = false;
                this.columnMasterComponents_Id.Namespace = "SystemsAnalysis.ModelConstruction";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MasterDataSourceRow NewMasterDataSourceRow() {
                return ((MasterDataSourceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MasterDataSourceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MasterDataSourceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MasterDataSourceRowChanged != null)) {
                    this.MasterDataSourceRowChanged(this, new MasterDataSourceRowChangeEvent(((MasterDataSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MasterDataSourceRowChanging != null)) {
                    this.MasterDataSourceRowChanging(this, new MasterDataSourceRowChangeEvent(((MasterDataSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MasterDataSourceRowDeleted != null)) {
                    this.MasterDataSourceRowDeleted(this, new MasterDataSourceRowChangeEvent(((MasterDataSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MasterDataSourceRowDeleting != null)) {
                    this.MasterDataSourceRowDeleting(this, new MasterDataSourceRowChangeEvent(((MasterDataSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMasterDataSourceRow(MasterDataSourceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MasterDataSourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ModelComponentsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnModelComponents_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelComponentsDataTable() {
                this.TableName = "ModelComponents";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModelComponentsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ModelComponentsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModelComponents_IdColumn {
                get {
                    return this.columnModelComponents_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelComponentsRow this[int index] {
                get {
                    return ((ModelComponentsRow)(this.Rows[index]));
                }
            }
            
            public event ModelComponentsRowChangeEventHandler ModelComponentsRowChanging;
            
            public event ModelComponentsRowChangeEventHandler ModelComponentsRowChanged;
            
            public event ModelComponentsRowChangeEventHandler ModelComponentsRowDeleting;
            
            public event ModelComponentsRowChangeEventHandler ModelComponentsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddModelComponentsRow(ModelComponentsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelComponentsRow AddModelComponentsRow() {
                ModelComponentsRow rowModelComponentsRow = ((ModelComponentsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null};
                rowModelComponentsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowModelComponentsRow);
                return rowModelComponentsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ModelComponentsDataTable cln = ((ModelComponentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ModelComponentsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnModelComponents_Id = base.Columns["ModelComponents_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnModelComponents_Id = new global::System.Data.DataColumn("ModelComponents_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnModelComponents_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnModelComponents_Id}, true));
                this.columnModelComponents_Id.AutoIncrement = true;
                this.columnModelComponents_Id.AllowDBNull = false;
                this.columnModelComponents_Id.Unique = true;
                this.columnModelComponents_Id.Namespace = "SystemsAnalysis.ModelConstruction";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelComponentsRow NewModelComponentsRow() {
                return ((ModelComponentsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ModelComponentsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ModelComponentsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ModelComponentsRowChanged != null)) {
                    this.ModelComponentsRowChanged(this, new ModelComponentsRowChangeEvent(((ModelComponentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ModelComponentsRowChanging != null)) {
                    this.ModelComponentsRowChanging(this, new ModelComponentsRowChangeEvent(((ModelComponentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ModelComponentsRowDeleted != null)) {
                    this.ModelComponentsRowDeleted(this, new ModelComponentsRowChangeEvent(((ModelComponentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ModelComponentsRowDeleting != null)) {
                    this.ModelComponentsRowDeleting(this, new ModelComponentsRowChangeEvent(((ModelComponentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveModelComponentsRow(ModelComponentsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ModelComponentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ModelDataSourceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSourceType;
            
            private global::System.Data.DataColumn columnComponentType;
            
            private global::System.Data.DataColumn columnDataSourceName;
            
            private global::System.Data.DataColumn columnDatabase;
            
            private global::System.Data.DataColumn columnRelativePath;
            
            private global::System.Data.DataColumn columnShortName;
            
            private global::System.Data.DataColumn columnModelComponents_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelDataSourceDataTable() {
                this.TableName = "ModelDataSource";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModelDataSourceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ModelDataSourceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceTypeColumn {
                get {
                    return this.columnSourceType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ComponentTypeColumn {
                get {
                    return this.columnComponentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataSourceNameColumn {
                get {
                    return this.columnDataSourceName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DatabaseColumn {
                get {
                    return this.columnDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RelativePathColumn {
                get {
                    return this.columnRelativePath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShortNameColumn {
                get {
                    return this.columnShortName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModelComponents_IdColumn {
                get {
                    return this.columnModelComponents_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelDataSourceRow this[int index] {
                get {
                    return ((ModelDataSourceRow)(this.Rows[index]));
                }
            }
            
            public event ModelDataSourceRowChangeEventHandler ModelDataSourceRowChanging;
            
            public event ModelDataSourceRowChangeEventHandler ModelDataSourceRowChanged;
            
            public event ModelDataSourceRowChangeEventHandler ModelDataSourceRowDeleting;
            
            public event ModelDataSourceRowChangeEventHandler ModelDataSourceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddModelDataSourceRow(ModelDataSourceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelDataSourceRow AddModelDataSourceRow(string SourceType, string ComponentType, string DataSourceName, string Database, string RelativePath, string ShortName, ModelComponentsRow parentModelComponentsRowByModelComponents_ModelDataSource) {
                ModelDataSourceRow rowModelDataSourceRow = ((ModelDataSourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SourceType,
                        ComponentType,
                        DataSourceName,
                        Database,
                        RelativePath,
                        ShortName,
                        null};
                if ((parentModelComponentsRowByModelComponents_ModelDataSource != null)) {
                    columnValuesArray[6] = parentModelComponentsRowByModelComponents_ModelDataSource[0];
                }
                rowModelDataSourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowModelDataSourceRow);
                return rowModelDataSourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ModelDataSourceDataTable cln = ((ModelDataSourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ModelDataSourceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSourceType = base.Columns["SourceType"];
                this.columnComponentType = base.Columns["ComponentType"];
                this.columnDataSourceName = base.Columns["DataSourceName"];
                this.columnDatabase = base.Columns["Database"];
                this.columnRelativePath = base.Columns["RelativePath"];
                this.columnShortName = base.Columns["ShortName"];
                this.columnModelComponents_Id = base.Columns["ModelComponents_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSourceType = new global::System.Data.DataColumn("SourceType", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSourceType);
                this.columnComponentType = new global::System.Data.DataColumn("ComponentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComponentType);
                this.columnDataSourceName = new global::System.Data.DataColumn("DataSourceName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataSourceName);
                this.columnDatabase = new global::System.Data.DataColumn("Database", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatabase);
                this.columnRelativePath = new global::System.Data.DataColumn("RelativePath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelativePath);
                this.columnShortName = new global::System.Data.DataColumn("ShortName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShortName);
                this.columnModelComponents_Id = new global::System.Data.DataColumn("ModelComponents_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnModelComponents_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ModelDataSourceName", new global::System.Data.DataColumn[] {
                                this.columnDataSourceName}, false));
                this.columnSourceType.Namespace = "SystemsAnalysis.ModelConstruction";
                this.columnComponentType.AllowDBNull = false;
                this.columnDataSourceName.AllowDBNull = false;
                this.columnDataSourceName.Unique = true;
                this.columnRelativePath.AllowDBNull = false;
                this.columnShortName.AllowDBNull = false;
                this.columnModelComponents_Id.Namespace = "SystemsAnalysis.ModelConstruction";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelDataSourceRow NewModelDataSourceRow() {
                return ((ModelDataSourceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ModelDataSourceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ModelDataSourceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ModelDataSourceRowChanged != null)) {
                    this.ModelDataSourceRowChanged(this, new ModelDataSourceRowChangeEvent(((ModelDataSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ModelDataSourceRowChanging != null)) {
                    this.ModelDataSourceRowChanging(this, new ModelDataSourceRowChangeEvent(((ModelDataSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ModelDataSourceRowDeleted != null)) {
                    this.ModelDataSourceRowDeleted(this, new ModelDataSourceRowChangeEvent(((ModelDataSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ModelDataSourceRowDeleting != null)) {
                    this.ModelDataSourceRowDeleting(this, new ModelDataSourceRowChangeEvent(((ModelDataSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveModelDataSourceRow(ModelDataSourceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ModelDataSourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CodeLibraryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnPath;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CodeLibraryDataTable() {
                this.TableName = "CodeLibrary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CodeLibraryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CodeLibraryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PathColumn {
                get {
                    return this.columnPath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CodeLibraryRow this[int index] {
                get {
                    return ((CodeLibraryRow)(this.Rows[index]));
                }
            }
            
            public event CodeLibraryRowChangeEventHandler CodeLibraryRowChanging;
            
            public event CodeLibraryRowChangeEventHandler CodeLibraryRowChanged;
            
            public event CodeLibraryRowChangeEventHandler CodeLibraryRowDeleting;
            
            public event CodeLibraryRowChangeEventHandler CodeLibraryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCodeLibraryRow(CodeLibraryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CodeLibraryRow AddCodeLibraryRow(string Name, string Path) {
                CodeLibraryRow rowCodeLibraryRow = ((CodeLibraryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        Path};
                rowCodeLibraryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCodeLibraryRow);
                return rowCodeLibraryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CodeLibraryDataTable cln = ((CodeLibraryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CodeLibraryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnPath = base.Columns["Path"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnPath = new global::System.Data.DataColumn("Path", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPath);
                this.columnName.AllowDBNull = false;
                this.columnPath.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CodeLibraryRow NewCodeLibraryRow() {
                return ((CodeLibraryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CodeLibraryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CodeLibraryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CodeLibraryRowChanged != null)) {
                    this.CodeLibraryRowChanged(this, new CodeLibraryRowChangeEvent(((CodeLibraryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CodeLibraryRowChanging != null)) {
                    this.CodeLibraryRowChanging(this, new CodeLibraryRowChangeEvent(((CodeLibraryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CodeLibraryRowDeleted != null)) {
                    this.CodeLibraryRowDeleted(this, new CodeLibraryRowChangeEvent(((CodeLibraryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CodeLibraryRowDeleting != null)) {
                    this.CodeLibraryRowDeleting(this, new CodeLibraryRowChangeEvent(((CodeLibraryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCodeLibraryRow(CodeLibraryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CodeLibraryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RequiredModelDatabasesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRequiredModelDatabases_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequiredModelDatabasesDataTable() {
                this.TableName = "RequiredModelDatabases";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RequiredModelDatabasesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RequiredModelDatabasesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequiredModelDatabases_IdColumn {
                get {
                    return this.columnRequiredModelDatabases_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequiredModelDatabasesRow this[int index] {
                get {
                    return ((RequiredModelDatabasesRow)(this.Rows[index]));
                }
            }
            
            public event RequiredModelDatabasesRowChangeEventHandler RequiredModelDatabasesRowChanging;
            
            public event RequiredModelDatabasesRowChangeEventHandler RequiredModelDatabasesRowChanged;
            
            public event RequiredModelDatabasesRowChangeEventHandler RequiredModelDatabasesRowDeleting;
            
            public event RequiredModelDatabasesRowChangeEventHandler RequiredModelDatabasesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRequiredModelDatabasesRow(RequiredModelDatabasesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequiredModelDatabasesRow AddRequiredModelDatabasesRow() {
                RequiredModelDatabasesRow rowRequiredModelDatabasesRow = ((RequiredModelDatabasesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null};
                rowRequiredModelDatabasesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRequiredModelDatabasesRow);
                return rowRequiredModelDatabasesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RequiredModelDatabasesDataTable cln = ((RequiredModelDatabasesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RequiredModelDatabasesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRequiredModelDatabases_Id = base.Columns["RequiredModelDatabases_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRequiredModelDatabases_Id = new global::System.Data.DataColumn("RequiredModelDatabases_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRequiredModelDatabases_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRequiredModelDatabases_Id}, true));
                this.columnRequiredModelDatabases_Id.AutoIncrement = true;
                this.columnRequiredModelDatabases_Id.AllowDBNull = false;
                this.columnRequiredModelDatabases_Id.Unique = true;
                this.columnRequiredModelDatabases_Id.Namespace = "SystemsAnalysis.ModelConstruction";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequiredModelDatabasesRow NewRequiredModelDatabasesRow() {
                return ((RequiredModelDatabasesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RequiredModelDatabasesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RequiredModelDatabasesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RequiredModelDatabasesRowChanged != null)) {
                    this.RequiredModelDatabasesRowChanged(this, new RequiredModelDatabasesRowChangeEvent(((RequiredModelDatabasesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RequiredModelDatabasesRowChanging != null)) {
                    this.RequiredModelDatabasesRowChanging(this, new RequiredModelDatabasesRowChangeEvent(((RequiredModelDatabasesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RequiredModelDatabasesRowDeleted != null)) {
                    this.RequiredModelDatabasesRowDeleted(this, new RequiredModelDatabasesRowChangeEvent(((RequiredModelDatabasesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RequiredModelDatabasesRowDeleting != null)) {
                    this.RequiredModelDatabasesRowDeleting(this, new RequiredModelDatabasesRowChangeEvent(((RequiredModelDatabasesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRequiredModelDatabasesRow(RequiredModelDatabasesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RequiredModelDatabasesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ModelDatabaseDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnModelDatabase_Id;
            
            private global::System.Data.DataColumn columnRequiredModelDatabases_Id;
            
            private global::System.Data.DataColumn columnDatabaseName;
            
            private global::System.Data.DataColumn columnMasterPath;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelDatabaseDataTable() {
                this.TableName = "ModelDatabase";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModelDatabaseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ModelDatabaseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModelDatabase_IdColumn {
                get {
                    return this.columnModelDatabase_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequiredModelDatabases_IdColumn {
                get {
                    return this.columnRequiredModelDatabases_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DatabaseNameColumn {
                get {
                    return this.columnDatabaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MasterPathColumn {
                get {
                    return this.columnMasterPath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelDatabaseRow this[int index] {
                get {
                    return ((ModelDatabaseRow)(this.Rows[index]));
                }
            }
            
            public event ModelDatabaseRowChangeEventHandler ModelDatabaseRowChanging;
            
            public event ModelDatabaseRowChangeEventHandler ModelDatabaseRowChanged;
            
            public event ModelDatabaseRowChangeEventHandler ModelDatabaseRowDeleting;
            
            public event ModelDatabaseRowChangeEventHandler ModelDatabaseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddModelDatabaseRow(ModelDatabaseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelDatabaseRow AddModelDatabaseRow(RequiredModelDatabasesRow parentRequiredModelDatabasesRowByRequiredAccessDatabases_MasterDatabase, string DatabaseName, string MasterPath) {
                ModelDatabaseRow rowModelDatabaseRow = ((ModelDatabaseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        DatabaseName,
                        MasterPath};
                if ((parentRequiredModelDatabasesRowByRequiredAccessDatabases_MasterDatabase != null)) {
                    columnValuesArray[1] = parentRequiredModelDatabasesRowByRequiredAccessDatabases_MasterDatabase[0];
                }
                rowModelDatabaseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowModelDatabaseRow);
                return rowModelDatabaseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ModelDatabaseDataTable cln = ((ModelDatabaseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ModelDatabaseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnModelDatabase_Id = base.Columns["ModelDatabase_Id"];
                this.columnRequiredModelDatabases_Id = base.Columns["RequiredModelDatabases_Id"];
                this.columnDatabaseName = base.Columns["DatabaseName"];
                this.columnMasterPath = base.Columns["MasterPath"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnModelDatabase_Id = new global::System.Data.DataColumn("ModelDatabase_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnModelDatabase_Id);
                this.columnRequiredModelDatabases_Id = new global::System.Data.DataColumn("RequiredModelDatabases_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRequiredModelDatabases_Id);
                this.columnDatabaseName = new global::System.Data.DataColumn("DatabaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatabaseName);
                this.columnMasterPath = new global::System.Data.DataColumn("MasterPath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMasterPath);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MasterDatabaseKey", new global::System.Data.DataColumn[] {
                                this.columnDatabaseName}, false));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnModelDatabase_Id}, true));
                this.columnModelDatabase_Id.AutoIncrement = true;
                this.columnModelDatabase_Id.AllowDBNull = false;
                this.columnModelDatabase_Id.Unique = true;
                this.columnModelDatabase_Id.Namespace = "SystemsAnalysis.ModelConstruction";
                this.columnRequiredModelDatabases_Id.Namespace = "SystemsAnalysis.ModelConstruction";
                this.columnDatabaseName.AllowDBNull = false;
                this.columnDatabaseName.Unique = true;
                this.columnMasterPath.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelDatabaseRow NewModelDatabaseRow() {
                return ((ModelDatabaseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ModelDatabaseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ModelDatabaseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ModelDatabaseRowChanged != null)) {
                    this.ModelDatabaseRowChanged(this, new ModelDatabaseRowChangeEvent(((ModelDatabaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ModelDatabaseRowChanging != null)) {
                    this.ModelDatabaseRowChanging(this, new ModelDatabaseRowChangeEvent(((ModelDatabaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ModelDatabaseRowDeleted != null)) {
                    this.ModelDatabaseRowDeleted(this, new ModelDatabaseRowChangeEvent(((ModelDatabaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ModelDatabaseRowDeleting != null)) {
                    this.ModelDatabaseRowDeleting(this, new ModelDatabaseRowChangeEvent(((ModelDatabaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveModelDatabaseRow(ModelDatabaseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ModelDatabaseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LinkedTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnModelDatabase_Id;
            
            private global::System.Data.DataColumn columnLink;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedTableDataTable() {
                this.TableName = "LinkedTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkedTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LinkedTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModelDatabase_IdColumn {
                get {
                    return this.columnModelDatabase_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkColumn {
                get {
                    return this.columnLink;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedTableRow this[int index] {
                get {
                    return ((LinkedTableRow)(this.Rows[index]));
                }
            }
            
            public event LinkedTableRowChangeEventHandler LinkedTableRowChanging;
            
            public event LinkedTableRowChangeEventHandler LinkedTableRowChanged;
            
            public event LinkedTableRowChangeEventHandler LinkedTableRowDeleting;
            
            public event LinkedTableRowChangeEventHandler LinkedTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLinkedTableRow(LinkedTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedTableRow AddLinkedTableRow(ModelDatabaseRow parentModelDatabaseRowByMasterDatabase_LinkedTables, ModelDataSourceRow parentModelDataSourceRowByModelDataSourceLinkedTables) {
                LinkedTableRow rowLinkedTableRow = ((LinkedTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentModelDatabaseRowByMasterDatabase_LinkedTables != null)) {
                    columnValuesArray[0] = parentModelDatabaseRowByMasterDatabase_LinkedTables[0];
                }
                if ((parentModelDataSourceRowByModelDataSourceLinkedTables != null)) {
                    columnValuesArray[1] = parentModelDataSourceRowByModelDataSourceLinkedTables[2];
                }
                rowLinkedTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLinkedTableRow);
                return rowLinkedTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LinkedTableDataTable cln = ((LinkedTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LinkedTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnModelDatabase_Id = base.Columns["ModelDatabase_Id"];
                this.columnLink = base.Columns["Link"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnModelDatabase_Id = new global::System.Data.DataColumn("ModelDatabase_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnModelDatabase_Id);
                this.columnLink = new global::System.Data.DataColumn("Link", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLink);
                this.columnModelDatabase_Id.Namespace = "SystemsAnalysis.ModelConstruction";
                this.columnLink.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedTableRow NewLinkedTableRow() {
                return ((LinkedTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LinkedTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LinkedTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LinkedTableRowChanged != null)) {
                    this.LinkedTableRowChanged(this, new LinkedTableRowChangeEvent(((LinkedTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LinkedTableRowChanging != null)) {
                    this.LinkedTableRowChanging(this, new LinkedTableRowChangeEvent(((LinkedTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LinkedTableRowDeleted != null)) {
                    this.LinkedTableRowDeleted(this, new LinkedTableRowChangeEvent(((LinkedTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LinkedTableRowDeleting != null)) {
                    this.LinkedTableRowDeleting(this, new LinkedTableRowChangeEvent(((LinkedTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLinkedTableRow(LinkedTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LinkedTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TreeverseDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTraceFile;
            
            private global::System.Data.DataColumn columnLinkDBSrc;
            
            private global::System.Data.DataColumn columnLinkTblSrc;
            
            private global::System.Data.DataColumn columnLinkField;
            
            private global::System.Data.DataColumn columnUSNodeField;
            
            private global::System.Data.DataColumn columnDSNodeField;
            
            private global::System.Data.DataColumn columnReachField;
            
            private global::System.Data.DataColumn columnElementField;
            
            private global::System.Data.DataColumn columnIsDebugOn;
            
            private global::System.Data.DataColumn columnDebugFile;
            
            private global::System.Data.DataColumn columnEnableMessages;
            
            private global::System.Data.DataColumn columnLinkExisting;
            
            private global::System.Data.DataColumn columnLinkFuture;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TreeverseDataTable() {
                this.TableName = "Treeverse";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TreeverseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TreeverseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TraceFileColumn {
                get {
                    return this.columnTraceFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkDBSrcColumn {
                get {
                    return this.columnLinkDBSrc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkTblSrcColumn {
                get {
                    return this.columnLinkTblSrc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkFieldColumn {
                get {
                    return this.columnLinkField;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USNodeFieldColumn {
                get {
                    return this.columnUSNodeField;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSNodeFieldColumn {
                get {
                    return this.columnDSNodeField;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReachFieldColumn {
                get {
                    return this.columnReachField;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ElementFieldColumn {
                get {
                    return this.columnElementField;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDebugOnColumn {
                get {
                    return this.columnIsDebugOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DebugFileColumn {
                get {
                    return this.columnDebugFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnableMessagesColumn {
                get {
                    return this.columnEnableMessages;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkExistingColumn {
                get {
                    return this.columnLinkExisting;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkFutureColumn {
                get {
                    return this.columnLinkFuture;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TreeverseRow this[int index] {
                get {
                    return ((TreeverseRow)(this.Rows[index]));
                }
            }
            
            public event TreeverseRowChangeEventHandler TreeverseRowChanging;
            
            public event TreeverseRowChangeEventHandler TreeverseRowChanged;
            
            public event TreeverseRowChangeEventHandler TreeverseRowDeleting;
            
            public event TreeverseRowChangeEventHandler TreeverseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTreeverseRow(TreeverseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TreeverseRow AddTreeverseRow(string TraceFile, string LinkDBSrc, string LinkTblSrc, string LinkField, string USNodeField, string DSNodeField, string ReachField, string ElementField, bool IsDebugOn, string DebugFile, string EnableMessages, string LinkExisting, string LinkFuture) {
                TreeverseRow rowTreeverseRow = ((TreeverseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TraceFile,
                        LinkDBSrc,
                        LinkTblSrc,
                        LinkField,
                        USNodeField,
                        DSNodeField,
                        ReachField,
                        ElementField,
                        IsDebugOn,
                        DebugFile,
                        EnableMessages,
                        LinkExisting,
                        LinkFuture};
                rowTreeverseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTreeverseRow);
                return rowTreeverseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TreeverseDataTable cln = ((TreeverseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TreeverseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTraceFile = base.Columns["TraceFile"];
                this.columnLinkDBSrc = base.Columns["LinkDBSrc"];
                this.columnLinkTblSrc = base.Columns["LinkTblSrc"];
                this.columnLinkField = base.Columns["LinkField"];
                this.columnUSNodeField = base.Columns["USNodeField"];
                this.columnDSNodeField = base.Columns["DSNodeField"];
                this.columnReachField = base.Columns["ReachField"];
                this.columnElementField = base.Columns["ElementField"];
                this.columnIsDebugOn = base.Columns["IsDebugOn"];
                this.columnDebugFile = base.Columns["DebugFile"];
                this.columnEnableMessages = base.Columns["EnableMessages"];
                this.columnLinkExisting = base.Columns["LinkExisting"];
                this.columnLinkFuture = base.Columns["LinkFuture"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTraceFile = new global::System.Data.DataColumn("TraceFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTraceFile);
                this.columnLinkDBSrc = new global::System.Data.DataColumn("LinkDBSrc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkDBSrc);
                this.columnLinkTblSrc = new global::System.Data.DataColumn("LinkTblSrc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkTblSrc);
                this.columnLinkField = new global::System.Data.DataColumn("LinkField", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkField);
                this.columnUSNodeField = new global::System.Data.DataColumn("USNodeField", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSNodeField);
                this.columnDSNodeField = new global::System.Data.DataColumn("DSNodeField", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSNodeField);
                this.columnReachField = new global::System.Data.DataColumn("ReachField", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReachField);
                this.columnElementField = new global::System.Data.DataColumn("ElementField", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnElementField);
                this.columnIsDebugOn = new global::System.Data.DataColumn("IsDebugOn", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDebugOn);
                this.columnDebugFile = new global::System.Data.DataColumn("DebugFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDebugFile);
                this.columnEnableMessages = new global::System.Data.DataColumn("EnableMessages", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnableMessages);
                this.columnLinkExisting = new global::System.Data.DataColumn("LinkExisting", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkExisting);
                this.columnLinkFuture = new global::System.Data.DataColumn("LinkFuture", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkFuture);
                this.columnTraceFile.AllowDBNull = false;
                this.columnLinkDBSrc.AllowDBNull = false;
                this.columnLinkDBSrc.DefaultValue = ((string)("w:\\AGmaster21\\portal\\masterportal.mdb"));
                this.columnLinkTblSrc.AllowDBNull = false;
                this.columnLinkTblSrc.DefaultValue = ((string)("mst_links_future"));
                this.columnLinkField.AllowDBNull = false;
                this.columnLinkField.DefaultValue = ((string)("MLinkID"));
                this.columnUSNodeField.AllowDBNull = false;
                this.columnUSNodeField.DefaultValue = ((string)("USNode"));
                this.columnDSNodeField.AllowDBNull = false;
                this.columnDSNodeField.DefaultValue = ((string)("DSNode"));
                this.columnReachField.AllowDBNull = false;
                this.columnReachField.DefaultValue = ((string)("LinkReach"));
                this.columnElementField.AllowDBNull = false;
                this.columnElementField.DefaultValue = ((string)("ReachElement"));
                this.columnIsDebugOn.AllowDBNull = false;
                this.columnIsDebugOn.DefaultValue = ((bool)(false));
                this.columnDebugFile.AllowDBNull = false;
                this.columnDebugFile.DefaultValue = ((string)("newdebug.txt"));
                this.columnEnableMessages.AllowDBNull = false;
                this.columnEnableMessages.DefaultValue = ((string)("YES"));
                this.columnLinkExisting.AllowDBNull = false;
                this.columnLinkExisting.DefaultValue = ((string)("mst_links_existing"));
                this.columnLinkFuture.AllowDBNull = false;
                this.columnLinkFuture.DefaultValue = ((string)("mst_links_future"));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TreeverseRow NewTreeverseRow() {
                return ((TreeverseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TreeverseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TreeverseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TreeverseRowChanged != null)) {
                    this.TreeverseRowChanged(this, new TreeverseRowChangeEvent(((TreeverseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TreeverseRowChanging != null)) {
                    this.TreeverseRowChanging(this, new TreeverseRowChangeEvent(((TreeverseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TreeverseRowDeleted != null)) {
                    this.TreeverseRowDeleted(this, new TreeverseRowChangeEvent(((TreeverseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TreeverseRowDeleting != null)) {
                    this.TreeverseRowDeleting(this, new TreeverseRowChangeEvent(((TreeverseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTreeverseRow(TreeverseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TreeverseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RetraceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTraceFile;
            
            private global::System.Data.DataColumn columnLinkDBSrc;
            
            private global::System.Data.DataColumn columnLinkTblSrc;
            
            private global::System.Data.DataColumn columnLinkField;
            
            private global::System.Data.DataColumn columnUSNodeField;
            
            private global::System.Data.DataColumn columnDSNodeField;
            
            private global::System.Data.DataColumn columnReachField;
            
            private global::System.Data.DataColumn columnElementField;
            
            private global::System.Data.DataColumn columnIsDebugOn;
            
            private global::System.Data.DataColumn columnDebugFile;
            
            private global::System.Data.DataColumn columnEnableMessages;
            
            private global::System.Data.DataColumn columnLinkExisting;
            
            private global::System.Data.DataColumn columnLinkFuture;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetraceDataTable() {
                this.TableName = "Retrace";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RetraceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RetraceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TraceFileColumn {
                get {
                    return this.columnTraceFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkDBSrcColumn {
                get {
                    return this.columnLinkDBSrc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkTblSrcColumn {
                get {
                    return this.columnLinkTblSrc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkFieldColumn {
                get {
                    return this.columnLinkField;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USNodeFieldColumn {
                get {
                    return this.columnUSNodeField;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSNodeFieldColumn {
                get {
                    return this.columnDSNodeField;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReachFieldColumn {
                get {
                    return this.columnReachField;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ElementFieldColumn {
                get {
                    return this.columnElementField;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDebugOnColumn {
                get {
                    return this.columnIsDebugOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DebugFileColumn {
                get {
                    return this.columnDebugFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnableMessagesColumn {
                get {
                    return this.columnEnableMessages;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkExistingColumn {
                get {
                    return this.columnLinkExisting;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkFutureColumn {
                get {
                    return this.columnLinkFuture;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetraceRow this[int index] {
                get {
                    return ((RetraceRow)(this.Rows[index]));
                }
            }
            
            public event RetraceRowChangeEventHandler RetraceRowChanging;
            
            public event RetraceRowChangeEventHandler RetraceRowChanged;
            
            public event RetraceRowChangeEventHandler RetraceRowDeleting;
            
            public event RetraceRowChangeEventHandler RetraceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRetraceRow(RetraceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetraceRow AddRetraceRow(string TraceFile, string LinkDBSrc, string LinkTblSrc, string LinkField, string USNodeField, string DSNodeField, string ReachField, string ElementField, bool IsDebugOn, string DebugFile, string EnableMessages, string LinkExisting, string LinkFuture) {
                RetraceRow rowRetraceRow = ((RetraceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TraceFile,
                        LinkDBSrc,
                        LinkTblSrc,
                        LinkField,
                        USNodeField,
                        DSNodeField,
                        ReachField,
                        ElementField,
                        IsDebugOn,
                        DebugFile,
                        EnableMessages,
                        LinkExisting,
                        LinkFuture};
                rowRetraceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRetraceRow);
                return rowRetraceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RetraceDataTable cln = ((RetraceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RetraceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTraceFile = base.Columns["TraceFile"];
                this.columnLinkDBSrc = base.Columns["LinkDBSrc"];
                this.columnLinkTblSrc = base.Columns["LinkTblSrc"];
                this.columnLinkField = base.Columns["LinkField"];
                this.columnUSNodeField = base.Columns["USNodeField"];
                this.columnDSNodeField = base.Columns["DSNodeField"];
                this.columnReachField = base.Columns["ReachField"];
                this.columnElementField = base.Columns["ElementField"];
                this.columnIsDebugOn = base.Columns["IsDebugOn"];
                this.columnDebugFile = base.Columns["DebugFile"];
                this.columnEnableMessages = base.Columns["EnableMessages"];
                this.columnLinkExisting = base.Columns["LinkExisting"];
                this.columnLinkFuture = base.Columns["LinkFuture"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTraceFile = new global::System.Data.DataColumn("TraceFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTraceFile);
                this.columnLinkDBSrc = new global::System.Data.DataColumn("LinkDBSrc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkDBSrc);
                this.columnLinkTblSrc = new global::System.Data.DataColumn("LinkTblSrc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkTblSrc);
                this.columnLinkField = new global::System.Data.DataColumn("LinkField", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkField);
                this.columnUSNodeField = new global::System.Data.DataColumn("USNodeField", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSNodeField);
                this.columnDSNodeField = new global::System.Data.DataColumn("DSNodeField", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSNodeField);
                this.columnReachField = new global::System.Data.DataColumn("ReachField", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReachField);
                this.columnElementField = new global::System.Data.DataColumn("ElementField", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnElementField);
                this.columnIsDebugOn = new global::System.Data.DataColumn("IsDebugOn", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDebugOn);
                this.columnDebugFile = new global::System.Data.DataColumn("DebugFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDebugFile);
                this.columnEnableMessages = new global::System.Data.DataColumn("EnableMessages", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnableMessages);
                this.columnLinkExisting = new global::System.Data.DataColumn("LinkExisting", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkExisting);
                this.columnLinkFuture = new global::System.Data.DataColumn("LinkFuture", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkFuture);
                this.columnTraceFile.AllowDBNull = false;
                this.columnLinkDBSrc.AllowDBNull = false;
                this.columnLinkDBSrc.DefaultValue = ((string)("w:\\AGmaster21\\portal\\masterportal.mdb"));
                this.columnLinkTblSrc.AllowDBNull = false;
                this.columnLinkTblSrc.DefaultValue = ((string)("mst_links_future"));
                this.columnLinkField.AllowDBNull = false;
                this.columnLinkField.DefaultValue = ((string)("MLinkID"));
                this.columnUSNodeField.AllowDBNull = false;
                this.columnUSNodeField.DefaultValue = ((string)("USNode"));
                this.columnDSNodeField.AllowDBNull = false;
                this.columnDSNodeField.DefaultValue = ((string)("DSNode"));
                this.columnReachField.AllowDBNull = false;
                this.columnReachField.DefaultValue = ((string)("LinkReach"));
                this.columnElementField.AllowDBNull = false;
                this.columnElementField.DefaultValue = ((string)("ReachElement"));
                this.columnIsDebugOn.AllowDBNull = false;
                this.columnIsDebugOn.DefaultValue = ((bool)(false));
                this.columnDebugFile.AllowDBNull = false;
                this.columnDebugFile.DefaultValue = ((string)("newdebug.txt"));
                this.columnEnableMessages.AllowDBNull = false;
                this.columnEnableMessages.DefaultValue = ((string)("YES"));
                this.columnLinkExisting.AllowDBNull = false;
                this.columnLinkExisting.DefaultValue = ((string)("mst_links_existing"));
                this.columnLinkFuture.AllowDBNull = false;
                this.columnLinkFuture.DefaultValue = ((string)("mst_links_future"));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetraceRow NewRetraceRow() {
                return ((RetraceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RetraceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RetraceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RetraceRowChanged != null)) {
                    this.RetraceRowChanged(this, new RetraceRowChangeEvent(((RetraceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RetraceRowChanging != null)) {
                    this.RetraceRowChanging(this, new RetraceRowChangeEvent(((RetraceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RetraceRowDeleted != null)) {
                    this.RetraceRowDeleted(this, new RetraceRowChangeEvent(((RetraceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RetraceRowDeleting != null)) {
                    this.RetraceRowDeleting(this, new RetraceRowChangeEvent(((RetraceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRetraceRow(RetraceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RetraceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TraceLinksDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSnapTolerance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TraceLinksDataTable() {
                this.TableName = "TraceLinks";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TraceLinksDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TraceLinksDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SnapToleranceColumn {
                get {
                    return this.columnSnapTolerance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TraceLinksRow this[int index] {
                get {
                    return ((TraceLinksRow)(this.Rows[index]));
                }
            }
            
            public event TraceLinksRowChangeEventHandler TraceLinksRowChanging;
            
            public event TraceLinksRowChangeEventHandler TraceLinksRowChanged;
            
            public event TraceLinksRowChangeEventHandler TraceLinksRowDeleting;
            
            public event TraceLinksRowChangeEventHandler TraceLinksRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTraceLinksRow(TraceLinksRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TraceLinksRow AddTraceLinksRow(double SnapTolerance) {
                TraceLinksRow rowTraceLinksRow = ((TraceLinksRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SnapTolerance};
                rowTraceLinksRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTraceLinksRow);
                return rowTraceLinksRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TraceLinksDataTable cln = ((TraceLinksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TraceLinksDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSnapTolerance = base.Columns["SnapTolerance"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSnapTolerance = new global::System.Data.DataColumn("SnapTolerance", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSnapTolerance);
                this.columnSnapTolerance.AllowDBNull = false;
                this.columnSnapTolerance.DefaultValue = ((double)(20));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TraceLinksRow NewTraceLinksRow() {
                return ((TraceLinksRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TraceLinksRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TraceLinksRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TraceLinksRowChanged != null)) {
                    this.TraceLinksRowChanged(this, new TraceLinksRowChangeEvent(((TraceLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TraceLinksRowChanging != null)) {
                    this.TraceLinksRowChanging(this, new TraceLinksRowChangeEvent(((TraceLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TraceLinksRowDeleted != null)) {
                    this.TraceLinksRowDeleted(this, new TraceLinksRowChangeEvent(((TraceLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TraceLinksRowDeleting != null)) {
                    this.TraceLinksRowDeleting(this, new TraceLinksRowChangeEvent(((TraceLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTraceLinksRow(TraceLinksRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TraceLinksDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RootLinksDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRootLinks_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RootLinksDataTable() {
                this.TableName = "RootLinks";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RootLinksDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RootLinksDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RootLinks_IdColumn {
                get {
                    return this.columnRootLinks_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RootLinksRow this[int index] {
                get {
                    return ((RootLinksRow)(this.Rows[index]));
                }
            }
            
            public event RootLinksRowChangeEventHandler RootLinksRowChanging;
            
            public event RootLinksRowChangeEventHandler RootLinksRowChanged;
            
            public event RootLinksRowChangeEventHandler RootLinksRowDeleting;
            
            public event RootLinksRowChangeEventHandler RootLinksRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRootLinksRow(RootLinksRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RootLinksRow AddRootLinksRow() {
                RootLinksRow rowRootLinksRow = ((RootLinksRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null};
                rowRootLinksRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRootLinksRow);
                return rowRootLinksRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RootLinksDataTable cln = ((RootLinksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RootLinksDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRootLinks_Id = base.Columns["RootLinks_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRootLinks_Id = new global::System.Data.DataColumn("RootLinks_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRootLinks_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRootLinks_Id}, true));
                this.columnRootLinks_Id.AutoIncrement = true;
                this.columnRootLinks_Id.AllowDBNull = false;
                this.columnRootLinks_Id.Unique = true;
                this.columnRootLinks_Id.Namespace = "SystemsAnalysis.ModelConstruction";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RootLinksRow NewRootLinksRow() {
                return ((RootLinksRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RootLinksRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RootLinksRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RootLinksRowChanged != null)) {
                    this.RootLinksRowChanged(this, new RootLinksRowChangeEvent(((RootLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RootLinksRowChanging != null)) {
                    this.RootLinksRowChanging(this, new RootLinksRowChangeEvent(((RootLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RootLinksRowDeleted != null)) {
                    this.RootLinksRowDeleted(this, new RootLinksRowChangeEvent(((RootLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RootLinksRowDeleting != null)) {
                    this.RootLinksRowDeleting(this, new RootLinksRowChangeEvent(((RootLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRootLinksRow(RootLinksRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RootLinksDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RootLinkDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRootLinks_Id;
            
            private global::System.Data.DataColumn columnMLinkID;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RootLinkDataTable() {
                this.TableName = "RootLink";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RootLinkDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RootLinkDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RootLinks_IdColumn {
                get {
                    return this.columnRootLinks_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MLinkIDColumn {
                get {
                    return this.columnMLinkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RootLinkRow this[int index] {
                get {
                    return ((RootLinkRow)(this.Rows[index]));
                }
            }
            
            public event RootLinkRowChangeEventHandler RootLinkRowChanging;
            
            public event RootLinkRowChangeEventHandler RootLinkRowChanged;
            
            public event RootLinkRowChangeEventHandler RootLinkRowDeleting;
            
            public event RootLinkRowChangeEventHandler RootLinkRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRootLinkRow(RootLinkRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RootLinkRow AddRootLinkRow(RootLinksRow parentRootLinksRowByRootLinks_RootLink, int MLinkID, string Description) {
                RootLinkRow rowRootLinkRow = ((RootLinkRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MLinkID,
                        Description};
                if ((parentRootLinksRowByRootLinks_RootLink != null)) {
                    columnValuesArray[0] = parentRootLinksRowByRootLinks_RootLink[0];
                }
                rowRootLinkRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRootLinkRow);
                return rowRootLinkRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RootLinkDataTable cln = ((RootLinkDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RootLinkDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRootLinks_Id = base.Columns["RootLinks_Id"];
                this.columnMLinkID = base.Columns["MLinkID"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRootLinks_Id = new global::System.Data.DataColumn("RootLinks_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRootLinks_Id);
                this.columnMLinkID = new global::System.Data.DataColumn("MLinkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMLinkID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnRootLinks_Id.Namespace = "SystemsAnalysis.ModelConstruction";
                this.columnMLinkID.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RootLinkRow NewRootLinkRow() {
                return ((RootLinkRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RootLinkRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RootLinkRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RootLinkRowChanged != null)) {
                    this.RootLinkRowChanged(this, new RootLinkRowChangeEvent(((RootLinkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RootLinkRowChanging != null)) {
                    this.RootLinkRowChanging(this, new RootLinkRowChangeEvent(((RootLinkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RootLinkRowDeleted != null)) {
                    this.RootLinkRowDeleted(this, new RootLinkRowChangeEvent(((RootLinkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RootLinkRowDeleting != null)) {
                    this.RootLinkRowDeleting(this, new RootLinkRowChangeEvent(((RootLinkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRootLinkRow(RootLinkRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RootLinkDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StopLinksDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnStopLinks_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopLinksDataTable() {
                this.TableName = "StopLinks";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StopLinksDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StopLinksDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopLinks_IdColumn {
                get {
                    return this.columnStopLinks_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopLinksRow this[int index] {
                get {
                    return ((StopLinksRow)(this.Rows[index]));
                }
            }
            
            public event StopLinksRowChangeEventHandler StopLinksRowChanging;
            
            public event StopLinksRowChangeEventHandler StopLinksRowChanged;
            
            public event StopLinksRowChangeEventHandler StopLinksRowDeleting;
            
            public event StopLinksRowChangeEventHandler StopLinksRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStopLinksRow(StopLinksRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopLinksRow AddStopLinksRow() {
                StopLinksRow rowStopLinksRow = ((StopLinksRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null};
                rowStopLinksRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStopLinksRow);
                return rowStopLinksRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StopLinksDataTable cln = ((StopLinksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StopLinksDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStopLinks_Id = base.Columns["StopLinks_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStopLinks_Id = new global::System.Data.DataColumn("StopLinks_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnStopLinks_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStopLinks_Id}, true));
                this.columnStopLinks_Id.AutoIncrement = true;
                this.columnStopLinks_Id.AllowDBNull = false;
                this.columnStopLinks_Id.Unique = true;
                this.columnStopLinks_Id.Namespace = "SystemsAnalysis.ModelConstruction";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopLinksRow NewStopLinksRow() {
                return ((StopLinksRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StopLinksRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StopLinksRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StopLinksRowChanged != null)) {
                    this.StopLinksRowChanged(this, new StopLinksRowChangeEvent(((StopLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StopLinksRowChanging != null)) {
                    this.StopLinksRowChanging(this, new StopLinksRowChangeEvent(((StopLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StopLinksRowDeleted != null)) {
                    this.StopLinksRowDeleted(this, new StopLinksRowChangeEvent(((StopLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StopLinksRowDeleting != null)) {
                    this.StopLinksRowDeleting(this, new StopLinksRowChangeEvent(((StopLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStopLinksRow(StopLinksRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StopLinksDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StopLinkDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnStopLinks_Id;
            
            private global::System.Data.DataColumn columnMLinkID;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopLinkDataTable() {
                this.TableName = "StopLink";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StopLinkDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StopLinkDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopLinks_IdColumn {
                get {
                    return this.columnStopLinks_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MLinkIDColumn {
                get {
                    return this.columnMLinkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopLinkRow this[int index] {
                get {
                    return ((StopLinkRow)(this.Rows[index]));
                }
            }
            
            public event StopLinkRowChangeEventHandler StopLinkRowChanging;
            
            public event StopLinkRowChangeEventHandler StopLinkRowChanged;
            
            public event StopLinkRowChangeEventHandler StopLinkRowDeleting;
            
            public event StopLinkRowChangeEventHandler StopLinkRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStopLinkRow(StopLinkRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopLinkRow AddStopLinkRow(StopLinksRow parentStopLinksRowByStopLinks_StopLink, int MLinkID, string Description) {
                StopLinkRow rowStopLinkRow = ((StopLinkRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MLinkID,
                        Description};
                if ((parentStopLinksRowByStopLinks_StopLink != null)) {
                    columnValuesArray[0] = parentStopLinksRowByStopLinks_StopLink[0];
                }
                rowStopLinkRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStopLinkRow);
                return rowStopLinkRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StopLinkDataTable cln = ((StopLinkDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StopLinkDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStopLinks_Id = base.Columns["StopLinks_Id"];
                this.columnMLinkID = base.Columns["MLinkID"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStopLinks_Id = new global::System.Data.DataColumn("StopLinks_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnStopLinks_Id);
                this.columnMLinkID = new global::System.Data.DataColumn("MLinkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMLinkID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnStopLinks_Id.Namespace = "SystemsAnalysis.ModelConstruction";
                this.columnMLinkID.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopLinkRow NewStopLinkRow() {
                return ((StopLinkRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StopLinkRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StopLinkRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StopLinkRowChanged != null)) {
                    this.StopLinkRowChanged(this, new StopLinkRowChangeEvent(((StopLinkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StopLinkRowChanging != null)) {
                    this.StopLinkRowChanging(this, new StopLinkRowChangeEvent(((StopLinkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StopLinkRowDeleted != null)) {
                    this.StopLinkRowDeleted(this, new StopLinkRowChangeEvent(((StopLinkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StopLinkRowDeleting != null)) {
                    this.StopLinkRowDeleting(this, new StopLinkRowChangeEvent(((StopLinkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStopLinkRow(StopLinkRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StopLinkDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SimulationFilesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRunoffDeck;
            
            private global::System.Data.DataColumn columnTransportDeck;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SimulationFilesDataTable() {
                this.TableName = "SimulationFiles";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SimulationFilesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SimulationFilesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunoffDeckColumn {
                get {
                    return this.columnRunoffDeck;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransportDeckColumn {
                get {
                    return this.columnTransportDeck;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SimulationFilesRow this[int index] {
                get {
                    return ((SimulationFilesRow)(this.Rows[index]));
                }
            }
            
            public event SimulationFilesRowChangeEventHandler SimulationFilesRowChanging;
            
            public event SimulationFilesRowChangeEventHandler SimulationFilesRowChanged;
            
            public event SimulationFilesRowChangeEventHandler SimulationFilesRowDeleting;
            
            public event SimulationFilesRowChangeEventHandler SimulationFilesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSimulationFilesRow(SimulationFilesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SimulationFilesRow AddSimulationFilesRow(string RunoffDeck, string TransportDeck) {
                SimulationFilesRow rowSimulationFilesRow = ((SimulationFilesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RunoffDeck,
                        TransportDeck};
                rowSimulationFilesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSimulationFilesRow);
                return rowSimulationFilesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SimulationFilesDataTable cln = ((SimulationFilesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SimulationFilesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRunoffDeck = base.Columns["RunoffDeck"];
                this.columnTransportDeck = base.Columns["TransportDeck"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRunoffDeck = new global::System.Data.DataColumn("RunoffDeck", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunoffDeck);
                this.columnTransportDeck = new global::System.Data.DataColumn("TransportDeck", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransportDeck);
                this.columnRunoffDeck.AllowDBNull = false;
                this.columnTransportDeck.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SimulationFilesRow NewSimulationFilesRow() {
                return ((SimulationFilesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SimulationFilesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SimulationFilesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SimulationFilesRowChanged != null)) {
                    this.SimulationFilesRowChanged(this, new SimulationFilesRowChangeEvent(((SimulationFilesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SimulationFilesRowChanging != null)) {
                    this.SimulationFilesRowChanging(this, new SimulationFilesRowChangeEvent(((SimulationFilesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SimulationFilesRowDeleted != null)) {
                    this.SimulationFilesRowDeleted(this, new SimulationFilesRowChangeEvent(((SimulationFilesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SimulationFilesRowDeleting != null)) {
                    this.SimulationFilesRowDeleting(this, new SimulationFilesRowChangeEvent(((SimulationFilesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSimulationFilesRow(SimulationFilesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SimulationFilesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IncludedAlternativesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnIncludedAlternatives_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncludedAlternativesDataTable() {
                this.TableName = "IncludedAlternatives";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IncludedAlternativesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IncludedAlternativesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IncludedAlternatives_IdColumn {
                get {
                    return this.columnIncludedAlternatives_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncludedAlternativesRow this[int index] {
                get {
                    return ((IncludedAlternativesRow)(this.Rows[index]));
                }
            }
            
            public event IncludedAlternativesRowChangeEventHandler IncludedAlternativesRowChanging;
            
            public event IncludedAlternativesRowChangeEventHandler IncludedAlternativesRowChanged;
            
            public event IncludedAlternativesRowChangeEventHandler IncludedAlternativesRowDeleting;
            
            public event IncludedAlternativesRowChangeEventHandler IncludedAlternativesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIncludedAlternativesRow(IncludedAlternativesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncludedAlternativesRow AddIncludedAlternativesRow() {
                IncludedAlternativesRow rowIncludedAlternativesRow = ((IncludedAlternativesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null};
                rowIncludedAlternativesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowIncludedAlternativesRow);
                return rowIncludedAlternativesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncludedAlternativesRow FindByIncludedAlternatives_Id(int IncludedAlternatives_Id) {
                return ((IncludedAlternativesRow)(this.Rows.Find(new object[] {
                            IncludedAlternatives_Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                IncludedAlternativesDataTable cln = ((IncludedAlternativesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new IncludedAlternativesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIncludedAlternatives_Id = base.Columns["IncludedAlternatives_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIncludedAlternatives_Id = new global::System.Data.DataColumn("IncludedAlternatives_Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncludedAlternatives_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("IncludedAlternativesKey1", new global::System.Data.DataColumn[] {
                                this.columnIncludedAlternatives_Id}, true));
                this.columnIncludedAlternatives_Id.AutoIncrement = true;
                this.columnIncludedAlternatives_Id.AllowDBNull = false;
                this.columnIncludedAlternatives_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncludedAlternativesRow NewIncludedAlternativesRow() {
                return ((IncludedAlternativesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new IncludedAlternativesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(IncludedAlternativesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IncludedAlternativesRowChanged != null)) {
                    this.IncludedAlternativesRowChanged(this, new IncludedAlternativesRowChangeEvent(((IncludedAlternativesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IncludedAlternativesRowChanging != null)) {
                    this.IncludedAlternativesRowChanging(this, new IncludedAlternativesRowChangeEvent(((IncludedAlternativesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IncludedAlternativesRowDeleted != null)) {
                    this.IncludedAlternativesRowDeleted(this, new IncludedAlternativesRowChangeEvent(((IncludedAlternativesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IncludedAlternativesRowDeleting != null)) {
                    this.IncludedAlternativesRowDeleting(this, new IncludedAlternativesRowChangeEvent(((IncludedAlternativesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIncludedAlternativesRow(IncludedAlternativesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IncludedAlternativesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AlternativeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAltID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnBaseModel;
            
            private global::System.Data.DataColumn columnIncludedAlternatives_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AlternativeDataTable() {
                this.TableName = "Alternative";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AlternativeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AlternativeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AltIDColumn {
                get {
                    return this.columnAltID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseModelColumn {
                get {
                    return this.columnBaseModel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IncludedAlternatives_IdColumn {
                get {
                    return this.columnIncludedAlternatives_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AlternativeRow this[int index] {
                get {
                    return ((AlternativeRow)(this.Rows[index]));
                }
            }
            
            public event AlternativeRowChangeEventHandler AlternativeRowChanging;
            
            public event AlternativeRowChangeEventHandler AlternativeRowChanged;
            
            public event AlternativeRowChangeEventHandler AlternativeRowDeleting;
            
            public event AlternativeRowChangeEventHandler AlternativeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAlternativeRow(AlternativeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AlternativeRow AddAlternativeRow(string Name, string BaseModel, IncludedAlternativesRow parentIncludedAlternativesRowByFK_IncludedAlternatives_Alternative) {
                AlternativeRow rowAlternativeRow = ((AlternativeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        BaseModel,
                        null};
                if ((parentIncludedAlternativesRowByFK_IncludedAlternatives_Alternative != null)) {
                    columnValuesArray[3] = parentIncludedAlternativesRowByFK_IncludedAlternatives_Alternative[0];
                }
                rowAlternativeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAlternativeRow);
                return rowAlternativeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AlternativeRow FindByAltID(int AltID) {
                return ((AlternativeRow)(this.Rows.Find(new object[] {
                            AltID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AlternativeDataTable cln = ((AlternativeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AlternativeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAltID = base.Columns["AltID"];
                this.columnName = base.Columns["Name"];
                this.columnBaseModel = base.Columns["BaseModel"];
                this.columnIncludedAlternatives_Id = base.Columns["IncludedAlternatives_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAltID = new global::System.Data.DataColumn("AltID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAltID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnBaseModel = new global::System.Data.DataColumn("BaseModel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseModel);
                this.columnIncludedAlternatives_Id = new global::System.Data.DataColumn("IncludedAlternatives_Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncludedAlternatives_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAltID}, true));
                this.columnAltID.AutoIncrement = true;
                this.columnAltID.AutoIncrementSeed = 1;
                this.columnAltID.AllowDBNull = false;
                this.columnAltID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AlternativeRow NewAlternativeRow() {
                return ((AlternativeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AlternativeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AlternativeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AlternativeRowChanged != null)) {
                    this.AlternativeRowChanged(this, new AlternativeRowChangeEvent(((AlternativeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AlternativeRowChanging != null)) {
                    this.AlternativeRowChanging(this, new AlternativeRowChangeEvent(((AlternativeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AlternativeRowDeleted != null)) {
                    this.AlternativeRowDeleted(this, new AlternativeRowChangeEvent(((AlternativeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AlternativeRowDeleting != null)) {
                    this.AlternativeRowDeleting(this, new AlternativeRowChangeEvent(((AlternativeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAlternativeRow(AlternativeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AlternativeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataAccessDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDataAccess_Id;
            
            private global::System.Data.DataColumn columnFileName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataAccessDataTable() {
                this.TableName = "DataAccess";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataAccessDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataAccessDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataAccess_IdColumn {
                get {
                    return this.columnDataAccess_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileNameColumn {
                get {
                    return this.columnFileName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataAccessRow this[int index] {
                get {
                    return ((DataAccessRow)(this.Rows[index]));
                }
            }
            
            public event DataAccessRowChangeEventHandler DataAccessRowChanging;
            
            public event DataAccessRowChangeEventHandler DataAccessRowChanged;
            
            public event DataAccessRowChangeEventHandler DataAccessRowDeleting;
            
            public event DataAccessRowChangeEventHandler DataAccessRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataAccessRow(DataAccessRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataAccessRow AddDataAccessRow(string FileName) {
                DataAccessRow rowDataAccessRow = ((DataAccessRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        FileName};
                rowDataAccessRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataAccessRow);
                return rowDataAccessRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataAccessRow FindByDataAccess_Id(int DataAccess_Id) {
                return ((DataAccessRow)(this.Rows.Find(new object[] {
                            DataAccess_Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DataAccessDataTable cln = ((DataAccessDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DataAccessDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDataAccess_Id = base.Columns["DataAccess_Id"];
                this.columnFileName = base.Columns["FileName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDataAccess_Id = new global::System.Data.DataColumn("DataAccess_Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataAccess_Id);
                this.columnFileName = new global::System.Data.DataColumn("FileName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDataAccess_Id}, true));
                this.columnDataAccess_Id.AutoIncrement = true;
                this.columnDataAccess_Id.AllowDBNull = false;
                this.columnDataAccess_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataAccessRow NewDataAccessRow() {
                return ((DataAccessRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DataAccessRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DataAccessRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataAccessRowChanged != null)) {
                    this.DataAccessRowChanged(this, new DataAccessRowChangeEvent(((DataAccessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataAccessRowChanging != null)) {
                    this.DataAccessRowChanging(this, new DataAccessRowChangeEvent(((DataAccessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataAccessRowDeleted != null)) {
                    this.DataAccessRowDeleted(this, new DataAccessRowChangeEvent(((DataAccessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataAccessRowDeleting != null)) {
                    this.DataAccessRowDeleting(this, new DataAccessRowChangeEvent(((DataAccessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataAccessRow(DataAccessRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataAccessDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataSourceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLinkName;
            
            private global::System.Data.DataColumn columnTableName;
            
            private global::System.Data.DataColumn columnTableLocation;
            
            private global::System.Data.DataColumn columnDataAccess_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataSourceDataTable() {
                this.TableName = "DataSource";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataSourceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataSourceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkNameColumn {
                get {
                    return this.columnLinkName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TableNameColumn {
                get {
                    return this.columnTableName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TableLocationColumn {
                get {
                    return this.columnTableLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataAccess_IdColumn {
                get {
                    return this.columnDataAccess_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataSourceRow this[int index] {
                get {
                    return ((DataSourceRow)(this.Rows[index]));
                }
            }
            
            public event DataSourceRowChangeEventHandler DataSourceRowChanging;
            
            public event DataSourceRowChangeEventHandler DataSourceRowChanged;
            
            public event DataSourceRowChangeEventHandler DataSourceRowDeleting;
            
            public event DataSourceRowChangeEventHandler DataSourceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataSourceRow(DataSourceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataSourceRow AddDataSourceRow(string LinkName, string TableName, string TableLocation, DataAccessRow parentDataAccessRowByFK_DataAccess_DataSource) {
                DataSourceRow rowDataSourceRow = ((DataSourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LinkName,
                        TableName,
                        TableLocation,
                        null};
                if ((parentDataAccessRowByFK_DataAccess_DataSource != null)) {
                    columnValuesArray[3] = parentDataAccessRowByFK_DataAccess_DataSource[0];
                }
                rowDataSourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataSourceRow);
                return rowDataSourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DataSourceDataTable cln = ((DataSourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DataSourceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLinkName = base.Columns["LinkName"];
                this.columnTableName = base.Columns["TableName"];
                this.columnTableLocation = base.Columns["TableLocation"];
                this.columnDataAccess_Id = base.Columns["DataAccess_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLinkName = new global::System.Data.DataColumn("LinkName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkName);
                this.columnTableName = new global::System.Data.DataColumn("TableName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTableName);
                this.columnTableLocation = new global::System.Data.DataColumn("TableLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTableLocation);
                this.columnDataAccess_Id = new global::System.Data.DataColumn("DataAccess_Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataAccess_Id);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataSourceRow NewDataSourceRow() {
                return ((DataSourceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DataSourceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DataSourceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataSourceRowChanged != null)) {
                    this.DataSourceRowChanged(this, new DataSourceRowChangeEvent(((DataSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataSourceRowChanging != null)) {
                    this.DataSourceRowChanging(this, new DataSourceRowChangeEvent(((DataSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataSourceRowDeleted != null)) {
                    this.DataSourceRowDeleted(this, new DataSourceRowChangeEvent(((DataSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataSourceRowDeleting != null)) {
                    this.DataSourceRowDeleting(this, new DataSourceRowChangeEvent(((DataSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataSourceRow(DataSourceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelConfigurationDataSet ds = new ModelConfigurationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataSourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ControlRow : global::System.Data.DataRow {
            
            private ControlDataTable tableControl;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ControlRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableControl = ((ControlDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Version {
                get {
                    return ((double)(this[this.tableControl.VersionColumn]));
                }
                set {
                    this[this.tableControl.VersionColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ModelStateRow : global::System.Data.DataRow {
            
            private ModelStateDataTable tableModelState;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModelStateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableModelState = ((ModelStateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TimeFrame {
                get {
                    return ((string)(this[this.tableModelState.TimeFrameColumn]));
                }
                set {
                    this[this.tableModelState.TimeFrameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasSubcatchments {
                get {
                    return ((bool)(this[this.tableModelState.HasSubcatchmentsColumn]));
                }
                set {
                    this[this.tableModelState.HasSubcatchmentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasParcels {
                get {
                    return ((bool)(this[this.tableModelState.HasParcelsColumn]));
                }
                set {
                    this[this.tableModelState.HasParcelsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasPipeSystem {
                get {
                    return ((bool)(this[this.tableModelState.HasPipeSystemColumn]));
                }
                set {
                    this[this.tableModelState.HasPipeSystemColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AdminRow : global::System.Data.DataRow {
            
            private AdminDataTable tableAdmin;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AdminRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAdmin = ((AdminDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Disable {
                get {
                    try {
                        return ((bool)(this[this.tableAdmin.DisableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Disable\' in table \'Admin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdmin.DisableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RefreshMDBs {
                get {
                    try {
                        return ((bool)(this[this.tableAdmin.RefreshMDBsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RefreshMDBs\' in table \'Admin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdmin.RefreshMDBsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SysMDBDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAdmin.SysMDBDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SysMDBDate\' in table \'Admin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdmin.SysMDBDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAdmin.CreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Created\' in table \'Admin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdmin.CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Modified {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAdmin.ModifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Modified\' in table \'Admin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdmin.ModifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Entered {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAdmin.EnteredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Entered\' in table \'Admin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdmin.EnteredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MDBDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAdmin.MDBDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MDBDate\' in table \'Admin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdmin.MDBDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DeployedRunoff {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAdmin.DeployedRunoffColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeployedRunoff\' in table \'Admin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdmin.DeployedRunoffColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisableNull() {
                return this.IsNull(this.tableAdmin.DisableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisableNull() {
                this[this.tableAdmin.DisableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRefreshMDBsNull() {
                return this.IsNull(this.tableAdmin.RefreshMDBsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRefreshMDBsNull() {
                this[this.tableAdmin.RefreshMDBsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSysMDBDateNull() {
                return this.IsNull(this.tableAdmin.SysMDBDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSysMDBDateNull() {
                this[this.tableAdmin.SysMDBDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedNull() {
                return this.IsNull(this.tableAdmin.CreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedNull() {
                this[this.tableAdmin.CreatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedNull() {
                return this.IsNull(this.tableAdmin.ModifiedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedNull() {
                this[this.tableAdmin.ModifiedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnteredNull() {
                return this.IsNull(this.tableAdmin.EnteredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnteredNull() {
                this[this.tableAdmin.EnteredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMDBDateNull() {
                return this.IsNull(this.tableAdmin.MDBDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMDBDateNull() {
                this[this.tableAdmin.MDBDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeployedRunoffNull() {
                return this.IsNull(this.tableAdmin.DeployedRunoffColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeployedRunoffNull() {
                this[this.tableAdmin.DeployedRunoffColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MasterComponentsRow : global::System.Data.DataRow {
            
            private MasterComponentsDataTable tableMasterComponents;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MasterComponentsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMasterComponents = ((MasterComponentsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MasterComponents_Id {
                get {
                    return ((int)(this[this.tableMasterComponents.MasterComponents_IdColumn]));
                }
                set {
                    this[this.tableMasterComponents.MasterComponents_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MasterDataSourceRow[] GetMasterDataSourceRows() {
                if ((this.Table.ChildRelations["MasterComponents_MasterDataSource"] == null)) {
                    return new MasterDataSourceRow[0];
                }
                else {
                    return ((MasterDataSourceRow[])(base.GetChildRows(this.Table.ChildRelations["MasterComponents_MasterDataSource"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MasterDataSourceRow : global::System.Data.DataRow {
            
            private MasterDataSourceDataTable tableMasterDataSource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MasterDataSourceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMasterDataSource = ((MasterDataSourceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableMasterDataSource.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'MasterDataSource\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMasterDataSource.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ComponentType {
                get {
                    return ((string)(this[this.tableMasterDataSource.ComponentTypeColumn]));
                }
                set {
                    this[this.tableMasterDataSource.ComponentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataSourceName {
                get {
                    return ((string)(this[this.tableMasterDataSource.DataSourceNameColumn]));
                }
                set {
                    this[this.tableMasterDataSource.DataSourceNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Database {
                get {
                    try {
                        return ((string)(this[this.tableMasterDataSource.DatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Database\' in table \'MasterDataSource\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMasterDataSource.DatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Path {
                get {
                    return ((string)(this[this.tableMasterDataSource.PathColumn]));
                }
                set {
                    this[this.tableMasterDataSource.PathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShortName {
                get {
                    return ((string)(this[this.tableMasterDataSource.ShortNameColumn]));
                }
                set {
                    this[this.tableMasterDataSource.ShortNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MasterComponents_Id {
                get {
                    try {
                        return ((int)(this[this.tableMasterDataSource.MasterComponents_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MasterComponents_Id\' in table \'MasterDataSource\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableMasterDataSource.MasterComponents_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MasterComponentsRow MasterComponentsRow {
                get {
                    return ((MasterComponentsRow)(this.GetParentRow(this.Table.ParentRelations["MasterComponents_MasterDataSource"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MasterComponents_MasterDataSource"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableMasterDataSource.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableMasterDataSource.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDatabaseNull() {
                return this.IsNull(this.tableMasterDataSource.DatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDatabaseNull() {
                this[this.tableMasterDataSource.DatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMasterComponents_IdNull() {
                return this.IsNull(this.tableMasterDataSource.MasterComponents_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMasterComponents_IdNull() {
                this[this.tableMasterDataSource.MasterComponents_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ModelComponentsRow : global::System.Data.DataRow {
            
            private ModelComponentsDataTable tableModelComponents;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModelComponentsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableModelComponents = ((ModelComponentsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ModelComponents_Id {
                get {
                    return ((int)(this[this.tableModelComponents.ModelComponents_IdColumn]));
                }
                set {
                    this[this.tableModelComponents.ModelComponents_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelDataSourceRow[] GetModelDataSourceRows() {
                if ((this.Table.ChildRelations["ModelComponents_ModelDataSource"] == null)) {
                    return new ModelDataSourceRow[0];
                }
                else {
                    return ((ModelDataSourceRow[])(base.GetChildRows(this.Table.ChildRelations["ModelComponents_ModelDataSource"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ModelDataSourceRow : global::System.Data.DataRow {
            
            private ModelDataSourceDataTable tableModelDataSource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModelDataSourceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableModelDataSource = ((ModelDataSourceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceType {
                get {
                    try {
                        return ((string)(this[this.tableModelDataSource.SourceTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceType\' in table \'ModelDataSource\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModelDataSource.SourceTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ComponentType {
                get {
                    return ((string)(this[this.tableModelDataSource.ComponentTypeColumn]));
                }
                set {
                    this[this.tableModelDataSource.ComponentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataSourceName {
                get {
                    return ((string)(this[this.tableModelDataSource.DataSourceNameColumn]));
                }
                set {
                    this[this.tableModelDataSource.DataSourceNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Database {
                get {
                    try {
                        return ((string)(this[this.tableModelDataSource.DatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Database\' in table \'ModelDataSource\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModelDataSource.DatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RelativePath {
                get {
                    return ((string)(this[this.tableModelDataSource.RelativePathColumn]));
                }
                set {
                    this[this.tableModelDataSource.RelativePathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShortName {
                get {
                    return ((string)(this[this.tableModelDataSource.ShortNameColumn]));
                }
                set {
                    this[this.tableModelDataSource.ShortNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ModelComponents_Id {
                get {
                    try {
                        return ((int)(this[this.tableModelDataSource.ModelComponents_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModelComponents_Id\' in table \'ModelDataSource\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModelDataSource.ModelComponents_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelComponentsRow ModelComponentsRow {
                get {
                    return ((ModelComponentsRow)(this.GetParentRow(this.Table.ParentRelations["ModelComponents_ModelDataSource"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ModelComponents_ModelDataSource"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceTypeNull() {
                return this.IsNull(this.tableModelDataSource.SourceTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceTypeNull() {
                this[this.tableModelDataSource.SourceTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDatabaseNull() {
                return this.IsNull(this.tableModelDataSource.DatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDatabaseNull() {
                this[this.tableModelDataSource.DatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModelComponents_IdNull() {
                return this.IsNull(this.tableModelDataSource.ModelComponents_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModelComponents_IdNull() {
                this[this.tableModelDataSource.ModelComponents_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedTableRow[] GetLinkedTableRows() {
                if ((this.Table.ChildRelations["ModelDataSourceLinkedTables"] == null)) {
                    return new LinkedTableRow[0];
                }
                else {
                    return ((LinkedTableRow[])(base.GetChildRows(this.Table.ChildRelations["ModelDataSourceLinkedTables"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CodeLibraryRow : global::System.Data.DataRow {
            
            private CodeLibraryDataTable tableCodeLibrary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CodeLibraryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCodeLibrary = ((CodeLibraryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableCodeLibrary.NameColumn]));
                }
                set {
                    this[this.tableCodeLibrary.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Path {
                get {
                    return ((string)(this[this.tableCodeLibrary.PathColumn]));
                }
                set {
                    this[this.tableCodeLibrary.PathColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RequiredModelDatabasesRow : global::System.Data.DataRow {
            
            private RequiredModelDatabasesDataTable tableRequiredModelDatabases;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RequiredModelDatabasesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRequiredModelDatabases = ((RequiredModelDatabasesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RequiredModelDatabases_Id {
                get {
                    return ((int)(this[this.tableRequiredModelDatabases.RequiredModelDatabases_IdColumn]));
                }
                set {
                    this[this.tableRequiredModelDatabases.RequiredModelDatabases_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelDatabaseRow[] GetModelDatabaseRows() {
                if ((this.Table.ChildRelations["RequiredAccessDatabases_MasterDatabase"] == null)) {
                    return new ModelDatabaseRow[0];
                }
                else {
                    return ((ModelDatabaseRow[])(base.GetChildRows(this.Table.ChildRelations["RequiredAccessDatabases_MasterDatabase"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ModelDatabaseRow : global::System.Data.DataRow {
            
            private ModelDatabaseDataTable tableModelDatabase;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModelDatabaseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableModelDatabase = ((ModelDatabaseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ModelDatabase_Id {
                get {
                    return ((int)(this[this.tableModelDatabase.ModelDatabase_IdColumn]));
                }
                set {
                    this[this.tableModelDatabase.ModelDatabase_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RequiredModelDatabases_Id {
                get {
                    try {
                        return ((int)(this[this.tableModelDatabase.RequiredModelDatabases_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RequiredModelDatabases_Id\' in table \'ModelDatabase\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableModelDatabase.RequiredModelDatabases_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DatabaseName {
                get {
                    return ((string)(this[this.tableModelDatabase.DatabaseNameColumn]));
                }
                set {
                    this[this.tableModelDatabase.DatabaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MasterPath {
                get {
                    return ((string)(this[this.tableModelDatabase.MasterPathColumn]));
                }
                set {
                    this[this.tableModelDatabase.MasterPathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequiredModelDatabasesRow RequiredModelDatabasesRow {
                get {
                    return ((RequiredModelDatabasesRow)(this.GetParentRow(this.Table.ParentRelations["RequiredAccessDatabases_MasterDatabase"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["RequiredAccessDatabases_MasterDatabase"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequiredModelDatabases_IdNull() {
                return this.IsNull(this.tableModelDatabase.RequiredModelDatabases_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequiredModelDatabases_IdNull() {
                this[this.tableModelDatabase.RequiredModelDatabases_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedTableRow[] GetLinkedTableRows() {
                if ((this.Table.ChildRelations["MasterDatabase_LinkedTables"] == null)) {
                    return new LinkedTableRow[0];
                }
                else {
                    return ((LinkedTableRow[])(base.GetChildRows(this.Table.ChildRelations["MasterDatabase_LinkedTables"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LinkedTableRow : global::System.Data.DataRow {
            
            private LinkedTableDataTable tableLinkedTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkedTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLinkedTable = ((LinkedTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ModelDatabase_Id {
                get {
                    try {
                        return ((int)(this[this.tableLinkedTable.ModelDatabase_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModelDatabase_Id\' in table \'LinkedTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedTable.ModelDatabase_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Link {
                get {
                    return ((string)(this[this.tableLinkedTable.LinkColumn]));
                }
                set {
                    this[this.tableLinkedTable.LinkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelDatabaseRow ModelDatabaseRow {
                get {
                    return ((ModelDatabaseRow)(this.GetParentRow(this.Table.ParentRelations["MasterDatabase_LinkedTables"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MasterDatabase_LinkedTables"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelDataSourceRow ModelDataSourceRow {
                get {
                    return ((ModelDataSourceRow)(this.GetParentRow(this.Table.ParentRelations["ModelDataSourceLinkedTables"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ModelDataSourceLinkedTables"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModelDatabase_IdNull() {
                return this.IsNull(this.tableLinkedTable.ModelDatabase_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModelDatabase_IdNull() {
                this[this.tableLinkedTable.ModelDatabase_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TreeverseRow : global::System.Data.DataRow {
            
            private TreeverseDataTable tableTreeverse;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TreeverseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTreeverse = ((TreeverseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TraceFile {
                get {
                    return ((string)(this[this.tableTreeverse.TraceFileColumn]));
                }
                set {
                    this[this.tableTreeverse.TraceFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkDBSrc {
                get {
                    return ((string)(this[this.tableTreeverse.LinkDBSrcColumn]));
                }
                set {
                    this[this.tableTreeverse.LinkDBSrcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkTblSrc {
                get {
                    return ((string)(this[this.tableTreeverse.LinkTblSrcColumn]));
                }
                set {
                    this[this.tableTreeverse.LinkTblSrcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkField {
                get {
                    return ((string)(this[this.tableTreeverse.LinkFieldColumn]));
                }
                set {
                    this[this.tableTreeverse.LinkFieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USNodeField {
                get {
                    return ((string)(this[this.tableTreeverse.USNodeFieldColumn]));
                }
                set {
                    this[this.tableTreeverse.USNodeFieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSNodeField {
                get {
                    return ((string)(this[this.tableTreeverse.DSNodeFieldColumn]));
                }
                set {
                    this[this.tableTreeverse.DSNodeFieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReachField {
                get {
                    return ((string)(this[this.tableTreeverse.ReachFieldColumn]));
                }
                set {
                    this[this.tableTreeverse.ReachFieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ElementField {
                get {
                    return ((string)(this[this.tableTreeverse.ElementFieldColumn]));
                }
                set {
                    this[this.tableTreeverse.ElementFieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDebugOn {
                get {
                    return ((bool)(this[this.tableTreeverse.IsDebugOnColumn]));
                }
                set {
                    this[this.tableTreeverse.IsDebugOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DebugFile {
                get {
                    return ((string)(this[this.tableTreeverse.DebugFileColumn]));
                }
                set {
                    this[this.tableTreeverse.DebugFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EnableMessages {
                get {
                    return ((string)(this[this.tableTreeverse.EnableMessagesColumn]));
                }
                set {
                    this[this.tableTreeverse.EnableMessagesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkExisting {
                get {
                    return ((string)(this[this.tableTreeverse.LinkExistingColumn]));
                }
                set {
                    this[this.tableTreeverse.LinkExistingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkFuture {
                get {
                    return ((string)(this[this.tableTreeverse.LinkFutureColumn]));
                }
                set {
                    this[this.tableTreeverse.LinkFutureColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RetraceRow : global::System.Data.DataRow {
            
            private RetraceDataTable tableRetrace;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RetraceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRetrace = ((RetraceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TraceFile {
                get {
                    return ((string)(this[this.tableRetrace.TraceFileColumn]));
                }
                set {
                    this[this.tableRetrace.TraceFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkDBSrc {
                get {
                    return ((string)(this[this.tableRetrace.LinkDBSrcColumn]));
                }
                set {
                    this[this.tableRetrace.LinkDBSrcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkTblSrc {
                get {
                    return ((string)(this[this.tableRetrace.LinkTblSrcColumn]));
                }
                set {
                    this[this.tableRetrace.LinkTblSrcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkField {
                get {
                    return ((string)(this[this.tableRetrace.LinkFieldColumn]));
                }
                set {
                    this[this.tableRetrace.LinkFieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USNodeField {
                get {
                    return ((string)(this[this.tableRetrace.USNodeFieldColumn]));
                }
                set {
                    this[this.tableRetrace.USNodeFieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSNodeField {
                get {
                    return ((string)(this[this.tableRetrace.DSNodeFieldColumn]));
                }
                set {
                    this[this.tableRetrace.DSNodeFieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReachField {
                get {
                    return ((string)(this[this.tableRetrace.ReachFieldColumn]));
                }
                set {
                    this[this.tableRetrace.ReachFieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ElementField {
                get {
                    return ((string)(this[this.tableRetrace.ElementFieldColumn]));
                }
                set {
                    this[this.tableRetrace.ElementFieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDebugOn {
                get {
                    return ((bool)(this[this.tableRetrace.IsDebugOnColumn]));
                }
                set {
                    this[this.tableRetrace.IsDebugOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DebugFile {
                get {
                    return ((string)(this[this.tableRetrace.DebugFileColumn]));
                }
                set {
                    this[this.tableRetrace.DebugFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EnableMessages {
                get {
                    return ((string)(this[this.tableRetrace.EnableMessagesColumn]));
                }
                set {
                    this[this.tableRetrace.EnableMessagesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkExisting {
                get {
                    return ((string)(this[this.tableRetrace.LinkExistingColumn]));
                }
                set {
                    this[this.tableRetrace.LinkExistingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkFuture {
                get {
                    return ((string)(this[this.tableRetrace.LinkFutureColumn]));
                }
                set {
                    this[this.tableRetrace.LinkFutureColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TraceLinksRow : global::System.Data.DataRow {
            
            private TraceLinksDataTable tableTraceLinks;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TraceLinksRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTraceLinks = ((TraceLinksDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SnapTolerance {
                get {
                    return ((double)(this[this.tableTraceLinks.SnapToleranceColumn]));
                }
                set {
                    this[this.tableTraceLinks.SnapToleranceColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RootLinksRow : global::System.Data.DataRow {
            
            private RootLinksDataTable tableRootLinks;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RootLinksRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRootLinks = ((RootLinksDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RootLinks_Id {
                get {
                    return ((int)(this[this.tableRootLinks.RootLinks_IdColumn]));
                }
                set {
                    this[this.tableRootLinks.RootLinks_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RootLinkRow[] GetRootLinkRows() {
                if ((this.Table.ChildRelations["RootLinks_RootLink"] == null)) {
                    return new RootLinkRow[0];
                }
                else {
                    return ((RootLinkRow[])(base.GetChildRows(this.Table.ChildRelations["RootLinks_RootLink"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RootLinkRow : global::System.Data.DataRow {
            
            private RootLinkDataTable tableRootLink;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RootLinkRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRootLink = ((RootLinkDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RootLinks_Id {
                get {
                    try {
                        return ((int)(this[this.tableRootLink.RootLinks_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RootLinks_Id\' in table \'RootLink\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRootLink.RootLinks_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MLinkID {
                get {
                    return ((int)(this[this.tableRootLink.MLinkIDColumn]));
                }
                set {
                    this[this.tableRootLink.MLinkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableRootLink.DescriptionColumn]));
                }
                set {
                    this[this.tableRootLink.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RootLinksRow RootLinksRow {
                get {
                    return ((RootLinksRow)(this.GetParentRow(this.Table.ParentRelations["RootLinks_RootLink"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["RootLinks_RootLink"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRootLinks_IdNull() {
                return this.IsNull(this.tableRootLink.RootLinks_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRootLinks_IdNull() {
                this[this.tableRootLink.RootLinks_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StopLinksRow : global::System.Data.DataRow {
            
            private StopLinksDataTable tableStopLinks;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StopLinksRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStopLinks = ((StopLinksDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StopLinks_Id {
                get {
                    return ((int)(this[this.tableStopLinks.StopLinks_IdColumn]));
                }
                set {
                    this[this.tableStopLinks.StopLinks_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopLinkRow[] GetStopLinkRows() {
                if ((this.Table.ChildRelations["StopLinks_StopLink"] == null)) {
                    return new StopLinkRow[0];
                }
                else {
                    return ((StopLinkRow[])(base.GetChildRows(this.Table.ChildRelations["StopLinks_StopLink"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StopLinkRow : global::System.Data.DataRow {
            
            private StopLinkDataTable tableStopLink;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StopLinkRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStopLink = ((StopLinkDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StopLinks_Id {
                get {
                    try {
                        return ((int)(this[this.tableStopLink.StopLinks_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StopLinks_Id\' in table \'StopLink\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStopLink.StopLinks_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MLinkID {
                get {
                    return ((int)(this[this.tableStopLink.MLinkIDColumn]));
                }
                set {
                    this[this.tableStopLink.MLinkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableStopLink.DescriptionColumn]));
                }
                set {
                    this[this.tableStopLink.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopLinksRow StopLinksRow {
                get {
                    return ((StopLinksRow)(this.GetParentRow(this.Table.ParentRelations["StopLinks_StopLink"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["StopLinks_StopLink"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStopLinks_IdNull() {
                return this.IsNull(this.tableStopLink.StopLinks_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStopLinks_IdNull() {
                this[this.tableStopLink.StopLinks_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SimulationFilesRow : global::System.Data.DataRow {
            
            private SimulationFilesDataTable tableSimulationFiles;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SimulationFilesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSimulationFiles = ((SimulationFilesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RunoffDeck {
                get {
                    return ((string)(this[this.tableSimulationFiles.RunoffDeckColumn]));
                }
                set {
                    this[this.tableSimulationFiles.RunoffDeckColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TransportDeck {
                get {
                    return ((string)(this[this.tableSimulationFiles.TransportDeckColumn]));
                }
                set {
                    this[this.tableSimulationFiles.TransportDeckColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IncludedAlternativesRow : global::System.Data.DataRow {
            
            private IncludedAlternativesDataTable tableIncludedAlternatives;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IncludedAlternativesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIncludedAlternatives = ((IncludedAlternativesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IncludedAlternatives_Id {
                get {
                    return ((int)(this[this.tableIncludedAlternatives.IncludedAlternatives_IdColumn]));
                }
                set {
                    this[this.tableIncludedAlternatives.IncludedAlternatives_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AlternativeRow[] GetAlternativeRows() {
                if ((this.Table.ChildRelations["FK_IncludedAlternatives_Alternative"] == null)) {
                    return new AlternativeRow[0];
                }
                else {
                    return ((AlternativeRow[])(base.GetChildRows(this.Table.ChildRelations["FK_IncludedAlternatives_Alternative"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AlternativeRow : global::System.Data.DataRow {
            
            private AlternativeDataTable tableAlternative;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AlternativeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAlternative = ((AlternativeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AltID {
                get {
                    return ((int)(this[this.tableAlternative.AltIDColumn]));
                }
                set {
                    this[this.tableAlternative.AltIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableAlternative.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Alternative\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlternative.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BaseModel {
                get {
                    try {
                        return ((string)(this[this.tableAlternative.BaseModelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseModel\' in table \'Alternative\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlternative.BaseModelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IncludedAlternatives_Id {
                get {
                    try {
                        return ((int)(this[this.tableAlternative.IncludedAlternatives_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IncludedAlternatives_Id\' in table \'Alternative\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAlternative.IncludedAlternatives_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncludedAlternativesRow IncludedAlternativesRow {
                get {
                    return ((IncludedAlternativesRow)(this.GetParentRow(this.Table.ParentRelations["FK_IncludedAlternatives_Alternative"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_IncludedAlternatives_Alternative"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableAlternative.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableAlternative.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseModelNull() {
                return this.IsNull(this.tableAlternative.BaseModelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseModelNull() {
                this[this.tableAlternative.BaseModelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncludedAlternatives_IdNull() {
                return this.IsNull(this.tableAlternative.IncludedAlternatives_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncludedAlternatives_IdNull() {
                this[this.tableAlternative.IncludedAlternatives_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataAccessRow : global::System.Data.DataRow {
            
            private DataAccessDataTable tableDataAccess;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataAccessRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataAccess = ((DataAccessDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DataAccess_Id {
                get {
                    return ((int)(this[this.tableDataAccess.DataAccess_IdColumn]));
                }
                set {
                    this[this.tableDataAccess.DataAccess_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FileName {
                get {
                    try {
                        return ((string)(this[this.tableDataAccess.FileNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FileName\' in table \'DataAccess\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataAccess.FileNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileNameNull() {
                return this.IsNull(this.tableDataAccess.FileNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileNameNull() {
                this[this.tableDataAccess.FileNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataSourceRow[] GetDataSourceRows() {
                if ((this.Table.ChildRelations["FK_DataAccess_DataSource"] == null)) {
                    return new DataSourceRow[0];
                }
                else {
                    return ((DataSourceRow[])(base.GetChildRows(this.Table.ChildRelations["FK_DataAccess_DataSource"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataSourceRow : global::System.Data.DataRow {
            
            private DataSourceDataTable tableDataSource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataSourceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataSource = ((DataSourceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkName {
                get {
                    try {
                        return ((string)(this[this.tableDataSource.LinkNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinkName\' in table \'DataSource\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataSource.LinkNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TableName {
                get {
                    try {
                        return ((string)(this[this.tableDataSource.TableNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TableName\' in table \'DataSource\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataSource.TableNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TableLocation {
                get {
                    try {
                        return ((string)(this[this.tableDataSource.TableLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TableLocation\' in table \'DataSource\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataSource.TableLocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DataAccess_Id {
                get {
                    try {
                        return ((int)(this[this.tableDataSource.DataAccess_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataAccess_Id\' in table \'DataSource\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataSource.DataAccess_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataAccessRow DataAccessRow {
                get {
                    return ((DataAccessRow)(this.GetParentRow(this.Table.ParentRelations["FK_DataAccess_DataSource"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_DataAccess_DataSource"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinkNameNull() {
                return this.IsNull(this.tableDataSource.LinkNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinkNameNull() {
                this[this.tableDataSource.LinkNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTableNameNull() {
                return this.IsNull(this.tableDataSource.TableNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTableNameNull() {
                this[this.tableDataSource.TableNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTableLocationNull() {
                return this.IsNull(this.tableDataSource.TableLocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTableLocationNull() {
                this[this.tableDataSource.TableLocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataAccess_IdNull() {
                return this.IsNull(this.tableDataSource.DataAccess_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataAccess_IdNull() {
                this[this.tableDataSource.DataAccess_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ControlRowChangeEvent : global::System.EventArgs {
            
            private ControlRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlRowChangeEvent(ControlRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ModelStateRowChangeEvent : global::System.EventArgs {
            
            private ModelStateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelStateRowChangeEvent(ModelStateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelStateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AdminRowChangeEvent : global::System.EventArgs {
            
            private AdminRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdminRowChangeEvent(AdminRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdminRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MasterComponentsRowChangeEvent : global::System.EventArgs {
            
            private MasterComponentsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MasterComponentsRowChangeEvent(MasterComponentsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MasterComponentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MasterDataSourceRowChangeEvent : global::System.EventArgs {
            
            private MasterDataSourceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MasterDataSourceRowChangeEvent(MasterDataSourceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MasterDataSourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ModelComponentsRowChangeEvent : global::System.EventArgs {
            
            private ModelComponentsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelComponentsRowChangeEvent(ModelComponentsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelComponentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ModelDataSourceRowChangeEvent : global::System.EventArgs {
            
            private ModelDataSourceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelDataSourceRowChangeEvent(ModelDataSourceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelDataSourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CodeLibraryRowChangeEvent : global::System.EventArgs {
            
            private CodeLibraryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CodeLibraryRowChangeEvent(CodeLibraryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CodeLibraryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RequiredModelDatabasesRowChangeEvent : global::System.EventArgs {
            
            private RequiredModelDatabasesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequiredModelDatabasesRowChangeEvent(RequiredModelDatabasesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequiredModelDatabasesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ModelDatabaseRowChangeEvent : global::System.EventArgs {
            
            private ModelDatabaseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelDatabaseRowChangeEvent(ModelDatabaseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModelDatabaseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LinkedTableRowChangeEvent : global::System.EventArgs {
            
            private LinkedTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedTableRowChangeEvent(LinkedTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TreeverseRowChangeEvent : global::System.EventArgs {
            
            private TreeverseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TreeverseRowChangeEvent(TreeverseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TreeverseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RetraceRowChangeEvent : global::System.EventArgs {
            
            private RetraceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetraceRowChangeEvent(RetraceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RetraceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TraceLinksRowChangeEvent : global::System.EventArgs {
            
            private TraceLinksRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TraceLinksRowChangeEvent(TraceLinksRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TraceLinksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RootLinksRowChangeEvent : global::System.EventArgs {
            
            private RootLinksRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RootLinksRowChangeEvent(RootLinksRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RootLinksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RootLinkRowChangeEvent : global::System.EventArgs {
            
            private RootLinkRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RootLinkRowChangeEvent(RootLinkRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RootLinkRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StopLinksRowChangeEvent : global::System.EventArgs {
            
            private StopLinksRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopLinksRowChangeEvent(StopLinksRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopLinksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StopLinkRowChangeEvent : global::System.EventArgs {
            
            private StopLinkRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopLinkRowChangeEvent(StopLinkRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopLinkRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SimulationFilesRowChangeEvent : global::System.EventArgs {
            
            private SimulationFilesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SimulationFilesRowChangeEvent(SimulationFilesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SimulationFilesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IncludedAlternativesRowChangeEvent : global::System.EventArgs {
            
            private IncludedAlternativesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncludedAlternativesRowChangeEvent(IncludedAlternativesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncludedAlternativesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AlternativeRowChangeEvent : global::System.EventArgs {
            
            private AlternativeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AlternativeRowChangeEvent(AlternativeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AlternativeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataAccessRowChangeEvent : global::System.EventArgs {
            
            private DataAccessRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataAccessRowChangeEvent(DataAccessRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataAccessRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataSourceRowChangeEvent : global::System.EventArgs {
            
            private DataSourceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataSourceRowChangeEvent(DataSourceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataSourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591
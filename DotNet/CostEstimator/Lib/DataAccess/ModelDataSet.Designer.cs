//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SystemsAnalysis.DataAccess {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ModelDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ModelDataSet : global::System.Data.DataSet {
        
        private MdlDscDataTable tableMdlDsc;
        
        private MdlSpecLinksDataTable tableMdlSpecLinks;
        
        private MdlLinksDataTable tableMdlLinks;
        
        private MdlNodesDataTable tableMdlNodes;
        
        private MdlSpecLinkDataDataTable tableMdlSpecLinkData;
        
        private MdlParkingTargetsDataTable tableMdlParkingTargets;
        
        private MdlRoofTargetsDataTable tableMdlRoofTargets;
        
        private MdlStreetTargetsDataTable tableMdlStreetTargets;
        
        private MdlPipXPDataTable tableMdlPipXP;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ModelDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ModelDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["MdlDsc"] != null)) {
                    base.Tables.Add(new MdlDscDataTable(ds.Tables["MdlDsc"]));
                }
                if ((ds.Tables["MdlSpecLinks"] != null)) {
                    base.Tables.Add(new MdlSpecLinksDataTable(ds.Tables["MdlSpecLinks"]));
                }
                if ((ds.Tables["MdlLinks"] != null)) {
                    base.Tables.Add(new MdlLinksDataTable(ds.Tables["MdlLinks"]));
                }
                if ((ds.Tables["MdlNodes"] != null)) {
                    base.Tables.Add(new MdlNodesDataTable(ds.Tables["MdlNodes"]));
                }
                if ((ds.Tables["MdlSpecLinkData"] != null)) {
                    base.Tables.Add(new MdlSpecLinkDataDataTable(ds.Tables["MdlSpecLinkData"]));
                }
                if ((ds.Tables["MdlParkingTargets"] != null)) {
                    base.Tables.Add(new MdlParkingTargetsDataTable(ds.Tables["MdlParkingTargets"]));
                }
                if ((ds.Tables["MdlRoofTargets"] != null)) {
                    base.Tables.Add(new MdlRoofTargetsDataTable(ds.Tables["MdlRoofTargets"]));
                }
                if ((ds.Tables["MdlStreetTargets"] != null)) {
                    base.Tables.Add(new MdlStreetTargetsDataTable(ds.Tables["MdlStreetTargets"]));
                }
                if ((ds.Tables["MdlPipXP"] != null)) {
                    base.Tables.Add(new MdlPipXPDataTable(ds.Tables["MdlPipXP"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MdlDscDataTable MdlDsc {
            get {
                return this.tableMdlDsc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MdlSpecLinksDataTable MdlSpecLinks {
            get {
                return this.tableMdlSpecLinks;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MdlLinksDataTable MdlLinks {
            get {
                return this.tableMdlLinks;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MdlNodesDataTable MdlNodes {
            get {
                return this.tableMdlNodes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MdlSpecLinkDataDataTable MdlSpecLinkData {
            get {
                return this.tableMdlSpecLinkData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MdlParkingTargetsDataTable MdlParkingTargets {
            get {
                return this.tableMdlParkingTargets;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MdlRoofTargetsDataTable MdlRoofTargets {
            get {
                return this.tableMdlRoofTargets;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MdlStreetTargetsDataTable MdlStreetTargets {
            get {
                return this.tableMdlStreetTargets;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MdlPipXPDataTable MdlPipXP {
            get {
                return this.tableMdlPipXP;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ModelDataSet cln = ((ModelDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["MdlDsc"] != null)) {
                    base.Tables.Add(new MdlDscDataTable(ds.Tables["MdlDsc"]));
                }
                if ((ds.Tables["MdlSpecLinks"] != null)) {
                    base.Tables.Add(new MdlSpecLinksDataTable(ds.Tables["MdlSpecLinks"]));
                }
                if ((ds.Tables["MdlLinks"] != null)) {
                    base.Tables.Add(new MdlLinksDataTable(ds.Tables["MdlLinks"]));
                }
                if ((ds.Tables["MdlNodes"] != null)) {
                    base.Tables.Add(new MdlNodesDataTable(ds.Tables["MdlNodes"]));
                }
                if ((ds.Tables["MdlSpecLinkData"] != null)) {
                    base.Tables.Add(new MdlSpecLinkDataDataTable(ds.Tables["MdlSpecLinkData"]));
                }
                if ((ds.Tables["MdlParkingTargets"] != null)) {
                    base.Tables.Add(new MdlParkingTargetsDataTable(ds.Tables["MdlParkingTargets"]));
                }
                if ((ds.Tables["MdlRoofTargets"] != null)) {
                    base.Tables.Add(new MdlRoofTargetsDataTable(ds.Tables["MdlRoofTargets"]));
                }
                if ((ds.Tables["MdlStreetTargets"] != null)) {
                    base.Tables.Add(new MdlStreetTargetsDataTable(ds.Tables["MdlStreetTargets"]));
                }
                if ((ds.Tables["MdlPipXP"] != null)) {
                    base.Tables.Add(new MdlPipXPDataTable(ds.Tables["MdlPipXP"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableMdlDsc = ((MdlDscDataTable)(base.Tables["MdlDsc"]));
            if ((initTable == true)) {
                if ((this.tableMdlDsc != null)) {
                    this.tableMdlDsc.InitVars();
                }
            }
            this.tableMdlSpecLinks = ((MdlSpecLinksDataTable)(base.Tables["MdlSpecLinks"]));
            if ((initTable == true)) {
                if ((this.tableMdlSpecLinks != null)) {
                    this.tableMdlSpecLinks.InitVars();
                }
            }
            this.tableMdlLinks = ((MdlLinksDataTable)(base.Tables["MdlLinks"]));
            if ((initTable == true)) {
                if ((this.tableMdlLinks != null)) {
                    this.tableMdlLinks.InitVars();
                }
            }
            this.tableMdlNodes = ((MdlNodesDataTable)(base.Tables["MdlNodes"]));
            if ((initTable == true)) {
                if ((this.tableMdlNodes != null)) {
                    this.tableMdlNodes.InitVars();
                }
            }
            this.tableMdlSpecLinkData = ((MdlSpecLinkDataDataTable)(base.Tables["MdlSpecLinkData"]));
            if ((initTable == true)) {
                if ((this.tableMdlSpecLinkData != null)) {
                    this.tableMdlSpecLinkData.InitVars();
                }
            }
            this.tableMdlParkingTargets = ((MdlParkingTargetsDataTable)(base.Tables["MdlParkingTargets"]));
            if ((initTable == true)) {
                if ((this.tableMdlParkingTargets != null)) {
                    this.tableMdlParkingTargets.InitVars();
                }
            }
            this.tableMdlRoofTargets = ((MdlRoofTargetsDataTable)(base.Tables["MdlRoofTargets"]));
            if ((initTable == true)) {
                if ((this.tableMdlRoofTargets != null)) {
                    this.tableMdlRoofTargets.InitVars();
                }
            }
            this.tableMdlStreetTargets = ((MdlStreetTargetsDataTable)(base.Tables["MdlStreetTargets"]));
            if ((initTable == true)) {
                if ((this.tableMdlStreetTargets != null)) {
                    this.tableMdlStreetTargets.InitVars();
                }
            }
            this.tableMdlPipXP = ((MdlPipXPDataTable)(base.Tables["MdlPipXP"]));
            if ((initTable == true)) {
                if ((this.tableMdlPipXP != null)) {
                    this.tableMdlPipXP.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ModelDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ModelDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableMdlDsc = new MdlDscDataTable();
            base.Tables.Add(this.tableMdlDsc);
            this.tableMdlSpecLinks = new MdlSpecLinksDataTable();
            base.Tables.Add(this.tableMdlSpecLinks);
            this.tableMdlLinks = new MdlLinksDataTable();
            base.Tables.Add(this.tableMdlLinks);
            this.tableMdlNodes = new MdlNodesDataTable();
            base.Tables.Add(this.tableMdlNodes);
            this.tableMdlSpecLinkData = new MdlSpecLinkDataDataTable();
            base.Tables.Add(this.tableMdlSpecLinkData);
            this.tableMdlParkingTargets = new MdlParkingTargetsDataTable();
            base.Tables.Add(this.tableMdlParkingTargets);
            this.tableMdlRoofTargets = new MdlRoofTargetsDataTable();
            base.Tables.Add(this.tableMdlRoofTargets);
            this.tableMdlStreetTargets = new MdlStreetTargetsDataTable();
            base.Tables.Add(this.tableMdlStreetTargets);
            this.tableMdlPipXP = new MdlPipXPDataTable();
            base.Tables.Add(this.tableMdlPipXP);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMdlDsc() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMdlSpecLinks() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMdlLinks() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMdlNodes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMdlSpecLinkData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMdlParkingTargets() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMdlRoofTargets() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMdlStreetTargets() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMdlPipXP() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ModelDataSet ds = new ModelDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void MdlDscRowChangeEventHandler(object sender, MdlDscRowChangeEvent e);
        
        public delegate void MdlSpecLinksRowChangeEventHandler(object sender, MdlSpecLinksRowChangeEvent e);
        
        public delegate void MdlLinksRowChangeEventHandler(object sender, MdlLinksRowChangeEvent e);
        
        public delegate void MdlNodesRowChangeEventHandler(object sender, MdlNodesRowChangeEvent e);
        
        public delegate void MdlSpecLinkDataRowChangeEventHandler(object sender, MdlSpecLinkDataRowChangeEvent e);
        
        public delegate void MdlParkingTargetsRowChangeEventHandler(object sender, MdlParkingTargetsRowChangeEvent e);
        
        public delegate void MdlRoofTargetsRowChangeEventHandler(object sender, MdlRoofTargetsRowChangeEvent e);
        
        public delegate void MdlStreetTargetsRowChangeEventHandler(object sender, MdlStreetTargetsRowChangeEvent e);
        
        public delegate void MdlPipXPRowChangeEventHandler(object sender, MdlPipXPRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MdlDscDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMapInfoID;
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnDivideID;
            
            private global::System.Data.DataColumn columnDscID;
            
            private global::System.Data.DataColumn columnDiscoSiteID;
            
            private global::System.Data.DataColumn columnDiscoClass;
            
            private global::System.Data.DataColumn columnToLinkSan;
            
            private global::System.Data.DataColumn columnToLinkStorm;
            
            private global::System.Data.DataColumn columnNGTOSan;
            
            private global::System.Data.DataColumn columnNGTOStorm;
            
            private global::System.Data.DataColumn columnPipeFlowTypeSan;
            
            private global::System.Data.DataColumn columnPipeFlowTypeStorm;
            
            private global::System.Data.DataColumn columnSanSwrCrown;
            
            private global::System.Data.DataColumn columnFrac2SwrBeg;
            
            private global::System.Data.DataColumn columnFloodRefElev;
            
            private global::System.Data.DataColumn columnFalseBFRisk;
            
            private global::System.Data.DataColumn columnGridQAQC;
            
            private global::System.Data.DataColumn columnMaxBldGrid;
            
            private global::System.Data.DataColumn columnAvgParcelElev;
            
            private global::System.Data.DataColumn columnEFFMethod;
            
            private global::System.Data.DataColumn columnFFOverride;
            
            private global::System.Data.DataColumn columnOrigFinishFloor;
            
            private global::System.Data.DataColumn columnHGL;
            
            private global::System.Data.DataColumn columnDeltaHGL;
            
            private global::System.Data.DataColumn columnHGLComment;
            
            private global::System.Data.DataColumn columnDataSourceFlags;
            
            private global::System.Data.DataColumn columnZoneEX;
            
            private global::System.Data.DataColumn columnZoneCP;
            
            private global::System.Data.DataColumn columnGenEX;
            
            private global::System.Data.DataColumn columnGenCP;
            
            private global::System.Data.DataColumn columnBaseFlow;
            
            private global::System.Data.DataColumn columnBaseFlowEx;
            
            private global::System.Data.DataColumn columnBaseFlowDM;
            
            private global::System.Data.DataColumn columnICFtRoof;
            
            private global::System.Data.DataColumn columnICFtParking;
            
            private global::System.Data.DataColumn columnICFlag;
            
            private global::System.Data.DataColumn columnImpFractEx;
            
            private global::System.Data.DataColumn columnImpFractCP;
            
            private global::System.Data.DataColumn columnImpFractFB;
            
            private global::System.Data.DataColumn columnAreaFt;
            
            private global::System.Data.DataColumn columnRfAreaFt;
            
            private global::System.Data.DataColumn columnPkAreaFt;
            
            private global::System.Data.DataColumn columnTraceVisit;
            
            private global::System.Data.DataColumn columnDscPickedFlag;
            
            private global::System.Data.DataColumn columnUpdateAtts;
            
            private global::System.Data.DataColumn columnc_RFtosurfFt;
            
            private global::System.Data.DataColumn columnc_PKtosurfFt;
            
            private global::System.Data.DataColumn columnc_RFtosurfImpFt;
            
            private global::System.Data.DataColumn columnc_PKtosurfImpFt;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnSewerable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlDscDataTable() {
                this.TableName = "MdlDsc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MdlDscDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MdlDscDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapInfoIDColumn {
                get {
                    return this.columnMapInfoID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DivideIDColumn {
                get {
                    return this.columnDivideID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DscIDColumn {
                get {
                    return this.columnDscID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiscoSiteIDColumn {
                get {
                    return this.columnDiscoSiteID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiscoClassColumn {
                get {
                    return this.columnDiscoClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToLinkSanColumn {
                get {
                    return this.columnToLinkSan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToLinkStormColumn {
                get {
                    return this.columnToLinkStorm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NGTOSanColumn {
                get {
                    return this.columnNGTOSan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NGTOStormColumn {
                get {
                    return this.columnNGTOStorm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeFlowTypeSanColumn {
                get {
                    return this.columnPipeFlowTypeSan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeFlowTypeStormColumn {
                get {
                    return this.columnPipeFlowTypeStorm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SanSwrCrownColumn {
                get {
                    return this.columnSanSwrCrown;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Frac2SwrBegColumn {
                get {
                    return this.columnFrac2SwrBeg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FloodRefElevColumn {
                get {
                    return this.columnFloodRefElev;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FalseBFRiskColumn {
                get {
                    return this.columnFalseBFRisk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GridQAQCColumn {
                get {
                    return this.columnGridQAQC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxBldGridColumn {
                get {
                    return this.columnMaxBldGrid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AvgParcelElevColumn {
                get {
                    return this.columnAvgParcelElev;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EFFMethodColumn {
                get {
                    return this.columnEFFMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FFOverrideColumn {
                get {
                    return this.columnFFOverride;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrigFinishFloorColumn {
                get {
                    return this.columnOrigFinishFloor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HGLColumn {
                get {
                    return this.columnHGL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeltaHGLColumn {
                get {
                    return this.columnDeltaHGL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HGLCommentColumn {
                get {
                    return this.columnHGLComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataSourceFlagsColumn {
                get {
                    return this.columnDataSourceFlags;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZoneEXColumn {
                get {
                    return this.columnZoneEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZoneCPColumn {
                get {
                    return this.columnZoneCP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenEXColumn {
                get {
                    return this.columnGenEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenCPColumn {
                get {
                    return this.columnGenCP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseFlowColumn {
                get {
                    return this.columnBaseFlow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseFlowExColumn {
                get {
                    return this.columnBaseFlowEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseFlowDMColumn {
                get {
                    return this.columnBaseFlowDM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ICFtRoofColumn {
                get {
                    return this.columnICFtRoof;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ICFtParkingColumn {
                get {
                    return this.columnICFtParking;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ICFlagColumn {
                get {
                    return this.columnICFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImpFractExColumn {
                get {
                    return this.columnImpFractEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImpFractCPColumn {
                get {
                    return this.columnImpFractCP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImpFractFBColumn {
                get {
                    return this.columnImpFractFB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AreaFtColumn {
                get {
                    return this.columnAreaFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RfAreaFtColumn {
                get {
                    return this.columnRfAreaFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PkAreaFtColumn {
                get {
                    return this.columnPkAreaFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TraceVisitColumn {
                get {
                    return this.columnTraceVisit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DscPickedFlagColumn {
                get {
                    return this.columnDscPickedFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateAttsColumn {
                get {
                    return this.columnUpdateAtts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn c_RFtosurfFtColumn {
                get {
                    return this.columnc_RFtosurfFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn c_PKtosurfFtColumn {
                get {
                    return this.columnc_PKtosurfFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn c_RFtosurfImpFtColumn {
                get {
                    return this.columnc_RFtosurfImpFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn c_PKtosurfImpFtColumn {
                get {
                    return this.columnc_PKtosurfImpFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SewerableColumn {
                get {
                    return this.columnSewerable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlDscRow this[int index] {
                get {
                    return ((MdlDscRow)(this.Rows[index]));
                }
            }
            
            public event MdlDscRowChangeEventHandler MdlDscRowChanging;
            
            public event MdlDscRowChangeEventHandler MdlDscRowChanged;
            
            public event MdlDscRowChangeEventHandler MdlDscRowDeleting;
            
            public event MdlDscRowChangeEventHandler MdlDscRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMdlDscRow(MdlDscRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlDscRow AddMdlDscRow(
                        int ParcelID, 
                        int DivideID, 
                        int DscID, 
                        int DiscoSiteID, 
                        string DiscoClass, 
                        int ToLinkSan, 
                        int ToLinkStorm, 
                        string NGTOSan, 
                        string NGTOStorm, 
                        string PipeFlowTypeSan, 
                        string PipeFlowTypeStorm, 
                        double SanSwrCrown, 
                        double Frac2SwrBeg, 
                        double FloodRefElev, 
                        bool FalseBFRisk, 
                        string GridQAQC, 
                        double MaxBldGrid, 
                        double AvgParcelElev, 
                        string EFFMethod, 
                        string FFOverride, 
                        double OrigFinishFloor, 
                        double HGL, 
                        double DeltaHGL, 
                        string HGLComment, 
                        string DataSourceFlags, 
                        string ZoneEX, 
                        string ZoneCP, 
                        string GenEX, 
                        string GenCP, 
                        double BaseFlow, 
                        double BaseFlowEx, 
                        double BaseFlowDM, 
                        int ICFtRoof, 
                        int ICFtParking, 
                        string ICFlag, 
                        double ImpFractEx, 
                        double ImpFractCP, 
                        double ImpFractFB, 
                        double AreaFt, 
                        double RfAreaFt, 
                        double PkAreaFt, 
                        string TraceVisit, 
                        string DscPickedFlag, 
                        bool UpdateAtts, 
                        int c_RFtosurfFt, 
                        int c_PKtosurfFt, 
                        int c_RFtosurfImpFt, 
                        int c_PKtosurfImpFt, 
                        bool IsActive, 
                        int Sewerable) {
                MdlDscRow rowMdlDscRow = ((MdlDscRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ParcelID,
                        DivideID,
                        DscID,
                        DiscoSiteID,
                        DiscoClass,
                        ToLinkSan,
                        ToLinkStorm,
                        NGTOSan,
                        NGTOStorm,
                        PipeFlowTypeSan,
                        PipeFlowTypeStorm,
                        SanSwrCrown,
                        Frac2SwrBeg,
                        FloodRefElev,
                        FalseBFRisk,
                        GridQAQC,
                        MaxBldGrid,
                        AvgParcelElev,
                        EFFMethod,
                        FFOverride,
                        OrigFinishFloor,
                        HGL,
                        DeltaHGL,
                        HGLComment,
                        DataSourceFlags,
                        ZoneEX,
                        ZoneCP,
                        GenEX,
                        GenCP,
                        BaseFlow,
                        BaseFlowEx,
                        BaseFlowDM,
                        ICFtRoof,
                        ICFtParking,
                        ICFlag,
                        ImpFractEx,
                        ImpFractCP,
                        ImpFractFB,
                        AreaFt,
                        RfAreaFt,
                        PkAreaFt,
                        TraceVisit,
                        DscPickedFlag,
                        UpdateAtts,
                        c_RFtosurfFt,
                        c_PKtosurfFt,
                        c_RFtosurfImpFt,
                        c_PKtosurfImpFt,
                        IsActive,
                        Sewerable};
                rowMdlDscRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMdlDscRow);
                return rowMdlDscRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlDscRow FindByMapInfoID(int MapInfoID) {
                return ((MdlDscRow)(this.Rows.Find(new object[] {
                            MapInfoID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MdlDscDataTable cln = ((MdlDscDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MdlDscDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMapInfoID = base.Columns["MapInfoID"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnDivideID = base.Columns["DivideID"];
                this.columnDscID = base.Columns["DscID"];
                this.columnDiscoSiteID = base.Columns["DiscoSiteID"];
                this.columnDiscoClass = base.Columns["DiscoClass"];
                this.columnToLinkSan = base.Columns["ToLinkSan"];
                this.columnToLinkStorm = base.Columns["ToLinkStorm"];
                this.columnNGTOSan = base.Columns["NGTOSan"];
                this.columnNGTOStorm = base.Columns["NGTOStorm"];
                this.columnPipeFlowTypeSan = base.Columns["PipeFlowTypeSan"];
                this.columnPipeFlowTypeStorm = base.Columns["PipeFlowTypeStorm"];
                this.columnSanSwrCrown = base.Columns["SanSwrCrown"];
                this.columnFrac2SwrBeg = base.Columns["Frac2SwrBeg"];
                this.columnFloodRefElev = base.Columns["FloodRefElev"];
                this.columnFalseBFRisk = base.Columns["FalseBFRisk"];
                this.columnGridQAQC = base.Columns["GridQAQC"];
                this.columnMaxBldGrid = base.Columns["MaxBldGrid"];
                this.columnAvgParcelElev = base.Columns["AvgParcelElev"];
                this.columnEFFMethod = base.Columns["EFFMethod"];
                this.columnFFOverride = base.Columns["FFOverride"];
                this.columnOrigFinishFloor = base.Columns["OrigFinishFloor"];
                this.columnHGL = base.Columns["HGL"];
                this.columnDeltaHGL = base.Columns["DeltaHGL"];
                this.columnHGLComment = base.Columns["HGLComment"];
                this.columnDataSourceFlags = base.Columns["DataSourceFlags"];
                this.columnZoneEX = base.Columns["ZoneEX"];
                this.columnZoneCP = base.Columns["ZoneCP"];
                this.columnGenEX = base.Columns["GenEX"];
                this.columnGenCP = base.Columns["GenCP"];
                this.columnBaseFlow = base.Columns["BaseFlow"];
                this.columnBaseFlowEx = base.Columns["BaseFlowEx"];
                this.columnBaseFlowDM = base.Columns["BaseFlowDM"];
                this.columnICFtRoof = base.Columns["ICFtRoof"];
                this.columnICFtParking = base.Columns["ICFtParking"];
                this.columnICFlag = base.Columns["ICFlag"];
                this.columnImpFractEx = base.Columns["ImpFractEx"];
                this.columnImpFractCP = base.Columns["ImpFractCP"];
                this.columnImpFractFB = base.Columns["ImpFractFB"];
                this.columnAreaFt = base.Columns["AreaFt"];
                this.columnRfAreaFt = base.Columns["RfAreaFt"];
                this.columnPkAreaFt = base.Columns["PkAreaFt"];
                this.columnTraceVisit = base.Columns["TraceVisit"];
                this.columnDscPickedFlag = base.Columns["DscPickedFlag"];
                this.columnUpdateAtts = base.Columns["UpdateAtts"];
                this.columnc_RFtosurfFt = base.Columns["c_RFtosurfFt"];
                this.columnc_PKtosurfFt = base.Columns["c_PKtosurfFt"];
                this.columnc_RFtosurfImpFt = base.Columns["c_RFtosurfImpFt"];
                this.columnc_PKtosurfImpFt = base.Columns["c_PKtosurfImpFt"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnSewerable = base.Columns["Sewerable"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMapInfoID = new global::System.Data.DataColumn("MapInfoID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapInfoID);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnDivideID = new global::System.Data.DataColumn("DivideID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDivideID);
                this.columnDscID = new global::System.Data.DataColumn("DscID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDscID);
                this.columnDiscoSiteID = new global::System.Data.DataColumn("DiscoSiteID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscoSiteID);
                this.columnDiscoClass = new global::System.Data.DataColumn("DiscoClass", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscoClass);
                this.columnToLinkSan = new global::System.Data.DataColumn("ToLinkSan", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToLinkSan);
                this.columnToLinkStorm = new global::System.Data.DataColumn("ToLinkStorm", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToLinkStorm);
                this.columnNGTOSan = new global::System.Data.DataColumn("NGTOSan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGTOSan);
                this.columnNGTOStorm = new global::System.Data.DataColumn("NGTOStorm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGTOStorm);
                this.columnPipeFlowTypeSan = new global::System.Data.DataColumn("PipeFlowTypeSan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeFlowTypeSan);
                this.columnPipeFlowTypeStorm = new global::System.Data.DataColumn("PipeFlowTypeStorm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeFlowTypeStorm);
                this.columnSanSwrCrown = new global::System.Data.DataColumn("SanSwrCrown", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSanSwrCrown);
                this.columnFrac2SwrBeg = new global::System.Data.DataColumn("Frac2SwrBeg", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrac2SwrBeg);
                this.columnFloodRefElev = new global::System.Data.DataColumn("FloodRefElev", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFloodRefElev);
                this.columnFalseBFRisk = new global::System.Data.DataColumn("FalseBFRisk", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFalseBFRisk);
                this.columnGridQAQC = new global::System.Data.DataColumn("GridQAQC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGridQAQC);
                this.columnMaxBldGrid = new global::System.Data.DataColumn("MaxBldGrid", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxBldGrid);
                this.columnAvgParcelElev = new global::System.Data.DataColumn("AvgParcelElev", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAvgParcelElev);
                this.columnEFFMethod = new global::System.Data.DataColumn("EFFMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEFFMethod);
                this.columnFFOverride = new global::System.Data.DataColumn("FFOverride", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFFOverride);
                this.columnOrigFinishFloor = new global::System.Data.DataColumn("OrigFinishFloor", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrigFinishFloor);
                this.columnHGL = new global::System.Data.DataColumn("HGL", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHGL);
                this.columnDeltaHGL = new global::System.Data.DataColumn("DeltaHGL", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeltaHGL);
                this.columnHGLComment = new global::System.Data.DataColumn("HGLComment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHGLComment);
                this.columnDataSourceFlags = new global::System.Data.DataColumn("DataSourceFlags", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataSourceFlags);
                this.columnZoneEX = new global::System.Data.DataColumn("ZoneEX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZoneEX);
                this.columnZoneCP = new global::System.Data.DataColumn("ZoneCP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZoneCP);
                this.columnGenEX = new global::System.Data.DataColumn("GenEX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenEX);
                this.columnGenCP = new global::System.Data.DataColumn("GenCP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenCP);
                this.columnBaseFlow = new global::System.Data.DataColumn("BaseFlow", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseFlow);
                this.columnBaseFlowEx = new global::System.Data.DataColumn("BaseFlowEx", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseFlowEx);
                this.columnBaseFlowDM = new global::System.Data.DataColumn("BaseFlowDM", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseFlowDM);
                this.columnICFtRoof = new global::System.Data.DataColumn("ICFtRoof", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnICFtRoof);
                this.columnICFtParking = new global::System.Data.DataColumn("ICFtParking", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnICFtParking);
                this.columnICFlag = new global::System.Data.DataColumn("ICFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnICFlag);
                this.columnImpFractEx = new global::System.Data.DataColumn("ImpFractEx", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImpFractEx);
                this.columnImpFractCP = new global::System.Data.DataColumn("ImpFractCP", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImpFractCP);
                this.columnImpFractFB = new global::System.Data.DataColumn("ImpFractFB", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImpFractFB);
                this.columnAreaFt = new global::System.Data.DataColumn("AreaFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAreaFt);
                this.columnRfAreaFt = new global::System.Data.DataColumn("RfAreaFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRfAreaFt);
                this.columnPkAreaFt = new global::System.Data.DataColumn("PkAreaFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPkAreaFt);
                this.columnTraceVisit = new global::System.Data.DataColumn("TraceVisit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTraceVisit);
                this.columnDscPickedFlag = new global::System.Data.DataColumn("DscPickedFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDscPickedFlag);
                this.columnUpdateAtts = new global::System.Data.DataColumn("UpdateAtts", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateAtts);
                this.columnc_RFtosurfFt = new global::System.Data.DataColumn("c_RFtosurfFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnc_RFtosurfFt);
                this.columnc_PKtosurfFt = new global::System.Data.DataColumn("c_PKtosurfFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnc_PKtosurfFt);
                this.columnc_RFtosurfImpFt = new global::System.Data.DataColumn("c_RFtosurfImpFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnc_RFtosurfImpFt);
                this.columnc_PKtosurfImpFt = new global::System.Data.DataColumn("c_PKtosurfImpFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnc_PKtosurfImpFt);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnSewerable = new global::System.Data.DataColumn("Sewerable", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSewerable);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMapInfoID}, true));
                this.columnMapInfoID.AutoIncrement = true;
                this.columnMapInfoID.AllowDBNull = false;
                this.columnMapInfoID.Unique = true;
                this.columnMapInfoID.Caption = "MAPINFO_ID";
                this.columnDscID.Caption = "DSCID";
                this.columnDiscoSiteID.Caption = "discoSiteID";
                this.columnDiscoClass.MaxLength = 1;
                this.columnNGTOSan.MaxLength = 6;
                this.columnNGTOStorm.MaxLength = 6;
                this.columnPipeFlowTypeSan.MaxLength = 1;
                this.columnPipeFlowTypeStorm.MaxLength = 1;
                this.columnGridQAQC.MaxLength = 10;
                this.columnEFFMethod.MaxLength = 15;
                this.columnFFOverride.MaxLength = 15;
                this.columnHGLComment.MaxLength = 20;
                this.columnDataSourceFlags.MaxLength = 100;
                this.columnZoneEX.MaxLength = 5;
                this.columnZoneCP.MaxLength = 5;
                this.columnGenEX.MaxLength = 3;
                this.columnGenCP.MaxLength = 3;
                this.columnBaseFlowEx.Caption = "BaseFlowEX";
                this.columnICFlag.MaxLength = 8;
                this.columnImpFractEx.Caption = "ImpFractEX";
                this.columnTraceVisit.MaxLength = 1;
                this.columnDscPickedFlag.Caption = "DSCPickedFlag";
                this.columnDscPickedFlag.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlDscRow NewMdlDscRow() {
                return ((MdlDscRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MdlDscRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MdlDscRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MdlDscRowChanged != null)) {
                    this.MdlDscRowChanged(this, new MdlDscRowChangeEvent(((MdlDscRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MdlDscRowChanging != null)) {
                    this.MdlDscRowChanging(this, new MdlDscRowChangeEvent(((MdlDscRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MdlDscRowDeleted != null)) {
                    this.MdlDscRowDeleted(this, new MdlDscRowChangeEvent(((MdlDscRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MdlDscRowDeleting != null)) {
                    this.MdlDscRowDeleting(this, new MdlDscRowChangeEvent(((MdlDscRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMdlDscRow(MdlDscRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelDataSet ds = new ModelDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MdlDscDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MdlSpecLinksDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMapInfoID;
            
            private global::System.Data.DataColumn columnNode;
            
            private global::System.Data.DataColumn columnToLinkID;
            
            private global::System.Data.DataColumn columnToLinkIndex;
            
            private global::System.Data.DataColumn columnSpecLinkType;
            
            private global::System.Data.DataColumn columnMSpecLinkID;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnSLID;
            
            private global::System.Data.DataColumn columnSLNode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlSpecLinksDataTable() {
                this.TableName = "MdlSpecLinks";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MdlSpecLinksDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MdlSpecLinksDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapInfoIDColumn {
                get {
                    return this.columnMapInfoID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NodeColumn {
                get {
                    return this.columnNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToLinkIDColumn {
                get {
                    return this.columnToLinkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToLinkIndexColumn {
                get {
                    return this.columnToLinkIndex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpecLinkTypeColumn {
                get {
                    return this.columnSpecLinkType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MSpecLinkIDColumn {
                get {
                    return this.columnMSpecLinkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SLIDColumn {
                get {
                    return this.columnSLID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SLNodeColumn {
                get {
                    return this.columnSLNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlSpecLinksRow this[int index] {
                get {
                    return ((MdlSpecLinksRow)(this.Rows[index]));
                }
            }
            
            public event MdlSpecLinksRowChangeEventHandler MdlSpecLinksRowChanging;
            
            public event MdlSpecLinksRowChangeEventHandler MdlSpecLinksRowChanged;
            
            public event MdlSpecLinksRowChangeEventHandler MdlSpecLinksRowDeleting;
            
            public event MdlSpecLinksRowChangeEventHandler MdlSpecLinksRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMdlSpecLinksRow(MdlSpecLinksRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlSpecLinksRow AddMdlSpecLinksRow(string Node, int ToLinkID, int ToLinkIndex, string SpecLinkType, int MSpecLinkID, bool IsActive, int SLID, string SLNode) {
                MdlSpecLinksRow rowMdlSpecLinksRow = ((MdlSpecLinksRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Node,
                        ToLinkID,
                        ToLinkIndex,
                        SpecLinkType,
                        MSpecLinkID,
                        IsActive,
                        SLID,
                        SLNode};
                rowMdlSpecLinksRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMdlSpecLinksRow);
                return rowMdlSpecLinksRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlSpecLinksRow FindByMapInfoID(int MapInfoID) {
                return ((MdlSpecLinksRow)(this.Rows.Find(new object[] {
                            MapInfoID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MdlSpecLinksDataTable cln = ((MdlSpecLinksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MdlSpecLinksDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMapInfoID = base.Columns["MapInfoID"];
                this.columnNode = base.Columns["Node"];
                this.columnToLinkID = base.Columns["ToLinkID"];
                this.columnToLinkIndex = base.Columns["ToLinkIndex"];
                this.columnSpecLinkType = base.Columns["SpecLinkType"];
                this.columnMSpecLinkID = base.Columns["MSpecLinkID"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnSLID = base.Columns["SLID"];
                this.columnSLNode = base.Columns["SLNode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMapInfoID = new global::System.Data.DataColumn("MapInfoID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapInfoID);
                this.columnNode = new global::System.Data.DataColumn("Node", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNode);
                this.columnToLinkID = new global::System.Data.DataColumn("ToLinkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToLinkID);
                this.columnToLinkIndex = new global::System.Data.DataColumn("ToLinkIndex", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToLinkIndex);
                this.columnSpecLinkType = new global::System.Data.DataColumn("SpecLinkType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecLinkType);
                this.columnMSpecLinkID = new global::System.Data.DataColumn("MSpecLinkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMSpecLinkID);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnSLID = new global::System.Data.DataColumn("SLID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLID);
                this.columnSLNode = new global::System.Data.DataColumn("SLNode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLNode);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMapInfoID}, true));
                this.columnMapInfoID.AutoIncrement = true;
                this.columnMapInfoID.AllowDBNull = false;
                this.columnMapInfoID.Unique = true;
                this.columnMapInfoID.Caption = "MAPINFO_ID";
                this.columnNode.MaxLength = 6;
                this.columnToLinkIndex.Caption = "ToLinkNDX";
                this.columnSpecLinkType.MaxLength = 2;
                this.columnSLNode.MaxLength = 6;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlSpecLinksRow NewMdlSpecLinksRow() {
                return ((MdlSpecLinksRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MdlSpecLinksRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MdlSpecLinksRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MdlSpecLinksRowChanged != null)) {
                    this.MdlSpecLinksRowChanged(this, new MdlSpecLinksRowChangeEvent(((MdlSpecLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MdlSpecLinksRowChanging != null)) {
                    this.MdlSpecLinksRowChanging(this, new MdlSpecLinksRowChangeEvent(((MdlSpecLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MdlSpecLinksRowDeleted != null)) {
                    this.MdlSpecLinksRowDeleted(this, new MdlSpecLinksRowChangeEvent(((MdlSpecLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MdlSpecLinksRowDeleting != null)) {
                    this.MdlSpecLinksRowDeleting(this, new MdlSpecLinksRowChangeEvent(((MdlSpecLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMdlSpecLinksRow(MdlSpecLinksRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelDataSet ds = new ModelDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MdlSpecLinksDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MdlLinksDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMapinfoID;
            
            private global::System.Data.DataColumn columnLinkID;
            
            private global::System.Data.DataColumn columnUSNode;
            
            private global::System.Data.DataColumn columnDSNode;
            
            private global::System.Data.DataColumn columnLinkType;
            
            private global::System.Data.DataColumn columnPipeFlowType;
            
            private global::System.Data.DataColumn columnMLinkID;
            
            private global::System.Data.DataColumn columnSimLinkID;
            
            private global::System.Data.DataColumn columnCompKey;
            
            private global::System.Data.DataColumn columnLength;
            
            private global::System.Data.DataColumn columnDiamWidth;
            
            private global::System.Data.DataColumn columnHeight;
            
            private global::System.Data.DataColumn columnPipeShape;
            
            private global::System.Data.DataColumn columnMaterial;
            
            private global::System.Data.DataColumn columnUpsDpth;
            
            private global::System.Data.DataColumn columnDwnDpth;
            
            private global::System.Data.DataColumn columnUsIE;
            
            private global::System.Data.DataColumn columnDsIE;
            
            private global::System.Data.DataColumn columnAsBuilt;
            
            private global::System.Data.DataColumn columnInstdate;
            
            private global::System.Data.DataColumn columnFromX;
            
            private global::System.Data.DataColumn columnFromY;
            
            private global::System.Data.DataColumn columnToX;
            
            private global::System.Data.DataColumn columnToY;
            
            private global::System.Data.DataColumn columnRoughness;
            
            private global::System.Data.DataColumn columnLinkReach;
            
            private global::System.Data.DataColumn columnReachElement;
            
            private global::System.Data.DataColumn columnDataFlagSynth;
            
            private global::System.Data.DataColumn columnDataQual;
            
            private global::System.Data.DataColumn columnIsSpecLink;
            
            private global::System.Data.DataColumn columnHServStat;
            
            private global::System.Data.DataColumn columnTraceVisit;
            
            private global::System.Data.DataColumn columnDataSource;
            
            private global::System.Data.DataColumn columnSource;
            
            private global::System.Data.DataColumn columnIsActive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlLinksDataTable() {
                this.TableName = "MdlLinks";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MdlLinksDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MdlLinksDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapinfoIDColumn {
                get {
                    return this.columnMapinfoID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkIDColumn {
                get {
                    return this.columnLinkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USNodeColumn {
                get {
                    return this.columnUSNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSNodeColumn {
                get {
                    return this.columnDSNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkTypeColumn {
                get {
                    return this.columnLinkType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeFlowTypeColumn {
                get {
                    return this.columnPipeFlowType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MLinkIDColumn {
                get {
                    return this.columnMLinkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SimLinkIDColumn {
                get {
                    return this.columnSimLinkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompKeyColumn {
                get {
                    return this.columnCompKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiamWidthColumn {
                get {
                    return this.columnDiamWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeightColumn {
                get {
                    return this.columnHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeShapeColumn {
                get {
                    return this.columnPipeShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialColumn {
                get {
                    return this.columnMaterial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpsDpthColumn {
                get {
                    return this.columnUpsDpth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DwnDpthColumn {
                get {
                    return this.columnDwnDpth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsIEColumn {
                get {
                    return this.columnUsIE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DsIEColumn {
                get {
                    return this.columnDsIE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AsBuiltColumn {
                get {
                    return this.columnAsBuilt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstdateColumn {
                get {
                    return this.columnInstdate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromXColumn {
                get {
                    return this.columnFromX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromYColumn {
                get {
                    return this.columnFromY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToXColumn {
                get {
                    return this.columnToX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToYColumn {
                get {
                    return this.columnToY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RoughnessColumn {
                get {
                    return this.columnRoughness;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkReachColumn {
                get {
                    return this.columnLinkReach;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReachElementColumn {
                get {
                    return this.columnReachElement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataFlagSynthColumn {
                get {
                    return this.columnDataFlagSynth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataQualColumn {
                get {
                    return this.columnDataQual;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSpecLinkColumn {
                get {
                    return this.columnIsSpecLink;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HServStatColumn {
                get {
                    return this.columnHServStat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TraceVisitColumn {
                get {
                    return this.columnTraceVisit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataSourceColumn {
                get {
                    return this.columnDataSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlLinksRow this[int index] {
                get {
                    return ((MdlLinksRow)(this.Rows[index]));
                }
            }
            
            public event MdlLinksRowChangeEventHandler MdlLinksRowChanging;
            
            public event MdlLinksRowChangeEventHandler MdlLinksRowChanged;
            
            public event MdlLinksRowChangeEventHandler MdlLinksRowDeleting;
            
            public event MdlLinksRowChangeEventHandler MdlLinksRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMdlLinksRow(MdlLinksRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlLinksRow AddMdlLinksRow(
                        int LinkID, 
                        string USNode, 
                        string DSNode, 
                        string LinkType, 
                        string PipeFlowType, 
                        int MLinkID, 
                        string SimLinkID, 
                        int CompKey, 
                        double Length, 
                        double DiamWidth, 
                        double Height, 
                        string PipeShape, 
                        string Material, 
                        double UpsDpth, 
                        double DwnDpth, 
                        double UsIE, 
                        double DsIE, 
                        string AsBuilt, 
                        System.DateTime Instdate, 
                        double FromX, 
                        double FromY, 
                        double ToX, 
                        double ToY, 
                        double Roughness, 
                        string LinkReach, 
                        int ReachElement, 
                        int DataFlagSynth, 
                        string DataQual, 
                        bool IsSpecLink, 
                        string HServStat, 
                        string TraceVisit, 
                        string DataSource, 
                        string Source, 
                        bool IsActive) {
                MdlLinksRow rowMdlLinksRow = ((MdlLinksRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        LinkID,
                        USNode,
                        DSNode,
                        LinkType,
                        PipeFlowType,
                        MLinkID,
                        SimLinkID,
                        CompKey,
                        Length,
                        DiamWidth,
                        Height,
                        PipeShape,
                        Material,
                        UpsDpth,
                        DwnDpth,
                        UsIE,
                        DsIE,
                        AsBuilt,
                        Instdate,
                        FromX,
                        FromY,
                        ToX,
                        ToY,
                        Roughness,
                        LinkReach,
                        ReachElement,
                        DataFlagSynth,
                        DataQual,
                        IsSpecLink,
                        HServStat,
                        TraceVisit,
                        DataSource,
                        Source,
                        IsActive};
                rowMdlLinksRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMdlLinksRow);
                return rowMdlLinksRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlLinksRow FindByMapinfoID(int MapinfoID) {
                return ((MdlLinksRow)(this.Rows.Find(new object[] {
                            MapinfoID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MdlLinksDataTable cln = ((MdlLinksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MdlLinksDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMapinfoID = base.Columns["MapinfoID"];
                this.columnLinkID = base.Columns["LinkID"];
                this.columnUSNode = base.Columns["USNode"];
                this.columnDSNode = base.Columns["DSNode"];
                this.columnLinkType = base.Columns["LinkType"];
                this.columnPipeFlowType = base.Columns["PipeFlowType"];
                this.columnMLinkID = base.Columns["MLinkID"];
                this.columnSimLinkID = base.Columns["SimLinkID"];
                this.columnCompKey = base.Columns["CompKey"];
                this.columnLength = base.Columns["Length"];
                this.columnDiamWidth = base.Columns["DiamWidth"];
                this.columnHeight = base.Columns["Height"];
                this.columnPipeShape = base.Columns["PipeShape"];
                this.columnMaterial = base.Columns["Material"];
                this.columnUpsDpth = base.Columns["UpsDpth"];
                this.columnDwnDpth = base.Columns["DwnDpth"];
                this.columnUsIE = base.Columns["UsIE"];
                this.columnDsIE = base.Columns["DsIE"];
                this.columnAsBuilt = base.Columns["AsBuilt"];
                this.columnInstdate = base.Columns["Instdate"];
                this.columnFromX = base.Columns["FromX"];
                this.columnFromY = base.Columns["FromY"];
                this.columnToX = base.Columns["ToX"];
                this.columnToY = base.Columns["ToY"];
                this.columnRoughness = base.Columns["Roughness"];
                this.columnLinkReach = base.Columns["LinkReach"];
                this.columnReachElement = base.Columns["ReachElement"];
                this.columnDataFlagSynth = base.Columns["DataFlagSynth"];
                this.columnDataQual = base.Columns["DataQual"];
                this.columnIsSpecLink = base.Columns["IsSpecLink"];
                this.columnHServStat = base.Columns["HServStat"];
                this.columnTraceVisit = base.Columns["TraceVisit"];
                this.columnDataSource = base.Columns["DataSource"];
                this.columnSource = base.Columns["Source"];
                this.columnIsActive = base.Columns["IsActive"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMapinfoID = new global::System.Data.DataColumn("MapinfoID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapinfoID);
                this.columnLinkID = new global::System.Data.DataColumn("LinkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkID);
                this.columnUSNode = new global::System.Data.DataColumn("USNode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSNode);
                this.columnDSNode = new global::System.Data.DataColumn("DSNode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSNode);
                this.columnLinkType = new global::System.Data.DataColumn("LinkType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkType);
                this.columnPipeFlowType = new global::System.Data.DataColumn("PipeFlowType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeFlowType);
                this.columnMLinkID = new global::System.Data.DataColumn("MLinkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMLinkID);
                this.columnSimLinkID = new global::System.Data.DataColumn("SimLinkID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSimLinkID);
                this.columnCompKey = new global::System.Data.DataColumn("CompKey", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompKey);
                this.columnLength = new global::System.Data.DataColumn("Length", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLength);
                this.columnDiamWidth = new global::System.Data.DataColumn("DiamWidth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiamWidth);
                this.columnHeight = new global::System.Data.DataColumn("Height", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeight);
                this.columnPipeShape = new global::System.Data.DataColumn("PipeShape", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeShape);
                this.columnMaterial = new global::System.Data.DataColumn("Material", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterial);
                this.columnUpsDpth = new global::System.Data.DataColumn("UpsDpth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpsDpth);
                this.columnDwnDpth = new global::System.Data.DataColumn("DwnDpth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDwnDpth);
                this.columnUsIE = new global::System.Data.DataColumn("UsIE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsIE);
                this.columnDsIE = new global::System.Data.DataColumn("DsIE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDsIE);
                this.columnAsBuilt = new global::System.Data.DataColumn("AsBuilt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAsBuilt);
                this.columnInstdate = new global::System.Data.DataColumn("Instdate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstdate);
                this.columnFromX = new global::System.Data.DataColumn("FromX", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromX);
                this.columnFromY = new global::System.Data.DataColumn("FromY", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromY);
                this.columnToX = new global::System.Data.DataColumn("ToX", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToX);
                this.columnToY = new global::System.Data.DataColumn("ToY", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToY);
                this.columnRoughness = new global::System.Data.DataColumn("Roughness", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoughness);
                this.columnLinkReach = new global::System.Data.DataColumn("LinkReach", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkReach);
                this.columnReachElement = new global::System.Data.DataColumn("ReachElement", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReachElement);
                this.columnDataFlagSynth = new global::System.Data.DataColumn("DataFlagSynth", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataFlagSynth);
                this.columnDataQual = new global::System.Data.DataColumn("DataQual", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataQual);
                this.columnIsSpecLink = new global::System.Data.DataColumn("IsSpecLink", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSpecLink);
                this.columnHServStat = new global::System.Data.DataColumn("HServStat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHServStat);
                this.columnTraceVisit = new global::System.Data.DataColumn("TraceVisit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTraceVisit);
                this.columnDataSource = new global::System.Data.DataColumn("DataSource", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataSource);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMapinfoID}, true));
                this.columnMapinfoID.AutoIncrement = true;
                this.columnMapinfoID.AllowDBNull = false;
                this.columnMapinfoID.Unique = true;
                this.columnMapinfoID.Caption = "MAPINFO_ID";
                this.columnUSNode.MaxLength = 6;
                this.columnDSNode.MaxLength = 6;
                this.columnLinkType.MaxLength = 2;
                this.columnPipeFlowType.MaxLength = 1;
                this.columnSimLinkID.MaxLength = 20;
                this.columnPipeShape.MaxLength = 4;
                this.columnMaterial.MaxLength = 6;
                this.columnUpsDpth.Caption = "upsdpth";
                this.columnDwnDpth.Caption = "dwndpth";
                this.columnUsIE.Caption = "USIE";
                this.columnDsIE.Caption = "DSIE";
                this.columnAsBuilt.MaxLength = 14;
                this.columnLinkReach.MaxLength = 254;
                this.columnDataQual.MaxLength = 15;
                this.columnHServStat.MaxLength = 10;
                this.columnTraceVisit.MaxLength = 1;
                this.columnDataSource.MaxLength = 1;
                this.columnSource.MaxLength = 254;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlLinksRow NewMdlLinksRow() {
                return ((MdlLinksRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MdlLinksRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MdlLinksRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MdlLinksRowChanged != null)) {
                    this.MdlLinksRowChanged(this, new MdlLinksRowChangeEvent(((MdlLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MdlLinksRowChanging != null)) {
                    this.MdlLinksRowChanging(this, new MdlLinksRowChangeEvent(((MdlLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MdlLinksRowDeleted != null)) {
                    this.MdlLinksRowDeleted(this, new MdlLinksRowChangeEvent(((MdlLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MdlLinksRowDeleting != null)) {
                    this.MdlLinksRowDeleting(this, new MdlLinksRowChangeEvent(((MdlLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMdlLinksRow(MdlLinksRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelDataSet ds = new ModelDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MdlLinksDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MdlNodesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMapInfoID;
            
            private global::System.Data.DataColumn columnNode;
            
            private global::System.Data.DataColumn columnXCoord;
            
            private global::System.Data.DataColumn columnYCoord;
            
            private global::System.Data.DataColumn columnNodeType;
            
            private global::System.Data.DataColumn columnGrndElev;
            
            private global::System.Data.DataColumn columnHasSpecNode;
            
            private global::System.Data.DataColumn columnHasSpecLink;
            
            private global::System.Data.DataColumn columnGageID;
            
            private global::System.Data.DataColumn columnTraceVisit;
            
            private global::System.Data.DataColumn columnIsActive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlNodesDataTable() {
                this.TableName = "MdlNodes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MdlNodesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MdlNodesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapInfoIDColumn {
                get {
                    return this.columnMapInfoID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NodeColumn {
                get {
                    return this.columnNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XCoordColumn {
                get {
                    return this.columnXCoord;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YCoordColumn {
                get {
                    return this.columnYCoord;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NodeTypeColumn {
                get {
                    return this.columnNodeType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrndElevColumn {
                get {
                    return this.columnGrndElev;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasSpecNodeColumn {
                get {
                    return this.columnHasSpecNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasSpecLinkColumn {
                get {
                    return this.columnHasSpecLink;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GageIDColumn {
                get {
                    return this.columnGageID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TraceVisitColumn {
                get {
                    return this.columnTraceVisit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlNodesRow this[int index] {
                get {
                    return ((MdlNodesRow)(this.Rows[index]));
                }
            }
            
            public event MdlNodesRowChangeEventHandler MdlNodesRowChanging;
            
            public event MdlNodesRowChangeEventHandler MdlNodesRowChanged;
            
            public event MdlNodesRowChangeEventHandler MdlNodesRowDeleting;
            
            public event MdlNodesRowChangeEventHandler MdlNodesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMdlNodesRow(MdlNodesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlNodesRow AddMdlNodesRow(string Node, double XCoord, double YCoord, string NodeType, double GrndElev, string HasSpecNode, string HasSpecLink, string GageID, string TraceVisit, bool IsActive) {
                MdlNodesRow rowMdlNodesRow = ((MdlNodesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Node,
                        XCoord,
                        YCoord,
                        NodeType,
                        GrndElev,
                        HasSpecNode,
                        HasSpecLink,
                        GageID,
                        TraceVisit,
                        IsActive};
                rowMdlNodesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMdlNodesRow);
                return rowMdlNodesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlNodesRow FindByMapInfoID(int MapInfoID) {
                return ((MdlNodesRow)(this.Rows.Find(new object[] {
                            MapInfoID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MdlNodesDataTable cln = ((MdlNodesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MdlNodesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMapInfoID = base.Columns["MapInfoID"];
                this.columnNode = base.Columns["Node"];
                this.columnXCoord = base.Columns["XCoord"];
                this.columnYCoord = base.Columns["YCoord"];
                this.columnNodeType = base.Columns["NodeType"];
                this.columnGrndElev = base.Columns["GrndElev"];
                this.columnHasSpecNode = base.Columns["HasSpecNode"];
                this.columnHasSpecLink = base.Columns["HasSpecLink"];
                this.columnGageID = base.Columns["GageID"];
                this.columnTraceVisit = base.Columns["TraceVisit"];
                this.columnIsActive = base.Columns["IsActive"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMapInfoID = new global::System.Data.DataColumn("MapInfoID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapInfoID);
                this.columnNode = new global::System.Data.DataColumn("Node", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNode);
                this.columnXCoord = new global::System.Data.DataColumn("XCoord", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXCoord);
                this.columnYCoord = new global::System.Data.DataColumn("YCoord", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYCoord);
                this.columnNodeType = new global::System.Data.DataColumn("NodeType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNodeType);
                this.columnGrndElev = new global::System.Data.DataColumn("GrndElev", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrndElev);
                this.columnHasSpecNode = new global::System.Data.DataColumn("HasSpecNode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasSpecNode);
                this.columnHasSpecLink = new global::System.Data.DataColumn("HasSpecLink", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasSpecLink);
                this.columnGageID = new global::System.Data.DataColumn("GageID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGageID);
                this.columnTraceVisit = new global::System.Data.DataColumn("TraceVisit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTraceVisit);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMapInfoID}, true));
                this.columnMapInfoID.AutoIncrement = true;
                this.columnMapInfoID.AllowDBNull = false;
                this.columnMapInfoID.Unique = true;
                this.columnMapInfoID.Caption = "MAPINFO_ID";
                this.columnNode.MaxLength = 6;
                this.columnNodeType.MaxLength = 6;
                this.columnHasSpecNode.MaxLength = 1;
                this.columnHasSpecLink.MaxLength = 1;
                this.columnGageID.MaxLength = 8;
                this.columnTraceVisit.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlNodesRow NewMdlNodesRow() {
                return ((MdlNodesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MdlNodesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MdlNodesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MdlNodesRowChanged != null)) {
                    this.MdlNodesRowChanged(this, new MdlNodesRowChangeEvent(((MdlNodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MdlNodesRowChanging != null)) {
                    this.MdlNodesRowChanging(this, new MdlNodesRowChangeEvent(((MdlNodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MdlNodesRowDeleted != null)) {
                    this.MdlNodesRowDeleted(this, new MdlNodesRowChangeEvent(((MdlNodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MdlNodesRowDeleting != null)) {
                    this.MdlNodesRowDeleting(this, new MdlNodesRowChangeEvent(((MdlNodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMdlNodesRow(MdlNodesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelDataSet ds = new ModelDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MdlNodesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MdlSpecLinkDataDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMapInfoID;
            
            private global::System.Data.DataColumn columnNode;
            
            private global::System.Data.DataColumn columnToLinkID;
            
            private global::System.Data.DataColumn columnToLinkNDX;
            
            private global::System.Data.DataColumn columnTag;
            
            private global::System.Data.DataColumn columnTValue;
            
            private global::System.Data.DataColumn columnNValue;
            
            private global::System.Data.DataColumn columnSLID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlSpecLinkDataDataTable() {
                this.TableName = "MdlSpecLinkData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MdlSpecLinkDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MdlSpecLinkDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapInfoIDColumn {
                get {
                    return this.columnMapInfoID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NodeColumn {
                get {
                    return this.columnNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToLinkIDColumn {
                get {
                    return this.columnToLinkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToLinkNDXColumn {
                get {
                    return this.columnToLinkNDX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TagColumn {
                get {
                    return this.columnTag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TValueColumn {
                get {
                    return this.columnTValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NValueColumn {
                get {
                    return this.columnNValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SLIDColumn {
                get {
                    return this.columnSLID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlSpecLinkDataRow this[int index] {
                get {
                    return ((MdlSpecLinkDataRow)(this.Rows[index]));
                }
            }
            
            public event MdlSpecLinkDataRowChangeEventHandler MdlSpecLinkDataRowChanging;
            
            public event MdlSpecLinkDataRowChangeEventHandler MdlSpecLinkDataRowChanged;
            
            public event MdlSpecLinkDataRowChangeEventHandler MdlSpecLinkDataRowDeleting;
            
            public event MdlSpecLinkDataRowChangeEventHandler MdlSpecLinkDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMdlSpecLinkDataRow(MdlSpecLinkDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlSpecLinkDataRow AddMdlSpecLinkDataRow(string Node, int ToLinkID, int ToLinkNDX, string Tag, string TValue, double NValue, int SLID) {
                MdlSpecLinkDataRow rowMdlSpecLinkDataRow = ((MdlSpecLinkDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Node,
                        ToLinkID,
                        ToLinkNDX,
                        Tag,
                        TValue,
                        NValue,
                        SLID};
                rowMdlSpecLinkDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMdlSpecLinkDataRow);
                return rowMdlSpecLinkDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlSpecLinkDataRow FindByMapInfoID(int MapInfoID) {
                return ((MdlSpecLinkDataRow)(this.Rows.Find(new object[] {
                            MapInfoID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MdlSpecLinkDataDataTable cln = ((MdlSpecLinkDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MdlSpecLinkDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMapInfoID = base.Columns["MapInfoID"];
                this.columnNode = base.Columns["Node"];
                this.columnToLinkID = base.Columns["ToLinkID"];
                this.columnToLinkNDX = base.Columns["ToLinkNDX"];
                this.columnTag = base.Columns["Tag"];
                this.columnTValue = base.Columns["TValue"];
                this.columnNValue = base.Columns["NValue"];
                this.columnSLID = base.Columns["SLID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMapInfoID = new global::System.Data.DataColumn("MapInfoID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapInfoID);
                this.columnNode = new global::System.Data.DataColumn("Node", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNode);
                this.columnToLinkID = new global::System.Data.DataColumn("ToLinkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToLinkID);
                this.columnToLinkNDX = new global::System.Data.DataColumn("ToLinkNDX", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToLinkNDX);
                this.columnTag = new global::System.Data.DataColumn("Tag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTag);
                this.columnTValue = new global::System.Data.DataColumn("TValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTValue);
                this.columnNValue = new global::System.Data.DataColumn("NValue", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNValue);
                this.columnSLID = new global::System.Data.DataColumn("SLID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMapInfoID}, true));
                this.columnMapInfoID.AutoIncrement = true;
                this.columnMapInfoID.AllowDBNull = false;
                this.columnMapInfoID.Unique = true;
                this.columnMapInfoID.Caption = "MAPINFO_ID";
                this.columnNode.MaxLength = 6;
                this.columnTag.MaxLength = 15;
                this.columnTValue.MaxLength = 30;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlSpecLinkDataRow NewMdlSpecLinkDataRow() {
                return ((MdlSpecLinkDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MdlSpecLinkDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MdlSpecLinkDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MdlSpecLinkDataRowChanged != null)) {
                    this.MdlSpecLinkDataRowChanged(this, new MdlSpecLinkDataRowChangeEvent(((MdlSpecLinkDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MdlSpecLinkDataRowChanging != null)) {
                    this.MdlSpecLinkDataRowChanging(this, new MdlSpecLinkDataRowChangeEvent(((MdlSpecLinkDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MdlSpecLinkDataRowDeleted != null)) {
                    this.MdlSpecLinkDataRowDeleted(this, new MdlSpecLinkDataRowChangeEvent(((MdlSpecLinkDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MdlSpecLinkDataRowDeleting != null)) {
                    this.MdlSpecLinkDataRowDeleting(this, new MdlSpecLinkDataRowChangeEvent(((MdlSpecLinkDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMdlSpecLinkDataRow(MdlSpecLinkDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelDataSet ds = new ModelDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MdlSpecLinkDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MdlParkingTargetsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMAPINFO_ID;
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnDivideID;
            
            private global::System.Data.DataColumn columnEXICFtParking;
            
            private global::System.Data.DataColumn columnEXPkAreaFt;
            
            private global::System.Data.DataColumn columnParkingTargetArea;
            
            private global::System.Data.DataColumn columnNGTO_Direct;
            
            private global::System.Data.DataColumn columnNGTO_Surface;
            
            private global::System.Data.DataColumn columnNGTOParking;
            
            private global::System.Data.DataColumn columnEvaluated;
            
            private global::System.Data.DataColumn columnInlets;
            
            private global::System.Data.DataColumn columnParking_Spaces;
            
            private global::System.Data.DataColumn columnPerc_Space_Used;
            
            private global::System.Data.DataColumn columnDrainage;
            
            private global::System.Data.DataColumn columnNGTO;
            
            private global::System.Data.DataColumn columnControllable;
            
            private global::System.Data.DataColumn columnFractionControllable;
            
            private global::System.Data.DataColumn columnDifficulty;
            
            private global::System.Data.DataColumn columnParkingEffDisc;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnFraction2Drywell;
            
            private global::System.Data.DataColumn columnBuildModelIC;
            
            private global::System.Data.DataColumn columnSource;
            
            private global::System.Data.DataColumn columnAppendDate;
            
            private global::System.Data.DataColumn columnICID;
            
            private global::System.Data.DataColumn columnConstructed;
            
            private global::System.Data.DataColumn columnFocusArea;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlParkingTargetsDataTable() {
                this.TableName = "MdlParkingTargets";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MdlParkingTargetsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MdlParkingTargetsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAPINFO_IDColumn {
                get {
                    return this.columnMAPINFO_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DivideIDColumn {
                get {
                    return this.columnDivideID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXICFtParkingColumn {
                get {
                    return this.columnEXICFtParking;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXPkAreaFtColumn {
                get {
                    return this.columnEXPkAreaFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParkingTargetAreaColumn {
                get {
                    return this.columnParkingTargetArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NGTO_DirectColumn {
                get {
                    return this.columnNGTO_Direct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NGTO_SurfaceColumn {
                get {
                    return this.columnNGTO_Surface;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NGTOParkingColumn {
                get {
                    return this.columnNGTOParking;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EvaluatedColumn {
                get {
                    return this.columnEvaluated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InletsColumn {
                get {
                    return this.columnInlets;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Parking_SpacesColumn {
                get {
                    return this.columnParking_Spaces;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Perc_Space_UsedColumn {
                get {
                    return this.columnPerc_Space_Used;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DrainageColumn {
                get {
                    return this.columnDrainage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NGTOColumn {
                get {
                    return this.columnNGTO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ControllableColumn {
                get {
                    return this.columnControllable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FractionControllableColumn {
                get {
                    return this.columnFractionControllable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DifficultyColumn {
                get {
                    return this.columnDifficulty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParkingEffDiscColumn {
                get {
                    return this.columnParkingEffDisc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Fraction2DrywellColumn {
                get {
                    return this.columnFraction2Drywell;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuildModelICColumn {
                get {
                    return this.columnBuildModelIC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppendDateColumn {
                get {
                    return this.columnAppendDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ICIDColumn {
                get {
                    return this.columnICID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConstructedColumn {
                get {
                    return this.columnConstructed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FocusAreaColumn {
                get {
                    return this.columnFocusArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlParkingTargetsRow this[int index] {
                get {
                    return ((MdlParkingTargetsRow)(this.Rows[index]));
                }
            }
            
            public event MdlParkingTargetsRowChangeEventHandler MdlParkingTargetsRowChanging;
            
            public event MdlParkingTargetsRowChangeEventHandler MdlParkingTargetsRowChanged;
            
            public event MdlParkingTargetsRowChangeEventHandler MdlParkingTargetsRowDeleting;
            
            public event MdlParkingTargetsRowChangeEventHandler MdlParkingTargetsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMdlParkingTargetsRow(MdlParkingTargetsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlParkingTargetsRow AddMdlParkingTargetsRow(
                        int ParcelID, 
                        short DivideID, 
                        int EXICFtParking, 
                        int EXPkAreaFt, 
                        int ParkingTargetArea, 
                        string NGTO_Direct, 
                        string NGTO_Surface, 
                        string NGTOParking, 
                        bool Evaluated, 
                        bool Inlets, 
                        int Parking_Spaces, 
                        int Perc_Space_Used, 
                        string Drainage, 
                        string NGTO, 
                        string Controllable, 
                        double FractionControllable, 
                        short Difficulty, 
                        double ParkingEffDisc, 
                        string Comments, 
                        double Fraction2Drywell, 
                        bool BuildModelIC, 
                        string Source, 
                        string AppendDate, 
                        int ICID, 
                        int Constructed, 
                        string FocusArea) {
                MdlParkingTargetsRow rowMdlParkingTargetsRow = ((MdlParkingTargetsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ParcelID,
                        DivideID,
                        EXICFtParking,
                        EXPkAreaFt,
                        ParkingTargetArea,
                        NGTO_Direct,
                        NGTO_Surface,
                        NGTOParking,
                        Evaluated,
                        Inlets,
                        Parking_Spaces,
                        Perc_Space_Used,
                        Drainage,
                        NGTO,
                        Controllable,
                        FractionControllable,
                        Difficulty,
                        ParkingEffDisc,
                        Comments,
                        Fraction2Drywell,
                        BuildModelIC,
                        Source,
                        AppendDate,
                        ICID,
                        Constructed,
                        FocusArea};
                rowMdlParkingTargetsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMdlParkingTargetsRow);
                return rowMdlParkingTargetsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlParkingTargetsRow FindByMAPINFO_ID(int MAPINFO_ID) {
                return ((MdlParkingTargetsRow)(this.Rows.Find(new object[] {
                            MAPINFO_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MdlParkingTargetsDataTable cln = ((MdlParkingTargetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MdlParkingTargetsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMAPINFO_ID = base.Columns["MAPINFO_ID"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnDivideID = base.Columns["DivideID"];
                this.columnEXICFtParking = base.Columns["EXICFtParking"];
                this.columnEXPkAreaFt = base.Columns["EXPkAreaFt"];
                this.columnParkingTargetArea = base.Columns["ParkingTargetArea"];
                this.columnNGTO_Direct = base.Columns["NGTO_Direct"];
                this.columnNGTO_Surface = base.Columns["NGTO_Surface"];
                this.columnNGTOParking = base.Columns["NGTOParking"];
                this.columnEvaluated = base.Columns["Evaluated"];
                this.columnInlets = base.Columns["Inlets"];
                this.columnParking_Spaces = base.Columns["Parking_Spaces"];
                this.columnPerc_Space_Used = base.Columns["Perc_Space_Used"];
                this.columnDrainage = base.Columns["Drainage"];
                this.columnNGTO = base.Columns["NGTO"];
                this.columnControllable = base.Columns["Controllable"];
                this.columnFractionControllable = base.Columns["FractionControllable"];
                this.columnDifficulty = base.Columns["Difficulty"];
                this.columnParkingEffDisc = base.Columns["ParkingEffDisc"];
                this.columnComments = base.Columns["Comments"];
                this.columnFraction2Drywell = base.Columns["Fraction2Drywell"];
                this.columnBuildModelIC = base.Columns["BuildModelIC"];
                this.columnSource = base.Columns["Source"];
                this.columnAppendDate = base.Columns["AppendDate"];
                this.columnICID = base.Columns["ICID"];
                this.columnConstructed = base.Columns["Constructed"];
                this.columnFocusArea = base.Columns["FocusArea"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMAPINFO_ID = new global::System.Data.DataColumn("MAPINFO_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAPINFO_ID);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnDivideID = new global::System.Data.DataColumn("DivideID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDivideID);
                this.columnEXICFtParking = new global::System.Data.DataColumn("EXICFtParking", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXICFtParking);
                this.columnEXPkAreaFt = new global::System.Data.DataColumn("EXPkAreaFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXPkAreaFt);
                this.columnParkingTargetArea = new global::System.Data.DataColumn("ParkingTargetArea", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParkingTargetArea);
                this.columnNGTO_Direct = new global::System.Data.DataColumn("NGTO_Direct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGTO_Direct);
                this.columnNGTO_Surface = new global::System.Data.DataColumn("NGTO_Surface", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGTO_Surface);
                this.columnNGTOParking = new global::System.Data.DataColumn("NGTOParking", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGTOParking);
                this.columnEvaluated = new global::System.Data.DataColumn("Evaluated", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEvaluated);
                this.columnInlets = new global::System.Data.DataColumn("Inlets", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInlets);
                this.columnParking_Spaces = new global::System.Data.DataColumn("Parking_Spaces", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParking_Spaces);
                this.columnPerc_Space_Used = new global::System.Data.DataColumn("Perc_Space_Used", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPerc_Space_Used);
                this.columnDrainage = new global::System.Data.DataColumn("Drainage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDrainage);
                this.columnNGTO = new global::System.Data.DataColumn("NGTO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGTO);
                this.columnControllable = new global::System.Data.DataColumn("Controllable", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnControllable);
                this.columnFractionControllable = new global::System.Data.DataColumn("FractionControllable", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFractionControllable);
                this.columnDifficulty = new global::System.Data.DataColumn("Difficulty", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDifficulty);
                this.columnParkingEffDisc = new global::System.Data.DataColumn("ParkingEffDisc", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParkingEffDisc);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnFraction2Drywell = new global::System.Data.DataColumn("Fraction2Drywell", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFraction2Drywell);
                this.columnBuildModelIC = new global::System.Data.DataColumn("BuildModelIC", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildModelIC);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
                this.columnAppendDate = new global::System.Data.DataColumn("AppendDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppendDate);
                this.columnICID = new global::System.Data.DataColumn("ICID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnICID);
                this.columnConstructed = new global::System.Data.DataColumn("Constructed", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConstructed);
                this.columnFocusArea = new global::System.Data.DataColumn("FocusArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFocusArea);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMAPINFO_ID}, true));
                this.columnMAPINFO_ID.AutoIncrement = true;
                this.columnMAPINFO_ID.AllowDBNull = false;
                this.columnMAPINFO_ID.Unique = true;
                this.columnNGTO_Direct.MaxLength = 7;
                this.columnNGTO_Surface.MaxLength = 7;
                this.columnNGTOParking.MaxLength = 7;
                this.columnDrainage.MaxLength = 30;
                this.columnNGTO.MaxLength = 7;
                this.columnControllable.MaxLength = 1;
                this.columnComments.MaxLength = 254;
                this.columnSource.MaxLength = 50;
                this.columnAppendDate.MaxLength = 17;
                this.columnFocusArea.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlParkingTargetsRow NewMdlParkingTargetsRow() {
                return ((MdlParkingTargetsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MdlParkingTargetsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MdlParkingTargetsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MdlParkingTargetsRowChanged != null)) {
                    this.MdlParkingTargetsRowChanged(this, new MdlParkingTargetsRowChangeEvent(((MdlParkingTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MdlParkingTargetsRowChanging != null)) {
                    this.MdlParkingTargetsRowChanging(this, new MdlParkingTargetsRowChangeEvent(((MdlParkingTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MdlParkingTargetsRowDeleted != null)) {
                    this.MdlParkingTargetsRowDeleted(this, new MdlParkingTargetsRowChangeEvent(((MdlParkingTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MdlParkingTargetsRowDeleting != null)) {
                    this.MdlParkingTargetsRowDeleting(this, new MdlParkingTargetsRowChangeEvent(((MdlParkingTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMdlParkingTargetsRow(MdlParkingTargetsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelDataSet ds = new ModelDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MdlParkingTargetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MdlRoofTargetsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMAPINFO_ID;
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnDivideID;
            
            private global::System.Data.DataColumn columnNGTORoof;
            
            private global::System.Data.DataColumn columnEXICFtRoof;
            
            private global::System.Data.DataColumn columnEXRfAreaFt;
            
            private global::System.Data.DataColumn columnExternalDS;
            
            private global::System.Data.DataColumn columnDSTotal;
            
            private global::System.Data.DataColumn columnEXtoVeg;
            
            private global::System.Data.DataColumn columnEXtoStreet;
            
            private global::System.Data.DataColumn columnEXtoPlanter;
            
            private global::System.Data.DataColumn columnEXtoBioretention;
            
            private global::System.Data.DataColumn columnEXtoDrywell;
            
            private global::System.Data.DataColumn columnEXtoEcoroof;
            
            private global::System.Data.DataColumn columnDStoVeg;
            
            private global::System.Data.DataColumn columnDStoStreet;
            
            private global::System.Data.DataColumn columnDStoPlanter;
            
            private global::System.Data.DataColumn columnDStoBioretention;
            
            private global::System.Data.DataColumn columnDStoDrywell;
            
            private global::System.Data.DataColumn columnDStoEcoroof;
            
            private global::System.Data.DataColumn columnDSUncontrollable;
            
            private global::System.Data.DataColumn columnLandscapeAvailable;
            
            private global::System.Data.DataColumn columnFractionDrained;
            
            private global::System.Data.DataColumn columnDifficulty;
            
            private global::System.Data.DataColumn columnRoofEffDisc;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnPlantersOK;
            
            private global::System.Data.DataColumn columnBioretentionOK;
            
            private global::System.Data.DataColumn columnBuildModelIC;
            
            private global::System.Data.DataColumn columnSource;
            
            private global::System.Data.DataColumn columnAppendDate;
            
            private global::System.Data.DataColumn columnICID;
            
            private global::System.Data.DataColumn columnConstructed;
            
            private global::System.Data.DataColumn columnFocusArea;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlRoofTargetsDataTable() {
                this.TableName = "MdlRoofTargets";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MdlRoofTargetsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MdlRoofTargetsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAPINFO_IDColumn {
                get {
                    return this.columnMAPINFO_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DivideIDColumn {
                get {
                    return this.columnDivideID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NGTORoofColumn {
                get {
                    return this.columnNGTORoof;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXICFtRoofColumn {
                get {
                    return this.columnEXICFtRoof;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXRfAreaFtColumn {
                get {
                    return this.columnEXRfAreaFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExternalDSColumn {
                get {
                    return this.columnExternalDS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSTotalColumn {
                get {
                    return this.columnDSTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXtoVegColumn {
                get {
                    return this.columnEXtoVeg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXtoStreetColumn {
                get {
                    return this.columnEXtoStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXtoPlanterColumn {
                get {
                    return this.columnEXtoPlanter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXtoBioretentionColumn {
                get {
                    return this.columnEXtoBioretention;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXtoDrywellColumn {
                get {
                    return this.columnEXtoDrywell;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXtoEcoroofColumn {
                get {
                    return this.columnEXtoEcoroof;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DStoVegColumn {
                get {
                    return this.columnDStoVeg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DStoStreetColumn {
                get {
                    return this.columnDStoStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DStoPlanterColumn {
                get {
                    return this.columnDStoPlanter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DStoBioretentionColumn {
                get {
                    return this.columnDStoBioretention;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DStoDrywellColumn {
                get {
                    return this.columnDStoDrywell;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DStoEcoroofColumn {
                get {
                    return this.columnDStoEcoroof;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSUncontrollableColumn {
                get {
                    return this.columnDSUncontrollable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandscapeAvailableColumn {
                get {
                    return this.columnLandscapeAvailable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FractionDrainedColumn {
                get {
                    return this.columnFractionDrained;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DifficultyColumn {
                get {
                    return this.columnDifficulty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RoofEffDiscColumn {
                get {
                    return this.columnRoofEffDisc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlantersOKColumn {
                get {
                    return this.columnPlantersOK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BioretentionOKColumn {
                get {
                    return this.columnBioretentionOK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuildModelICColumn {
                get {
                    return this.columnBuildModelIC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppendDateColumn {
                get {
                    return this.columnAppendDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ICIDColumn {
                get {
                    return this.columnICID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConstructedColumn {
                get {
                    return this.columnConstructed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FocusAreaColumn {
                get {
                    return this.columnFocusArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlRoofTargetsRow this[int index] {
                get {
                    return ((MdlRoofTargetsRow)(this.Rows[index]));
                }
            }
            
            public event MdlRoofTargetsRowChangeEventHandler MdlRoofTargetsRowChanging;
            
            public event MdlRoofTargetsRowChangeEventHandler MdlRoofTargetsRowChanged;
            
            public event MdlRoofTargetsRowChangeEventHandler MdlRoofTargetsRowDeleting;
            
            public event MdlRoofTargetsRowChangeEventHandler MdlRoofTargetsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMdlRoofTargetsRow(MdlRoofTargetsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlRoofTargetsRow AddMdlRoofTargetsRow(
                        int ParcelID, 
                        int DivideID, 
                        string NGTORoof, 
                        int EXICFtRoof, 
                        int EXRfAreaFt, 
                        bool ExternalDS, 
                        short DSTotal, 
                        short EXtoVeg, 
                        short EXtoStreet, 
                        short EXtoPlanter, 
                        short EXtoBioretention, 
                        short EXtoDrywell, 
                        short EXtoEcoroof, 
                        short DStoVeg, 
                        short DStoStreet, 
                        short DStoPlanter, 
                        short DStoBioretention, 
                        short DStoDrywell, 
                        short DStoEcoroof, 
                        short DSUncontrollable, 
                        bool LandscapeAvailable, 
                        double FractionDrained, 
                        short Difficulty, 
                        double RoofEffDisc, 
                        string Comments, 
                        bool PlantersOK, 
                        bool BioretentionOK, 
                        bool BuildModelIC, 
                        string Source, 
                        string AppendDate, 
                        int ICID, 
                        int Constructed, 
                        string FocusArea) {
                MdlRoofTargetsRow rowMdlRoofTargetsRow = ((MdlRoofTargetsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ParcelID,
                        DivideID,
                        NGTORoof,
                        EXICFtRoof,
                        EXRfAreaFt,
                        ExternalDS,
                        DSTotal,
                        EXtoVeg,
                        EXtoStreet,
                        EXtoPlanter,
                        EXtoBioretention,
                        EXtoDrywell,
                        EXtoEcoroof,
                        DStoVeg,
                        DStoStreet,
                        DStoPlanter,
                        DStoBioretention,
                        DStoDrywell,
                        DStoEcoroof,
                        DSUncontrollable,
                        LandscapeAvailable,
                        FractionDrained,
                        Difficulty,
                        RoofEffDisc,
                        Comments,
                        PlantersOK,
                        BioretentionOK,
                        BuildModelIC,
                        Source,
                        AppendDate,
                        ICID,
                        Constructed,
                        FocusArea};
                rowMdlRoofTargetsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMdlRoofTargetsRow);
                return rowMdlRoofTargetsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlRoofTargetsRow FindByMAPINFO_ID(int MAPINFO_ID) {
                return ((MdlRoofTargetsRow)(this.Rows.Find(new object[] {
                            MAPINFO_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MdlRoofTargetsDataTable cln = ((MdlRoofTargetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MdlRoofTargetsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMAPINFO_ID = base.Columns["MAPINFO_ID"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnDivideID = base.Columns["DivideID"];
                this.columnNGTORoof = base.Columns["NGTORoof"];
                this.columnEXICFtRoof = base.Columns["EXICFtRoof"];
                this.columnEXRfAreaFt = base.Columns["EXRfAreaFt"];
                this.columnExternalDS = base.Columns["ExternalDS"];
                this.columnDSTotal = base.Columns["DSTotal"];
                this.columnEXtoVeg = base.Columns["EXtoVeg"];
                this.columnEXtoStreet = base.Columns["EXtoStreet"];
                this.columnEXtoPlanter = base.Columns["EXtoPlanter"];
                this.columnEXtoBioretention = base.Columns["EXtoBioretention"];
                this.columnEXtoDrywell = base.Columns["EXtoDrywell"];
                this.columnEXtoEcoroof = base.Columns["EXtoEcoroof"];
                this.columnDStoVeg = base.Columns["DStoVeg"];
                this.columnDStoStreet = base.Columns["DStoStreet"];
                this.columnDStoPlanter = base.Columns["DStoPlanter"];
                this.columnDStoBioretention = base.Columns["DStoBioretention"];
                this.columnDStoDrywell = base.Columns["DStoDrywell"];
                this.columnDStoEcoroof = base.Columns["DStoEcoroof"];
                this.columnDSUncontrollable = base.Columns["DSUncontrollable"];
                this.columnLandscapeAvailable = base.Columns["LandscapeAvailable"];
                this.columnFractionDrained = base.Columns["FractionDrained"];
                this.columnDifficulty = base.Columns["Difficulty"];
                this.columnRoofEffDisc = base.Columns["RoofEffDisc"];
                this.columnComments = base.Columns["Comments"];
                this.columnPlantersOK = base.Columns["PlantersOK"];
                this.columnBioretentionOK = base.Columns["BioretentionOK"];
                this.columnBuildModelIC = base.Columns["BuildModelIC"];
                this.columnSource = base.Columns["Source"];
                this.columnAppendDate = base.Columns["AppendDate"];
                this.columnICID = base.Columns["ICID"];
                this.columnConstructed = base.Columns["Constructed"];
                this.columnFocusArea = base.Columns["FocusArea"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMAPINFO_ID = new global::System.Data.DataColumn("MAPINFO_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAPINFO_ID);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnDivideID = new global::System.Data.DataColumn("DivideID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDivideID);
                this.columnNGTORoof = new global::System.Data.DataColumn("NGTORoof", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGTORoof);
                this.columnEXICFtRoof = new global::System.Data.DataColumn("EXICFtRoof", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXICFtRoof);
                this.columnEXRfAreaFt = new global::System.Data.DataColumn("EXRfAreaFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXRfAreaFt);
                this.columnExternalDS = new global::System.Data.DataColumn("ExternalDS", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExternalDS);
                this.columnDSTotal = new global::System.Data.DataColumn("DSTotal", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSTotal);
                this.columnEXtoVeg = new global::System.Data.DataColumn("EXtoVeg", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXtoVeg);
                this.columnEXtoStreet = new global::System.Data.DataColumn("EXtoStreet", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXtoStreet);
                this.columnEXtoPlanter = new global::System.Data.DataColumn("EXtoPlanter", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXtoPlanter);
                this.columnEXtoBioretention = new global::System.Data.DataColumn("EXtoBioretention", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXtoBioretention);
                this.columnEXtoDrywell = new global::System.Data.DataColumn("EXtoDrywell", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXtoDrywell);
                this.columnEXtoEcoroof = new global::System.Data.DataColumn("EXtoEcoroof", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXtoEcoroof);
                this.columnDStoVeg = new global::System.Data.DataColumn("DStoVeg", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDStoVeg);
                this.columnDStoStreet = new global::System.Data.DataColumn("DStoStreet", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDStoStreet);
                this.columnDStoPlanter = new global::System.Data.DataColumn("DStoPlanter", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDStoPlanter);
                this.columnDStoBioretention = new global::System.Data.DataColumn("DStoBioretention", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDStoBioretention);
                this.columnDStoDrywell = new global::System.Data.DataColumn("DStoDrywell", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDStoDrywell);
                this.columnDStoEcoroof = new global::System.Data.DataColumn("DStoEcoroof", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDStoEcoroof);
                this.columnDSUncontrollable = new global::System.Data.DataColumn("DSUncontrollable", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSUncontrollable);
                this.columnLandscapeAvailable = new global::System.Data.DataColumn("LandscapeAvailable", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandscapeAvailable);
                this.columnFractionDrained = new global::System.Data.DataColumn("FractionDrained", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFractionDrained);
                this.columnDifficulty = new global::System.Data.DataColumn("Difficulty", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDifficulty);
                this.columnRoofEffDisc = new global::System.Data.DataColumn("RoofEffDisc", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoofEffDisc);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnPlantersOK = new global::System.Data.DataColumn("PlantersOK", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlantersOK);
                this.columnBioretentionOK = new global::System.Data.DataColumn("BioretentionOK", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBioretentionOK);
                this.columnBuildModelIC = new global::System.Data.DataColumn("BuildModelIC", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildModelIC);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
                this.columnAppendDate = new global::System.Data.DataColumn("AppendDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppendDate);
                this.columnICID = new global::System.Data.DataColumn("ICID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnICID);
                this.columnConstructed = new global::System.Data.DataColumn("Constructed", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConstructed);
                this.columnFocusArea = new global::System.Data.DataColumn("FocusArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFocusArea);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMAPINFO_ID}, true));
                this.columnMAPINFO_ID.AutoIncrement = true;
                this.columnMAPINFO_ID.AllowDBNull = false;
                this.columnMAPINFO_ID.Unique = true;
                this.columnNGTORoof.MaxLength = 6;
                this.columnComments.MaxLength = 254;
                this.columnSource.MaxLength = 50;
                this.columnAppendDate.MaxLength = 17;
                this.columnFocusArea.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlRoofTargetsRow NewMdlRoofTargetsRow() {
                return ((MdlRoofTargetsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MdlRoofTargetsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MdlRoofTargetsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MdlRoofTargetsRowChanged != null)) {
                    this.MdlRoofTargetsRowChanged(this, new MdlRoofTargetsRowChangeEvent(((MdlRoofTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MdlRoofTargetsRowChanging != null)) {
                    this.MdlRoofTargetsRowChanging(this, new MdlRoofTargetsRowChangeEvent(((MdlRoofTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MdlRoofTargetsRowDeleted != null)) {
                    this.MdlRoofTargetsRowDeleted(this, new MdlRoofTargetsRowChangeEvent(((MdlRoofTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MdlRoofTargetsRowDeleting != null)) {
                    this.MdlRoofTargetsRowDeleting(this, new MdlRoofTargetsRowChangeEvent(((MdlRoofTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMdlRoofTargetsRow(MdlRoofTargetsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelDataSet ds = new ModelDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MdlRoofTargetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MdlStreetTargetsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMAPINFO_ID;
            
            private global::System.Data.DataColumn columnNGTOStreet;
            
            private global::System.Data.DataColumn columnSurfSCID;
            
            private global::System.Data.DataColumn columnEvaluation;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnStreetArea;
            
            private global::System.Data.DataColumn columnFlowControl;
            
            private global::System.Data.DataColumn columnIntersection;
            
            private global::System.Data.DataColumn columnCorner;
            
            private global::System.Data.DataColumn columnStreet1;
            
            private global::System.Data.DataColumn columnStreet1Area;
            
            private global::System.Data.DataColumn columnStreet1CExtVol;
            
            private global::System.Data.DataColumn columnStreet1CExtFlow;
            
            private global::System.Data.DataColumn columnStreet2;
            
            private global::System.Data.DataColumn columnStreet2Area;
            
            private global::System.Data.DataColumn columnStreet2CExtVol;
            
            private global::System.Data.DataColumn columnStreet2CExtFlow;
            
            private global::System.Data.DataColumn columnOrificeArea;
            
            private global::System.Data.DataColumn columnCurbExtensionArea;
            
            private global::System.Data.DataColumn columnPondingVol;
            
            private global::System.Data.DataColumn columnCurbExtensionVol;
            
            private global::System.Data.DataColumn columnComments2;
            
            private global::System.Data.DataColumn columnTypeCode;
            
            private global::System.Data.DataColumn columnXPSWMM_Name;
            
            private global::System.Data.DataColumn columnXCoord;
            
            private global::System.Data.DataColumn columnYCoord;
            
            private global::System.Data.DataColumn columnBuildModelIC;
            
            private global::System.Data.DataColumn columnSource;
            
            private global::System.Data.DataColumn columnAppendDate;
            
            private global::System.Data.DataColumn columnNGTOStreet_2;
            
            private global::System.Data.DataColumn columnICID;
            
            private global::System.Data.DataColumn columnConstructed;
            
            private global::System.Data.DataColumn columnFocusArea;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlStreetTargetsDataTable() {
                this.TableName = "MdlStreetTargets";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MdlStreetTargetsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MdlStreetTargetsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAPINFO_IDColumn {
                get {
                    return this.columnMAPINFO_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NGTOStreetColumn {
                get {
                    return this.columnNGTOStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurfSCIDColumn {
                get {
                    return this.columnSurfSCID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EvaluationColumn {
                get {
                    return this.columnEvaluation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetAreaColumn {
                get {
                    return this.columnStreetArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowControlColumn {
                get {
                    return this.columnFlowControl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IntersectionColumn {
                get {
                    return this.columnIntersection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CornerColumn {
                get {
                    return this.columnCorner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Street1Column {
                get {
                    return this.columnStreet1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Street1AreaColumn {
                get {
                    return this.columnStreet1Area;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Street1CExtVolColumn {
                get {
                    return this.columnStreet1CExtVol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Street1CExtFlowColumn {
                get {
                    return this.columnStreet1CExtFlow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Street2Column {
                get {
                    return this.columnStreet2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Street2AreaColumn {
                get {
                    return this.columnStreet2Area;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Street2CExtVolColumn {
                get {
                    return this.columnStreet2CExtVol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Street2CExtFlowColumn {
                get {
                    return this.columnStreet2CExtFlow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrificeAreaColumn {
                get {
                    return this.columnOrificeArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurbExtensionAreaColumn {
                get {
                    return this.columnCurbExtensionArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PondingVolColumn {
                get {
                    return this.columnPondingVol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurbExtensionVolColumn {
                get {
                    return this.columnCurbExtensionVol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Comments2Column {
                get {
                    return this.columnComments2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeCodeColumn {
                get {
                    return this.columnTypeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XPSWMM_NameColumn {
                get {
                    return this.columnXPSWMM_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XCoordColumn {
                get {
                    return this.columnXCoord;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YCoordColumn {
                get {
                    return this.columnYCoord;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuildModelICColumn {
                get {
                    return this.columnBuildModelIC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppendDateColumn {
                get {
                    return this.columnAppendDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NGTOStreet_2Column {
                get {
                    return this.columnNGTOStreet_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ICIDColumn {
                get {
                    return this.columnICID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConstructedColumn {
                get {
                    return this.columnConstructed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FocusAreaColumn {
                get {
                    return this.columnFocusArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlStreetTargetsRow this[int index] {
                get {
                    return ((MdlStreetTargetsRow)(this.Rows[index]));
                }
            }
            
            public event MdlStreetTargetsRowChangeEventHandler MdlStreetTargetsRowChanging;
            
            public event MdlStreetTargetsRowChangeEventHandler MdlStreetTargetsRowChanged;
            
            public event MdlStreetTargetsRowChangeEventHandler MdlStreetTargetsRowDeleting;
            
            public event MdlStreetTargetsRowChangeEventHandler MdlStreetTargetsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMdlStreetTargetsRow(MdlStreetTargetsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlStreetTargetsRow AddMdlStreetTargetsRow(
                        string NGTOStreet, 
                        int SurfSCID, 
                        string Evaluation, 
                        string Comments, 
                        string Type, 
                        double StreetArea, 
                        double FlowControl, 
                        string Intersection, 
                        string Corner, 
                        string Street1, 
                        int Street1Area, 
                        short Street1CExtVol, 
                        double Street1CExtFlow, 
                        string Street2, 
                        int Street2Area, 
                        short Street2CExtVol, 
                        double Street2CExtFlow, 
                        int OrificeArea, 
                        int CurbExtensionArea, 
                        short PondingVol, 
                        short CurbExtensionVol, 
                        string Comments2, 
                        string TypeCode, 
                        string XPSWMM_Name, 
                        int XCoord, 
                        int YCoord, 
                        bool BuildModelIC, 
                        string Source, 
                        string AppendDate, 
                        string NGTOStreet_2, 
                        int ICID, 
                        int Constructed, 
                        string FocusArea) {
                MdlStreetTargetsRow rowMdlStreetTargetsRow = ((MdlStreetTargetsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        NGTOStreet,
                        SurfSCID,
                        Evaluation,
                        Comments,
                        Type,
                        StreetArea,
                        FlowControl,
                        Intersection,
                        Corner,
                        Street1,
                        Street1Area,
                        Street1CExtVol,
                        Street1CExtFlow,
                        Street2,
                        Street2Area,
                        Street2CExtVol,
                        Street2CExtFlow,
                        OrificeArea,
                        CurbExtensionArea,
                        PondingVol,
                        CurbExtensionVol,
                        Comments2,
                        TypeCode,
                        XPSWMM_Name,
                        XCoord,
                        YCoord,
                        BuildModelIC,
                        Source,
                        AppendDate,
                        NGTOStreet_2,
                        ICID,
                        Constructed,
                        FocusArea};
                rowMdlStreetTargetsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMdlStreetTargetsRow);
                return rowMdlStreetTargetsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlStreetTargetsRow FindByMAPINFO_ID(int MAPINFO_ID) {
                return ((MdlStreetTargetsRow)(this.Rows.Find(new object[] {
                            MAPINFO_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MdlStreetTargetsDataTable cln = ((MdlStreetTargetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MdlStreetTargetsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMAPINFO_ID = base.Columns["MAPINFO_ID"];
                this.columnNGTOStreet = base.Columns["NGTOStreet"];
                this.columnSurfSCID = base.Columns["SurfSCID"];
                this.columnEvaluation = base.Columns["Evaluation"];
                this.columnComments = base.Columns["Comments"];
                this.columnType = base.Columns["Type"];
                this.columnStreetArea = base.Columns["StreetArea"];
                this.columnFlowControl = base.Columns["FlowControl"];
                this.columnIntersection = base.Columns["Intersection"];
                this.columnCorner = base.Columns["Corner"];
                this.columnStreet1 = base.Columns["Street1"];
                this.columnStreet1Area = base.Columns["Street1Area"];
                this.columnStreet1CExtVol = base.Columns["Street1CExtVol"];
                this.columnStreet1CExtFlow = base.Columns["Street1CExtFlow"];
                this.columnStreet2 = base.Columns["Street2"];
                this.columnStreet2Area = base.Columns["Street2Area"];
                this.columnStreet2CExtVol = base.Columns["Street2CExtVol"];
                this.columnStreet2CExtFlow = base.Columns["Street2CExtFlow"];
                this.columnOrificeArea = base.Columns["OrificeArea"];
                this.columnCurbExtensionArea = base.Columns["CurbExtensionArea"];
                this.columnPondingVol = base.Columns["PondingVol"];
                this.columnCurbExtensionVol = base.Columns["CurbExtensionVol"];
                this.columnComments2 = base.Columns["Comments2"];
                this.columnTypeCode = base.Columns["TypeCode"];
                this.columnXPSWMM_Name = base.Columns["XPSWMM_Name"];
                this.columnXCoord = base.Columns["XCoord"];
                this.columnYCoord = base.Columns["YCoord"];
                this.columnBuildModelIC = base.Columns["BuildModelIC"];
                this.columnSource = base.Columns["Source"];
                this.columnAppendDate = base.Columns["AppendDate"];
                this.columnNGTOStreet_2 = base.Columns["NGTOStreet_2"];
                this.columnICID = base.Columns["ICID"];
                this.columnConstructed = base.Columns["Constructed"];
                this.columnFocusArea = base.Columns["FocusArea"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMAPINFO_ID = new global::System.Data.DataColumn("MAPINFO_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAPINFO_ID);
                this.columnNGTOStreet = new global::System.Data.DataColumn("NGTOStreet", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGTOStreet);
                this.columnSurfSCID = new global::System.Data.DataColumn("SurfSCID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurfSCID);
                this.columnEvaluation = new global::System.Data.DataColumn("Evaluation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEvaluation);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnStreetArea = new global::System.Data.DataColumn("StreetArea", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreetArea);
                this.columnFlowControl = new global::System.Data.DataColumn("FlowControl", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowControl);
                this.columnIntersection = new global::System.Data.DataColumn("Intersection", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIntersection);
                this.columnCorner = new global::System.Data.DataColumn("Corner", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCorner);
                this.columnStreet1 = new global::System.Data.DataColumn("Street1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet1);
                this.columnStreet1Area = new global::System.Data.DataColumn("Street1Area", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet1Area);
                this.columnStreet1CExtVol = new global::System.Data.DataColumn("Street1CExtVol", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet1CExtVol);
                this.columnStreet1CExtFlow = new global::System.Data.DataColumn("Street1CExtFlow", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet1CExtFlow);
                this.columnStreet2 = new global::System.Data.DataColumn("Street2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet2);
                this.columnStreet2Area = new global::System.Data.DataColumn("Street2Area", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet2Area);
                this.columnStreet2CExtVol = new global::System.Data.DataColumn("Street2CExtVol", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet2CExtVol);
                this.columnStreet2CExtFlow = new global::System.Data.DataColumn("Street2CExtFlow", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet2CExtFlow);
                this.columnOrificeArea = new global::System.Data.DataColumn("OrificeArea", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrificeArea);
                this.columnCurbExtensionArea = new global::System.Data.DataColumn("CurbExtensionArea", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurbExtensionArea);
                this.columnPondingVol = new global::System.Data.DataColumn("PondingVol", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPondingVol);
                this.columnCurbExtensionVol = new global::System.Data.DataColumn("CurbExtensionVol", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurbExtensionVol);
                this.columnComments2 = new global::System.Data.DataColumn("Comments2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments2);
                this.columnTypeCode = new global::System.Data.DataColumn("TypeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeCode);
                this.columnXPSWMM_Name = new global::System.Data.DataColumn("XPSWMM_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXPSWMM_Name);
                this.columnXCoord = new global::System.Data.DataColumn("XCoord", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXCoord);
                this.columnYCoord = new global::System.Data.DataColumn("YCoord", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYCoord);
                this.columnBuildModelIC = new global::System.Data.DataColumn("BuildModelIC", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildModelIC);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
                this.columnAppendDate = new global::System.Data.DataColumn("AppendDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppendDate);
                this.columnNGTOStreet_2 = new global::System.Data.DataColumn("NGTOStreet_2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGTOStreet_2);
                this.columnICID = new global::System.Data.DataColumn("ICID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnICID);
                this.columnConstructed = new global::System.Data.DataColumn("Constructed", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConstructed);
                this.columnFocusArea = new global::System.Data.DataColumn("FocusArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFocusArea);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMAPINFO_ID}, true));
                this.columnMAPINFO_ID.AutoIncrement = true;
                this.columnMAPINFO_ID.AllowDBNull = false;
                this.columnMAPINFO_ID.Unique = true;
                this.columnNGTOStreet.MaxLength = 7;
                this.columnEvaluation.MaxLength = 1;
                this.columnComments.MaxLength = 254;
                this.columnType.MaxLength = 10;
                this.columnIntersection.MaxLength = 100;
                this.columnCorner.MaxLength = 3;
                this.columnStreet1.MaxLength = 25;
                this.columnStreet2.MaxLength = 25;
                this.columnComments2.MaxLength = 254;
                this.columnTypeCode.MaxLength = 1;
                this.columnXPSWMM_Name.MaxLength = 10;
                this.columnSource.MaxLength = 50;
                this.columnAppendDate.MaxLength = 17;
                this.columnNGTOStreet_2.MaxLength = 6;
                this.columnFocusArea.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlStreetTargetsRow NewMdlStreetTargetsRow() {
                return ((MdlStreetTargetsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MdlStreetTargetsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MdlStreetTargetsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MdlStreetTargetsRowChanged != null)) {
                    this.MdlStreetTargetsRowChanged(this, new MdlStreetTargetsRowChangeEvent(((MdlStreetTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MdlStreetTargetsRowChanging != null)) {
                    this.MdlStreetTargetsRowChanging(this, new MdlStreetTargetsRowChangeEvent(((MdlStreetTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MdlStreetTargetsRowDeleted != null)) {
                    this.MdlStreetTargetsRowDeleted(this, new MdlStreetTargetsRowChangeEvent(((MdlStreetTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MdlStreetTargetsRowDeleting != null)) {
                    this.MdlStreetTargetsRowDeleting(this, new MdlStreetTargetsRowChangeEvent(((MdlStreetTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMdlStreetTargetsRow(MdlStreetTargetsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelDataSet ds = new ModelDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MdlStreetTargetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MdlPipXPDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMAPINFO_ID;
            
            private global::System.Data.DataColumn columnxWtr;
            
            private global::System.Data.DataColumn columnxWMinD;
            
            private global::System.Data.DataColumn columnxWMaxD;
            
            private global::System.Data.DataColumn columnpWtr;
            
            private global::System.Data.DataColumn columnpWtrMaxD;
            
            private global::System.Data.DataColumn columnpFt2Wtr;
            
            private global::System.Data.DataColumn columnxSewer;
            
            private global::System.Data.DataColumn columnxSwrMinD;
            
            private global::System.Data.DataColumn columnxSwrMaxD;
            
            private global::System.Data.DataColumn columnpSewer;
            
            private global::System.Data.DataColumn columnpSwrMaxD;
            
            private global::System.Data.DataColumn columnpFt2Swr;
            
            private global::System.Data.DataColumn columnxStrt;
            
            private global::System.Data.DataColumn columnxArt;
            
            private global::System.Data.DataColumn columnxMJArt;
            
            private global::System.Data.DataColumn columnxFrwy;
            
            private global::System.Data.DataColumn columnpStrt;
            
            private global::System.Data.DataColumn columnpStrtTyp;
            
            private global::System.Data.DataColumn columnpFt2Strt;
            
            private global::System.Data.DataColumn columnpTraffic;
            
            private global::System.Data.DataColumn columnuxCLx;
            
            private global::System.Data.DataColumn columnuxFt2CLx;
            
            private global::System.Data.DataColumn columndxCLx;
            
            private global::System.Data.DataColumn columndxFt2CLx;
            
            private global::System.Data.DataColumn columnxFiber;
            
            private global::System.Data.DataColumn columnpFiber;
            
            private global::System.Data.DataColumn columnpFt2Fiber;
            
            private global::System.Data.DataColumn columnxGas;
            
            private global::System.Data.DataColumn columnpGas;
            
            private global::System.Data.DataColumn columnpFt2Gas;
            
            private global::System.Data.DataColumn columnxRail;
            
            private global::System.Data.DataColumn columnpRail;
            
            private global::System.Data.DataColumn columnpFt2Rail;
            
            private global::System.Data.DataColumn columnxLRT;
            
            private global::System.Data.DataColumn columnpLRT;
            
            private global::System.Data.DataColumn columnpFt2LRT;
            
            private global::System.Data.DataColumn columnxEmt;
            
            private global::System.Data.DataColumn columnpEmt;
            
            private global::System.Data.DataColumn columnpFt2Emt;
            
            private global::System.Data.DataColumn columnxEzonC;
            
            private global::System.Data.DataColumn columnxEzonP;
            
            private global::System.Data.DataColumn columnxFtEzonC;
            
            private global::System.Data.DataColumn columnxFtEzonP;
            
            private global::System.Data.DataColumn columnxEzAreaC;
            
            private global::System.Data.DataColumn columnxEzAreaP;
            
            private global::System.Data.DataColumn columnuxMS4;
            
            private global::System.Data.DataColumn columnuxUIC;
            
            private global::System.Data.DataColumn columnuDepth;
            
            private global::System.Data.DataColumn columndDepth;
            
            private global::System.Data.DataColumn columnxPipSlope;
            
            private global::System.Data.DataColumn columnxEcsi;
            
            private global::System.Data.DataColumn columnxFt2Ecsi;
            
            private global::System.Data.DataColumn columnxEcsiLen;
            
            private global::System.Data.DataColumn columnxEcsiVol;
            
            private global::System.Data.DataColumn columnxSchl;
            
            private global::System.Data.DataColumn columnxFt2Schl;
            
            private global::System.Data.DataColumn columnxHosp;
            
            private global::System.Data.DataColumn columnxFt2Hosp;
            
            private global::System.Data.DataColumn columnxPol;
            
            private global::System.Data.DataColumn columnxFt2Pol;
            
            private global::System.Data.DataColumn columnxFire;
            
            private global::System.Data.DataColumn columnxFt2Fire;
            
            private global::System.Data.DataColumn columnxBldg;
            
            private global::System.Data.DataColumn columnxFt2Bldg;
            
            private global::System.Data.DataColumn columnxHyd;
            
            private global::System.Data.DataColumn columnxFt2Hyd;
            
            private global::System.Data.DataColumn columnHardArea;
            
            private global::System.Data.DataColumn columnMLINKID;
            
            private global::System.Data.DataColumn columnUSNODE;
            
            private global::System.Data.DataColumn columnDSNODE;
            
            private global::System.Data.DataColumn columnCOMPKEY;
            
            private global::System.Data.DataColumn columnxa;
            
            private global::System.Data.DataColumn columnya;
            
            private global::System.Data.DataColumn columnxb;
            
            private global::System.Data.DataColumn columnyb;
            
            private global::System.Data.DataColumn columnDeg2N;
            
            private global::System.Data.DataColumn columnpWtr2;
            
            private global::System.Data.DataColumn columnpWtr4;
            
            private global::System.Data.DataColumn columnpWtr6;
            
            private global::System.Data.DataColumn columnpWtr8;
            
            private global::System.Data.DataColumn columnpWtr10;
            
            private global::System.Data.DataColumn columnpWtr12;
            
            private global::System.Data.DataColumn columnpSwr2;
            
            private global::System.Data.DataColumn columnpSwr4;
            
            private global::System.Data.DataColumn columnpSwr6;
            
            private global::System.Data.DataColumn columnpSwr8;
            
            private global::System.Data.DataColumn columnpSwr10;
            
            private global::System.Data.DataColumn columngSlope;
            
            private global::System.Data.DataColumn columnxLUST;
            
            private global::System.Data.DataColumn columnxFt2LUST;
            
            private global::System.Data.DataColumn columnxpDeg2N;
            
            private global::System.Data.DataColumn columnINT01;
            
            private global::System.Data.DataColumn columnINT02;
            
            private global::System.Data.DataColumn columnFLT01;
            
            private global::System.Data.DataColumn columnFLT02;
            
            private global::System.Data.DataColumn columnTXT50;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlPipXPDataTable() {
                this.TableName = "MdlPipXP";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MdlPipXPDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MdlPipXPDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAPINFO_IDColumn {
                get {
                    return this.columnMAPINFO_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xWtrColumn {
                get {
                    return this.columnxWtr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xWMinDColumn {
                get {
                    return this.columnxWMinD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xWMaxDColumn {
                get {
                    return this.columnxWMaxD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pWtrColumn {
                get {
                    return this.columnpWtr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pWtrMaxDColumn {
                get {
                    return this.columnpWtrMaxD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pFt2WtrColumn {
                get {
                    return this.columnpFt2Wtr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xSewerColumn {
                get {
                    return this.columnxSewer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xSwrMinDColumn {
                get {
                    return this.columnxSwrMinD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xSwrMaxDColumn {
                get {
                    return this.columnxSwrMaxD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pSewerColumn {
                get {
                    return this.columnpSewer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pSwrMaxDColumn {
                get {
                    return this.columnpSwrMaxD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pFt2SwrColumn {
                get {
                    return this.columnpFt2Swr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xStrtColumn {
                get {
                    return this.columnxStrt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xArtColumn {
                get {
                    return this.columnxArt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xMJArtColumn {
                get {
                    return this.columnxMJArt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xFrwyColumn {
                get {
                    return this.columnxFrwy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pStrtColumn {
                get {
                    return this.columnpStrt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pStrtTypColumn {
                get {
                    return this.columnpStrtTyp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pFt2StrtColumn {
                get {
                    return this.columnpFt2Strt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pTrafficColumn {
                get {
                    return this.columnpTraffic;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn uxCLxColumn {
                get {
                    return this.columnuxCLx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn uxFt2CLxColumn {
                get {
                    return this.columnuxFt2CLx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dxCLxColumn {
                get {
                    return this.columndxCLx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dxFt2CLxColumn {
                get {
                    return this.columndxFt2CLx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xFiberColumn {
                get {
                    return this.columnxFiber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pFiberColumn {
                get {
                    return this.columnpFiber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pFt2FiberColumn {
                get {
                    return this.columnpFt2Fiber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xGasColumn {
                get {
                    return this.columnxGas;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pGasColumn {
                get {
                    return this.columnpGas;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pFt2GasColumn {
                get {
                    return this.columnpFt2Gas;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xRailColumn {
                get {
                    return this.columnxRail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pRailColumn {
                get {
                    return this.columnpRail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pFt2RailColumn {
                get {
                    return this.columnpFt2Rail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xLRTColumn {
                get {
                    return this.columnxLRT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pLRTColumn {
                get {
                    return this.columnpLRT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pFt2LRTColumn {
                get {
                    return this.columnpFt2LRT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xEmtColumn {
                get {
                    return this.columnxEmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pEmtColumn {
                get {
                    return this.columnpEmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pFt2EmtColumn {
                get {
                    return this.columnpFt2Emt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xEzonCColumn {
                get {
                    return this.columnxEzonC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xEzonPColumn {
                get {
                    return this.columnxEzonP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xFtEzonCColumn {
                get {
                    return this.columnxFtEzonC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xFtEzonPColumn {
                get {
                    return this.columnxFtEzonP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xEzAreaCColumn {
                get {
                    return this.columnxEzAreaC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xEzAreaPColumn {
                get {
                    return this.columnxEzAreaP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn uxMS4Column {
                get {
                    return this.columnuxMS4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn uxUICColumn {
                get {
                    return this.columnuxUIC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn uDepthColumn {
                get {
                    return this.columnuDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dDepthColumn {
                get {
                    return this.columndDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xPipSlopeColumn {
                get {
                    return this.columnxPipSlope;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xEcsiColumn {
                get {
                    return this.columnxEcsi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xFt2EcsiColumn {
                get {
                    return this.columnxFt2Ecsi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xEcsiLenColumn {
                get {
                    return this.columnxEcsiLen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xEcsiVolColumn {
                get {
                    return this.columnxEcsiVol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xSchlColumn {
                get {
                    return this.columnxSchl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xFt2SchlColumn {
                get {
                    return this.columnxFt2Schl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xHospColumn {
                get {
                    return this.columnxHosp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xFt2HospColumn {
                get {
                    return this.columnxFt2Hosp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xPolColumn {
                get {
                    return this.columnxPol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xFt2PolColumn {
                get {
                    return this.columnxFt2Pol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xFireColumn {
                get {
                    return this.columnxFire;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xFt2FireColumn {
                get {
                    return this.columnxFt2Fire;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xBldgColumn {
                get {
                    return this.columnxBldg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xFt2BldgColumn {
                get {
                    return this.columnxFt2Bldg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xHydColumn {
                get {
                    return this.columnxHyd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xFt2HydColumn {
                get {
                    return this.columnxFt2Hyd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HardAreaColumn {
                get {
                    return this.columnHardArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MLINKIDColumn {
                get {
                    return this.columnMLINKID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USNODEColumn {
                get {
                    return this.columnUSNODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSNODEColumn {
                get {
                    return this.columnDSNODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPKEYColumn {
                get {
                    return this.columnCOMPKEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xaColumn {
                get {
                    return this.columnxa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yaColumn {
                get {
                    return this.columnya;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xbColumn {
                get {
                    return this.columnxb;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ybColumn {
                get {
                    return this.columnyb;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Deg2NColumn {
                get {
                    return this.columnDeg2N;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pWtr2Column {
                get {
                    return this.columnpWtr2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pWtr4Column {
                get {
                    return this.columnpWtr4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pWtr6Column {
                get {
                    return this.columnpWtr6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pWtr8Column {
                get {
                    return this.columnpWtr8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pWtr10Column {
                get {
                    return this.columnpWtr10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pWtr12Column {
                get {
                    return this.columnpWtr12;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pSwr2Column {
                get {
                    return this.columnpSwr2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pSwr4Column {
                get {
                    return this.columnpSwr4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pSwr6Column {
                get {
                    return this.columnpSwr6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pSwr8Column {
                get {
                    return this.columnpSwr8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pSwr10Column {
                get {
                    return this.columnpSwr10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gSlopeColumn {
                get {
                    return this.columngSlope;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xLUSTColumn {
                get {
                    return this.columnxLUST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xFt2LUSTColumn {
                get {
                    return this.columnxFt2LUST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xpDeg2NColumn {
                get {
                    return this.columnxpDeg2N;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INT01Column {
                get {
                    return this.columnINT01;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INT02Column {
                get {
                    return this.columnINT02;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FLT01Column {
                get {
                    return this.columnFLT01;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FLT02Column {
                get {
                    return this.columnFLT02;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TXT50Column {
                get {
                    return this.columnTXT50;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlPipXPRow this[int index] {
                get {
                    return ((MdlPipXPRow)(this.Rows[index]));
                }
            }
            
            public event MdlPipXPRowChangeEventHandler MdlPipXPRowChanging;
            
            public event MdlPipXPRowChangeEventHandler MdlPipXPRowChanged;
            
            public event MdlPipXPRowChangeEventHandler MdlPipXPRowDeleting;
            
            public event MdlPipXPRowChangeEventHandler MdlPipXPRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMdlPipXPRow(MdlPipXPRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlPipXPRow AddMdlPipXPRow(
                        int xWtr, 
                        int xWMinD, 
                        int xWMaxD, 
                        int pWtr, 
                        int pWtrMaxD, 
                        int pFt2Wtr, 
                        int xSewer, 
                        int xSwrMinD, 
                        int xSwrMaxD, 
                        int pSewer, 
                        int pSwrMaxD, 
                        int pFt2Swr, 
                        int xStrt, 
                        int xArt, 
                        int xMJArt, 
                        int xFrwy, 
                        int pStrt, 
                        int pStrtTyp, 
                        int pFt2Strt, 
                        int pTraffic, 
                        int uxCLx, 
                        int uxFt2CLx, 
                        int dxCLx, 
                        int dxFt2CLx, 
                        int xFiber, 
                        int pFiber, 
                        int pFt2Fiber, 
                        int xGas, 
                        int pGas, 
                        int pFt2Gas, 
                        int xRail, 
                        int pRail, 
                        int pFt2Rail, 
                        int xLRT, 
                        int pLRT, 
                        int pFt2LRT, 
                        int xEmt, 
                        int pEmt, 
                        int pFt2Emt, 
                        int xEzonC, 
                        int xEzonP, 
                        int xFtEzonC, 
                        int xFtEzonP, 
                        int xEzAreaC, 
                        int xEzAreaP, 
                        int uxMS4, 
                        int uxUIC, 
                        double uDepth, 
                        double dDepth, 
                        double xPipSlope, 
                        int xEcsi, 
                        int xFt2Ecsi, 
                        int xEcsiLen, 
                        int xEcsiVol, 
                        int xSchl, 
                        int xFt2Schl, 
                        int xHosp, 
                        int xFt2Hosp, 
                        int xPol, 
                        int xFt2Pol, 
                        int xFire, 
                        int xFt2Fire, 
                        int xBldg, 
                        int xFt2Bldg, 
                        int xHyd, 
                        int xFt2Hyd, 
                        int HardArea, 
                        double MLINKID, 
                        string USNODE, 
                        string DSNODE, 
                        double COMPKEY, 
                        double xa, 
                        double ya, 
                        double xb, 
                        double yb, 
                        double Deg2N, 
                        double pWtr2, 
                        double pWtr4, 
                        double pWtr6, 
                        double pWtr8, 
                        double pWtr10, 
                        double pWtr12, 
                        double pSwr2, 
                        double pSwr4, 
                        double pSwr6, 
                        double pSwr8, 
                        double pSwr10, 
                        double gSlope, 
                        int xLUST, 
                        int xFt2LUST, 
                        double xpDeg2N, 
                        int INT01, 
                        int INT02, 
                        double FLT01, 
                        double FLT02, 
                        string TXT50) {
                MdlPipXPRow rowMdlPipXPRow = ((MdlPipXPRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        xWtr,
                        xWMinD,
                        xWMaxD,
                        pWtr,
                        pWtrMaxD,
                        pFt2Wtr,
                        xSewer,
                        xSwrMinD,
                        xSwrMaxD,
                        pSewer,
                        pSwrMaxD,
                        pFt2Swr,
                        xStrt,
                        xArt,
                        xMJArt,
                        xFrwy,
                        pStrt,
                        pStrtTyp,
                        pFt2Strt,
                        pTraffic,
                        uxCLx,
                        uxFt2CLx,
                        dxCLx,
                        dxFt2CLx,
                        xFiber,
                        pFiber,
                        pFt2Fiber,
                        xGas,
                        pGas,
                        pFt2Gas,
                        xRail,
                        pRail,
                        pFt2Rail,
                        xLRT,
                        pLRT,
                        pFt2LRT,
                        xEmt,
                        pEmt,
                        pFt2Emt,
                        xEzonC,
                        xEzonP,
                        xFtEzonC,
                        xFtEzonP,
                        xEzAreaC,
                        xEzAreaP,
                        uxMS4,
                        uxUIC,
                        uDepth,
                        dDepth,
                        xPipSlope,
                        xEcsi,
                        xFt2Ecsi,
                        xEcsiLen,
                        xEcsiVol,
                        xSchl,
                        xFt2Schl,
                        xHosp,
                        xFt2Hosp,
                        xPol,
                        xFt2Pol,
                        xFire,
                        xFt2Fire,
                        xBldg,
                        xFt2Bldg,
                        xHyd,
                        xFt2Hyd,
                        HardArea,
                        MLINKID,
                        USNODE,
                        DSNODE,
                        COMPKEY,
                        xa,
                        ya,
                        xb,
                        yb,
                        Deg2N,
                        pWtr2,
                        pWtr4,
                        pWtr6,
                        pWtr8,
                        pWtr10,
                        pWtr12,
                        pSwr2,
                        pSwr4,
                        pSwr6,
                        pSwr8,
                        pSwr10,
                        gSlope,
                        xLUST,
                        xFt2LUST,
                        xpDeg2N,
                        INT01,
                        INT02,
                        FLT01,
                        FLT02,
                        TXT50};
                rowMdlPipXPRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMdlPipXPRow);
                return rowMdlPipXPRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MdlPipXPDataTable cln = ((MdlPipXPDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MdlPipXPDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMAPINFO_ID = base.Columns["MAPINFO_ID"];
                this.columnxWtr = base.Columns["xWtr"];
                this.columnxWMinD = base.Columns["xWMinD"];
                this.columnxWMaxD = base.Columns["xWMaxD"];
                this.columnpWtr = base.Columns["pWtr"];
                this.columnpWtrMaxD = base.Columns["pWtrMaxD"];
                this.columnpFt2Wtr = base.Columns["pFt2Wtr"];
                this.columnxSewer = base.Columns["xSewer"];
                this.columnxSwrMinD = base.Columns["xSwrMinD"];
                this.columnxSwrMaxD = base.Columns["xSwrMaxD"];
                this.columnpSewer = base.Columns["pSewer"];
                this.columnpSwrMaxD = base.Columns["pSwrMaxD"];
                this.columnpFt2Swr = base.Columns["pFt2Swr"];
                this.columnxStrt = base.Columns["xStrt"];
                this.columnxArt = base.Columns["xArt"];
                this.columnxMJArt = base.Columns["xMJArt"];
                this.columnxFrwy = base.Columns["xFrwy"];
                this.columnpStrt = base.Columns["pStrt"];
                this.columnpStrtTyp = base.Columns["pStrtTyp"];
                this.columnpFt2Strt = base.Columns["pFt2Strt"];
                this.columnpTraffic = base.Columns["pTraffic"];
                this.columnuxCLx = base.Columns["uxCLx"];
                this.columnuxFt2CLx = base.Columns["uxFt2CLx"];
                this.columndxCLx = base.Columns["dxCLx"];
                this.columndxFt2CLx = base.Columns["dxFt2CLx"];
                this.columnxFiber = base.Columns["xFiber"];
                this.columnpFiber = base.Columns["pFiber"];
                this.columnpFt2Fiber = base.Columns["pFt2Fiber"];
                this.columnxGas = base.Columns["xGas"];
                this.columnpGas = base.Columns["pGas"];
                this.columnpFt2Gas = base.Columns["pFt2Gas"];
                this.columnxRail = base.Columns["xRail"];
                this.columnpRail = base.Columns["pRail"];
                this.columnpFt2Rail = base.Columns["pFt2Rail"];
                this.columnxLRT = base.Columns["xLRT"];
                this.columnpLRT = base.Columns["pLRT"];
                this.columnpFt2LRT = base.Columns["pFt2LRT"];
                this.columnxEmt = base.Columns["xEmt"];
                this.columnpEmt = base.Columns["pEmt"];
                this.columnpFt2Emt = base.Columns["pFt2Emt"];
                this.columnxEzonC = base.Columns["xEzonC"];
                this.columnxEzonP = base.Columns["xEzonP"];
                this.columnxFtEzonC = base.Columns["xFtEzonC"];
                this.columnxFtEzonP = base.Columns["xFtEzonP"];
                this.columnxEzAreaC = base.Columns["xEzAreaC"];
                this.columnxEzAreaP = base.Columns["xEzAreaP"];
                this.columnuxMS4 = base.Columns["uxMS4"];
                this.columnuxUIC = base.Columns["uxUIC"];
                this.columnuDepth = base.Columns["uDepth"];
                this.columndDepth = base.Columns["dDepth"];
                this.columnxPipSlope = base.Columns["xPipSlope"];
                this.columnxEcsi = base.Columns["xEcsi"];
                this.columnxFt2Ecsi = base.Columns["xFt2Ecsi"];
                this.columnxEcsiLen = base.Columns["xEcsiLen"];
                this.columnxEcsiVol = base.Columns["xEcsiVol"];
                this.columnxSchl = base.Columns["xSchl"];
                this.columnxFt2Schl = base.Columns["xFt2Schl"];
                this.columnxHosp = base.Columns["xHosp"];
                this.columnxFt2Hosp = base.Columns["xFt2Hosp"];
                this.columnxPol = base.Columns["xPol"];
                this.columnxFt2Pol = base.Columns["xFt2Pol"];
                this.columnxFire = base.Columns["xFire"];
                this.columnxFt2Fire = base.Columns["xFt2Fire"];
                this.columnxBldg = base.Columns["xBldg"];
                this.columnxFt2Bldg = base.Columns["xFt2Bldg"];
                this.columnxHyd = base.Columns["xHyd"];
                this.columnxFt2Hyd = base.Columns["xFt2Hyd"];
                this.columnHardArea = base.Columns["HardArea"];
                this.columnMLINKID = base.Columns["MLINKID"];
                this.columnUSNODE = base.Columns["USNODE"];
                this.columnDSNODE = base.Columns["DSNODE"];
                this.columnCOMPKEY = base.Columns["COMPKEY"];
                this.columnxa = base.Columns["xa"];
                this.columnya = base.Columns["ya"];
                this.columnxb = base.Columns["xb"];
                this.columnyb = base.Columns["yb"];
                this.columnDeg2N = base.Columns["Deg2N"];
                this.columnpWtr2 = base.Columns["pWtr2"];
                this.columnpWtr4 = base.Columns["pWtr4"];
                this.columnpWtr6 = base.Columns["pWtr6"];
                this.columnpWtr8 = base.Columns["pWtr8"];
                this.columnpWtr10 = base.Columns["pWtr10"];
                this.columnpWtr12 = base.Columns["pWtr12"];
                this.columnpSwr2 = base.Columns["pSwr2"];
                this.columnpSwr4 = base.Columns["pSwr4"];
                this.columnpSwr6 = base.Columns["pSwr6"];
                this.columnpSwr8 = base.Columns["pSwr8"];
                this.columnpSwr10 = base.Columns["pSwr10"];
                this.columngSlope = base.Columns["gSlope"];
                this.columnxLUST = base.Columns["xLUST"];
                this.columnxFt2LUST = base.Columns["xFt2LUST"];
                this.columnxpDeg2N = base.Columns["xpDeg2N"];
                this.columnINT01 = base.Columns["INT01"];
                this.columnINT02 = base.Columns["INT02"];
                this.columnFLT01 = base.Columns["FLT01"];
                this.columnFLT02 = base.Columns["FLT02"];
                this.columnTXT50 = base.Columns["TXT50"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMAPINFO_ID = new global::System.Data.DataColumn("MAPINFO_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAPINFO_ID);
                this.columnxWtr = new global::System.Data.DataColumn("xWtr", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxWtr);
                this.columnxWMinD = new global::System.Data.DataColumn("xWMinD", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxWMinD);
                this.columnxWMaxD = new global::System.Data.DataColumn("xWMaxD", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxWMaxD);
                this.columnpWtr = new global::System.Data.DataColumn("pWtr", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpWtr);
                this.columnpWtrMaxD = new global::System.Data.DataColumn("pWtrMaxD", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpWtrMaxD);
                this.columnpFt2Wtr = new global::System.Data.DataColumn("pFt2Wtr", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpFt2Wtr);
                this.columnxSewer = new global::System.Data.DataColumn("xSewer", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxSewer);
                this.columnxSwrMinD = new global::System.Data.DataColumn("xSwrMinD", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxSwrMinD);
                this.columnxSwrMaxD = new global::System.Data.DataColumn("xSwrMaxD", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxSwrMaxD);
                this.columnpSewer = new global::System.Data.DataColumn("pSewer", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpSewer);
                this.columnpSwrMaxD = new global::System.Data.DataColumn("pSwrMaxD", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpSwrMaxD);
                this.columnpFt2Swr = new global::System.Data.DataColumn("pFt2Swr", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpFt2Swr);
                this.columnxStrt = new global::System.Data.DataColumn("xStrt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxStrt);
                this.columnxArt = new global::System.Data.DataColumn("xArt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxArt);
                this.columnxMJArt = new global::System.Data.DataColumn("xMJArt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxMJArt);
                this.columnxFrwy = new global::System.Data.DataColumn("xFrwy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxFrwy);
                this.columnpStrt = new global::System.Data.DataColumn("pStrt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpStrt);
                this.columnpStrtTyp = new global::System.Data.DataColumn("pStrtTyp", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpStrtTyp);
                this.columnpFt2Strt = new global::System.Data.DataColumn("pFt2Strt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpFt2Strt);
                this.columnpTraffic = new global::System.Data.DataColumn("pTraffic", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpTraffic);
                this.columnuxCLx = new global::System.Data.DataColumn("uxCLx", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuxCLx);
                this.columnuxFt2CLx = new global::System.Data.DataColumn("uxFt2CLx", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuxFt2CLx);
                this.columndxCLx = new global::System.Data.DataColumn("dxCLx", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndxCLx);
                this.columndxFt2CLx = new global::System.Data.DataColumn("dxFt2CLx", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndxFt2CLx);
                this.columnxFiber = new global::System.Data.DataColumn("xFiber", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxFiber);
                this.columnpFiber = new global::System.Data.DataColumn("pFiber", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpFiber);
                this.columnpFt2Fiber = new global::System.Data.DataColumn("pFt2Fiber", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpFt2Fiber);
                this.columnxGas = new global::System.Data.DataColumn("xGas", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxGas);
                this.columnpGas = new global::System.Data.DataColumn("pGas", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpGas);
                this.columnpFt2Gas = new global::System.Data.DataColumn("pFt2Gas", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpFt2Gas);
                this.columnxRail = new global::System.Data.DataColumn("xRail", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxRail);
                this.columnpRail = new global::System.Data.DataColumn("pRail", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpRail);
                this.columnpFt2Rail = new global::System.Data.DataColumn("pFt2Rail", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpFt2Rail);
                this.columnxLRT = new global::System.Data.DataColumn("xLRT", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxLRT);
                this.columnpLRT = new global::System.Data.DataColumn("pLRT", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpLRT);
                this.columnpFt2LRT = new global::System.Data.DataColumn("pFt2LRT", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpFt2LRT);
                this.columnxEmt = new global::System.Data.DataColumn("xEmt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxEmt);
                this.columnpEmt = new global::System.Data.DataColumn("pEmt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpEmt);
                this.columnpFt2Emt = new global::System.Data.DataColumn("pFt2Emt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpFt2Emt);
                this.columnxEzonC = new global::System.Data.DataColumn("xEzonC", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxEzonC);
                this.columnxEzonP = new global::System.Data.DataColumn("xEzonP", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxEzonP);
                this.columnxFtEzonC = new global::System.Data.DataColumn("xFtEzonC", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxFtEzonC);
                this.columnxFtEzonP = new global::System.Data.DataColumn("xFtEzonP", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxFtEzonP);
                this.columnxEzAreaC = new global::System.Data.DataColumn("xEzAreaC", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxEzAreaC);
                this.columnxEzAreaP = new global::System.Data.DataColumn("xEzAreaP", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxEzAreaP);
                this.columnuxMS4 = new global::System.Data.DataColumn("uxMS4", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuxMS4);
                this.columnuxUIC = new global::System.Data.DataColumn("uxUIC", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuxUIC);
                this.columnuDepth = new global::System.Data.DataColumn("uDepth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuDepth);
                this.columndDepth = new global::System.Data.DataColumn("dDepth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndDepth);
                this.columnxPipSlope = new global::System.Data.DataColumn("xPipSlope", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxPipSlope);
                this.columnxEcsi = new global::System.Data.DataColumn("xEcsi", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxEcsi);
                this.columnxFt2Ecsi = new global::System.Data.DataColumn("xFt2Ecsi", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxFt2Ecsi);
                this.columnxEcsiLen = new global::System.Data.DataColumn("xEcsiLen", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxEcsiLen);
                this.columnxEcsiVol = new global::System.Data.DataColumn("xEcsiVol", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxEcsiVol);
                this.columnxSchl = new global::System.Data.DataColumn("xSchl", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxSchl);
                this.columnxFt2Schl = new global::System.Data.DataColumn("xFt2Schl", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxFt2Schl);
                this.columnxHosp = new global::System.Data.DataColumn("xHosp", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxHosp);
                this.columnxFt2Hosp = new global::System.Data.DataColumn("xFt2Hosp", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxFt2Hosp);
                this.columnxPol = new global::System.Data.DataColumn("xPol", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxPol);
                this.columnxFt2Pol = new global::System.Data.DataColumn("xFt2Pol", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxFt2Pol);
                this.columnxFire = new global::System.Data.DataColumn("xFire", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxFire);
                this.columnxFt2Fire = new global::System.Data.DataColumn("xFt2Fire", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxFt2Fire);
                this.columnxBldg = new global::System.Data.DataColumn("xBldg", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxBldg);
                this.columnxFt2Bldg = new global::System.Data.DataColumn("xFt2Bldg", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxFt2Bldg);
                this.columnxHyd = new global::System.Data.DataColumn("xHyd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxHyd);
                this.columnxFt2Hyd = new global::System.Data.DataColumn("xFt2Hyd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxFt2Hyd);
                this.columnHardArea = new global::System.Data.DataColumn("HardArea", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHardArea);
                this.columnMLINKID = new global::System.Data.DataColumn("MLINKID", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMLINKID);
                this.columnUSNODE = new global::System.Data.DataColumn("USNODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSNODE);
                this.columnDSNODE = new global::System.Data.DataColumn("DSNODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSNODE);
                this.columnCOMPKEY = new global::System.Data.DataColumn("COMPKEY", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPKEY);
                this.columnxa = new global::System.Data.DataColumn("xa", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxa);
                this.columnya = new global::System.Data.DataColumn("ya", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnya);
                this.columnxb = new global::System.Data.DataColumn("xb", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxb);
                this.columnyb = new global::System.Data.DataColumn("yb", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyb);
                this.columnDeg2N = new global::System.Data.DataColumn("Deg2N", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeg2N);
                this.columnpWtr2 = new global::System.Data.DataColumn("pWtr2", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpWtr2);
                this.columnpWtr4 = new global::System.Data.DataColumn("pWtr4", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpWtr4);
                this.columnpWtr6 = new global::System.Data.DataColumn("pWtr6", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpWtr6);
                this.columnpWtr8 = new global::System.Data.DataColumn("pWtr8", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpWtr8);
                this.columnpWtr10 = new global::System.Data.DataColumn("pWtr10", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpWtr10);
                this.columnpWtr12 = new global::System.Data.DataColumn("pWtr12", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpWtr12);
                this.columnpSwr2 = new global::System.Data.DataColumn("pSwr2", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpSwr2);
                this.columnpSwr4 = new global::System.Data.DataColumn("pSwr4", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpSwr4);
                this.columnpSwr6 = new global::System.Data.DataColumn("pSwr6", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpSwr6);
                this.columnpSwr8 = new global::System.Data.DataColumn("pSwr8", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpSwr8);
                this.columnpSwr10 = new global::System.Data.DataColumn("pSwr10", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpSwr10);
                this.columngSlope = new global::System.Data.DataColumn("gSlope", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngSlope);
                this.columnxLUST = new global::System.Data.DataColumn("xLUST", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxLUST);
                this.columnxFt2LUST = new global::System.Data.DataColumn("xFt2LUST", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxFt2LUST);
                this.columnxpDeg2N = new global::System.Data.DataColumn("xpDeg2N", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxpDeg2N);
                this.columnINT01 = new global::System.Data.DataColumn("INT01", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINT01);
                this.columnINT02 = new global::System.Data.DataColumn("INT02", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINT02);
                this.columnFLT01 = new global::System.Data.DataColumn("FLT01", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFLT01);
                this.columnFLT02 = new global::System.Data.DataColumn("FLT02", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFLT02);
                this.columnTXT50 = new global::System.Data.DataColumn("TXT50", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTXT50);
                this.columnMAPINFO_ID.AutoIncrement = true;
                this.columnUSNODE.MaxLength = 6;
                this.columnDSNODE.MaxLength = 6;
                this.columnTXT50.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlPipXPRow NewMdlPipXPRow() {
                return ((MdlPipXPRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MdlPipXPRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MdlPipXPRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MdlPipXPRowChanged != null)) {
                    this.MdlPipXPRowChanged(this, new MdlPipXPRowChangeEvent(((MdlPipXPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MdlPipXPRowChanging != null)) {
                    this.MdlPipXPRowChanging(this, new MdlPipXPRowChangeEvent(((MdlPipXPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MdlPipXPRowDeleted != null)) {
                    this.MdlPipXPRowDeleted(this, new MdlPipXPRowChangeEvent(((MdlPipXPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MdlPipXPRowDeleting != null)) {
                    this.MdlPipXPRowDeleting(this, new MdlPipXPRowChangeEvent(((MdlPipXPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMdlPipXPRow(MdlPipXPRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ModelDataSet ds = new ModelDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MdlPipXPDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MdlDscRow : global::System.Data.DataRow {
            
            private MdlDscDataTable tableMdlDsc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MdlDscRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMdlDsc = ((MdlDscDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MapInfoID {
                get {
                    return ((int)(this[this.tableMdlDsc.MapInfoIDColumn]));
                }
                set {
                    this[this.tableMdlDsc.MapInfoIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableMdlDsc.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DivideID {
                get {
                    try {
                        return ((int)(this[this.tableMdlDsc.DivideIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DivideID\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.DivideIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DscID {
                get {
                    try {
                        return ((int)(this[this.tableMdlDsc.DscIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DscID\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.DscIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DiscoSiteID {
                get {
                    try {
                        return ((int)(this[this.tableMdlDsc.DiscoSiteIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DiscoSiteID\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.DiscoSiteIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiscoClass {
                get {
                    try {
                        return ((string)(this[this.tableMdlDsc.DiscoClassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DiscoClass\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.DiscoClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToLinkSan {
                get {
                    try {
                        return ((int)(this[this.tableMdlDsc.ToLinkSanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToLinkSan\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.ToLinkSanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToLinkStorm {
                get {
                    try {
                        return ((int)(this[this.tableMdlDsc.ToLinkStormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToLinkStorm\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.ToLinkStormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NGTOSan {
                get {
                    try {
                        return ((string)(this[this.tableMdlDsc.NGTOSanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NGTOSan\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.NGTOSanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NGTOStorm {
                get {
                    try {
                        return ((string)(this[this.tableMdlDsc.NGTOStormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NGTOStorm\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.NGTOStormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PipeFlowTypeSan {
                get {
                    try {
                        return ((string)(this[this.tableMdlDsc.PipeFlowTypeSanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeFlowTypeSan\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.PipeFlowTypeSanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PipeFlowTypeStorm {
                get {
                    try {
                        return ((string)(this[this.tableMdlDsc.PipeFlowTypeStormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeFlowTypeStorm\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.PipeFlowTypeStormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SanSwrCrown {
                get {
                    try {
                        return ((double)(this[this.tableMdlDsc.SanSwrCrownColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SanSwrCrown\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.SanSwrCrownColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Frac2SwrBeg {
                get {
                    try {
                        return ((double)(this[this.tableMdlDsc.Frac2SwrBegColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Frac2SwrBeg\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.Frac2SwrBegColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FloodRefElev {
                get {
                    try {
                        return ((double)(this[this.tableMdlDsc.FloodRefElevColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FloodRefElev\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.FloodRefElevColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FalseBFRisk {
                get {
                    try {
                        return ((bool)(this[this.tableMdlDsc.FalseBFRiskColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FalseBFRisk\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.FalseBFRiskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GridQAQC {
                get {
                    try {
                        return ((string)(this[this.tableMdlDsc.GridQAQCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GridQAQC\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.GridQAQCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MaxBldGrid {
                get {
                    try {
                        return ((double)(this[this.tableMdlDsc.MaxBldGridColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxBldGrid\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.MaxBldGridColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AvgParcelElev {
                get {
                    try {
                        return ((double)(this[this.tableMdlDsc.AvgParcelElevColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AvgParcelElev\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.AvgParcelElevColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EFFMethod {
                get {
                    try {
                        return ((string)(this[this.tableMdlDsc.EFFMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EFFMethod\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.EFFMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FFOverride {
                get {
                    try {
                        return ((string)(this[this.tableMdlDsc.FFOverrideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FFOverride\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.FFOverrideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double OrigFinishFloor {
                get {
                    try {
                        return ((double)(this[this.tableMdlDsc.OrigFinishFloorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrigFinishFloor\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.OrigFinishFloorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double HGL {
                get {
                    try {
                        return ((double)(this[this.tableMdlDsc.HGLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HGL\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.HGLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DeltaHGL {
                get {
                    try {
                        return ((double)(this[this.tableMdlDsc.DeltaHGLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeltaHGL\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.DeltaHGLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HGLComment {
                get {
                    try {
                        return ((string)(this[this.tableMdlDsc.HGLCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HGLComment\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.HGLCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataSourceFlags {
                get {
                    try {
                        return ((string)(this[this.tableMdlDsc.DataSourceFlagsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataSourceFlags\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.DataSourceFlagsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZoneEX {
                get {
                    try {
                        return ((string)(this[this.tableMdlDsc.ZoneEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZoneEX\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.ZoneEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZoneCP {
                get {
                    try {
                        return ((string)(this[this.tableMdlDsc.ZoneCPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZoneCP\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.ZoneCPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GenEX {
                get {
                    try {
                        return ((string)(this[this.tableMdlDsc.GenEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GenEX\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.GenEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GenCP {
                get {
                    try {
                        return ((string)(this[this.tableMdlDsc.GenCPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GenCP\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.GenCPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BaseFlow {
                get {
                    try {
                        return ((double)(this[this.tableMdlDsc.BaseFlowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseFlow\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.BaseFlowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BaseFlowEx {
                get {
                    try {
                        return ((double)(this[this.tableMdlDsc.BaseFlowExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseFlowEx\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.BaseFlowExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BaseFlowDM {
                get {
                    try {
                        return ((double)(this[this.tableMdlDsc.BaseFlowDMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseFlowDM\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.BaseFlowDMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ICFtRoof {
                get {
                    try {
                        return ((int)(this[this.tableMdlDsc.ICFtRoofColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ICFtRoof\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.ICFtRoofColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ICFtParking {
                get {
                    try {
                        return ((int)(this[this.tableMdlDsc.ICFtParkingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ICFtParking\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.ICFtParkingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ICFlag {
                get {
                    try {
                        return ((string)(this[this.tableMdlDsc.ICFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ICFlag\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.ICFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ImpFractEx {
                get {
                    try {
                        return ((double)(this[this.tableMdlDsc.ImpFractExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImpFractEx\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.ImpFractExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ImpFractCP {
                get {
                    try {
                        return ((double)(this[this.tableMdlDsc.ImpFractCPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImpFractCP\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.ImpFractCPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ImpFractFB {
                get {
                    try {
                        return ((double)(this[this.tableMdlDsc.ImpFractFBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImpFractFB\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.ImpFractFBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AreaFt {
                get {
                    try {
                        return ((double)(this[this.tableMdlDsc.AreaFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AreaFt\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.AreaFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RfAreaFt {
                get {
                    try {
                        return ((double)(this[this.tableMdlDsc.RfAreaFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RfAreaFt\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.RfAreaFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PkAreaFt {
                get {
                    try {
                        return ((double)(this[this.tableMdlDsc.PkAreaFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PkAreaFt\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.PkAreaFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TraceVisit {
                get {
                    try {
                        return ((string)(this[this.tableMdlDsc.TraceVisitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TraceVisit\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.TraceVisitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DscPickedFlag {
                get {
                    try {
                        return ((string)(this[this.tableMdlDsc.DscPickedFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DscPickedFlag\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.DscPickedFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UpdateAtts {
                get {
                    try {
                        return ((bool)(this[this.tableMdlDsc.UpdateAttsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdateAtts\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.UpdateAttsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int c_RFtosurfFt {
                get {
                    try {
                        return ((int)(this[this.tableMdlDsc.c_RFtosurfFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'c_RFtosurfFt\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.c_RFtosurfFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int c_PKtosurfFt {
                get {
                    try {
                        return ((int)(this[this.tableMdlDsc.c_PKtosurfFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'c_PKtosurfFt\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.c_PKtosurfFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int c_RFtosurfImpFt {
                get {
                    try {
                        return ((int)(this[this.tableMdlDsc.c_RFtosurfImpFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'c_RFtosurfImpFt\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.c_RFtosurfImpFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int c_PKtosurfImpFt {
                get {
                    try {
                        return ((int)(this[this.tableMdlDsc.c_PKtosurfImpFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'c_PKtosurfImpFt\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.c_PKtosurfImpFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableMdlDsc.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sewerable {
                get {
                    try {
                        return ((int)(this[this.tableMdlDsc.SewerableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sewerable\' in table \'MdlDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlDsc.SewerableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableMdlDsc.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableMdlDsc.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDivideIDNull() {
                return this.IsNull(this.tableMdlDsc.DivideIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDivideIDNull() {
                this[this.tableMdlDsc.DivideIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDscIDNull() {
                return this.IsNull(this.tableMdlDsc.DscIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDscIDNull() {
                this[this.tableMdlDsc.DscIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiscoSiteIDNull() {
                return this.IsNull(this.tableMdlDsc.DiscoSiteIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiscoSiteIDNull() {
                this[this.tableMdlDsc.DiscoSiteIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiscoClassNull() {
                return this.IsNull(this.tableMdlDsc.DiscoClassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiscoClassNull() {
                this[this.tableMdlDsc.DiscoClassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToLinkSanNull() {
                return this.IsNull(this.tableMdlDsc.ToLinkSanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToLinkSanNull() {
                this[this.tableMdlDsc.ToLinkSanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToLinkStormNull() {
                return this.IsNull(this.tableMdlDsc.ToLinkStormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToLinkStormNull() {
                this[this.tableMdlDsc.ToLinkStormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNGTOSanNull() {
                return this.IsNull(this.tableMdlDsc.NGTOSanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNGTOSanNull() {
                this[this.tableMdlDsc.NGTOSanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNGTOStormNull() {
                return this.IsNull(this.tableMdlDsc.NGTOStormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNGTOStormNull() {
                this[this.tableMdlDsc.NGTOStormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeFlowTypeSanNull() {
                return this.IsNull(this.tableMdlDsc.PipeFlowTypeSanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeFlowTypeSanNull() {
                this[this.tableMdlDsc.PipeFlowTypeSanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeFlowTypeStormNull() {
                return this.IsNull(this.tableMdlDsc.PipeFlowTypeStormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeFlowTypeStormNull() {
                this[this.tableMdlDsc.PipeFlowTypeStormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSanSwrCrownNull() {
                return this.IsNull(this.tableMdlDsc.SanSwrCrownColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSanSwrCrownNull() {
                this[this.tableMdlDsc.SanSwrCrownColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrac2SwrBegNull() {
                return this.IsNull(this.tableMdlDsc.Frac2SwrBegColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrac2SwrBegNull() {
                this[this.tableMdlDsc.Frac2SwrBegColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFloodRefElevNull() {
                return this.IsNull(this.tableMdlDsc.FloodRefElevColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFloodRefElevNull() {
                this[this.tableMdlDsc.FloodRefElevColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFalseBFRiskNull() {
                return this.IsNull(this.tableMdlDsc.FalseBFRiskColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFalseBFRiskNull() {
                this[this.tableMdlDsc.FalseBFRiskColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGridQAQCNull() {
                return this.IsNull(this.tableMdlDsc.GridQAQCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGridQAQCNull() {
                this[this.tableMdlDsc.GridQAQCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxBldGridNull() {
                return this.IsNull(this.tableMdlDsc.MaxBldGridColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxBldGridNull() {
                this[this.tableMdlDsc.MaxBldGridColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAvgParcelElevNull() {
                return this.IsNull(this.tableMdlDsc.AvgParcelElevColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAvgParcelElevNull() {
                this[this.tableMdlDsc.AvgParcelElevColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEFFMethodNull() {
                return this.IsNull(this.tableMdlDsc.EFFMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEFFMethodNull() {
                this[this.tableMdlDsc.EFFMethodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFFOverrideNull() {
                return this.IsNull(this.tableMdlDsc.FFOverrideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFFOverrideNull() {
                this[this.tableMdlDsc.FFOverrideColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrigFinishFloorNull() {
                return this.IsNull(this.tableMdlDsc.OrigFinishFloorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrigFinishFloorNull() {
                this[this.tableMdlDsc.OrigFinishFloorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHGLNull() {
                return this.IsNull(this.tableMdlDsc.HGLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHGLNull() {
                this[this.tableMdlDsc.HGLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeltaHGLNull() {
                return this.IsNull(this.tableMdlDsc.DeltaHGLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeltaHGLNull() {
                this[this.tableMdlDsc.DeltaHGLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHGLCommentNull() {
                return this.IsNull(this.tableMdlDsc.HGLCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHGLCommentNull() {
                this[this.tableMdlDsc.HGLCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataSourceFlagsNull() {
                return this.IsNull(this.tableMdlDsc.DataSourceFlagsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataSourceFlagsNull() {
                this[this.tableMdlDsc.DataSourceFlagsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZoneEXNull() {
                return this.IsNull(this.tableMdlDsc.ZoneEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZoneEXNull() {
                this[this.tableMdlDsc.ZoneEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZoneCPNull() {
                return this.IsNull(this.tableMdlDsc.ZoneCPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZoneCPNull() {
                this[this.tableMdlDsc.ZoneCPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenEXNull() {
                return this.IsNull(this.tableMdlDsc.GenEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenEXNull() {
                this[this.tableMdlDsc.GenEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenCPNull() {
                return this.IsNull(this.tableMdlDsc.GenCPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenCPNull() {
                this[this.tableMdlDsc.GenCPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseFlowNull() {
                return this.IsNull(this.tableMdlDsc.BaseFlowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseFlowNull() {
                this[this.tableMdlDsc.BaseFlowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseFlowExNull() {
                return this.IsNull(this.tableMdlDsc.BaseFlowExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseFlowExNull() {
                this[this.tableMdlDsc.BaseFlowExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseFlowDMNull() {
                return this.IsNull(this.tableMdlDsc.BaseFlowDMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseFlowDMNull() {
                this[this.tableMdlDsc.BaseFlowDMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsICFtRoofNull() {
                return this.IsNull(this.tableMdlDsc.ICFtRoofColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetICFtRoofNull() {
                this[this.tableMdlDsc.ICFtRoofColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsICFtParkingNull() {
                return this.IsNull(this.tableMdlDsc.ICFtParkingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetICFtParkingNull() {
                this[this.tableMdlDsc.ICFtParkingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsICFlagNull() {
                return this.IsNull(this.tableMdlDsc.ICFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetICFlagNull() {
                this[this.tableMdlDsc.ICFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImpFractExNull() {
                return this.IsNull(this.tableMdlDsc.ImpFractExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImpFractExNull() {
                this[this.tableMdlDsc.ImpFractExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImpFractCPNull() {
                return this.IsNull(this.tableMdlDsc.ImpFractCPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImpFractCPNull() {
                this[this.tableMdlDsc.ImpFractCPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImpFractFBNull() {
                return this.IsNull(this.tableMdlDsc.ImpFractFBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImpFractFBNull() {
                this[this.tableMdlDsc.ImpFractFBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAreaFtNull() {
                return this.IsNull(this.tableMdlDsc.AreaFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAreaFtNull() {
                this[this.tableMdlDsc.AreaFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRfAreaFtNull() {
                return this.IsNull(this.tableMdlDsc.RfAreaFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRfAreaFtNull() {
                this[this.tableMdlDsc.RfAreaFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPkAreaFtNull() {
                return this.IsNull(this.tableMdlDsc.PkAreaFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPkAreaFtNull() {
                this[this.tableMdlDsc.PkAreaFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTraceVisitNull() {
                return this.IsNull(this.tableMdlDsc.TraceVisitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTraceVisitNull() {
                this[this.tableMdlDsc.TraceVisitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDscPickedFlagNull() {
                return this.IsNull(this.tableMdlDsc.DscPickedFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDscPickedFlagNull() {
                this[this.tableMdlDsc.DscPickedFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdateAttsNull() {
                return this.IsNull(this.tableMdlDsc.UpdateAttsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdateAttsNull() {
                this[this.tableMdlDsc.UpdateAttsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isc_RFtosurfFtNull() {
                return this.IsNull(this.tableMdlDsc.c_RFtosurfFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setc_RFtosurfFtNull() {
                this[this.tableMdlDsc.c_RFtosurfFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isc_PKtosurfFtNull() {
                return this.IsNull(this.tableMdlDsc.c_PKtosurfFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setc_PKtosurfFtNull() {
                this[this.tableMdlDsc.c_PKtosurfFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isc_RFtosurfImpFtNull() {
                return this.IsNull(this.tableMdlDsc.c_RFtosurfImpFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setc_RFtosurfImpFtNull() {
                this[this.tableMdlDsc.c_RFtosurfImpFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isc_PKtosurfImpFtNull() {
                return this.IsNull(this.tableMdlDsc.c_PKtosurfImpFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setc_PKtosurfImpFtNull() {
                this[this.tableMdlDsc.c_PKtosurfImpFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableMdlDsc.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tableMdlDsc.IsActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSewerableNull() {
                return this.IsNull(this.tableMdlDsc.SewerableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSewerableNull() {
                this[this.tableMdlDsc.SewerableColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MdlSpecLinksRow : global::System.Data.DataRow {
            
            private MdlSpecLinksDataTable tableMdlSpecLinks;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MdlSpecLinksRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMdlSpecLinks = ((MdlSpecLinksDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MapInfoID {
                get {
                    return ((int)(this[this.tableMdlSpecLinks.MapInfoIDColumn]));
                }
                set {
                    this[this.tableMdlSpecLinks.MapInfoIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Node {
                get {
                    try {
                        return ((string)(this[this.tableMdlSpecLinks.NodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Node\' in table \'MdlSpecLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlSpecLinks.NodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToLinkID {
                get {
                    try {
                        return ((int)(this[this.tableMdlSpecLinks.ToLinkIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToLinkID\' in table \'MdlSpecLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlSpecLinks.ToLinkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToLinkIndex {
                get {
                    try {
                        return ((int)(this[this.tableMdlSpecLinks.ToLinkIndexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToLinkIndex\' in table \'MdlSpecLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlSpecLinks.ToLinkIndexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SpecLinkType {
                get {
                    try {
                        return ((string)(this[this.tableMdlSpecLinks.SpecLinkTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpecLinkType\' in table \'MdlSpecLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlSpecLinks.SpecLinkTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MSpecLinkID {
                get {
                    try {
                        return ((int)(this[this.tableMdlSpecLinks.MSpecLinkIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MSpecLinkID\' in table \'MdlSpecLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlSpecLinks.MSpecLinkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableMdlSpecLinks.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'MdlSpecLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlSpecLinks.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SLID {
                get {
                    try {
                        return ((int)(this[this.tableMdlSpecLinks.SLIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SLID\' in table \'MdlSpecLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlSpecLinks.SLIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SLNode {
                get {
                    try {
                        return ((string)(this[this.tableMdlSpecLinks.SLNodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SLNode\' in table \'MdlSpecLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlSpecLinks.SLNodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNodeNull() {
                return this.IsNull(this.tableMdlSpecLinks.NodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNodeNull() {
                this[this.tableMdlSpecLinks.NodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToLinkIDNull() {
                return this.IsNull(this.tableMdlSpecLinks.ToLinkIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToLinkIDNull() {
                this[this.tableMdlSpecLinks.ToLinkIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToLinkIndexNull() {
                return this.IsNull(this.tableMdlSpecLinks.ToLinkIndexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToLinkIndexNull() {
                this[this.tableMdlSpecLinks.ToLinkIndexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpecLinkTypeNull() {
                return this.IsNull(this.tableMdlSpecLinks.SpecLinkTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpecLinkTypeNull() {
                this[this.tableMdlSpecLinks.SpecLinkTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMSpecLinkIDNull() {
                return this.IsNull(this.tableMdlSpecLinks.MSpecLinkIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMSpecLinkIDNull() {
                this[this.tableMdlSpecLinks.MSpecLinkIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableMdlSpecLinks.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tableMdlSpecLinks.IsActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSLIDNull() {
                return this.IsNull(this.tableMdlSpecLinks.SLIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSLIDNull() {
                this[this.tableMdlSpecLinks.SLIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSLNodeNull() {
                return this.IsNull(this.tableMdlSpecLinks.SLNodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSLNodeNull() {
                this[this.tableMdlSpecLinks.SLNodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MdlLinksRow : global::System.Data.DataRow {
            
            private MdlLinksDataTable tableMdlLinks;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MdlLinksRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMdlLinks = ((MdlLinksDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MapinfoID {
                get {
                    return ((int)(this[this.tableMdlLinks.MapinfoIDColumn]));
                }
                set {
                    this[this.tableMdlLinks.MapinfoIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkID {
                get {
                    try {
                        return ((int)(this[this.tableMdlLinks.LinkIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinkID\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.LinkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USNode {
                get {
                    try {
                        return ((string)(this[this.tableMdlLinks.USNodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USNode\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.USNodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSNode {
                get {
                    try {
                        return ((string)(this[this.tableMdlLinks.DSNodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSNode\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.DSNodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkType {
                get {
                    try {
                        return ((string)(this[this.tableMdlLinks.LinkTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinkType\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.LinkTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PipeFlowType {
                get {
                    try {
                        return ((string)(this[this.tableMdlLinks.PipeFlowTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeFlowType\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.PipeFlowTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MLinkID {
                get {
                    try {
                        return ((int)(this[this.tableMdlLinks.MLinkIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MLinkID\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.MLinkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SimLinkID {
                get {
                    try {
                        return ((string)(this[this.tableMdlLinks.SimLinkIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SimLinkID\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.SimLinkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CompKey {
                get {
                    try {
                        return ((int)(this[this.tableMdlLinks.CompKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompKey\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.CompKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Length {
                get {
                    try {
                        return ((double)(this[this.tableMdlLinks.LengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Length\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.LengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DiamWidth {
                get {
                    try {
                        return ((double)(this[this.tableMdlLinks.DiamWidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DiamWidth\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.DiamWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Height {
                get {
                    try {
                        return ((double)(this[this.tableMdlLinks.HeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Height\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.HeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PipeShape {
                get {
                    try {
                        return ((string)(this[this.tableMdlLinks.PipeShapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeShape\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.PipeShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Material {
                get {
                    try {
                        return ((string)(this[this.tableMdlLinks.MaterialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Material\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.MaterialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UpsDpth {
                get {
                    try {
                        return ((double)(this[this.tableMdlLinks.UpsDpthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpsDpth\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.UpsDpthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DwnDpth {
                get {
                    try {
                        return ((double)(this[this.tableMdlLinks.DwnDpthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DwnDpth\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.DwnDpthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UsIE {
                get {
                    try {
                        return ((double)(this[this.tableMdlLinks.UsIEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UsIE\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.UsIEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DsIE {
                get {
                    try {
                        return ((double)(this[this.tableMdlLinks.DsIEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DsIE\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.DsIEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AsBuilt {
                get {
                    try {
                        return ((string)(this[this.tableMdlLinks.AsBuiltColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AsBuilt\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.AsBuiltColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Instdate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMdlLinks.InstdateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Instdate\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.InstdateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FromX {
                get {
                    try {
                        return ((double)(this[this.tableMdlLinks.FromXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromX\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.FromXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FromY {
                get {
                    try {
                        return ((double)(this[this.tableMdlLinks.FromYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromY\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.FromYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ToX {
                get {
                    try {
                        return ((double)(this[this.tableMdlLinks.ToXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToX\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.ToXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ToY {
                get {
                    try {
                        return ((double)(this[this.tableMdlLinks.ToYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToY\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.ToYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Roughness {
                get {
                    try {
                        return ((double)(this[this.tableMdlLinks.RoughnessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Roughness\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.RoughnessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkReach {
                get {
                    try {
                        return ((string)(this[this.tableMdlLinks.LinkReachColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinkReach\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.LinkReachColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReachElement {
                get {
                    try {
                        return ((int)(this[this.tableMdlLinks.ReachElementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReachElement\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.ReachElementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DataFlagSynth {
                get {
                    try {
                        return ((int)(this[this.tableMdlLinks.DataFlagSynthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataFlagSynth\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.DataFlagSynthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataQual {
                get {
                    try {
                        return ((string)(this[this.tableMdlLinks.DataQualColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataQual\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.DataQualColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpecLink {
                get {
                    try {
                        return ((bool)(this[this.tableMdlLinks.IsSpecLinkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsSpecLink\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.IsSpecLinkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HServStat {
                get {
                    try {
                        return ((string)(this[this.tableMdlLinks.HServStatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HServStat\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.HServStatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TraceVisit {
                get {
                    try {
                        return ((string)(this[this.tableMdlLinks.TraceVisitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TraceVisit\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.TraceVisitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataSource {
                get {
                    try {
                        return ((string)(this[this.tableMdlLinks.DataSourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataSource\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.DataSourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Source {
                get {
                    try {
                        return ((string)(this[this.tableMdlLinks.SourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Source\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableMdlLinks.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'MdlLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlLinks.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinkIDNull() {
                return this.IsNull(this.tableMdlLinks.LinkIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinkIDNull() {
                this[this.tableMdlLinks.LinkIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSNodeNull() {
                return this.IsNull(this.tableMdlLinks.USNodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSNodeNull() {
                this[this.tableMdlLinks.USNodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSNodeNull() {
                return this.IsNull(this.tableMdlLinks.DSNodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSNodeNull() {
                this[this.tableMdlLinks.DSNodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinkTypeNull() {
                return this.IsNull(this.tableMdlLinks.LinkTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinkTypeNull() {
                this[this.tableMdlLinks.LinkTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeFlowTypeNull() {
                return this.IsNull(this.tableMdlLinks.PipeFlowTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeFlowTypeNull() {
                this[this.tableMdlLinks.PipeFlowTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMLinkIDNull() {
                return this.IsNull(this.tableMdlLinks.MLinkIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMLinkIDNull() {
                this[this.tableMdlLinks.MLinkIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSimLinkIDNull() {
                return this.IsNull(this.tableMdlLinks.SimLinkIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSimLinkIDNull() {
                this[this.tableMdlLinks.SimLinkIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompKeyNull() {
                return this.IsNull(this.tableMdlLinks.CompKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompKeyNull() {
                this[this.tableMdlLinks.CompKeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthNull() {
                return this.IsNull(this.tableMdlLinks.LengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthNull() {
                this[this.tableMdlLinks.LengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiamWidthNull() {
                return this.IsNull(this.tableMdlLinks.DiamWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiamWidthNull() {
                this[this.tableMdlLinks.DiamWidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeightNull() {
                return this.IsNull(this.tableMdlLinks.HeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeightNull() {
                this[this.tableMdlLinks.HeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeShapeNull() {
                return this.IsNull(this.tableMdlLinks.PipeShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeShapeNull() {
                this[this.tableMdlLinks.PipeShapeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialNull() {
                return this.IsNull(this.tableMdlLinks.MaterialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialNull() {
                this[this.tableMdlLinks.MaterialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpsDpthNull() {
                return this.IsNull(this.tableMdlLinks.UpsDpthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpsDpthNull() {
                this[this.tableMdlLinks.UpsDpthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDwnDpthNull() {
                return this.IsNull(this.tableMdlLinks.DwnDpthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDwnDpthNull() {
                this[this.tableMdlLinks.DwnDpthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsIENull() {
                return this.IsNull(this.tableMdlLinks.UsIEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsIENull() {
                this[this.tableMdlLinks.UsIEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDsIENull() {
                return this.IsNull(this.tableMdlLinks.DsIEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDsIENull() {
                this[this.tableMdlLinks.DsIEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAsBuiltNull() {
                return this.IsNull(this.tableMdlLinks.AsBuiltColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAsBuiltNull() {
                this[this.tableMdlLinks.AsBuiltColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstdateNull() {
                return this.IsNull(this.tableMdlLinks.InstdateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstdateNull() {
                this[this.tableMdlLinks.InstdateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromXNull() {
                return this.IsNull(this.tableMdlLinks.FromXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromXNull() {
                this[this.tableMdlLinks.FromXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromYNull() {
                return this.IsNull(this.tableMdlLinks.FromYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromYNull() {
                this[this.tableMdlLinks.FromYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToXNull() {
                return this.IsNull(this.tableMdlLinks.ToXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToXNull() {
                this[this.tableMdlLinks.ToXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToYNull() {
                return this.IsNull(this.tableMdlLinks.ToYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToYNull() {
                this[this.tableMdlLinks.ToYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoughnessNull() {
                return this.IsNull(this.tableMdlLinks.RoughnessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRoughnessNull() {
                this[this.tableMdlLinks.RoughnessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinkReachNull() {
                return this.IsNull(this.tableMdlLinks.LinkReachColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinkReachNull() {
                this[this.tableMdlLinks.LinkReachColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReachElementNull() {
                return this.IsNull(this.tableMdlLinks.ReachElementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReachElementNull() {
                this[this.tableMdlLinks.ReachElementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataFlagSynthNull() {
                return this.IsNull(this.tableMdlLinks.DataFlagSynthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataFlagSynthNull() {
                this[this.tableMdlLinks.DataFlagSynthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataQualNull() {
                return this.IsNull(this.tableMdlLinks.DataQualColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataQualNull() {
                this[this.tableMdlLinks.DataQualColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsSpecLinkNull() {
                return this.IsNull(this.tableMdlLinks.IsSpecLinkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsSpecLinkNull() {
                this[this.tableMdlLinks.IsSpecLinkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHServStatNull() {
                return this.IsNull(this.tableMdlLinks.HServStatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHServStatNull() {
                this[this.tableMdlLinks.HServStatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTraceVisitNull() {
                return this.IsNull(this.tableMdlLinks.TraceVisitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTraceVisitNull() {
                this[this.tableMdlLinks.TraceVisitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataSourceNull() {
                return this.IsNull(this.tableMdlLinks.DataSourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataSourceNull() {
                this[this.tableMdlLinks.DataSourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceNull() {
                return this.IsNull(this.tableMdlLinks.SourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceNull() {
                this[this.tableMdlLinks.SourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableMdlLinks.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tableMdlLinks.IsActiveColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MdlNodesRow : global::System.Data.DataRow {
            
            private MdlNodesDataTable tableMdlNodes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MdlNodesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMdlNodes = ((MdlNodesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MapInfoID {
                get {
                    return ((int)(this[this.tableMdlNodes.MapInfoIDColumn]));
                }
                set {
                    this[this.tableMdlNodes.MapInfoIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Node {
                get {
                    try {
                        return ((string)(this[this.tableMdlNodes.NodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Node\' in table \'MdlNodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlNodes.NodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double XCoord {
                get {
                    try {
                        return ((double)(this[this.tableMdlNodes.XCoordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'XCoord\' in table \'MdlNodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlNodes.XCoordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double YCoord {
                get {
                    try {
                        return ((double)(this[this.tableMdlNodes.YCoordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YCoord\' in table \'MdlNodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlNodes.YCoordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NodeType {
                get {
                    try {
                        return ((string)(this[this.tableMdlNodes.NodeTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NodeType\' in table \'MdlNodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlNodes.NodeTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double GrndElev {
                get {
                    try {
                        return ((double)(this[this.tableMdlNodes.GrndElevColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrndElev\' in table \'MdlNodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlNodes.GrndElevColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HasSpecNode {
                get {
                    try {
                        return ((string)(this[this.tableMdlNodes.HasSpecNodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HasSpecNode\' in table \'MdlNodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlNodes.HasSpecNodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HasSpecLink {
                get {
                    try {
                        return ((string)(this[this.tableMdlNodes.HasSpecLinkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HasSpecLink\' in table \'MdlNodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlNodes.HasSpecLinkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GageID {
                get {
                    try {
                        return ((string)(this[this.tableMdlNodes.GageIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GageID\' in table \'MdlNodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlNodes.GageIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TraceVisit {
                get {
                    try {
                        return ((string)(this[this.tableMdlNodes.TraceVisitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TraceVisit\' in table \'MdlNodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlNodes.TraceVisitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableMdlNodes.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'MdlNodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlNodes.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNodeNull() {
                return this.IsNull(this.tableMdlNodes.NodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNodeNull() {
                this[this.tableMdlNodes.NodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXCoordNull() {
                return this.IsNull(this.tableMdlNodes.XCoordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXCoordNull() {
                this[this.tableMdlNodes.XCoordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYCoordNull() {
                return this.IsNull(this.tableMdlNodes.YCoordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYCoordNull() {
                this[this.tableMdlNodes.YCoordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNodeTypeNull() {
                return this.IsNull(this.tableMdlNodes.NodeTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNodeTypeNull() {
                this[this.tableMdlNodes.NodeTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrndElevNull() {
                return this.IsNull(this.tableMdlNodes.GrndElevColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrndElevNull() {
                this[this.tableMdlNodes.GrndElevColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasSpecNodeNull() {
                return this.IsNull(this.tableMdlNodes.HasSpecNodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasSpecNodeNull() {
                this[this.tableMdlNodes.HasSpecNodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasSpecLinkNull() {
                return this.IsNull(this.tableMdlNodes.HasSpecLinkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasSpecLinkNull() {
                this[this.tableMdlNodes.HasSpecLinkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGageIDNull() {
                return this.IsNull(this.tableMdlNodes.GageIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGageIDNull() {
                this[this.tableMdlNodes.GageIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTraceVisitNull() {
                return this.IsNull(this.tableMdlNodes.TraceVisitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTraceVisitNull() {
                this[this.tableMdlNodes.TraceVisitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableMdlNodes.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tableMdlNodes.IsActiveColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MdlSpecLinkDataRow : global::System.Data.DataRow {
            
            private MdlSpecLinkDataDataTable tableMdlSpecLinkData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MdlSpecLinkDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMdlSpecLinkData = ((MdlSpecLinkDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MapInfoID {
                get {
                    return ((int)(this[this.tableMdlSpecLinkData.MapInfoIDColumn]));
                }
                set {
                    this[this.tableMdlSpecLinkData.MapInfoIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Node {
                get {
                    try {
                        return ((string)(this[this.tableMdlSpecLinkData.NodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Node\' in table \'MdlSpecLinkData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlSpecLinkData.NodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToLinkID {
                get {
                    try {
                        return ((int)(this[this.tableMdlSpecLinkData.ToLinkIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToLinkID\' in table \'MdlSpecLinkData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlSpecLinkData.ToLinkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToLinkNDX {
                get {
                    try {
                        return ((int)(this[this.tableMdlSpecLinkData.ToLinkNDXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToLinkNDX\' in table \'MdlSpecLinkData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlSpecLinkData.ToLinkNDXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tag {
                get {
                    try {
                        return ((string)(this[this.tableMdlSpecLinkData.TagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tag\' in table \'MdlSpecLinkData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlSpecLinkData.TagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TValue {
                get {
                    try {
                        return ((string)(this[this.tableMdlSpecLinkData.TValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TValue\' in table \'MdlSpecLinkData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlSpecLinkData.TValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NValue {
                get {
                    try {
                        return ((double)(this[this.tableMdlSpecLinkData.NValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NValue\' in table \'MdlSpecLinkData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlSpecLinkData.NValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SLID {
                get {
                    try {
                        return ((int)(this[this.tableMdlSpecLinkData.SLIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SLID\' in table \'MdlSpecLinkData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlSpecLinkData.SLIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNodeNull() {
                return this.IsNull(this.tableMdlSpecLinkData.NodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNodeNull() {
                this[this.tableMdlSpecLinkData.NodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToLinkIDNull() {
                return this.IsNull(this.tableMdlSpecLinkData.ToLinkIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToLinkIDNull() {
                this[this.tableMdlSpecLinkData.ToLinkIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToLinkNDXNull() {
                return this.IsNull(this.tableMdlSpecLinkData.ToLinkNDXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToLinkNDXNull() {
                this[this.tableMdlSpecLinkData.ToLinkNDXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTagNull() {
                return this.IsNull(this.tableMdlSpecLinkData.TagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTagNull() {
                this[this.tableMdlSpecLinkData.TagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTValueNull() {
                return this.IsNull(this.tableMdlSpecLinkData.TValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTValueNull() {
                this[this.tableMdlSpecLinkData.TValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNValueNull() {
                return this.IsNull(this.tableMdlSpecLinkData.NValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNValueNull() {
                this[this.tableMdlSpecLinkData.NValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSLIDNull() {
                return this.IsNull(this.tableMdlSpecLinkData.SLIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSLIDNull() {
                this[this.tableMdlSpecLinkData.SLIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MdlParkingTargetsRow : global::System.Data.DataRow {
            
            private MdlParkingTargetsDataTable tableMdlParkingTargets;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MdlParkingTargetsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMdlParkingTargets = ((MdlParkingTargetsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MAPINFO_ID {
                get {
                    return ((int)(this[this.tableMdlParkingTargets.MAPINFO_IDColumn]));
                }
                set {
                    this[this.tableMdlParkingTargets.MAPINFO_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableMdlParkingTargets.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DivideID {
                get {
                    try {
                        return ((short)(this[this.tableMdlParkingTargets.DivideIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DivideID\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.DivideIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EXICFtParking {
                get {
                    try {
                        return ((int)(this[this.tableMdlParkingTargets.EXICFtParkingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXICFtParking\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.EXICFtParkingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EXPkAreaFt {
                get {
                    try {
                        return ((int)(this[this.tableMdlParkingTargets.EXPkAreaFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXPkAreaFt\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.EXPkAreaFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParkingTargetArea {
                get {
                    try {
                        return ((int)(this[this.tableMdlParkingTargets.ParkingTargetAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParkingTargetArea\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.ParkingTargetAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NGTO_Direct {
                get {
                    try {
                        return ((string)(this[this.tableMdlParkingTargets.NGTO_DirectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NGTO_Direct\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.NGTO_DirectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NGTO_Surface {
                get {
                    try {
                        return ((string)(this[this.tableMdlParkingTargets.NGTO_SurfaceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NGTO_Surface\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.NGTO_SurfaceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NGTOParking {
                get {
                    try {
                        return ((string)(this[this.tableMdlParkingTargets.NGTOParkingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NGTOParking\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.NGTOParkingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Evaluated {
                get {
                    try {
                        return ((bool)(this[this.tableMdlParkingTargets.EvaluatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Evaluated\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.EvaluatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Inlets {
                get {
                    try {
                        return ((bool)(this[this.tableMdlParkingTargets.InletsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Inlets\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.InletsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Parking_Spaces {
                get {
                    try {
                        return ((int)(this[this.tableMdlParkingTargets.Parking_SpacesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Parking_Spaces\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.Parking_SpacesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Perc_Space_Used {
                get {
                    try {
                        return ((int)(this[this.tableMdlParkingTargets.Perc_Space_UsedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Perc_Space_Used\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.Perc_Space_UsedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Drainage {
                get {
                    try {
                        return ((string)(this[this.tableMdlParkingTargets.DrainageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Drainage\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.DrainageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NGTO {
                get {
                    try {
                        return ((string)(this[this.tableMdlParkingTargets.NGTOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NGTO\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.NGTOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Controllable {
                get {
                    try {
                        return ((string)(this[this.tableMdlParkingTargets.ControllableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Controllable\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.ControllableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FractionControllable {
                get {
                    try {
                        return ((double)(this[this.tableMdlParkingTargets.FractionControllableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FractionControllable\' in table \'MdlParkingTargets\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.FractionControllableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Difficulty {
                get {
                    try {
                        return ((short)(this[this.tableMdlParkingTargets.DifficultyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Difficulty\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.DifficultyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ParkingEffDisc {
                get {
                    try {
                        return ((double)(this[this.tableMdlParkingTargets.ParkingEffDiscColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParkingEffDisc\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.ParkingEffDiscColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableMdlParkingTargets.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Fraction2Drywell {
                get {
                    try {
                        return ((double)(this[this.tableMdlParkingTargets.Fraction2DrywellColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fraction2Drywell\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.Fraction2DrywellColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool BuildModelIC {
                get {
                    try {
                        return ((bool)(this[this.tableMdlParkingTargets.BuildModelICColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuildModelIC\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.BuildModelICColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Source {
                get {
                    try {
                        return ((string)(this[this.tableMdlParkingTargets.SourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Source\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AppendDate {
                get {
                    try {
                        return ((string)(this[this.tableMdlParkingTargets.AppendDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AppendDate\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.AppendDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ICID {
                get {
                    try {
                        return ((int)(this[this.tableMdlParkingTargets.ICIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ICID\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.ICIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Constructed {
                get {
                    try {
                        return ((int)(this[this.tableMdlParkingTargets.ConstructedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Constructed\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.ConstructedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FocusArea {
                get {
                    try {
                        return ((string)(this[this.tableMdlParkingTargets.FocusAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FocusArea\' in table \'MdlParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlParkingTargets.FocusAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableMdlParkingTargets.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableMdlParkingTargets.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDivideIDNull() {
                return this.IsNull(this.tableMdlParkingTargets.DivideIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDivideIDNull() {
                this[this.tableMdlParkingTargets.DivideIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXICFtParkingNull() {
                return this.IsNull(this.tableMdlParkingTargets.EXICFtParkingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXICFtParkingNull() {
                this[this.tableMdlParkingTargets.EXICFtParkingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXPkAreaFtNull() {
                return this.IsNull(this.tableMdlParkingTargets.EXPkAreaFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXPkAreaFtNull() {
                this[this.tableMdlParkingTargets.EXPkAreaFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParkingTargetAreaNull() {
                return this.IsNull(this.tableMdlParkingTargets.ParkingTargetAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParkingTargetAreaNull() {
                this[this.tableMdlParkingTargets.ParkingTargetAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNGTO_DirectNull() {
                return this.IsNull(this.tableMdlParkingTargets.NGTO_DirectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNGTO_DirectNull() {
                this[this.tableMdlParkingTargets.NGTO_DirectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNGTO_SurfaceNull() {
                return this.IsNull(this.tableMdlParkingTargets.NGTO_SurfaceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNGTO_SurfaceNull() {
                this[this.tableMdlParkingTargets.NGTO_SurfaceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNGTOParkingNull() {
                return this.IsNull(this.tableMdlParkingTargets.NGTOParkingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNGTOParkingNull() {
                this[this.tableMdlParkingTargets.NGTOParkingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEvaluatedNull() {
                return this.IsNull(this.tableMdlParkingTargets.EvaluatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEvaluatedNull() {
                this[this.tableMdlParkingTargets.EvaluatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInletsNull() {
                return this.IsNull(this.tableMdlParkingTargets.InletsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInletsNull() {
                this[this.tableMdlParkingTargets.InletsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParking_SpacesNull() {
                return this.IsNull(this.tableMdlParkingTargets.Parking_SpacesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParking_SpacesNull() {
                this[this.tableMdlParkingTargets.Parking_SpacesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPerc_Space_UsedNull() {
                return this.IsNull(this.tableMdlParkingTargets.Perc_Space_UsedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPerc_Space_UsedNull() {
                this[this.tableMdlParkingTargets.Perc_Space_UsedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDrainageNull() {
                return this.IsNull(this.tableMdlParkingTargets.DrainageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDrainageNull() {
                this[this.tableMdlParkingTargets.DrainageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNGTONull() {
                return this.IsNull(this.tableMdlParkingTargets.NGTOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNGTONull() {
                this[this.tableMdlParkingTargets.NGTOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsControllableNull() {
                return this.IsNull(this.tableMdlParkingTargets.ControllableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetControllableNull() {
                this[this.tableMdlParkingTargets.ControllableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFractionControllableNull() {
                return this.IsNull(this.tableMdlParkingTargets.FractionControllableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFractionControllableNull() {
                this[this.tableMdlParkingTargets.FractionControllableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDifficultyNull() {
                return this.IsNull(this.tableMdlParkingTargets.DifficultyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDifficultyNull() {
                this[this.tableMdlParkingTargets.DifficultyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParkingEffDiscNull() {
                return this.IsNull(this.tableMdlParkingTargets.ParkingEffDiscColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParkingEffDiscNull() {
                this[this.tableMdlParkingTargets.ParkingEffDiscColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableMdlParkingTargets.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableMdlParkingTargets.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFraction2DrywellNull() {
                return this.IsNull(this.tableMdlParkingTargets.Fraction2DrywellColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFraction2DrywellNull() {
                this[this.tableMdlParkingTargets.Fraction2DrywellColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuildModelICNull() {
                return this.IsNull(this.tableMdlParkingTargets.BuildModelICColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuildModelICNull() {
                this[this.tableMdlParkingTargets.BuildModelICColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceNull() {
                return this.IsNull(this.tableMdlParkingTargets.SourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceNull() {
                this[this.tableMdlParkingTargets.SourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppendDateNull() {
                return this.IsNull(this.tableMdlParkingTargets.AppendDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppendDateNull() {
                this[this.tableMdlParkingTargets.AppendDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsICIDNull() {
                return this.IsNull(this.tableMdlParkingTargets.ICIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetICIDNull() {
                this[this.tableMdlParkingTargets.ICIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConstructedNull() {
                return this.IsNull(this.tableMdlParkingTargets.ConstructedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConstructedNull() {
                this[this.tableMdlParkingTargets.ConstructedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFocusAreaNull() {
                return this.IsNull(this.tableMdlParkingTargets.FocusAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFocusAreaNull() {
                this[this.tableMdlParkingTargets.FocusAreaColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MdlRoofTargetsRow : global::System.Data.DataRow {
            
            private MdlRoofTargetsDataTable tableMdlRoofTargets;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MdlRoofTargetsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMdlRoofTargets = ((MdlRoofTargetsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MAPINFO_ID {
                get {
                    return ((int)(this[this.tableMdlRoofTargets.MAPINFO_IDColumn]));
                }
                set {
                    this[this.tableMdlRoofTargets.MAPINFO_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableMdlRoofTargets.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DivideID {
                get {
                    try {
                        return ((int)(this[this.tableMdlRoofTargets.DivideIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DivideID\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.DivideIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NGTORoof {
                get {
                    try {
                        return ((string)(this[this.tableMdlRoofTargets.NGTORoofColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NGTORoof\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.NGTORoofColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EXICFtRoof {
                get {
                    try {
                        return ((int)(this[this.tableMdlRoofTargets.EXICFtRoofColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXICFtRoof\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.EXICFtRoofColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EXRfAreaFt {
                get {
                    try {
                        return ((int)(this[this.tableMdlRoofTargets.EXRfAreaFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXRfAreaFt\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.EXRfAreaFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ExternalDS {
                get {
                    try {
                        return ((bool)(this[this.tableMdlRoofTargets.ExternalDSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExternalDS\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.ExternalDSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DSTotal {
                get {
                    try {
                        return ((short)(this[this.tableMdlRoofTargets.DSTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSTotal\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.DSTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short EXtoVeg {
                get {
                    try {
                        return ((short)(this[this.tableMdlRoofTargets.EXtoVegColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXtoVeg\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.EXtoVegColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short EXtoStreet {
                get {
                    try {
                        return ((short)(this[this.tableMdlRoofTargets.EXtoStreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXtoStreet\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.EXtoStreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short EXtoPlanter {
                get {
                    try {
                        return ((short)(this[this.tableMdlRoofTargets.EXtoPlanterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXtoPlanter\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.EXtoPlanterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short EXtoBioretention {
                get {
                    try {
                        return ((short)(this[this.tableMdlRoofTargets.EXtoBioretentionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXtoBioretention\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.EXtoBioretentionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short EXtoDrywell {
                get {
                    try {
                        return ((short)(this[this.tableMdlRoofTargets.EXtoDrywellColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXtoDrywell\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.EXtoDrywellColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short EXtoEcoroof {
                get {
                    try {
                        return ((short)(this[this.tableMdlRoofTargets.EXtoEcoroofColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXtoEcoroof\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.EXtoEcoroofColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DStoVeg {
                get {
                    try {
                        return ((short)(this[this.tableMdlRoofTargets.DStoVegColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DStoVeg\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.DStoVegColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DStoStreet {
                get {
                    try {
                        return ((short)(this[this.tableMdlRoofTargets.DStoStreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DStoStreet\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.DStoStreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DStoPlanter {
                get {
                    try {
                        return ((short)(this[this.tableMdlRoofTargets.DStoPlanterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DStoPlanter\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.DStoPlanterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DStoBioretention {
                get {
                    try {
                        return ((short)(this[this.tableMdlRoofTargets.DStoBioretentionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DStoBioretention\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.DStoBioretentionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DStoDrywell {
                get {
                    try {
                        return ((short)(this[this.tableMdlRoofTargets.DStoDrywellColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DStoDrywell\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.DStoDrywellColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DStoEcoroof {
                get {
                    try {
                        return ((short)(this[this.tableMdlRoofTargets.DStoEcoroofColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DStoEcoroof\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.DStoEcoroofColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DSUncontrollable {
                get {
                    try {
                        return ((short)(this[this.tableMdlRoofTargets.DSUncontrollableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSUncontrollable\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.DSUncontrollableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LandscapeAvailable {
                get {
                    try {
                        return ((bool)(this[this.tableMdlRoofTargets.LandscapeAvailableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandscapeAvailable\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.LandscapeAvailableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FractionDrained {
                get {
                    try {
                        return ((double)(this[this.tableMdlRoofTargets.FractionDrainedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FractionDrained\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.FractionDrainedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Difficulty {
                get {
                    try {
                        return ((short)(this[this.tableMdlRoofTargets.DifficultyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Difficulty\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.DifficultyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RoofEffDisc {
                get {
                    try {
                        return ((double)(this[this.tableMdlRoofTargets.RoofEffDiscColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RoofEffDisc\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.RoofEffDiscColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableMdlRoofTargets.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PlantersOK {
                get {
                    try {
                        return ((bool)(this[this.tableMdlRoofTargets.PlantersOKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlantersOK\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.PlantersOKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool BioretentionOK {
                get {
                    try {
                        return ((bool)(this[this.tableMdlRoofTargets.BioretentionOKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BioretentionOK\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.BioretentionOKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool BuildModelIC {
                get {
                    try {
                        return ((bool)(this[this.tableMdlRoofTargets.BuildModelICColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuildModelIC\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.BuildModelICColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Source {
                get {
                    try {
                        return ((string)(this[this.tableMdlRoofTargets.SourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Source\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AppendDate {
                get {
                    try {
                        return ((string)(this[this.tableMdlRoofTargets.AppendDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AppendDate\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.AppendDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ICID {
                get {
                    try {
                        return ((int)(this[this.tableMdlRoofTargets.ICIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ICID\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.ICIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Constructed {
                get {
                    try {
                        return ((int)(this[this.tableMdlRoofTargets.ConstructedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Constructed\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.ConstructedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FocusArea {
                get {
                    try {
                        return ((string)(this[this.tableMdlRoofTargets.FocusAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FocusArea\' in table \'MdlRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlRoofTargets.FocusAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableMdlRoofTargets.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableMdlRoofTargets.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDivideIDNull() {
                return this.IsNull(this.tableMdlRoofTargets.DivideIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDivideIDNull() {
                this[this.tableMdlRoofTargets.DivideIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNGTORoofNull() {
                return this.IsNull(this.tableMdlRoofTargets.NGTORoofColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNGTORoofNull() {
                this[this.tableMdlRoofTargets.NGTORoofColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXICFtRoofNull() {
                return this.IsNull(this.tableMdlRoofTargets.EXICFtRoofColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXICFtRoofNull() {
                this[this.tableMdlRoofTargets.EXICFtRoofColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXRfAreaFtNull() {
                return this.IsNull(this.tableMdlRoofTargets.EXRfAreaFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXRfAreaFtNull() {
                this[this.tableMdlRoofTargets.EXRfAreaFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExternalDSNull() {
                return this.IsNull(this.tableMdlRoofTargets.ExternalDSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExternalDSNull() {
                this[this.tableMdlRoofTargets.ExternalDSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSTotalNull() {
                return this.IsNull(this.tableMdlRoofTargets.DSTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSTotalNull() {
                this[this.tableMdlRoofTargets.DSTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXtoVegNull() {
                return this.IsNull(this.tableMdlRoofTargets.EXtoVegColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXtoVegNull() {
                this[this.tableMdlRoofTargets.EXtoVegColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXtoStreetNull() {
                return this.IsNull(this.tableMdlRoofTargets.EXtoStreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXtoStreetNull() {
                this[this.tableMdlRoofTargets.EXtoStreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXtoPlanterNull() {
                return this.IsNull(this.tableMdlRoofTargets.EXtoPlanterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXtoPlanterNull() {
                this[this.tableMdlRoofTargets.EXtoPlanterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXtoBioretentionNull() {
                return this.IsNull(this.tableMdlRoofTargets.EXtoBioretentionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXtoBioretentionNull() {
                this[this.tableMdlRoofTargets.EXtoBioretentionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXtoDrywellNull() {
                return this.IsNull(this.tableMdlRoofTargets.EXtoDrywellColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXtoDrywellNull() {
                this[this.tableMdlRoofTargets.EXtoDrywellColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXtoEcoroofNull() {
                return this.IsNull(this.tableMdlRoofTargets.EXtoEcoroofColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXtoEcoroofNull() {
                this[this.tableMdlRoofTargets.EXtoEcoroofColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDStoVegNull() {
                return this.IsNull(this.tableMdlRoofTargets.DStoVegColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDStoVegNull() {
                this[this.tableMdlRoofTargets.DStoVegColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDStoStreetNull() {
                return this.IsNull(this.tableMdlRoofTargets.DStoStreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDStoStreetNull() {
                this[this.tableMdlRoofTargets.DStoStreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDStoPlanterNull() {
                return this.IsNull(this.tableMdlRoofTargets.DStoPlanterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDStoPlanterNull() {
                this[this.tableMdlRoofTargets.DStoPlanterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDStoBioretentionNull() {
                return this.IsNull(this.tableMdlRoofTargets.DStoBioretentionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDStoBioretentionNull() {
                this[this.tableMdlRoofTargets.DStoBioretentionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDStoDrywellNull() {
                return this.IsNull(this.tableMdlRoofTargets.DStoDrywellColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDStoDrywellNull() {
                this[this.tableMdlRoofTargets.DStoDrywellColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDStoEcoroofNull() {
                return this.IsNull(this.tableMdlRoofTargets.DStoEcoroofColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDStoEcoroofNull() {
                this[this.tableMdlRoofTargets.DStoEcoroofColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSUncontrollableNull() {
                return this.IsNull(this.tableMdlRoofTargets.DSUncontrollableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSUncontrollableNull() {
                this[this.tableMdlRoofTargets.DSUncontrollableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandscapeAvailableNull() {
                return this.IsNull(this.tableMdlRoofTargets.LandscapeAvailableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandscapeAvailableNull() {
                this[this.tableMdlRoofTargets.LandscapeAvailableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFractionDrainedNull() {
                return this.IsNull(this.tableMdlRoofTargets.FractionDrainedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFractionDrainedNull() {
                this[this.tableMdlRoofTargets.FractionDrainedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDifficultyNull() {
                return this.IsNull(this.tableMdlRoofTargets.DifficultyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDifficultyNull() {
                this[this.tableMdlRoofTargets.DifficultyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoofEffDiscNull() {
                return this.IsNull(this.tableMdlRoofTargets.RoofEffDiscColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRoofEffDiscNull() {
                this[this.tableMdlRoofTargets.RoofEffDiscColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableMdlRoofTargets.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableMdlRoofTargets.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlantersOKNull() {
                return this.IsNull(this.tableMdlRoofTargets.PlantersOKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlantersOKNull() {
                this[this.tableMdlRoofTargets.PlantersOKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBioretentionOKNull() {
                return this.IsNull(this.tableMdlRoofTargets.BioretentionOKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBioretentionOKNull() {
                this[this.tableMdlRoofTargets.BioretentionOKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuildModelICNull() {
                return this.IsNull(this.tableMdlRoofTargets.BuildModelICColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuildModelICNull() {
                this[this.tableMdlRoofTargets.BuildModelICColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceNull() {
                return this.IsNull(this.tableMdlRoofTargets.SourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceNull() {
                this[this.tableMdlRoofTargets.SourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppendDateNull() {
                return this.IsNull(this.tableMdlRoofTargets.AppendDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppendDateNull() {
                this[this.tableMdlRoofTargets.AppendDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsICIDNull() {
                return this.IsNull(this.tableMdlRoofTargets.ICIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetICIDNull() {
                this[this.tableMdlRoofTargets.ICIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConstructedNull() {
                return this.IsNull(this.tableMdlRoofTargets.ConstructedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConstructedNull() {
                this[this.tableMdlRoofTargets.ConstructedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFocusAreaNull() {
                return this.IsNull(this.tableMdlRoofTargets.FocusAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFocusAreaNull() {
                this[this.tableMdlRoofTargets.FocusAreaColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MdlStreetTargetsRow : global::System.Data.DataRow {
            
            private MdlStreetTargetsDataTable tableMdlStreetTargets;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MdlStreetTargetsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMdlStreetTargets = ((MdlStreetTargetsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MAPINFO_ID {
                get {
                    return ((int)(this[this.tableMdlStreetTargets.MAPINFO_IDColumn]));
                }
                set {
                    this[this.tableMdlStreetTargets.MAPINFO_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NGTOStreet {
                get {
                    try {
                        return ((string)(this[this.tableMdlStreetTargets.NGTOStreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NGTOStreet\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.NGTOStreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurfSCID {
                get {
                    try {
                        return ((int)(this[this.tableMdlStreetTargets.SurfSCIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurfSCID\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.SurfSCIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Evaluation {
                get {
                    try {
                        return ((string)(this[this.tableMdlStreetTargets.EvaluationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Evaluation\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.EvaluationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableMdlStreetTargets.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableMdlStreetTargets.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double StreetArea {
                get {
                    try {
                        return ((double)(this[this.tableMdlStreetTargets.StreetAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StreetArea\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.StreetAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FlowControl {
                get {
                    try {
                        return ((double)(this[this.tableMdlStreetTargets.FlowControlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowControl\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.FlowControlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Intersection {
                get {
                    try {
                        return ((string)(this[this.tableMdlStreetTargets.IntersectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Intersection\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.IntersectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Corner {
                get {
                    try {
                        return ((string)(this[this.tableMdlStreetTargets.CornerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Corner\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.CornerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street1 {
                get {
                    try {
                        return ((string)(this[this.tableMdlStreetTargets.Street1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street1\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.Street1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Street1Area {
                get {
                    try {
                        return ((int)(this[this.tableMdlStreetTargets.Street1AreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street1Area\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.Street1AreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Street1CExtVol {
                get {
                    try {
                        return ((short)(this[this.tableMdlStreetTargets.Street1CExtVolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street1CExtVol\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.Street1CExtVolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Street1CExtFlow {
                get {
                    try {
                        return ((double)(this[this.tableMdlStreetTargets.Street1CExtFlowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street1CExtFlow\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.Street1CExtFlowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street2 {
                get {
                    try {
                        return ((string)(this[this.tableMdlStreetTargets.Street2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street2\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.Street2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Street2Area {
                get {
                    try {
                        return ((int)(this[this.tableMdlStreetTargets.Street2AreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street2Area\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.Street2AreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Street2CExtVol {
                get {
                    try {
                        return ((short)(this[this.tableMdlStreetTargets.Street2CExtVolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street2CExtVol\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.Street2CExtVolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Street2CExtFlow {
                get {
                    try {
                        return ((double)(this[this.tableMdlStreetTargets.Street2CExtFlowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street2CExtFlow\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.Street2CExtFlowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrificeArea {
                get {
                    try {
                        return ((int)(this[this.tableMdlStreetTargets.OrificeAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrificeArea\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.OrificeAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CurbExtensionArea {
                get {
                    try {
                        return ((int)(this[this.tableMdlStreetTargets.CurbExtensionAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurbExtensionArea\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.CurbExtensionAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short PondingVol {
                get {
                    try {
                        return ((short)(this[this.tableMdlStreetTargets.PondingVolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PondingVol\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.PondingVolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short CurbExtensionVol {
                get {
                    try {
                        return ((short)(this[this.tableMdlStreetTargets.CurbExtensionVolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurbExtensionVol\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.CurbExtensionVolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments2 {
                get {
                    try {
                        return ((string)(this[this.tableMdlStreetTargets.Comments2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments2\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.Comments2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TypeCode {
                get {
                    try {
                        return ((string)(this[this.tableMdlStreetTargets.TypeCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TypeCode\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.TypeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string XPSWMM_Name {
                get {
                    try {
                        return ((string)(this[this.tableMdlStreetTargets.XPSWMM_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'XPSWMM_Name\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.XPSWMM_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int XCoord {
                get {
                    try {
                        return ((int)(this[this.tableMdlStreetTargets.XCoordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'XCoord\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.XCoordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int YCoord {
                get {
                    try {
                        return ((int)(this[this.tableMdlStreetTargets.YCoordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YCoord\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.YCoordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool BuildModelIC {
                get {
                    try {
                        return ((bool)(this[this.tableMdlStreetTargets.BuildModelICColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuildModelIC\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.BuildModelICColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Source {
                get {
                    try {
                        return ((string)(this[this.tableMdlStreetTargets.SourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Source\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AppendDate {
                get {
                    try {
                        return ((string)(this[this.tableMdlStreetTargets.AppendDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AppendDate\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.AppendDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NGTOStreet_2 {
                get {
                    try {
                        return ((string)(this[this.tableMdlStreetTargets.NGTOStreet_2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NGTOStreet_2\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.NGTOStreet_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ICID {
                get {
                    try {
                        return ((int)(this[this.tableMdlStreetTargets.ICIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ICID\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.ICIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Constructed {
                get {
                    try {
                        return ((int)(this[this.tableMdlStreetTargets.ConstructedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Constructed\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.ConstructedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FocusArea {
                get {
                    try {
                        return ((string)(this[this.tableMdlStreetTargets.FocusAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FocusArea\' in table \'MdlStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlStreetTargets.FocusAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNGTOStreetNull() {
                return this.IsNull(this.tableMdlStreetTargets.NGTOStreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNGTOStreetNull() {
                this[this.tableMdlStreetTargets.NGTOStreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurfSCIDNull() {
                return this.IsNull(this.tableMdlStreetTargets.SurfSCIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurfSCIDNull() {
                this[this.tableMdlStreetTargets.SurfSCIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEvaluationNull() {
                return this.IsNull(this.tableMdlStreetTargets.EvaluationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEvaluationNull() {
                this[this.tableMdlStreetTargets.EvaluationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableMdlStreetTargets.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableMdlStreetTargets.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableMdlStreetTargets.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableMdlStreetTargets.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetAreaNull() {
                return this.IsNull(this.tableMdlStreetTargets.StreetAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetAreaNull() {
                this[this.tableMdlStreetTargets.StreetAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowControlNull() {
                return this.IsNull(this.tableMdlStreetTargets.FlowControlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowControlNull() {
                this[this.tableMdlStreetTargets.FlowControlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIntersectionNull() {
                return this.IsNull(this.tableMdlStreetTargets.IntersectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIntersectionNull() {
                this[this.tableMdlStreetTargets.IntersectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCornerNull() {
                return this.IsNull(this.tableMdlStreetTargets.CornerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCornerNull() {
                this[this.tableMdlStreetTargets.CornerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreet1Null() {
                return this.IsNull(this.tableMdlStreetTargets.Street1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreet1Null() {
                this[this.tableMdlStreetTargets.Street1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreet1AreaNull() {
                return this.IsNull(this.tableMdlStreetTargets.Street1AreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreet1AreaNull() {
                this[this.tableMdlStreetTargets.Street1AreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreet1CExtVolNull() {
                return this.IsNull(this.tableMdlStreetTargets.Street1CExtVolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreet1CExtVolNull() {
                this[this.tableMdlStreetTargets.Street1CExtVolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreet1CExtFlowNull() {
                return this.IsNull(this.tableMdlStreetTargets.Street1CExtFlowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreet1CExtFlowNull() {
                this[this.tableMdlStreetTargets.Street1CExtFlowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreet2Null() {
                return this.IsNull(this.tableMdlStreetTargets.Street2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreet2Null() {
                this[this.tableMdlStreetTargets.Street2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreet2AreaNull() {
                return this.IsNull(this.tableMdlStreetTargets.Street2AreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreet2AreaNull() {
                this[this.tableMdlStreetTargets.Street2AreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreet2CExtVolNull() {
                return this.IsNull(this.tableMdlStreetTargets.Street2CExtVolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreet2CExtVolNull() {
                this[this.tableMdlStreetTargets.Street2CExtVolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreet2CExtFlowNull() {
                return this.IsNull(this.tableMdlStreetTargets.Street2CExtFlowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreet2CExtFlowNull() {
                this[this.tableMdlStreetTargets.Street2CExtFlowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrificeAreaNull() {
                return this.IsNull(this.tableMdlStreetTargets.OrificeAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrificeAreaNull() {
                this[this.tableMdlStreetTargets.OrificeAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurbExtensionAreaNull() {
                return this.IsNull(this.tableMdlStreetTargets.CurbExtensionAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurbExtensionAreaNull() {
                this[this.tableMdlStreetTargets.CurbExtensionAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPondingVolNull() {
                return this.IsNull(this.tableMdlStreetTargets.PondingVolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPondingVolNull() {
                this[this.tableMdlStreetTargets.PondingVolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurbExtensionVolNull() {
                return this.IsNull(this.tableMdlStreetTargets.CurbExtensionVolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurbExtensionVolNull() {
                this[this.tableMdlStreetTargets.CurbExtensionVolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsComments2Null() {
                return this.IsNull(this.tableMdlStreetTargets.Comments2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetComments2Null() {
                this[this.tableMdlStreetTargets.Comments2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeCodeNull() {
                return this.IsNull(this.tableMdlStreetTargets.TypeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeCodeNull() {
                this[this.tableMdlStreetTargets.TypeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXPSWMM_NameNull() {
                return this.IsNull(this.tableMdlStreetTargets.XPSWMM_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXPSWMM_NameNull() {
                this[this.tableMdlStreetTargets.XPSWMM_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXCoordNull() {
                return this.IsNull(this.tableMdlStreetTargets.XCoordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXCoordNull() {
                this[this.tableMdlStreetTargets.XCoordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYCoordNull() {
                return this.IsNull(this.tableMdlStreetTargets.YCoordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYCoordNull() {
                this[this.tableMdlStreetTargets.YCoordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuildModelICNull() {
                return this.IsNull(this.tableMdlStreetTargets.BuildModelICColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuildModelICNull() {
                this[this.tableMdlStreetTargets.BuildModelICColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceNull() {
                return this.IsNull(this.tableMdlStreetTargets.SourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceNull() {
                this[this.tableMdlStreetTargets.SourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppendDateNull() {
                return this.IsNull(this.tableMdlStreetTargets.AppendDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppendDateNull() {
                this[this.tableMdlStreetTargets.AppendDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNGTOStreet_2Null() {
                return this.IsNull(this.tableMdlStreetTargets.NGTOStreet_2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNGTOStreet_2Null() {
                this[this.tableMdlStreetTargets.NGTOStreet_2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsICIDNull() {
                return this.IsNull(this.tableMdlStreetTargets.ICIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetICIDNull() {
                this[this.tableMdlStreetTargets.ICIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConstructedNull() {
                return this.IsNull(this.tableMdlStreetTargets.ConstructedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConstructedNull() {
                this[this.tableMdlStreetTargets.ConstructedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFocusAreaNull() {
                return this.IsNull(this.tableMdlStreetTargets.FocusAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFocusAreaNull() {
                this[this.tableMdlStreetTargets.FocusAreaColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MdlPipXPRow : global::System.Data.DataRow {
            
            private MdlPipXPDataTable tableMdlPipXP;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MdlPipXPRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMdlPipXP = ((MdlPipXPDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MAPINFO_ID {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.MAPINFO_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MAPINFO_ID\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.MAPINFO_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xWtr {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xWtrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xWtr\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xWtrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xWMinD {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xWMinDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xWMinD\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xWMinDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xWMaxD {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xWMaxDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xWMaxD\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xWMaxDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pWtr {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.pWtrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pWtr\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pWtrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pWtrMaxD {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.pWtrMaxDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pWtrMaxD\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pWtrMaxDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pFt2Wtr {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.pFt2WtrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pFt2Wtr\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pFt2WtrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xSewer {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xSewerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xSewer\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xSewerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xSwrMinD {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xSwrMinDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xSwrMinD\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xSwrMinDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xSwrMaxD {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xSwrMaxDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xSwrMaxD\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xSwrMaxDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pSewer {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.pSewerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pSewer\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pSewerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pSwrMaxD {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.pSwrMaxDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pSwrMaxD\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pSwrMaxDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pFt2Swr {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.pFt2SwrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pFt2Swr\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pFt2SwrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xStrt {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xStrtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xStrt\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xStrtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xArt {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xArtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xArt\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xArtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xMJArt {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xMJArtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xMJArt\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xMJArtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xFrwy {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xFrwyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xFrwy\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xFrwyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pStrt {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.pStrtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pStrt\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pStrtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pStrtTyp {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.pStrtTypColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pStrtTyp\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pStrtTypColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pFt2Strt {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.pFt2StrtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pFt2Strt\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pFt2StrtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pTraffic {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.pTrafficColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pTraffic\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pTrafficColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int uxCLx {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.uxCLxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'uxCLx\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.uxCLxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int uxFt2CLx {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.uxFt2CLxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'uxFt2CLx\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.uxFt2CLxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dxCLx {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.dxCLxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dxCLx\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.dxCLxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dxFt2CLx {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.dxFt2CLxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dxFt2CLx\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.dxFt2CLxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xFiber {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xFiberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xFiber\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xFiberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pFiber {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.pFiberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pFiber\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pFiberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pFt2Fiber {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.pFt2FiberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pFt2Fiber\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pFt2FiberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xGas {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xGasColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xGas\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xGasColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pGas {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.pGasColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pGas\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pGasColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pFt2Gas {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.pFt2GasColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pFt2Gas\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pFt2GasColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xRail {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xRailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xRail\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xRailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pRail {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.pRailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pRail\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pRailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pFt2Rail {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.pFt2RailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pFt2Rail\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pFt2RailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xLRT {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xLRTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xLRT\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xLRTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pLRT {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.pLRTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pLRT\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pLRTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pFt2LRT {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.pFt2LRTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pFt2LRT\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pFt2LRTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xEmt {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xEmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xEmt\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xEmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pEmt {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.pEmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pEmt\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pEmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pFt2Emt {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.pFt2EmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pFt2Emt\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pFt2EmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xEzonC {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xEzonCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xEzonC\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xEzonCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xEzonP {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xEzonPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xEzonP\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xEzonPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xFtEzonC {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xFtEzonCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xFtEzonC\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xFtEzonCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xFtEzonP {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xFtEzonPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xFtEzonP\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xFtEzonPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xEzAreaC {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xEzAreaCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xEzAreaC\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xEzAreaCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xEzAreaP {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xEzAreaPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xEzAreaP\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xEzAreaPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int uxMS4 {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.uxMS4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'uxMS4\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.uxMS4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int uxUIC {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.uxUICColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'uxUIC\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.uxUICColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double uDepth {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.uDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'uDepth\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.uDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double dDepth {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.dDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dDepth\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.dDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double xPipSlope {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.xPipSlopeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xPipSlope\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xPipSlopeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xEcsi {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xEcsiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xEcsi\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xEcsiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xFt2Ecsi {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xFt2EcsiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xFt2Ecsi\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xFt2EcsiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xEcsiLen {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xEcsiLenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xEcsiLen\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xEcsiLenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xEcsiVol {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xEcsiVolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xEcsiVol\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xEcsiVolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xSchl {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xSchlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xSchl\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xSchlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xFt2Schl {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xFt2SchlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xFt2Schl\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xFt2SchlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xHosp {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xHospColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xHosp\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xHospColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xFt2Hosp {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xFt2HospColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xFt2Hosp\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xFt2HospColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xPol {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xPolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xPol\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xPolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xFt2Pol {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xFt2PolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xFt2Pol\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xFt2PolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xFire {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xFireColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xFire\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xFireColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xFt2Fire {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xFt2FireColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xFt2Fire\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xFt2FireColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xBldg {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xBldgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xBldg\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xBldgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xFt2Bldg {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xFt2BldgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xFt2Bldg\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xFt2BldgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xHyd {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xHydColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xHyd\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xHydColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xFt2Hyd {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xFt2HydColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xFt2Hyd\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xFt2HydColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HardArea {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.HardAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HardArea\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.HardAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MLINKID {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.MLINKIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MLINKID\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.MLINKIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USNODE {
                get {
                    try {
                        return ((string)(this[this.tableMdlPipXP.USNODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USNODE\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.USNODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSNODE {
                get {
                    try {
                        return ((string)(this[this.tableMdlPipXP.DSNODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSNODE\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.DSNODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double COMPKEY {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.COMPKEYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPKEY\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.COMPKEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double xa {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.xaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xa\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ya {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.yaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ya\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.yaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double xb {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.xbColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xb\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xbColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double yb {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.ybColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'yb\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.ybColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Deg2N {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.Deg2NColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deg2N\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.Deg2NColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double pWtr2 {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.pWtr2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pWtr2\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pWtr2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double pWtr4 {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.pWtr4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pWtr4\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pWtr4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double pWtr6 {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.pWtr6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pWtr6\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pWtr6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double pWtr8 {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.pWtr8Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pWtr8\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pWtr8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double pWtr10 {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.pWtr10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pWtr10\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pWtr10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double pWtr12 {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.pWtr12Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pWtr12\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pWtr12Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double pSwr2 {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.pSwr2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pSwr2\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pSwr2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double pSwr4 {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.pSwr4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pSwr4\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pSwr4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double pSwr6 {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.pSwr6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pSwr6\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pSwr6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double pSwr8 {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.pSwr8Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pSwr8\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pSwr8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double pSwr10 {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.pSwr10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pSwr10\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.pSwr10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double gSlope {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.gSlopeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gSlope\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.gSlopeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xLUST {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xLUSTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xLUST\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xLUSTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xFt2LUST {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.xFt2LUSTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xFt2LUST\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xFt2LUSTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double xpDeg2N {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.xpDeg2NColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xpDeg2N\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.xpDeg2NColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int INT01 {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.INT01Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INT01\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.INT01Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int INT02 {
                get {
                    try {
                        return ((int)(this[this.tableMdlPipXP.INT02Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INT02\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.INT02Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FLT01 {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.FLT01Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FLT01\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.FLT01Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FLT02 {
                get {
                    try {
                        return ((double)(this[this.tableMdlPipXP.FLT02Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FLT02\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.FLT02Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TXT50 {
                get {
                    try {
                        return ((string)(this[this.tableMdlPipXP.TXT50Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TXT50\' in table \'MdlPipXP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMdlPipXP.TXT50Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMAPINFO_IDNull() {
                return this.IsNull(this.tableMdlPipXP.MAPINFO_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMAPINFO_IDNull() {
                this[this.tableMdlPipXP.MAPINFO_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxWtrNull() {
                return this.IsNull(this.tableMdlPipXP.xWtrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxWtrNull() {
                this[this.tableMdlPipXP.xWtrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxWMinDNull() {
                return this.IsNull(this.tableMdlPipXP.xWMinDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxWMinDNull() {
                this[this.tableMdlPipXP.xWMinDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxWMaxDNull() {
                return this.IsNull(this.tableMdlPipXP.xWMaxDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxWMaxDNull() {
                this[this.tableMdlPipXP.xWMaxDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspWtrNull() {
                return this.IsNull(this.tableMdlPipXP.pWtrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpWtrNull() {
                this[this.tableMdlPipXP.pWtrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspWtrMaxDNull() {
                return this.IsNull(this.tableMdlPipXP.pWtrMaxDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpWtrMaxDNull() {
                this[this.tableMdlPipXP.pWtrMaxDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspFt2WtrNull() {
                return this.IsNull(this.tableMdlPipXP.pFt2WtrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpFt2WtrNull() {
                this[this.tableMdlPipXP.pFt2WtrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxSewerNull() {
                return this.IsNull(this.tableMdlPipXP.xSewerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxSewerNull() {
                this[this.tableMdlPipXP.xSewerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxSwrMinDNull() {
                return this.IsNull(this.tableMdlPipXP.xSwrMinDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxSwrMinDNull() {
                this[this.tableMdlPipXP.xSwrMinDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxSwrMaxDNull() {
                return this.IsNull(this.tableMdlPipXP.xSwrMaxDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxSwrMaxDNull() {
                this[this.tableMdlPipXP.xSwrMaxDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspSewerNull() {
                return this.IsNull(this.tableMdlPipXP.pSewerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpSewerNull() {
                this[this.tableMdlPipXP.pSewerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspSwrMaxDNull() {
                return this.IsNull(this.tableMdlPipXP.pSwrMaxDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpSwrMaxDNull() {
                this[this.tableMdlPipXP.pSwrMaxDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspFt2SwrNull() {
                return this.IsNull(this.tableMdlPipXP.pFt2SwrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpFt2SwrNull() {
                this[this.tableMdlPipXP.pFt2SwrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxStrtNull() {
                return this.IsNull(this.tableMdlPipXP.xStrtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxStrtNull() {
                this[this.tableMdlPipXP.xStrtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxArtNull() {
                return this.IsNull(this.tableMdlPipXP.xArtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxArtNull() {
                this[this.tableMdlPipXP.xArtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxMJArtNull() {
                return this.IsNull(this.tableMdlPipXP.xMJArtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxMJArtNull() {
                this[this.tableMdlPipXP.xMJArtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxFrwyNull() {
                return this.IsNull(this.tableMdlPipXP.xFrwyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxFrwyNull() {
                this[this.tableMdlPipXP.xFrwyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspStrtNull() {
                return this.IsNull(this.tableMdlPipXP.pStrtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpStrtNull() {
                this[this.tableMdlPipXP.pStrtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspStrtTypNull() {
                return this.IsNull(this.tableMdlPipXP.pStrtTypColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpStrtTypNull() {
                this[this.tableMdlPipXP.pStrtTypColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspFt2StrtNull() {
                return this.IsNull(this.tableMdlPipXP.pFt2StrtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpFt2StrtNull() {
                this[this.tableMdlPipXP.pFt2StrtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspTrafficNull() {
                return this.IsNull(this.tableMdlPipXP.pTrafficColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpTrafficNull() {
                this[this.tableMdlPipXP.pTrafficColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuxCLxNull() {
                return this.IsNull(this.tableMdlPipXP.uxCLxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuxCLxNull() {
                this[this.tableMdlPipXP.uxCLxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuxFt2CLxNull() {
                return this.IsNull(this.tableMdlPipXP.uxFt2CLxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuxFt2CLxNull() {
                this[this.tableMdlPipXP.uxFt2CLxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdxCLxNull() {
                return this.IsNull(this.tableMdlPipXP.dxCLxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdxCLxNull() {
                this[this.tableMdlPipXP.dxCLxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdxFt2CLxNull() {
                return this.IsNull(this.tableMdlPipXP.dxFt2CLxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdxFt2CLxNull() {
                this[this.tableMdlPipXP.dxFt2CLxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxFiberNull() {
                return this.IsNull(this.tableMdlPipXP.xFiberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxFiberNull() {
                this[this.tableMdlPipXP.xFiberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspFiberNull() {
                return this.IsNull(this.tableMdlPipXP.pFiberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpFiberNull() {
                this[this.tableMdlPipXP.pFiberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspFt2FiberNull() {
                return this.IsNull(this.tableMdlPipXP.pFt2FiberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpFt2FiberNull() {
                this[this.tableMdlPipXP.pFt2FiberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxGasNull() {
                return this.IsNull(this.tableMdlPipXP.xGasColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxGasNull() {
                this[this.tableMdlPipXP.xGasColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspGasNull() {
                return this.IsNull(this.tableMdlPipXP.pGasColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpGasNull() {
                this[this.tableMdlPipXP.pGasColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspFt2GasNull() {
                return this.IsNull(this.tableMdlPipXP.pFt2GasColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpFt2GasNull() {
                this[this.tableMdlPipXP.pFt2GasColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxRailNull() {
                return this.IsNull(this.tableMdlPipXP.xRailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxRailNull() {
                this[this.tableMdlPipXP.xRailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspRailNull() {
                return this.IsNull(this.tableMdlPipXP.pRailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpRailNull() {
                this[this.tableMdlPipXP.pRailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspFt2RailNull() {
                return this.IsNull(this.tableMdlPipXP.pFt2RailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpFt2RailNull() {
                this[this.tableMdlPipXP.pFt2RailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxLRTNull() {
                return this.IsNull(this.tableMdlPipXP.xLRTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxLRTNull() {
                this[this.tableMdlPipXP.xLRTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspLRTNull() {
                return this.IsNull(this.tableMdlPipXP.pLRTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpLRTNull() {
                this[this.tableMdlPipXP.pLRTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspFt2LRTNull() {
                return this.IsNull(this.tableMdlPipXP.pFt2LRTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpFt2LRTNull() {
                this[this.tableMdlPipXP.pFt2LRTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxEmtNull() {
                return this.IsNull(this.tableMdlPipXP.xEmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxEmtNull() {
                this[this.tableMdlPipXP.xEmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspEmtNull() {
                return this.IsNull(this.tableMdlPipXP.pEmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpEmtNull() {
                this[this.tableMdlPipXP.pEmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspFt2EmtNull() {
                return this.IsNull(this.tableMdlPipXP.pFt2EmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpFt2EmtNull() {
                this[this.tableMdlPipXP.pFt2EmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxEzonCNull() {
                return this.IsNull(this.tableMdlPipXP.xEzonCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxEzonCNull() {
                this[this.tableMdlPipXP.xEzonCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxEzonPNull() {
                return this.IsNull(this.tableMdlPipXP.xEzonPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxEzonPNull() {
                this[this.tableMdlPipXP.xEzonPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxFtEzonCNull() {
                return this.IsNull(this.tableMdlPipXP.xFtEzonCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxFtEzonCNull() {
                this[this.tableMdlPipXP.xFtEzonCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxFtEzonPNull() {
                return this.IsNull(this.tableMdlPipXP.xFtEzonPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxFtEzonPNull() {
                this[this.tableMdlPipXP.xFtEzonPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxEzAreaCNull() {
                return this.IsNull(this.tableMdlPipXP.xEzAreaCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxEzAreaCNull() {
                this[this.tableMdlPipXP.xEzAreaCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxEzAreaPNull() {
                return this.IsNull(this.tableMdlPipXP.xEzAreaPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxEzAreaPNull() {
                this[this.tableMdlPipXP.xEzAreaPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuxMS4Null() {
                return this.IsNull(this.tableMdlPipXP.uxMS4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuxMS4Null() {
                this[this.tableMdlPipXP.uxMS4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuxUICNull() {
                return this.IsNull(this.tableMdlPipXP.uxUICColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuxUICNull() {
                this[this.tableMdlPipXP.uxUICColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuDepthNull() {
                return this.IsNull(this.tableMdlPipXP.uDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuDepthNull() {
                this[this.tableMdlPipXP.uDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdDepthNull() {
                return this.IsNull(this.tableMdlPipXP.dDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdDepthNull() {
                this[this.tableMdlPipXP.dDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxPipSlopeNull() {
                return this.IsNull(this.tableMdlPipXP.xPipSlopeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxPipSlopeNull() {
                this[this.tableMdlPipXP.xPipSlopeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxEcsiNull() {
                return this.IsNull(this.tableMdlPipXP.xEcsiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxEcsiNull() {
                this[this.tableMdlPipXP.xEcsiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxFt2EcsiNull() {
                return this.IsNull(this.tableMdlPipXP.xFt2EcsiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxFt2EcsiNull() {
                this[this.tableMdlPipXP.xFt2EcsiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxEcsiLenNull() {
                return this.IsNull(this.tableMdlPipXP.xEcsiLenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxEcsiLenNull() {
                this[this.tableMdlPipXP.xEcsiLenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxEcsiVolNull() {
                return this.IsNull(this.tableMdlPipXP.xEcsiVolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxEcsiVolNull() {
                this[this.tableMdlPipXP.xEcsiVolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxSchlNull() {
                return this.IsNull(this.tableMdlPipXP.xSchlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxSchlNull() {
                this[this.tableMdlPipXP.xSchlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxFt2SchlNull() {
                return this.IsNull(this.tableMdlPipXP.xFt2SchlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxFt2SchlNull() {
                this[this.tableMdlPipXP.xFt2SchlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxHospNull() {
                return this.IsNull(this.tableMdlPipXP.xHospColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxHospNull() {
                this[this.tableMdlPipXP.xHospColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxFt2HospNull() {
                return this.IsNull(this.tableMdlPipXP.xFt2HospColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxFt2HospNull() {
                this[this.tableMdlPipXP.xFt2HospColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxPolNull() {
                return this.IsNull(this.tableMdlPipXP.xPolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxPolNull() {
                this[this.tableMdlPipXP.xPolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxFt2PolNull() {
                return this.IsNull(this.tableMdlPipXP.xFt2PolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxFt2PolNull() {
                this[this.tableMdlPipXP.xFt2PolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxFireNull() {
                return this.IsNull(this.tableMdlPipXP.xFireColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxFireNull() {
                this[this.tableMdlPipXP.xFireColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxFt2FireNull() {
                return this.IsNull(this.tableMdlPipXP.xFt2FireColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxFt2FireNull() {
                this[this.tableMdlPipXP.xFt2FireColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxBldgNull() {
                return this.IsNull(this.tableMdlPipXP.xBldgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxBldgNull() {
                this[this.tableMdlPipXP.xBldgColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxFt2BldgNull() {
                return this.IsNull(this.tableMdlPipXP.xFt2BldgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxFt2BldgNull() {
                this[this.tableMdlPipXP.xFt2BldgColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxHydNull() {
                return this.IsNull(this.tableMdlPipXP.xHydColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxHydNull() {
                this[this.tableMdlPipXP.xHydColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxFt2HydNull() {
                return this.IsNull(this.tableMdlPipXP.xFt2HydColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxFt2HydNull() {
                this[this.tableMdlPipXP.xFt2HydColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHardAreaNull() {
                return this.IsNull(this.tableMdlPipXP.HardAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHardAreaNull() {
                this[this.tableMdlPipXP.HardAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMLINKIDNull() {
                return this.IsNull(this.tableMdlPipXP.MLINKIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMLINKIDNull() {
                this[this.tableMdlPipXP.MLINKIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSNODENull() {
                return this.IsNull(this.tableMdlPipXP.USNODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSNODENull() {
                this[this.tableMdlPipXP.USNODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSNODENull() {
                return this.IsNull(this.tableMdlPipXP.DSNODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSNODENull() {
                this[this.tableMdlPipXP.DSNODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPKEYNull() {
                return this.IsNull(this.tableMdlPipXP.COMPKEYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPKEYNull() {
                this[this.tableMdlPipXP.COMPKEYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxaNull() {
                return this.IsNull(this.tableMdlPipXP.xaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxaNull() {
                this[this.tableMdlPipXP.xaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsyaNull() {
                return this.IsNull(this.tableMdlPipXP.yaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetyaNull() {
                this[this.tableMdlPipXP.yaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxbNull() {
                return this.IsNull(this.tableMdlPipXP.xbColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxbNull() {
                this[this.tableMdlPipXP.xbColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsybNull() {
                return this.IsNull(this.tableMdlPipXP.ybColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetybNull() {
                this[this.tableMdlPipXP.ybColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeg2NNull() {
                return this.IsNull(this.tableMdlPipXP.Deg2NColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeg2NNull() {
                this[this.tableMdlPipXP.Deg2NColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspWtr2Null() {
                return this.IsNull(this.tableMdlPipXP.pWtr2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpWtr2Null() {
                this[this.tableMdlPipXP.pWtr2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspWtr4Null() {
                return this.IsNull(this.tableMdlPipXP.pWtr4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpWtr4Null() {
                this[this.tableMdlPipXP.pWtr4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspWtr6Null() {
                return this.IsNull(this.tableMdlPipXP.pWtr6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpWtr6Null() {
                this[this.tableMdlPipXP.pWtr6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspWtr8Null() {
                return this.IsNull(this.tableMdlPipXP.pWtr8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpWtr8Null() {
                this[this.tableMdlPipXP.pWtr8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspWtr10Null() {
                return this.IsNull(this.tableMdlPipXP.pWtr10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpWtr10Null() {
                this[this.tableMdlPipXP.pWtr10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspWtr12Null() {
                return this.IsNull(this.tableMdlPipXP.pWtr12Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpWtr12Null() {
                this[this.tableMdlPipXP.pWtr12Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspSwr2Null() {
                return this.IsNull(this.tableMdlPipXP.pSwr2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpSwr2Null() {
                this[this.tableMdlPipXP.pSwr2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspSwr4Null() {
                return this.IsNull(this.tableMdlPipXP.pSwr4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpSwr4Null() {
                this[this.tableMdlPipXP.pSwr4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspSwr6Null() {
                return this.IsNull(this.tableMdlPipXP.pSwr6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpSwr6Null() {
                this[this.tableMdlPipXP.pSwr6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspSwr8Null() {
                return this.IsNull(this.tableMdlPipXP.pSwr8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpSwr8Null() {
                this[this.tableMdlPipXP.pSwr8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspSwr10Null() {
                return this.IsNull(this.tableMdlPipXP.pSwr10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpSwr10Null() {
                this[this.tableMdlPipXP.pSwr10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgSlopeNull() {
                return this.IsNull(this.tableMdlPipXP.gSlopeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgSlopeNull() {
                this[this.tableMdlPipXP.gSlopeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxLUSTNull() {
                return this.IsNull(this.tableMdlPipXP.xLUSTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxLUSTNull() {
                this[this.tableMdlPipXP.xLUSTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxFt2LUSTNull() {
                return this.IsNull(this.tableMdlPipXP.xFt2LUSTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxFt2LUSTNull() {
                this[this.tableMdlPipXP.xFt2LUSTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxpDeg2NNull() {
                return this.IsNull(this.tableMdlPipXP.xpDeg2NColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxpDeg2NNull() {
                this[this.tableMdlPipXP.xpDeg2NColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINT01Null() {
                return this.IsNull(this.tableMdlPipXP.INT01Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINT01Null() {
                this[this.tableMdlPipXP.INT01Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINT02Null() {
                return this.IsNull(this.tableMdlPipXP.INT02Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINT02Null() {
                this[this.tableMdlPipXP.INT02Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFLT01Null() {
                return this.IsNull(this.tableMdlPipXP.FLT01Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFLT01Null() {
                this[this.tableMdlPipXP.FLT01Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFLT02Null() {
                return this.IsNull(this.tableMdlPipXP.FLT02Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFLT02Null() {
                this[this.tableMdlPipXP.FLT02Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTXT50Null() {
                return this.IsNull(this.tableMdlPipXP.TXT50Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTXT50Null() {
                this[this.tableMdlPipXP.TXT50Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MdlDscRowChangeEvent : global::System.EventArgs {
            
            private MdlDscRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlDscRowChangeEvent(MdlDscRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlDscRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MdlSpecLinksRowChangeEvent : global::System.EventArgs {
            
            private MdlSpecLinksRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlSpecLinksRowChangeEvent(MdlSpecLinksRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlSpecLinksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MdlLinksRowChangeEvent : global::System.EventArgs {
            
            private MdlLinksRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlLinksRowChangeEvent(MdlLinksRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlLinksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MdlNodesRowChangeEvent : global::System.EventArgs {
            
            private MdlNodesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlNodesRowChangeEvent(MdlNodesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlNodesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MdlSpecLinkDataRowChangeEvent : global::System.EventArgs {
            
            private MdlSpecLinkDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlSpecLinkDataRowChangeEvent(MdlSpecLinkDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlSpecLinkDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MdlParkingTargetsRowChangeEvent : global::System.EventArgs {
            
            private MdlParkingTargetsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlParkingTargetsRowChangeEvent(MdlParkingTargetsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlParkingTargetsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MdlRoofTargetsRowChangeEvent : global::System.EventArgs {
            
            private MdlRoofTargetsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlRoofTargetsRowChangeEvent(MdlRoofTargetsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlRoofTargetsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MdlStreetTargetsRowChangeEvent : global::System.EventArgs {
            
            private MdlStreetTargetsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlStreetTargetsRowChangeEvent(MdlStreetTargetsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlStreetTargetsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MdlPipXPRowChangeEvent : global::System.EventArgs {
            
            private MdlPipXPRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlPipXPRowChangeEvent(MdlPipXPRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MdlPipXPRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace SystemsAnalysis.DataAccess.ModelDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MdlDscTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MdlDscTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MdlDsc";
            tableMapping.ColumnMappings.Add("MAPINFO_ID", "MapInfoID");
            tableMapping.ColumnMappings.Add("ParcelID", "ParcelID");
            tableMapping.ColumnMappings.Add("DivideID", "DivideID");
            tableMapping.ColumnMappings.Add("DSCID", "DscID");
            tableMapping.ColumnMappings.Add("discoSiteID", "DiscoSiteID");
            tableMapping.ColumnMappings.Add("DiscoClass", "DiscoClass");
            tableMapping.ColumnMappings.Add("ToLinkSan", "ToLinkSan");
            tableMapping.ColumnMappings.Add("ToLinkStorm", "ToLinkStorm");
            tableMapping.ColumnMappings.Add("NGTOSan", "NGTOSan");
            tableMapping.ColumnMappings.Add("NGTOStorm", "NGTOStorm");
            tableMapping.ColumnMappings.Add("PipeFlowTypeSan", "PipeFlowTypeSan");
            tableMapping.ColumnMappings.Add("PipeFlowTypeStorm", "PipeFlowTypeStorm");
            tableMapping.ColumnMappings.Add("SanSwrCrown", "SanSwrCrown");
            tableMapping.ColumnMappings.Add("Frac2SwrBeg", "Frac2SwrBeg");
            tableMapping.ColumnMappings.Add("FloodRefElev", "FloodRefElev");
            tableMapping.ColumnMappings.Add("FalseBFRisk", "FalseBFRisk");
            tableMapping.ColumnMappings.Add("GridQAQC", "GridQAQC");
            tableMapping.ColumnMappings.Add("MaxBldGrid", "MaxBldGrid");
            tableMapping.ColumnMappings.Add("AvgParcelElev", "AvgParcelElev");
            tableMapping.ColumnMappings.Add("EFFMethod", "EFFMethod");
            tableMapping.ColumnMappings.Add("FFOverride", "FFOverride");
            tableMapping.ColumnMappings.Add("OrigFinishFloor", "OrigFinishFloor");
            tableMapping.ColumnMappings.Add("HGL", "HGL");
            tableMapping.ColumnMappings.Add("DeltaHGL", "DeltaHGL");
            tableMapping.ColumnMappings.Add("HGLComment", "HGLComment");
            tableMapping.ColumnMappings.Add("DataSourceFlags", "DataSourceFlags");
            tableMapping.ColumnMappings.Add("ZoneEX", "ZoneEX");
            tableMapping.ColumnMappings.Add("ZoneCP", "ZoneCP");
            tableMapping.ColumnMappings.Add("GenEX", "GenEX");
            tableMapping.ColumnMappings.Add("GenCP", "GenCP");
            tableMapping.ColumnMappings.Add("BaseFlow", "BaseFlow");
            tableMapping.ColumnMappings.Add("BaseFlowEX", "BaseFlowEx");
            tableMapping.ColumnMappings.Add("BaseFlowDM", "BaseFlowDM");
            tableMapping.ColumnMappings.Add("ICFtRoof", "ICFtRoof");
            tableMapping.ColumnMappings.Add("ICFtParking", "ICFtParking");
            tableMapping.ColumnMappings.Add("ICFlag", "ICFlag");
            tableMapping.ColumnMappings.Add("ImpFractEX", "ImpFractEx");
            tableMapping.ColumnMappings.Add("ImpFractCP", "ImpFractCP");
            tableMapping.ColumnMappings.Add("ImpFractFB", "ImpFractFB");
            tableMapping.ColumnMappings.Add("AreaFt", "AreaFt");
            tableMapping.ColumnMappings.Add("RfAreaFt", "RfAreaFt");
            tableMapping.ColumnMappings.Add("PkAreaFt", "PkAreaFt");
            tableMapping.ColumnMappings.Add("TraceVisit", "TraceVisit");
            tableMapping.ColumnMappings.Add("DSCPickedFlag", "DscPickedFlag");
            tableMapping.ColumnMappings.Add("UpdateAtts", "UpdateAtts");
            tableMapping.ColumnMappings.Add("c_RFtosurfFt", "c_RFtosurfFt");
            tableMapping.ColumnMappings.Add("c_PKtosurfFt", "c_PKtosurfFt");
            tableMapping.ColumnMappings.Add("c_RFtosurfImpFt", "c_RFtosurfImpFt");
            tableMapping.ColumnMappings.Add("c_PKtosurfImpFt", "c_PKtosurfImpFt");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            tableMapping.ColumnMappings.Add("Sewerable", "Sewerable");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `mdl_dirsc` WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `ParcelID` IS N" +
                "ULL) OR (`ParcelID` = ?)) AND ((? = 1 AND `DivideID` IS NULL) OR (`DivideID` = ?" +
                ")) AND ((? = 1 AND `DSCID` IS NULL) OR (`DSCID` = ?)) AND ((? = 1 AND `discoSite" +
                "ID` IS NULL) OR (`discoSiteID` = ?)) AND ((? = 1 AND `DiscoClass` IS NULL) OR (`" +
                "DiscoClass` = ?)) AND ((? = 1 AND `ToLinkSan` IS NULL) OR (`ToLinkSan` = ?)) AND" +
                " ((? = 1 AND `ToLinkStorm` IS NULL) OR (`ToLinkStorm` = ?)) AND ((? = 1 AND `NGT" +
                "OSan` IS NULL) OR (`NGTOSan` = ?)) AND ((? = 1 AND `NGTOStorm` IS NULL) OR (`NGT" +
                "OStorm` = ?)) AND ((? = 1 AND `PipeFlowTypeSan` IS NULL) OR (`PipeFlowTypeSan` =" +
                " ?)) AND ((? = 1 AND `PipeFlowTypeStorm` IS NULL) OR (`PipeFlowTypeStorm` = ?)) " +
                "AND ((? = 1 AND `SanSwrCrown` IS NULL) OR (`SanSwrCrown` = ?)) AND ((? = 1 AND `" +
                "Frac2SwrBeg` IS NULL) OR (`Frac2SwrBeg` = ?)) AND ((? = 1 AND `FloodRefElev` IS " +
                "NULL) OR (`FloodRefElev` = ?)) AND ((? = 1 AND `FalseBFRisk` IS NULL) OR (`False" +
                "BFRisk` = ?)) AND ((? = 1 AND `GridQAQC` IS NULL) OR (`GridQAQC` = ?)) AND ((? =" +
                " 1 AND `MaxBldGrid` IS NULL) OR (`MaxBldGrid` = ?)) AND ((? = 1 AND `AvgParcelEl" +
                "ev` IS NULL) OR (`AvgParcelElev` = ?)) AND ((? = 1 AND `EFFMethod` IS NULL) OR (" +
                "`EFFMethod` = ?)) AND ((? = 1 AND `FFOverride` IS NULL) OR (`FFOverride` = ?)) A" +
                "ND ((? = 1 AND `OrigFinishFloor` IS NULL) OR (`OrigFinishFloor` = ?)) AND ((? = " +
                "1 AND `HGL` IS NULL) OR (`HGL` = ?)) AND ((? = 1 AND `DeltaHGL` IS NULL) OR (`De" +
                "ltaHGL` = ?)) AND ((? = 1 AND `HGLComment` IS NULL) OR (`HGLComment` = ?)) AND (" +
                "(? = 1 AND `DataSourceFlags` IS NULL) OR (`DataSourceFlags` = ?)) AND ((? = 1 AN" +
                "D `ZoneEX` IS NULL) OR (`ZoneEX` = ?)) AND ((? = 1 AND `ZoneCP` IS NULL) OR (`Zo" +
                "neCP` = ?)) AND ((? = 1 AND `GenEX` IS NULL) OR (`GenEX` = ?)) AND ((? = 1 AND `" +
                "GenCP` IS NULL) OR (`GenCP` = ?)) AND ((? = 1 AND `BaseFlow` IS NULL) OR (`BaseF" +
                "low` = ?)) AND ((? = 1 AND `BaseFlowEX` IS NULL) OR (`BaseFlowEX` = ?)) AND ((? " +
                "= 1 AND `BaseFlowDM` IS NULL) OR (`BaseFlowDM` = ?)) AND ((? = 1 AND `ICFtRoof` " +
                "IS NULL) OR (`ICFtRoof` = ?)) AND ((? = 1 AND `ICFtParking` IS NULL) OR (`ICFtPa" +
                "rking` = ?)) AND ((? = 1 AND `ICFlag` IS NULL) OR (`ICFlag` = ?)) AND ((? = 1 AN" +
                "D `ImpFractEX` IS NULL) OR (`ImpFractEX` = ?)) AND ((? = 1 AND `ImpFractCP` IS N" +
                "ULL) OR (`ImpFractCP` = ?)) AND ((? = 1 AND `ImpFractFB` IS NULL) OR (`ImpFractF" +
                "B` = ?)) AND ((? = 1 AND `AreaFt` IS NULL) OR (`AreaFt` = ?)) AND ((? = 1 AND `R" +
                "fAreaFt` IS NULL) OR (`RfAreaFt` = ?)) AND ((? = 1 AND `PkAreaFt` IS NULL) OR (`" +
                "PkAreaFt` = ?)) AND ((? = 1 AND `TraceVisit` IS NULL) OR (`TraceVisit` = ?)) AND" +
                " ((? = 1 AND `DSCPickedFlag` IS NULL) OR (`DSCPickedFlag` = ?)) AND ((? = 1 AND " +
                "`UpdateAtts` IS NULL) OR (`UpdateAtts` = ?)) AND ((? = 1 AND `c_RFtosurfFt` IS N" +
                "ULL) OR (`c_RFtosurfFt` = ?)) AND ((? = 1 AND `c_PKtosurfFt` IS NULL) OR (`c_PKt" +
                "osurfFt` = ?)) AND ((? = 1 AND `c_RFtosurfImpFt` IS NULL) OR (`c_RFtosurfImpFt` " +
                "= ?)) AND ((? = 1 AND `c_PKtosurfImpFt` IS NULL) OR (`c_PKtosurfImpFt` = ?)) AND" +
                " ((? = 1 AND `IsActive` IS NULL) OR (`IsActive` = ?)) AND ((? = 1 AND `Sewerable" +
                "` IS NULL) OR (`Sewerable` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_discoSiteID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "discoSiteID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_discoSiteID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "discoSiteID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DiscoClass", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiscoClass", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DiscoClass", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiscoClass", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToLinkSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkSan", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToLinkSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkSan", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToLinkStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkStorm", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToLinkStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkStorm", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTOSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOSan", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTOSan", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOSan", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTOStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStorm", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTOStorm", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStorm", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PipeFlowTypeSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeSan", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PipeFlowTypeSan", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeSan", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PipeFlowTypeStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeStorm", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PipeFlowTypeStorm", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeStorm", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SanSwrCrown", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SanSwrCrown", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SanSwrCrown", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SanSwrCrown", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Frac2SwrBeg", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Frac2SwrBeg", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Frac2SwrBeg", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Frac2SwrBeg", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FloodRefElev", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FloodRefElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FalseBFRisk", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FalseBFRisk", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FalseBFRisk", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FalseBFRisk", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_GridQAQC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GridQAQC", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_GridQAQC", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GridQAQC", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_MaxBldGrid", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MaxBldGrid", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MaxBldGrid", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MaxBldGrid", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AvgParcelElev", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AvgParcelElev", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AvgParcelElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AvgParcelElev", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EFFMethod", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EFFMethod", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EFFMethod", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EFFMethod", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FFOverride", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FFOverride", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FFOverride", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FFOverride", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OrigFinishFloor", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrigFinishFloor", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OrigFinishFloor", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrigFinishFloor", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_HGL", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGL", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_HGL", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGL", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DeltaHGL", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DeltaHGL", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DeltaHGL", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DeltaHGL", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_HGLComment", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGLComment", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_HGLComment", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGLComment", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DataSourceFlags", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSourceFlags", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DataSourceFlags", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSourceFlags", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ZoneEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ZoneEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ZoneCP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneCP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ZoneCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneCP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_GenEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_GenEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_GenCP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenCP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_GenCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenCP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BaseFlow", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlow", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BaseFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlow", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BaseFlowEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BaseFlowEX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BaseFlowDM", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowDM", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BaseFlowDM", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowDM", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoof", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoof", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParking", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParking", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICFlag", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFlag", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICFlag", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFlag", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ImpFractEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ImpFractEX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ImpFractCP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractCP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ImpFractCP", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractCP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ImpFractFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractFB", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ImpFractFB", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractFB", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AreaFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AreaFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RfAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RfAreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PkAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PkAreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_TraceVisit", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_TraceVisit", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DSCPickedFlag", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCPickedFlag", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DSCPickedFlag", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCPickedFlag", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_UpdateAtts", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UpdateAtts", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_UpdateAtts", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UpdateAtts", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_RFtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_RFtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_PKtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_PKtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_RFtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfImpFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_RFtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfImpFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_PKtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfImpFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_PKtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfImpFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_IsActive", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Sewerable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Sewerable", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Sewerable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Sewerable", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `mdl_dirsc` (`ParcelID`, `DivideID`, `DSCID`, `discoSiteID`, `DiscoClass`, `ToLinkSan`, `ToLinkStorm`, `NGTOSan`, `NGTOStorm`, `PipeFlowTypeSan`, `PipeFlowTypeStorm`, `SanSwrCrown`, `Frac2SwrBeg`, `FloodRefElev`, `FalseBFRisk`, `GridQAQC`, `MaxBldGrid`, `AvgParcelElev`, `EFFMethod`, `FFOverride`, `OrigFinishFloor`, `HGL`, `DeltaHGL`, `HGLComment`, `DataSourceFlags`, `ZoneEX`, `ZoneCP`, `GenEX`, `GenCP`, `BaseFlow`, `BaseFlowEX`, `BaseFlowDM`, `ICFtRoof`, `ICFtParking`, `ICFlag`, `ImpFractEX`, `ImpFractCP`, `ImpFractFB`, `AreaFt`, `RfAreaFt`, `PkAreaFt`, `TraceVisit`, `DSCPickedFlag`, `UpdateAtts`, `c_RFtosurfFt`, `c_PKtosurfFt`, `c_RFtosurfImpFt`, `c_PKtosurfImpFt`, `IsActive`, `Sewerable`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("discoSiteID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "discoSiteID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DiscoClass", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiscoClass", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToLinkSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkSan", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToLinkStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkStorm", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTOSan", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOSan", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTOStorm", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStorm", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PipeFlowTypeSan", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeSan", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PipeFlowTypeStorm", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeStorm", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SanSwrCrown", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SanSwrCrown", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Frac2SwrBeg", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Frac2SwrBeg", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FloodRefElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FalseBFRisk", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FalseBFRisk", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("GridQAQC", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GridQAQC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("MaxBldGrid", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MaxBldGrid", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AvgParcelElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AvgParcelElev", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EFFMethod", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EFFMethod", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FFOverride", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FFOverride", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OrigFinishFloor", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrigFinishFloor", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("HGL", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DeltaHGL", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DeltaHGL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("HGLComment", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGLComment", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DataSourceFlags", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSourceFlags", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ZoneEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ZoneCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneCP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("GenEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("GenCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenCP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BaseFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlow", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BaseFlowEX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BaseFlowDM", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowDM", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoof", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParking", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICFlag", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFlag", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ImpFractEX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ImpFractCP", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractCP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ImpFractFB", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractFB", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AreaFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RfAreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PkAreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("TraceVisit", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DSCPickedFlag", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCPickedFlag", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("UpdateAtts", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UpdateAtts", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_RFtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_PKtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_RFtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfImpFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_PKtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfImpFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Sewerable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Sewerable", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE `mdl_dirsc` SET `ParcelID` = ?, `DivideID` = ?, `DSCID` = ?, `discoSiteID`" +
                " = ?, `DiscoClass` = ?, `ToLinkSan` = ?, `ToLinkStorm` = ?, `NGTOSan` = ?, `NGTO" +
                "Storm` = ?, `PipeFlowTypeSan` = ?, `PipeFlowTypeStorm` = ?, `SanSwrCrown` = ?, `" +
                "Frac2SwrBeg` = ?, `FloodRefElev` = ?, `FalseBFRisk` = ?, `GridQAQC` = ?, `MaxBld" +
                "Grid` = ?, `AvgParcelElev` = ?, `EFFMethod` = ?, `FFOverride` = ?, `OrigFinishFl" +
                "oor` = ?, `HGL` = ?, `DeltaHGL` = ?, `HGLComment` = ?, `DataSourceFlags` = ?, `Z" +
                "oneEX` = ?, `ZoneCP` = ?, `GenEX` = ?, `GenCP` = ?, `BaseFlow` = ?, `BaseFlowEX`" +
                " = ?, `BaseFlowDM` = ?, `ICFtRoof` = ?, `ICFtParking` = ?, `ICFlag` = ?, `ImpFra" +
                "ctEX` = ?, `ImpFractCP` = ?, `ImpFractFB` = ?, `AreaFt` = ?, `RfAreaFt` = ?, `Pk" +
                "AreaFt` = ?, `TraceVisit` = ?, `DSCPickedFlag` = ?, `UpdateAtts` = ?, `c_RFtosur" +
                "fFt` = ?, `c_PKtosurfFt` = ?, `c_RFtosurfImpFt` = ?, `c_PKtosurfImpFt` = ?, `IsA" +
                "ctive` = ?, `Sewerable` = ? WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `ParcelID`" +
                " IS NULL) OR (`ParcelID` = ?)) AND ((? = 1 AND `DivideID` IS NULL) OR (`DivideID" +
                "` = ?)) AND ((? = 1 AND `DSCID` IS NULL) OR (`DSCID` = ?)) AND ((? = 1 AND `disc" +
                "oSiteID` IS NULL) OR (`discoSiteID` = ?)) AND ((? = 1 AND `DiscoClass` IS NULL) " +
                "OR (`DiscoClass` = ?)) AND ((? = 1 AND `ToLinkSan` IS NULL) OR (`ToLinkSan` = ?)" +
                ") AND ((? = 1 AND `ToLinkStorm` IS NULL) OR (`ToLinkStorm` = ?)) AND ((? = 1 AND" +
                " `NGTOSan` IS NULL) OR (`NGTOSan` = ?)) AND ((? = 1 AND `NGTOStorm` IS NULL) OR " +
                "(`NGTOStorm` = ?)) AND ((? = 1 AND `PipeFlowTypeSan` IS NULL) OR (`PipeFlowTypeS" +
                "an` = ?)) AND ((? = 1 AND `PipeFlowTypeStorm` IS NULL) OR (`PipeFlowTypeStorm` =" +
                " ?)) AND ((? = 1 AND `SanSwrCrown` IS NULL) OR (`SanSwrCrown` = ?)) AND ((? = 1 " +
                "AND `Frac2SwrBeg` IS NULL) OR (`Frac2SwrBeg` = ?)) AND ((? = 1 AND `FloodRefElev" +
                "` IS NULL) OR (`FloodRefElev` = ?)) AND ((? = 1 AND `FalseBFRisk` IS NULL) OR (`" +
                "FalseBFRisk` = ?)) AND ((? = 1 AND `GridQAQC` IS NULL) OR (`GridQAQC` = ?)) AND " +
                "((? = 1 AND `MaxBldGrid` IS NULL) OR (`MaxBldGrid` = ?)) AND ((? = 1 AND `AvgPar" +
                "celElev` IS NULL) OR (`AvgParcelElev` = ?)) AND ((? = 1 AND `EFFMethod` IS NULL)" +
                " OR (`EFFMethod` = ?)) AND ((? = 1 AND `FFOverride` IS NULL) OR (`FFOverride` = " +
                "?)) AND ((? = 1 AND `OrigFinishFloor` IS NULL) OR (`OrigFinishFloor` = ?)) AND (" +
                "(? = 1 AND `HGL` IS NULL) OR (`HGL` = ?)) AND ((? = 1 AND `DeltaHGL` IS NULL) OR" +
                " (`DeltaHGL` = ?)) AND ((? = 1 AND `HGLComment` IS NULL) OR (`HGLComment` = ?)) " +
                "AND ((? = 1 AND `DataSourceFlags` IS NULL) OR (`DataSourceFlags` = ?)) AND ((? =" +
                " 1 AND `ZoneEX` IS NULL) OR (`ZoneEX` = ?)) AND ((? = 1 AND `ZoneCP` IS NULL) OR" +
                " (`ZoneCP` = ?)) AND ((? = 1 AND `GenEX` IS NULL) OR (`GenEX` = ?)) AND ((? = 1 " +
                "AND `GenCP` IS NULL) OR (`GenCP` = ?)) AND ((? = 1 AND `BaseFlow` IS NULL) OR (`" +
                "BaseFlow` = ?)) AND ((? = 1 AND `BaseFlowEX` IS NULL) OR (`BaseFlowEX` = ?)) AND" +
                " ((? = 1 AND `BaseFlowDM` IS NULL) OR (`BaseFlowDM` = ?)) AND ((? = 1 AND `ICFtR" +
                "oof` IS NULL) OR (`ICFtRoof` = ?)) AND ((? = 1 AND `ICFtParking` IS NULL) OR (`I" +
                "CFtParking` = ?)) AND ((? = 1 AND `ICFlag` IS NULL) OR (`ICFlag` = ?)) AND ((? =" +
                " 1 AND `ImpFractEX` IS NULL) OR (`ImpFractEX` = ?)) AND ((? = 1 AND `ImpFractCP`" +
                " IS NULL) OR (`ImpFractCP` = ?)) AND ((? = 1 AND `ImpFractFB` IS NULL) OR (`ImpF" +
                "ractFB` = ?)) AND ((? = 1 AND `AreaFt` IS NULL) OR (`AreaFt` = ?)) AND ((? = 1 A" +
                "ND `RfAreaFt` IS NULL) OR (`RfAreaFt` = ?)) AND ((? = 1 AND `PkAreaFt` IS NULL) " +
                "OR (`PkAreaFt` = ?)) AND ((? = 1 AND `TraceVisit` IS NULL) OR (`TraceVisit` = ?)" +
                ") AND ((? = 1 AND `DSCPickedFlag` IS NULL) OR (`DSCPickedFlag` = ?)) AND ((? = 1" +
                " AND `UpdateAtts` IS NULL) OR (`UpdateAtts` = ?)) AND ((? = 1 AND `c_RFtosurfFt`" +
                " IS NULL) OR (`c_RFtosurfFt` = ?)) AND ((? = 1 AND `c_PKtosurfFt` IS NULL) OR (`" +
                "c_PKtosurfFt` = ?)) AND ((? = 1 AND `c_RFtosurfImpFt` IS NULL) OR (`c_RFtosurfIm" +
                "pFt` = ?)) AND ((? = 1 AND `c_PKtosurfImpFt` IS NULL) OR (`c_PKtosurfImpFt` = ?)" +
                ") AND ((? = 1 AND `IsActive` IS NULL) OR (`IsActive` = ?)) AND ((? = 1 AND `Sewe" +
                "rable` IS NULL) OR (`Sewerable` = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("discoSiteID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "discoSiteID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DiscoClass", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiscoClass", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToLinkSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkSan", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToLinkStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkStorm", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTOSan", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOSan", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTOStorm", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStorm", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PipeFlowTypeSan", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeSan", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PipeFlowTypeStorm", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeStorm", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SanSwrCrown", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SanSwrCrown", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Frac2SwrBeg", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Frac2SwrBeg", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FloodRefElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FalseBFRisk", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FalseBFRisk", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("GridQAQC", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GridQAQC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("MaxBldGrid", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MaxBldGrid", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AvgParcelElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AvgParcelElev", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EFFMethod", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EFFMethod", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FFOverride", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FFOverride", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OrigFinishFloor", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrigFinishFloor", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("HGL", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DeltaHGL", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DeltaHGL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("HGLComment", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGLComment", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DataSourceFlags", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSourceFlags", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ZoneEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ZoneCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneCP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("GenEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("GenCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenCP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BaseFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlow", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BaseFlowEX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BaseFlowDM", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowDM", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoof", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParking", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICFlag", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFlag", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ImpFractEX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ImpFractCP", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractCP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ImpFractFB", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractFB", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AreaFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RfAreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PkAreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("TraceVisit", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DSCPickedFlag", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCPickedFlag", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("UpdateAtts", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UpdateAtts", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_RFtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_PKtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_RFtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfImpFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_PKtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfImpFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Sewerable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Sewerable", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_discoSiteID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "discoSiteID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_discoSiteID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "discoSiteID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DiscoClass", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiscoClass", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DiscoClass", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiscoClass", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToLinkSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkSan", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToLinkSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkSan", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToLinkStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkStorm", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToLinkStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkStorm", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTOSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOSan", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTOSan", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOSan", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTOStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStorm", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTOStorm", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStorm", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PipeFlowTypeSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeSan", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PipeFlowTypeSan", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeSan", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PipeFlowTypeStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeStorm", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PipeFlowTypeStorm", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeStorm", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SanSwrCrown", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SanSwrCrown", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SanSwrCrown", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SanSwrCrown", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Frac2SwrBeg", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Frac2SwrBeg", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Frac2SwrBeg", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Frac2SwrBeg", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FloodRefElev", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FloodRefElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FalseBFRisk", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FalseBFRisk", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FalseBFRisk", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FalseBFRisk", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_GridQAQC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GridQAQC", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_GridQAQC", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GridQAQC", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_MaxBldGrid", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MaxBldGrid", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MaxBldGrid", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MaxBldGrid", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AvgParcelElev", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AvgParcelElev", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AvgParcelElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AvgParcelElev", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EFFMethod", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EFFMethod", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EFFMethod", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EFFMethod", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FFOverride", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FFOverride", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FFOverride", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FFOverride", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OrigFinishFloor", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrigFinishFloor", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OrigFinishFloor", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrigFinishFloor", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_HGL", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGL", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_HGL", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGL", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DeltaHGL", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DeltaHGL", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DeltaHGL", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DeltaHGL", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_HGLComment", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGLComment", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_HGLComment", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGLComment", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DataSourceFlags", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSourceFlags", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DataSourceFlags", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSourceFlags", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ZoneEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ZoneEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ZoneCP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneCP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ZoneCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneCP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_GenEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_GenEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_GenCP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenCP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_GenCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenCP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BaseFlow", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlow", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BaseFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlow", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BaseFlowEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BaseFlowEX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BaseFlowDM", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowDM", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BaseFlowDM", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowDM", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoof", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoof", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParking", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParking", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICFlag", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFlag", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICFlag", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFlag", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ImpFractEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ImpFractEX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ImpFractCP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractCP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ImpFractCP", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractCP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ImpFractFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractFB", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ImpFractFB", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractFB", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AreaFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AreaFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RfAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RfAreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PkAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PkAreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_TraceVisit", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_TraceVisit", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DSCPickedFlag", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCPickedFlag", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DSCPickedFlag", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCPickedFlag", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_UpdateAtts", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UpdateAtts", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_UpdateAtts", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UpdateAtts", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_RFtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_RFtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_PKtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_PKtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_RFtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfImpFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_RFtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfImpFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_PKtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfImpFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_PKtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfImpFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_IsActive", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Sewerable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Sewerable", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Sewerable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Sewerable", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.DataAccessConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT MAPINFO_ID, ParcelID, DivideID, DSCID, discoSiteID, DiscoClass, ToLinkSan, ToLinkStorm, NGTOSan, NGTOStorm, PipeFlowTypeSan, PipeFlowTypeStorm, SanSwrCrown, Frac2SwrBeg, FloodRefElev, FalseBFRisk, GridQAQC, MaxBldGrid, AvgParcelElev, EFFMethod, FFOverride, OrigFinishFloor, HGL, DeltaHGL, HGLComment, DataSourceFlags, ZoneEX, ZoneCP, GenEX, GenCP, BaseFlow, BaseFlowEX, BaseFlowDM, ICFtRoof, ICFtParking, ICFlag, ImpFractEX, ImpFractCP, ImpFractFB, AreaFt, RfAreaFt, PkAreaFt, TraceVisit, DSCPickedFlag, UpdateAtts, c_RFtosurfFt, c_PKtosurfFt, c_RFtosurfImpFt, c_PKtosurfImpFt, IsActive, Sewerable FROM mdl_dirsc";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ModelDataSet.MdlDscDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ModelDataSet.MdlDscDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ModelDataSet.MdlDscDataTable dataTable = new ModelDataSet.MdlDscDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ModelDataSet.MdlDscDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ModelDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MdlDsc");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_MAPINFO_ID, 
                    global::System.Nullable<int> Original_ParcelID, 
                    global::System.Nullable<int> Original_DivideID, 
                    global::System.Nullable<int> Original_DSCID, 
                    global::System.Nullable<int> Original_discoSiteID, 
                    string Original_DiscoClass, 
                    global::System.Nullable<int> Original_ToLinkSan, 
                    global::System.Nullable<int> Original_ToLinkStorm, 
                    string Original_NGTOSan, 
                    string Original_NGTOStorm, 
                    string Original_PipeFlowTypeSan, 
                    string Original_PipeFlowTypeStorm, 
                    global::System.Nullable<double> Original_SanSwrCrown, 
                    global::System.Nullable<double> Original_Frac2SwrBeg, 
                    global::System.Nullable<double> Original_FloodRefElev, 
                    bool Original_FalseBFRisk, 
                    string Original_GridQAQC, 
                    global::System.Nullable<double> Original_MaxBldGrid, 
                    global::System.Nullable<double> Original_AvgParcelElev, 
                    string Original_EFFMethod, 
                    string Original_FFOverride, 
                    global::System.Nullable<double> Original_OrigFinishFloor, 
                    global::System.Nullable<double> Original_HGL, 
                    global::System.Nullable<double> Original_DeltaHGL, 
                    string Original_HGLComment, 
                    string Original_DataSourceFlags, 
                    string Original_ZoneEX, 
                    string Original_ZoneCP, 
                    string Original_GenEX, 
                    string Original_GenCP, 
                    global::System.Nullable<double> Original_BaseFlow, 
                    global::System.Nullable<double> Original_BaseFlowEX, 
                    global::System.Nullable<double> Original_BaseFlowDM, 
                    global::System.Nullable<int> Original_ICFtRoof, 
                    global::System.Nullable<int> Original_ICFtParking, 
                    string Original_ICFlag, 
                    global::System.Nullable<double> Original_ImpFractEX, 
                    global::System.Nullable<double> Original_ImpFractCP, 
                    global::System.Nullable<double> Original_ImpFractFB, 
                    global::System.Nullable<double> Original_AreaFt, 
                    global::System.Nullable<double> Original_RfAreaFt, 
                    global::System.Nullable<double> Original_PkAreaFt, 
                    string Original_TraceVisit, 
                    string Original_DSCPickedFlag, 
                    bool Original_UpdateAtts, 
                    global::System.Nullable<int> Original_c_RFtosurfFt, 
                    global::System.Nullable<int> Original_c_PKtosurfFt, 
                    global::System.Nullable<int> Original_c_RFtosurfImpFt, 
                    global::System.Nullable<int> Original_c_PKtosurfImpFt, 
                    bool Original_IsActive, 
                    global::System.Nullable<int> Original_Sewerable) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_ParcelID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ParcelID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_DivideID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_DivideID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_DSCID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_DSCID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_discoSiteID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_discoSiteID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_DiscoClass == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_DiscoClass));
            }
            if ((Original_ToLinkSan.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_ToLinkSan.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_ToLinkStorm.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_ToLinkStorm.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_NGTOSan == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_NGTOSan));
            }
            if ((Original_NGTOStorm == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_NGTOStorm));
            }
            if ((Original_PipeFlowTypeSan == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_PipeFlowTypeSan));
            }
            if ((Original_PipeFlowTypeStorm == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_PipeFlowTypeStorm));
            }
            if ((Original_SanSwrCrown.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((double)(Original_SanSwrCrown.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_Frac2SwrBeg.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((double)(Original_Frac2SwrBeg.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_FloodRefElev.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((double)(Original_FloodRefElev.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[30].Value = ((bool)(Original_FalseBFRisk));
            if ((Original_GridQAQC == null)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((string)(Original_GridQAQC));
            }
            if ((Original_MaxBldGrid.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((double)(Original_MaxBldGrid.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_AvgParcelElev.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((double)(Original_AvgParcelElev.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_EFFMethod == null)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((string)(Original_EFFMethod));
            }
            if ((Original_FFOverride == null)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((string)(Original_FFOverride));
            }
            if ((Original_OrigFinishFloor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((double)(Original_OrigFinishFloor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((Original_HGL.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((double)(Original_HGL.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((Original_DeltaHGL.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((double)(Original_DeltaHGL.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_HGLComment == null)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((string)(Original_HGLComment));
            }
            if ((Original_DataSourceFlags == null)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((string)(Original_DataSourceFlags));
            }
            if ((Original_ZoneEX == null)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((string)(Original_ZoneEX));
            }
            if ((Original_ZoneCP == null)) {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[54].Value = ((string)(Original_ZoneCP));
            }
            if ((Original_GenEX == null)) {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[56].Value = ((string)(Original_GenEX));
            }
            if ((Original_GenCP == null)) {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[58].Value = ((string)(Original_GenCP));
            }
            if ((Original_BaseFlow.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[60].Value = ((double)(Original_BaseFlow.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((Original_BaseFlowEX.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[62].Value = ((double)(Original_BaseFlowEX.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((Original_BaseFlowDM.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[64].Value = ((double)(Original_BaseFlowDM.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((Original_ICFtRoof.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[66].Value = ((int)(Original_ICFtRoof.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            if ((Original_ICFtParking.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[68].Value = ((int)(Original_ICFtParking.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            if ((Original_ICFlag == null)) {
                this.Adapter.DeleteCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[70].Value = ((string)(Original_ICFlag));
            }
            if ((Original_ImpFractEX.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[71].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[72].Value = ((double)(Original_ImpFractEX.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[71].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            if ((Original_ImpFractCP.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[73].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[74].Value = ((double)(Original_ImpFractCP.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[73].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[74].Value = global::System.DBNull.Value;
            }
            if ((Original_ImpFractFB.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[75].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[76].Value = ((double)(Original_ImpFractFB.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[75].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            if ((Original_AreaFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[77].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[78].Value = ((double)(Original_AreaFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[77].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            if ((Original_RfAreaFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[79].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[80].Value = ((double)(Original_RfAreaFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[79].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            if ((Original_PkAreaFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[81].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[82].Value = ((double)(Original_PkAreaFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[81].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[82].Value = global::System.DBNull.Value;
            }
            if ((Original_TraceVisit == null)) {
                this.Adapter.DeleteCommand.Parameters[83].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[84].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[83].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[84].Value = ((string)(Original_TraceVisit));
            }
            if ((Original_DSCPickedFlag == null)) {
                this.Adapter.DeleteCommand.Parameters[85].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[86].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[85].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[86].Value = ((string)(Original_DSCPickedFlag));
            }
            this.Adapter.DeleteCommand.Parameters[87].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[88].Value = ((bool)(Original_UpdateAtts));
            if ((Original_c_RFtosurfFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[89].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[90].Value = ((int)(Original_c_RFtosurfFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[89].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[90].Value = global::System.DBNull.Value;
            }
            if ((Original_c_PKtosurfFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[91].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[92].Value = ((int)(Original_c_PKtosurfFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[91].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[92].Value = global::System.DBNull.Value;
            }
            if ((Original_c_RFtosurfImpFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[93].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[94].Value = ((int)(Original_c_RFtosurfImpFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[93].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[94].Value = global::System.DBNull.Value;
            }
            if ((Original_c_PKtosurfImpFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[95].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[96].Value = ((int)(Original_c_PKtosurfImpFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[95].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[96].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[97].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[98].Value = ((bool)(Original_IsActive));
            if ((Original_Sewerable.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[99].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[100].Value = ((int)(Original_Sewerable.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[99].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[100].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<int> ParcelID, 
                    global::System.Nullable<int> DivideID, 
                    global::System.Nullable<int> DSCID, 
                    global::System.Nullable<int> discoSiteID, 
                    string DiscoClass, 
                    global::System.Nullable<int> ToLinkSan, 
                    global::System.Nullable<int> ToLinkStorm, 
                    string NGTOSan, 
                    string NGTOStorm, 
                    string PipeFlowTypeSan, 
                    string PipeFlowTypeStorm, 
                    global::System.Nullable<double> SanSwrCrown, 
                    global::System.Nullable<double> Frac2SwrBeg, 
                    global::System.Nullable<double> FloodRefElev, 
                    bool FalseBFRisk, 
                    string GridQAQC, 
                    global::System.Nullable<double> MaxBldGrid, 
                    global::System.Nullable<double> AvgParcelElev, 
                    string EFFMethod, 
                    string FFOverride, 
                    global::System.Nullable<double> OrigFinishFloor, 
                    global::System.Nullable<double> HGL, 
                    global::System.Nullable<double> DeltaHGL, 
                    string HGLComment, 
                    string DataSourceFlags, 
                    string ZoneEX, 
                    string ZoneCP, 
                    string GenEX, 
                    string GenCP, 
                    global::System.Nullable<double> BaseFlow, 
                    global::System.Nullable<double> BaseFlowEX, 
                    global::System.Nullable<double> BaseFlowDM, 
                    global::System.Nullable<int> ICFtRoof, 
                    global::System.Nullable<int> ICFtParking, 
                    string ICFlag, 
                    global::System.Nullable<double> ImpFractEX, 
                    global::System.Nullable<double> ImpFractCP, 
                    global::System.Nullable<double> ImpFractFB, 
                    global::System.Nullable<double> AreaFt, 
                    global::System.Nullable<double> RfAreaFt, 
                    global::System.Nullable<double> PkAreaFt, 
                    string TraceVisit, 
                    string DSCPickedFlag, 
                    bool UpdateAtts, 
                    global::System.Nullable<int> c_RFtosurfFt, 
                    global::System.Nullable<int> c_PKtosurfFt, 
                    global::System.Nullable<int> c_RFtosurfImpFt, 
                    global::System.Nullable<int> c_PKtosurfImpFt, 
                    bool IsActive, 
                    global::System.Nullable<int> Sewerable) {
            if ((ParcelID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ParcelID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((DivideID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(DivideID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((DSCID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(DSCID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((discoSiteID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(discoSiteID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((DiscoClass == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(DiscoClass));
            }
            if ((ToLinkSan.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(ToLinkSan.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((ToLinkStorm.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(ToLinkStorm.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((NGTOSan == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(NGTOSan));
            }
            if ((NGTOStorm == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(NGTOStorm));
            }
            if ((PipeFlowTypeSan == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(PipeFlowTypeSan));
            }
            if ((PipeFlowTypeStorm == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(PipeFlowTypeStorm));
            }
            if ((SanSwrCrown.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(SanSwrCrown.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Frac2SwrBeg.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((double)(Frac2SwrBeg.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((FloodRefElev.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((double)(FloodRefElev.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[14].Value = ((bool)(FalseBFRisk));
            if ((GridQAQC == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(GridQAQC));
            }
            if ((MaxBldGrid.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((double)(MaxBldGrid.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((AvgParcelElev.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((double)(AvgParcelElev.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((EFFMethod == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(EFFMethod));
            }
            if ((FFOverride == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(FFOverride));
            }
            if ((OrigFinishFloor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((double)(OrigFinishFloor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((HGL.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((double)(HGL.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((DeltaHGL.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((double)(DeltaHGL.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((HGLComment == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(HGLComment));
            }
            if ((DataSourceFlags == null)) {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((string)(DataSourceFlags));
            }
            if ((ZoneEX == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(ZoneEX));
            }
            if ((ZoneCP == null)) {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = ((string)(ZoneCP));
            }
            if ((GenEX == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(GenEX));
            }
            if ((GenCP == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(GenCP));
            }
            if ((BaseFlow.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[29].Value = ((double)(BaseFlow.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((BaseFlowEX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((double)(BaseFlowEX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((BaseFlowDM.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((double)(BaseFlowDM.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((ICFtRoof.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[32].Value = ((int)(ICFtRoof.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((ICFtParking.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[33].Value = ((int)(ICFtParking.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((ICFlag == null)) {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = ((string)(ICFlag));
            }
            if ((ImpFractEX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[35].Value = ((double)(ImpFractEX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((ImpFractCP.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[36].Value = ((double)(ImpFractCP.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((ImpFractFB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[37].Value = ((double)(ImpFractFB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((AreaFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[38].Value = ((double)(AreaFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((RfAreaFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[39].Value = ((double)(RfAreaFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((PkAreaFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[40].Value = ((double)(PkAreaFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((TraceVisit == null)) {
                this.Adapter.InsertCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[41].Value = ((string)(TraceVisit));
            }
            if ((DSCPickedFlag == null)) {
                this.Adapter.InsertCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[42].Value = ((string)(DSCPickedFlag));
            }
            this.Adapter.InsertCommand.Parameters[43].Value = ((bool)(UpdateAtts));
            if ((c_RFtosurfFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[44].Value = ((int)(c_RFtosurfFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((c_PKtosurfFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[45].Value = ((int)(c_PKtosurfFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((c_RFtosurfImpFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[46].Value = ((int)(c_RFtosurfImpFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((c_PKtosurfImpFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[47].Value = ((int)(c_PKtosurfImpFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[48].Value = ((bool)(IsActive));
            if ((Sewerable.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[49].Value = ((int)(Sewerable.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> ParcelID, 
                    global::System.Nullable<int> DivideID, 
                    global::System.Nullable<int> DSCID, 
                    global::System.Nullable<int> discoSiteID, 
                    string DiscoClass, 
                    global::System.Nullable<int> ToLinkSan, 
                    global::System.Nullable<int> ToLinkStorm, 
                    string NGTOSan, 
                    string NGTOStorm, 
                    string PipeFlowTypeSan, 
                    string PipeFlowTypeStorm, 
                    global::System.Nullable<double> SanSwrCrown, 
                    global::System.Nullable<double> Frac2SwrBeg, 
                    global::System.Nullable<double> FloodRefElev, 
                    bool FalseBFRisk, 
                    string GridQAQC, 
                    global::System.Nullable<double> MaxBldGrid, 
                    global::System.Nullable<double> AvgParcelElev, 
                    string EFFMethod, 
                    string FFOverride, 
                    global::System.Nullable<double> OrigFinishFloor, 
                    global::System.Nullable<double> HGL, 
                    global::System.Nullable<double> DeltaHGL, 
                    string HGLComment, 
                    string DataSourceFlags, 
                    string ZoneEX, 
                    string ZoneCP, 
                    string GenEX, 
                    string GenCP, 
                    global::System.Nullable<double> BaseFlow, 
                    global::System.Nullable<double> BaseFlowEX, 
                    global::System.Nullable<double> BaseFlowDM, 
                    global::System.Nullable<int> ICFtRoof, 
                    global::System.Nullable<int> ICFtParking, 
                    string ICFlag, 
                    global::System.Nullable<double> ImpFractEX, 
                    global::System.Nullable<double> ImpFractCP, 
                    global::System.Nullable<double> ImpFractFB, 
                    global::System.Nullable<double> AreaFt, 
                    global::System.Nullable<double> RfAreaFt, 
                    global::System.Nullable<double> PkAreaFt, 
                    string TraceVisit, 
                    string DSCPickedFlag, 
                    bool UpdateAtts, 
                    global::System.Nullable<int> c_RFtosurfFt, 
                    global::System.Nullable<int> c_PKtosurfFt, 
                    global::System.Nullable<int> c_RFtosurfImpFt, 
                    global::System.Nullable<int> c_PKtosurfImpFt, 
                    bool IsActive, 
                    global::System.Nullable<int> Sewerable, 
                    int Original_MAPINFO_ID, 
                    global::System.Nullable<int> Original_ParcelID, 
                    global::System.Nullable<int> Original_DivideID, 
                    global::System.Nullable<int> Original_DSCID, 
                    global::System.Nullable<int> Original_discoSiteID, 
                    string Original_DiscoClass, 
                    global::System.Nullable<int> Original_ToLinkSan, 
                    global::System.Nullable<int> Original_ToLinkStorm, 
                    string Original_NGTOSan, 
                    string Original_NGTOStorm, 
                    string Original_PipeFlowTypeSan, 
                    string Original_PipeFlowTypeStorm, 
                    global::System.Nullable<double> Original_SanSwrCrown, 
                    global::System.Nullable<double> Original_Frac2SwrBeg, 
                    global::System.Nullable<double> Original_FloodRefElev, 
                    bool Original_FalseBFRisk, 
                    string Original_GridQAQC, 
                    global::System.Nullable<double> Original_MaxBldGrid, 
                    global::System.Nullable<double> Original_AvgParcelElev, 
                    string Original_EFFMethod, 
                    string Original_FFOverride, 
                    global::System.Nullable<double> Original_OrigFinishFloor, 
                    global::System.Nullable<double> Original_HGL, 
                    global::System.Nullable<double> Original_DeltaHGL, 
                    string Original_HGLComment, 
                    string Original_DataSourceFlags, 
                    string Original_ZoneEX, 
                    string Original_ZoneCP, 
                    string Original_GenEX, 
                    string Original_GenCP, 
                    global::System.Nullable<double> Original_BaseFlow, 
                    global::System.Nullable<double> Original_BaseFlowEX, 
                    global::System.Nullable<double> Original_BaseFlowDM, 
                    global::System.Nullable<int> Original_ICFtRoof, 
                    global::System.Nullable<int> Original_ICFtParking, 
                    string Original_ICFlag, 
                    global::System.Nullable<double> Original_ImpFractEX, 
                    global::System.Nullable<double> Original_ImpFractCP, 
                    global::System.Nullable<double> Original_ImpFractFB, 
                    global::System.Nullable<double> Original_AreaFt, 
                    global::System.Nullable<double> Original_RfAreaFt, 
                    global::System.Nullable<double> Original_PkAreaFt, 
                    string Original_TraceVisit, 
                    string Original_DSCPickedFlag, 
                    bool Original_UpdateAtts, 
                    global::System.Nullable<int> Original_c_RFtosurfFt, 
                    global::System.Nullable<int> Original_c_PKtosurfFt, 
                    global::System.Nullable<int> Original_c_RFtosurfImpFt, 
                    global::System.Nullable<int> Original_c_PKtosurfImpFt, 
                    bool Original_IsActive, 
                    global::System.Nullable<int> Original_Sewerable) {
            if ((ParcelID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ParcelID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((DivideID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(DivideID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((DSCID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(DSCID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((discoSiteID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(discoSiteID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((DiscoClass == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(DiscoClass));
            }
            if ((ToLinkSan.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(ToLinkSan.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((ToLinkStorm.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ToLinkStorm.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((NGTOSan == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(NGTOSan));
            }
            if ((NGTOStorm == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(NGTOStorm));
            }
            if ((PipeFlowTypeSan == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(PipeFlowTypeSan));
            }
            if ((PipeFlowTypeStorm == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(PipeFlowTypeStorm));
            }
            if ((SanSwrCrown.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((double)(SanSwrCrown.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Frac2SwrBeg.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((double)(Frac2SwrBeg.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((FloodRefElev.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((double)(FloodRefElev.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((bool)(FalseBFRisk));
            if ((GridQAQC == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(GridQAQC));
            }
            if ((MaxBldGrid.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((double)(MaxBldGrid.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((AvgParcelElev.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((double)(AvgParcelElev.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((EFFMethod == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(EFFMethod));
            }
            if ((FFOverride == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(FFOverride));
            }
            if ((OrigFinishFloor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((double)(OrigFinishFloor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((HGL.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((double)(HGL.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((DeltaHGL.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((double)(DeltaHGL.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((HGLComment == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(HGLComment));
            }
            if ((DataSourceFlags == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(DataSourceFlags));
            }
            if ((ZoneEX == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(ZoneEX));
            }
            if ((ZoneCP == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(ZoneCP));
            }
            if ((GenEX == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(GenEX));
            }
            if ((GenCP == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(GenCP));
            }
            if ((BaseFlow.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((double)(BaseFlow.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((BaseFlowEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((double)(BaseFlowEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((BaseFlowDM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((double)(BaseFlowDM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((ICFtRoof.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(ICFtRoof.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((ICFtParking.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((int)(ICFtParking.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((ICFlag == null)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(ICFlag));
            }
            if ((ImpFractEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((double)(ImpFractEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((ImpFractCP.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((double)(ImpFractCP.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((ImpFractFB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((double)(ImpFractFB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((AreaFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((double)(AreaFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((RfAreaFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((double)(RfAreaFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((PkAreaFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((double)(PkAreaFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((TraceVisit == null)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(TraceVisit));
            }
            if ((DSCPickedFlag == null)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(DSCPickedFlag));
            }
            this.Adapter.UpdateCommand.Parameters[43].Value = ((bool)(UpdateAtts));
            if ((c_RFtosurfFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((int)(c_RFtosurfFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((c_PKtosurfFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((int)(c_PKtosurfFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((c_RFtosurfImpFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((int)(c_RFtosurfImpFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((c_PKtosurfImpFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((int)(c_PKtosurfImpFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[48].Value = ((bool)(IsActive));
            if ((Sewerable.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((int)(Sewerable.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[50].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_ParcelID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[52].Value = ((int)(Original_ParcelID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((Original_DivideID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[54].Value = ((int)(Original_DivideID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((Original_DSCID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[56].Value = ((int)(Original_DSCID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((Original_discoSiteID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[58].Value = ((int)(Original_discoSiteID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((Original_DiscoClass == null)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[60].Value = ((string)(Original_DiscoClass));
            }
            if ((Original_ToLinkSan.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[62].Value = ((int)(Original_ToLinkSan.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((Original_ToLinkStorm.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[64].Value = ((int)(Original_ToLinkStorm.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((Original_NGTOSan == null)) {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[66].Value = ((string)(Original_NGTOSan));
            }
            if ((Original_NGTOStorm == null)) {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[68].Value = ((string)(Original_NGTOStorm));
            }
            if ((Original_PipeFlowTypeSan == null)) {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[70].Value = ((string)(Original_PipeFlowTypeSan));
            }
            if ((Original_PipeFlowTypeStorm == null)) {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[72].Value = ((string)(Original_PipeFlowTypeStorm));
            }
            if ((Original_SanSwrCrown.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[74].Value = ((double)(Original_SanSwrCrown.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[74].Value = global::System.DBNull.Value;
            }
            if ((Original_Frac2SwrBeg.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[76].Value = ((double)(Original_Frac2SwrBeg.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            if ((Original_FloodRefElev.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[78].Value = ((double)(Original_FloodRefElev.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[79].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[80].Value = ((bool)(Original_FalseBFRisk));
            if ((Original_GridQAQC == null)) {
                this.Adapter.UpdateCommand.Parameters[81].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[82].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[81].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[82].Value = ((string)(Original_GridQAQC));
            }
            if ((Original_MaxBldGrid.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[83].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[84].Value = ((double)(Original_MaxBldGrid.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[83].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[84].Value = global::System.DBNull.Value;
            }
            if ((Original_AvgParcelElev.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[85].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[86].Value = ((double)(Original_AvgParcelElev.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[85].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[86].Value = global::System.DBNull.Value;
            }
            if ((Original_EFFMethod == null)) {
                this.Adapter.UpdateCommand.Parameters[87].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[88].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[87].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[88].Value = ((string)(Original_EFFMethod));
            }
            if ((Original_FFOverride == null)) {
                this.Adapter.UpdateCommand.Parameters[89].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[90].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[89].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[90].Value = ((string)(Original_FFOverride));
            }
            if ((Original_OrigFinishFloor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[91].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[92].Value = ((double)(Original_OrigFinishFloor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[91].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[92].Value = global::System.DBNull.Value;
            }
            if ((Original_HGL.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[93].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[94].Value = ((double)(Original_HGL.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[93].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[94].Value = global::System.DBNull.Value;
            }
            if ((Original_DeltaHGL.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[95].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[96].Value = ((double)(Original_DeltaHGL.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[95].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[96].Value = global::System.DBNull.Value;
            }
            if ((Original_HGLComment == null)) {
                this.Adapter.UpdateCommand.Parameters[97].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[98].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[97].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[98].Value = ((string)(Original_HGLComment));
            }
            if ((Original_DataSourceFlags == null)) {
                this.Adapter.UpdateCommand.Parameters[99].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[100].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[99].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[100].Value = ((string)(Original_DataSourceFlags));
            }
            if ((Original_ZoneEX == null)) {
                this.Adapter.UpdateCommand.Parameters[101].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[102].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[101].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[102].Value = ((string)(Original_ZoneEX));
            }
            if ((Original_ZoneCP == null)) {
                this.Adapter.UpdateCommand.Parameters[103].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[104].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[103].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[104].Value = ((string)(Original_ZoneCP));
            }
            if ((Original_GenEX == null)) {
                this.Adapter.UpdateCommand.Parameters[105].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[106].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[105].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[106].Value = ((string)(Original_GenEX));
            }
            if ((Original_GenCP == null)) {
                this.Adapter.UpdateCommand.Parameters[107].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[108].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[107].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[108].Value = ((string)(Original_GenCP));
            }
            if ((Original_BaseFlow.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[109].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[110].Value = ((double)(Original_BaseFlow.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[109].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[110].Value = global::System.DBNull.Value;
            }
            if ((Original_BaseFlowEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[111].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[112].Value = ((double)(Original_BaseFlowEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[111].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[112].Value = global::System.DBNull.Value;
            }
            if ((Original_BaseFlowDM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[113].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[114].Value = ((double)(Original_BaseFlowDM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[113].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[114].Value = global::System.DBNull.Value;
            }
            if ((Original_ICFtRoof.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[115].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[116].Value = ((int)(Original_ICFtRoof.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[115].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[116].Value = global::System.DBNull.Value;
            }
            if ((Original_ICFtParking.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[117].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[118].Value = ((int)(Original_ICFtParking.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[117].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[118].Value = global::System.DBNull.Value;
            }
            if ((Original_ICFlag == null)) {
                this.Adapter.UpdateCommand.Parameters[119].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[120].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[119].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[120].Value = ((string)(Original_ICFlag));
            }
            if ((Original_ImpFractEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[121].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[122].Value = ((double)(Original_ImpFractEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[121].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[122].Value = global::System.DBNull.Value;
            }
            if ((Original_ImpFractCP.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[123].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[124].Value = ((double)(Original_ImpFractCP.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[123].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[124].Value = global::System.DBNull.Value;
            }
            if ((Original_ImpFractFB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[125].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[126].Value = ((double)(Original_ImpFractFB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[125].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[126].Value = global::System.DBNull.Value;
            }
            if ((Original_AreaFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[127].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[128].Value = ((double)(Original_AreaFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[127].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[128].Value = global::System.DBNull.Value;
            }
            if ((Original_RfAreaFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[129].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[130].Value = ((double)(Original_RfAreaFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[129].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[130].Value = global::System.DBNull.Value;
            }
            if ((Original_PkAreaFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[131].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[132].Value = ((double)(Original_PkAreaFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[131].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[132].Value = global::System.DBNull.Value;
            }
            if ((Original_TraceVisit == null)) {
                this.Adapter.UpdateCommand.Parameters[133].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[134].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[133].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[134].Value = ((string)(Original_TraceVisit));
            }
            if ((Original_DSCPickedFlag == null)) {
                this.Adapter.UpdateCommand.Parameters[135].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[136].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[135].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[136].Value = ((string)(Original_DSCPickedFlag));
            }
            this.Adapter.UpdateCommand.Parameters[137].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[138].Value = ((bool)(Original_UpdateAtts));
            if ((Original_c_RFtosurfFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[139].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[140].Value = ((int)(Original_c_RFtosurfFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[139].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[140].Value = global::System.DBNull.Value;
            }
            if ((Original_c_PKtosurfFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[141].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[142].Value = ((int)(Original_c_PKtosurfFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[141].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[142].Value = global::System.DBNull.Value;
            }
            if ((Original_c_RFtosurfImpFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[143].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[144].Value = ((int)(Original_c_RFtosurfImpFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[143].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[144].Value = global::System.DBNull.Value;
            }
            if ((Original_c_PKtosurfImpFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[145].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[146].Value = ((int)(Original_c_PKtosurfImpFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[145].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[146].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[147].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[148].Value = ((bool)(Original_IsActive));
            if ((Original_Sewerable.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[149].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[150].Value = ((int)(Original_Sewerable.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[149].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[150].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MdlSpecLinksTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MdlSpecLinksTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MdlSpecLinks";
            tableMapping.ColumnMappings.Add("MAPINFO_ID", "MapInfoID");
            tableMapping.ColumnMappings.Add("Node", "Node");
            tableMapping.ColumnMappings.Add("ToLinkID", "ToLinkID");
            tableMapping.ColumnMappings.Add("ToLinkNDX", "ToLinkIndex");
            tableMapping.ColumnMappings.Add("SpecLinkType", "SpecLinkType");
            tableMapping.ColumnMappings.Add("MSpecLinkID", "MSpecLinkID");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            tableMapping.ColumnMappings.Add("SLID", "SLID");
            tableMapping.ColumnMappings.Add("SLNode", "SLNode");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `mdl_speclinks` WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `Node` IS NULL) OR (`Node` = ?)) AND ((? = 1 AND `ToLinkID` IS NULL) OR (`ToLinkID` = ?)) AND ((? = 1 AND `ToLinkNDX` IS NULL) OR (`ToLinkNDX` = ?)) AND ((? = 1 AND `SpecLinkType` IS NULL) OR (`SpecLinkType` = ?)) AND ((? = 1 AND `MSpecLinkID` IS NULL) OR (`MSpecLinkID` = ?)) AND ((? = 1 AND `IsActive` IS NULL) OR (`IsActive` = ?)) AND ((? = 1 AND `SLID` IS NULL) OR (`SLID` = ?)) AND ((? = 1 AND `SLNode` IS NULL) OR (`SLNode` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Node", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Node", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Node", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Node", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToLinkNDX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkNDX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToLinkNDX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkNDX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SpecLinkType", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SpecLinkType", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SpecLinkType", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SpecLinkType", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_MSpecLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MSpecLinkID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MSpecLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MSpecLinkID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_IsActive", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SLID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SLID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SLID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SLID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SLNode", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SLNode", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SLNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SLNode", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `mdl_speclinks` (`Node`, `ToLinkID`, `ToLinkNDX`, `SpecLinkType`, `MS" +
                "pecLinkID`, `IsActive`, `SLID`, `SLNode`) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Node", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Node", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToLinkNDX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkNDX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SpecLinkType", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SpecLinkType", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("MSpecLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MSpecLinkID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SLID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SLID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SLNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SLNode", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `mdl_speclinks` SET `Node` = ?, `ToLinkID` = ?, `ToLinkNDX` = ?, `SpecLinkType` = ?, `MSpecLinkID` = ?, `IsActive` = ?, `SLID` = ?, `SLNode` = ? WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `Node` IS NULL) OR (`Node` = ?)) AND ((? = 1 AND `ToLinkID` IS NULL) OR (`ToLinkID` = ?)) AND ((? = 1 AND `ToLinkNDX` IS NULL) OR (`ToLinkNDX` = ?)) AND ((? = 1 AND `SpecLinkType` IS NULL) OR (`SpecLinkType` = ?)) AND ((? = 1 AND `MSpecLinkID` IS NULL) OR (`MSpecLinkID` = ?)) AND ((? = 1 AND `IsActive` IS NULL) OR (`IsActive` = ?)) AND ((? = 1 AND `SLID` IS NULL) OR (`SLID` = ?)) AND ((? = 1 AND `SLNode` IS NULL) OR (`SLNode` = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Node", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Node", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToLinkNDX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkNDX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SpecLinkType", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SpecLinkType", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("MSpecLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MSpecLinkID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SLID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SLID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SLNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SLNode", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Node", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Node", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Node", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Node", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToLinkNDX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkNDX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToLinkNDX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkNDX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SpecLinkType", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SpecLinkType", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SpecLinkType", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SpecLinkType", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_MSpecLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MSpecLinkID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MSpecLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MSpecLinkID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_IsActive", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SLID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SLID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SLID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SLID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SLNode", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SLNode", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SLNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SLNode", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.DataAccessConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MAPINFO_ID, Node, ToLinkID, ToLinkNDX, SpecLinkType, MSpecLinkID, IsActive" +
                ", SLID, SLNode FROM mdl_speclinks";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ModelDataSet.MdlSpecLinksDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ModelDataSet.MdlSpecLinksDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ModelDataSet.MdlSpecLinksDataTable dataTable = new ModelDataSet.MdlSpecLinksDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ModelDataSet.MdlSpecLinksDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ModelDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MdlSpecLinks");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_MAPINFO_ID, string Original_Node, global::System.Nullable<int> Original_ToLinkID, global::System.Nullable<int> Original_ToLinkNDX, string Original_SpecLinkType, global::System.Nullable<int> Original_MSpecLinkID, bool Original_IsActive, global::System.Nullable<int> Original_SLID, string Original_SLNode) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_Node == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Node));
            }
            if ((Original_ToLinkID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_ToLinkID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_ToLinkNDX.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_ToLinkNDX.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_SpecLinkType == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_SpecLinkType));
            }
            if ((Original_MSpecLinkID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_MSpecLinkID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((bool)(Original_IsActive));
            if ((Original_SLID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_SLID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_SLNode == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_SLNode));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Node, global::System.Nullable<int> ToLinkID, global::System.Nullable<int> ToLinkNDX, string SpecLinkType, global::System.Nullable<int> MSpecLinkID, bool IsActive, global::System.Nullable<int> SLID, string SLNode) {
            if ((Node == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Node));
            }
            if ((ToLinkID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ToLinkID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ToLinkNDX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(ToLinkNDX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((SpecLinkType == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(SpecLinkType));
            }
            if ((MSpecLinkID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(MSpecLinkID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(IsActive));
            if ((SLID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(SLID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((SLNode == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(SLNode));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Node, 
                    global::System.Nullable<int> ToLinkID, 
                    global::System.Nullable<int> ToLinkNDX, 
                    string SpecLinkType, 
                    global::System.Nullable<int> MSpecLinkID, 
                    bool IsActive, 
                    global::System.Nullable<int> SLID, 
                    string SLNode, 
                    int Original_MAPINFO_ID, 
                    string Original_Node, 
                    global::System.Nullable<int> Original_ToLinkID, 
                    global::System.Nullable<int> Original_ToLinkNDX, 
                    string Original_SpecLinkType, 
                    global::System.Nullable<int> Original_MSpecLinkID, 
                    bool Original_IsActive, 
                    global::System.Nullable<int> Original_SLID, 
                    string Original_SLNode) {
            if ((Node == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Node));
            }
            if ((ToLinkID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ToLinkID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ToLinkNDX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(ToLinkNDX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((SpecLinkType == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(SpecLinkType));
            }
            if ((MSpecLinkID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(MSpecLinkID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(IsActive));
            if ((SLID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(SLID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((SLNode == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(SLNode));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_Node == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_Node));
            }
            if ((Original_ToLinkID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_ToLinkID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_ToLinkNDX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_ToLinkNDX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_SpecLinkType == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_SpecLinkType));
            }
            if ((Original_MSpecLinkID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_MSpecLinkID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((bool)(Original_IsActive));
            if ((Original_SLID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_SLID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_SLNode == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_SLNode));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MdlLinksTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MdlLinksTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MdlLinks";
            tableMapping.ColumnMappings.Add("MAPINFO_ID", "MapinfoID");
            tableMapping.ColumnMappings.Add("LinkID", "LinkID");
            tableMapping.ColumnMappings.Add("USNode", "USNode");
            tableMapping.ColumnMappings.Add("DSNode", "DSNode");
            tableMapping.ColumnMappings.Add("LinkType", "LinkType");
            tableMapping.ColumnMappings.Add("PipeFlowType", "PipeFlowType");
            tableMapping.ColumnMappings.Add("MLinkID", "MLinkID");
            tableMapping.ColumnMappings.Add("SimLinkID", "SimLinkID");
            tableMapping.ColumnMappings.Add("CompKey", "CompKey");
            tableMapping.ColumnMappings.Add("Length", "Length");
            tableMapping.ColumnMappings.Add("DiamWidth", "DiamWidth");
            tableMapping.ColumnMappings.Add("Height", "Height");
            tableMapping.ColumnMappings.Add("PipeShape", "PipeShape");
            tableMapping.ColumnMappings.Add("Material", "Material");
            tableMapping.ColumnMappings.Add("upsdpth", "UpsDpth");
            tableMapping.ColumnMappings.Add("dwndpth", "DwnDpth");
            tableMapping.ColumnMappings.Add("USIE", "UsIE");
            tableMapping.ColumnMappings.Add("DSIE", "DsIE");
            tableMapping.ColumnMappings.Add("AsBuilt", "AsBuilt");
            tableMapping.ColumnMappings.Add("Instdate", "Instdate");
            tableMapping.ColumnMappings.Add("FromX", "FromX");
            tableMapping.ColumnMappings.Add("FromY", "FromY");
            tableMapping.ColumnMappings.Add("ToX", "ToX");
            tableMapping.ColumnMappings.Add("ToY", "ToY");
            tableMapping.ColumnMappings.Add("Roughness", "Roughness");
            tableMapping.ColumnMappings.Add("LinkReach", "LinkReach");
            tableMapping.ColumnMappings.Add("ReachElement", "ReachElement");
            tableMapping.ColumnMappings.Add("DataFlagSynth", "DataFlagSynth");
            tableMapping.ColumnMappings.Add("DataQual", "DataQual");
            tableMapping.ColumnMappings.Add("IsSpecLink", "IsSpecLink");
            tableMapping.ColumnMappings.Add("HServStat", "HServStat");
            tableMapping.ColumnMappings.Add("TraceVisit", "TraceVisit");
            tableMapping.ColumnMappings.Add("DataSource", "DataSource");
            tableMapping.ColumnMappings.Add("Source", "Source");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `mdl_links` WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `LinkID` IS NUL" +
                "L) OR (`LinkID` = ?)) AND ((? = 1 AND `USNode` IS NULL) OR (`USNode` = ?)) AND (" +
                "(? = 1 AND `DSNode` IS NULL) OR (`DSNode` = ?)) AND ((? = 1 AND `LinkType` IS NU" +
                "LL) OR (`LinkType` = ?)) AND ((? = 1 AND `PipeFlowType` IS NULL) OR (`PipeFlowTy" +
                "pe` = ?)) AND ((? = 1 AND `MLinkID` IS NULL) OR (`MLinkID` = ?)) AND ((? = 1 AND" +
                " `SimLinkID` IS NULL) OR (`SimLinkID` = ?)) AND ((? = 1 AND `CompKey` IS NULL) O" +
                "R (`CompKey` = ?)) AND ((? = 1 AND `Length` IS NULL) OR (`Length` = ?)) AND ((? " +
                "= 1 AND `DiamWidth` IS NULL) OR (`DiamWidth` = ?)) AND ((? = 1 AND `Height` IS N" +
                "ULL) OR (`Height` = ?)) AND ((? = 1 AND `PipeShape` IS NULL) OR (`PipeShape` = ?" +
                ")) AND ((? = 1 AND `Material` IS NULL) OR (`Material` = ?)) AND ((? = 1 AND `ups" +
                "dpth` IS NULL) OR (`upsdpth` = ?)) AND ((? = 1 AND `dwndpth` IS NULL) OR (`dwndp" +
                "th` = ?)) AND ((? = 1 AND `USIE` IS NULL) OR (`USIE` = ?)) AND ((? = 1 AND `DSIE" +
                "` IS NULL) OR (`DSIE` = ?)) AND ((? = 1 AND `AsBuilt` IS NULL) OR (`AsBuilt` = ?" +
                ")) AND ((? = 1 AND `Instdate` IS NULL) OR (`Instdate` = ?)) AND ((? = 1 AND `Fro" +
                "mX` IS NULL) OR (`FromX` = ?)) AND ((? = 1 AND `FromY` IS NULL) OR (`FromY` = ?)" +
                ") AND ((? = 1 AND `ToX` IS NULL) OR (`ToX` = ?)) AND ((? = 1 AND `ToY` IS NULL) " +
                "OR (`ToY` = ?)) AND ((? = 1 AND `Roughness` IS NULL) OR (`Roughness` = ?)) AND (" +
                "(? = 1 AND `LinkReach` IS NULL) OR (`LinkReach` = ?)) AND ((? = 1 AND `ReachElem" +
                "ent` IS NULL) OR (`ReachElement` = ?)) AND ((? = 1 AND `DataFlagSynth` IS NULL) " +
                "OR (`DataFlagSynth` = ?)) AND ((? = 1 AND `DataQual` IS NULL) OR (`DataQual` = ?" +
                ")) AND ((? = 1 AND `IsSpecLink` IS NULL) OR (`IsSpecLink` = ?)) AND ((? = 1 AND " +
                "`HServStat` IS NULL) OR (`HServStat` = ?)) AND ((? = 1 AND `TraceVisit` IS NULL)" +
                " OR (`TraceVisit` = ?)) AND ((? = 1 AND `DataSource` IS NULL) OR (`DataSource` =" +
                " ?)) AND ((? = 1 AND `Source` IS NULL) OR (`Source` = ?)) AND ((? = 1 AND `IsAct" +
                "ive` IS NULL) OR (`IsActive` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_LinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LinkID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_LinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LinkID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_USNode", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "USNode", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_USNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "USNode", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DSNode", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSNode", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DSNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSNode", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_LinkType", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LinkType", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_LinkType", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LinkType", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PipeFlowType", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowType", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PipeFlowType", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowType", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_MLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MLinkID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MLinkID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SimLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SimLinkID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SimLinkID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SimLinkID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_CompKey", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompKey", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_CompKey", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompKey", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Length", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Length", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Length", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Length", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DiamWidth", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiamWidth", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DiamWidth", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiamWidth", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Height", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Height", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Height", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Height", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PipeShape", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeShape", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PipeShape", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeShape", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Material", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Material", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Material", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Material", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_upsdpth", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "upsdpth", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_upsdpth", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "upsdpth", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dwndpth", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dwndpth", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dwndpth", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dwndpth", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_USIE", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "USIE", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_USIE", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "USIE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DSIE", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSIE", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DSIE", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSIE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AsBuilt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AsBuilt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AsBuilt", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AsBuilt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Instdate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Instdate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Instdate", global::System.Data.OleDb.OleDbType.Date, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Instdate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FromX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FromX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FromX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FromX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FromY", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FromY", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FromY", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FromY", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToY", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToY", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToY", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToY", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Roughness", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Roughness", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Roughness", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Roughness", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_LinkReach", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LinkReach", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_LinkReach", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LinkReach", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ReachElement", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ReachElement", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ReachElement", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ReachElement", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DataFlagSynth", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataFlagSynth", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DataFlagSynth", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataFlagSynth", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DataQual", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataQual", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DataQual", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataQual", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_IsSpecLink", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsSpecLink", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_IsSpecLink", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsSpecLink", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_HServStat", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HServStat", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_HServStat", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HServStat", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_TraceVisit", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_TraceVisit", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DataSource", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSource", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DataSource", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSource", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Source", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_IsActive", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `mdl_links` (`LinkID`, `USNode`, `DSNode`, `LinkType`, `PipeFlowType`, `MLinkID`, `SimLinkID`, `CompKey`, `Length`, `DiamWidth`, `Height`, `PipeShape`, `Material`, `upsdpth`, `dwndpth`, `USIE`, `DSIE`, `AsBuilt`, `Instdate`, `FromX`, `FromY`, `ToX`, `ToY`, `Roughness`, `LinkReach`, `ReachElement`, `DataFlagSynth`, `DataQual`, `IsSpecLink`, `HServStat`, `TraceVisit`, `DataSource`, `Source`, `IsActive`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("LinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LinkID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("USNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "USNode", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DSNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSNode", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("LinkType", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LinkType", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PipeFlowType", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowType", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("MLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MLinkID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SimLinkID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SimLinkID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CompKey", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompKey", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Length", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Length", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DiamWidth", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiamWidth", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Height", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Height", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PipeShape", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeShape", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Material", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Material", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("upsdpth", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "upsdpth", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dwndpth", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dwndpth", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("USIE", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "USIE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DSIE", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSIE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AsBuilt", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AsBuilt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Instdate", global::System.Data.OleDb.OleDbType.Date, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Instdate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FromX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FromX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FromY", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FromY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToY", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Roughness", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Roughness", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("LinkReach", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LinkReach", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ReachElement", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ReachElement", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DataFlagSynth", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataFlagSynth", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DataQual", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataQual", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsSpecLink", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsSpecLink", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("HServStat", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HServStat", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("TraceVisit", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DataSource", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSource", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE `mdl_links` SET `LinkID` = ?, `USNode` = ?, `DSNode` = ?, `LinkType` = ?, " +
                "`PipeFlowType` = ?, `MLinkID` = ?, `SimLinkID` = ?, `CompKey` = ?, `Length` = ?," +
                " `DiamWidth` = ?, `Height` = ?, `PipeShape` = ?, `Material` = ?, `upsdpth` = ?, " +
                "`dwndpth` = ?, `USIE` = ?, `DSIE` = ?, `AsBuilt` = ?, `Instdate` = ?, `FromX` = " +
                "?, `FromY` = ?, `ToX` = ?, `ToY` = ?, `Roughness` = ?, `LinkReach` = ?, `ReachEl" +
                "ement` = ?, `DataFlagSynth` = ?, `DataQual` = ?, `IsSpecLink` = ?, `HServStat` =" +
                " ?, `TraceVisit` = ?, `DataSource` = ?, `Source` = ?, `IsActive` = ? WHERE ((`MA" +
                "PINFO_ID` = ?) AND ((? = 1 AND `LinkID` IS NULL) OR (`LinkID` = ?)) AND ((? = 1 " +
                "AND `USNode` IS NULL) OR (`USNode` = ?)) AND ((? = 1 AND `DSNode` IS NULL) OR (`" +
                "DSNode` = ?)) AND ((? = 1 AND `LinkType` IS NULL) OR (`LinkType` = ?)) AND ((? =" +
                " 1 AND `PipeFlowType` IS NULL) OR (`PipeFlowType` = ?)) AND ((? = 1 AND `MLinkID" +
                "` IS NULL) OR (`MLinkID` = ?)) AND ((? = 1 AND `SimLinkID` IS NULL) OR (`SimLink" +
                "ID` = ?)) AND ((? = 1 AND `CompKey` IS NULL) OR (`CompKey` = ?)) AND ((? = 1 AND" +
                " `Length` IS NULL) OR (`Length` = ?)) AND ((? = 1 AND `DiamWidth` IS NULL) OR (`" +
                "DiamWidth` = ?)) AND ((? = 1 AND `Height` IS NULL) OR (`Height` = ?)) AND ((? = " +
                "1 AND `PipeShape` IS NULL) OR (`PipeShape` = ?)) AND ((? = 1 AND `Material` IS N" +
                "ULL) OR (`Material` = ?)) AND ((? = 1 AND `upsdpth` IS NULL) OR (`upsdpth` = ?))" +
                " AND ((? = 1 AND `dwndpth` IS NULL) OR (`dwndpth` = ?)) AND ((? = 1 AND `USIE` I" +
                "S NULL) OR (`USIE` = ?)) AND ((? = 1 AND `DSIE` IS NULL) OR (`DSIE` = ?)) AND ((" +
                "? = 1 AND `AsBuilt` IS NULL) OR (`AsBuilt` = ?)) AND ((? = 1 AND `Instdate` IS N" +
                "ULL) OR (`Instdate` = ?)) AND ((? = 1 AND `FromX` IS NULL) OR (`FromX` = ?)) AND" +
                " ((? = 1 AND `FromY` IS NULL) OR (`FromY` = ?)) AND ((? = 1 AND `ToX` IS NULL) O" +
                "R (`ToX` = ?)) AND ((? = 1 AND `ToY` IS NULL) OR (`ToY` = ?)) AND ((? = 1 AND `R" +
                "oughness` IS NULL) OR (`Roughness` = ?)) AND ((? = 1 AND `LinkReach` IS NULL) OR" +
                " (`LinkReach` = ?)) AND ((? = 1 AND `ReachElement` IS NULL) OR (`ReachElement` =" +
                " ?)) AND ((? = 1 AND `DataFlagSynth` IS NULL) OR (`DataFlagSynth` = ?)) AND ((? " +
                "= 1 AND `DataQual` IS NULL) OR (`DataQual` = ?)) AND ((? = 1 AND `IsSpecLink` IS" +
                " NULL) OR (`IsSpecLink` = ?)) AND ((? = 1 AND `HServStat` IS NULL) OR (`HServSta" +
                "t` = ?)) AND ((? = 1 AND `TraceVisit` IS NULL) OR (`TraceVisit` = ?)) AND ((? = " +
                "1 AND `DataSource` IS NULL) OR (`DataSource` = ?)) AND ((? = 1 AND `Source` IS N" +
                "ULL) OR (`Source` = ?)) AND ((? = 1 AND `IsActive` IS NULL) OR (`IsActive` = ?))" +
                ")";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("LinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LinkID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("USNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "USNode", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DSNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSNode", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("LinkType", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LinkType", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PipeFlowType", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowType", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("MLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MLinkID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SimLinkID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SimLinkID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CompKey", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompKey", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Length", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Length", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DiamWidth", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiamWidth", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Height", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Height", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PipeShape", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeShape", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Material", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Material", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("upsdpth", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "upsdpth", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dwndpth", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dwndpth", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("USIE", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "USIE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DSIE", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSIE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AsBuilt", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AsBuilt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Instdate", global::System.Data.OleDb.OleDbType.Date, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Instdate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FromX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FromX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FromY", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FromY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToY", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Roughness", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Roughness", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("LinkReach", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LinkReach", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ReachElement", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ReachElement", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DataFlagSynth", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataFlagSynth", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DataQual", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataQual", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsSpecLink", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsSpecLink", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("HServStat", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HServStat", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("TraceVisit", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DataSource", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSource", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_LinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LinkID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_LinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LinkID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_USNode", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "USNode", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_USNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "USNode", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DSNode", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSNode", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DSNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSNode", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_LinkType", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LinkType", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_LinkType", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LinkType", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PipeFlowType", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowType", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PipeFlowType", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowType", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_MLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MLinkID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MLinkID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SimLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SimLinkID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SimLinkID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SimLinkID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_CompKey", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompKey", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_CompKey", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompKey", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Length", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Length", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Length", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Length", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DiamWidth", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiamWidth", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DiamWidth", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiamWidth", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Height", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Height", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Height", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Height", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PipeShape", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeShape", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PipeShape", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeShape", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Material", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Material", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Material", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Material", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_upsdpth", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "upsdpth", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_upsdpth", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "upsdpth", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dwndpth", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dwndpth", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dwndpth", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dwndpth", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_USIE", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "USIE", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_USIE", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "USIE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DSIE", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSIE", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DSIE", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSIE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AsBuilt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AsBuilt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AsBuilt", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AsBuilt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Instdate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Instdate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Instdate", global::System.Data.OleDb.OleDbType.Date, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Instdate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FromX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FromX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FromX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FromX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FromY", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FromY", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FromY", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FromY", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToY", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToY", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToY", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToY", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Roughness", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Roughness", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Roughness", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Roughness", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_LinkReach", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LinkReach", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_LinkReach", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LinkReach", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ReachElement", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ReachElement", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ReachElement", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ReachElement", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DataFlagSynth", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataFlagSynth", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DataFlagSynth", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataFlagSynth", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DataQual", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataQual", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DataQual", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataQual", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_IsSpecLink", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsSpecLink", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_IsSpecLink", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsSpecLink", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_HServStat", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HServStat", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_HServStat", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HServStat", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_TraceVisit", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_TraceVisit", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DataSource", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSource", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DataSource", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSource", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Source", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_IsActive", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.DataAccessConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT MAPINFO_ID, LinkID, USNode, DSNode, LinkType, PipeFlowType, MLinkID, SimLinkID, CompKey, Length, DiamWidth, Height, PipeShape, Material, upsdpth, dwndpth, USIE, DSIE, AsBuilt, Instdate, FromX, FromY, ToX, ToY, Roughness, LinkReach, ReachElement, DataFlagSynth, DataQual, IsSpecLink, HServStat, TraceVisit, DataSource, Source, IsActive FROM mdl_links";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ModelDataSet.MdlLinksDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ModelDataSet.MdlLinksDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ModelDataSet.MdlLinksDataTable dataTable = new ModelDataSet.MdlLinksDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ModelDataSet.MdlLinksDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ModelDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MdlLinks");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_MAPINFO_ID, 
                    global::System.Nullable<int> Original_LinkID, 
                    string Original_USNode, 
                    string Original_DSNode, 
                    string Original_LinkType, 
                    string Original_PipeFlowType, 
                    global::System.Nullable<int> Original_MLinkID, 
                    string Original_SimLinkID, 
                    global::System.Nullable<int> Original_CompKey, 
                    global::System.Nullable<double> Original_Length, 
                    global::System.Nullable<double> Original_DiamWidth, 
                    global::System.Nullable<double> Original_Height, 
                    string Original_PipeShape, 
                    string Original_Material, 
                    global::System.Nullable<double> Original_upsdpth, 
                    global::System.Nullable<double> Original_dwndpth, 
                    global::System.Nullable<double> Original_USIE, 
                    global::System.Nullable<double> Original_DSIE, 
                    string Original_AsBuilt, 
                    global::System.Nullable<global::System.DateTime> Original_Instdate, 
                    global::System.Nullable<double> Original_FromX, 
                    global::System.Nullable<double> Original_FromY, 
                    global::System.Nullable<double> Original_ToX, 
                    global::System.Nullable<double> Original_ToY, 
                    global::System.Nullable<double> Original_Roughness, 
                    string Original_LinkReach, 
                    global::System.Nullable<int> Original_ReachElement, 
                    global::System.Nullable<int> Original_DataFlagSynth, 
                    string Original_DataQual, 
                    bool Original_IsSpecLink, 
                    string Original_HServStat, 
                    string Original_TraceVisit, 
                    string Original_DataSource, 
                    string Original_Source, 
                    bool Original_IsActive) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_LinkID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_LinkID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_USNode == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_USNode));
            }
            if ((Original_DSNode == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_DSNode));
            }
            if ((Original_LinkType == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_LinkType));
            }
            if ((Original_PipeFlowType == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_PipeFlowType));
            }
            if ((Original_MLinkID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_MLinkID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_SimLinkID == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_SimLinkID));
            }
            if ((Original_CompKey.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((int)(Original_CompKey.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_Length.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((double)(Original_Length.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_DiamWidth.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((double)(Original_DiamWidth.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_Height.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((double)(Original_Height.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_PipeShape == null)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_PipeShape));
            }
            if ((Original_Material == null)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_Material));
            }
            if ((Original_upsdpth.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((double)(Original_upsdpth.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_dwndpth.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((double)(Original_dwndpth.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_USIE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((double)(Original_USIE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_DSIE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((double)(Original_DSIE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_AsBuilt == null)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((string)(Original_AsBuilt));
            }
            if ((Original_Instdate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((System.DateTime)(Original_Instdate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_FromX.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((double)(Original_FromX.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_FromY.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((double)(Original_FromY.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((Original_ToX.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((double)(Original_ToX.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((Original_ToY.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((double)(Original_ToY.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_Roughness.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((double)(Original_Roughness.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_LinkReach == null)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((string)(Original_LinkReach));
            }
            if ((Original_ReachElement.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((int)(Original_ReachElement.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((Original_DataFlagSynth.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[54].Value = ((int)(Original_DataFlagSynth.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((Original_DataQual == null)) {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[56].Value = ((string)(Original_DataQual));
            }
            this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[58].Value = ((bool)(Original_IsSpecLink));
            if ((Original_HServStat == null)) {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[60].Value = ((string)(Original_HServStat));
            }
            if ((Original_TraceVisit == null)) {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[62].Value = ((string)(Original_TraceVisit));
            }
            if ((Original_DataSource == null)) {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[64].Value = ((string)(Original_DataSource));
            }
            if ((Original_Source == null)) {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[66].Value = ((string)(Original_Source));
            }
            this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[68].Value = ((bool)(Original_IsActive));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<int> LinkID, 
                    string USNode, 
                    string DSNode, 
                    string LinkType, 
                    string PipeFlowType, 
                    global::System.Nullable<int> MLinkID, 
                    string SimLinkID, 
                    global::System.Nullable<int> CompKey, 
                    global::System.Nullable<double> Length, 
                    global::System.Nullable<double> DiamWidth, 
                    global::System.Nullable<double> Height, 
                    string PipeShape, 
                    string Material, 
                    global::System.Nullable<double> upsdpth, 
                    global::System.Nullable<double> dwndpth, 
                    global::System.Nullable<double> USIE, 
                    global::System.Nullable<double> DSIE, 
                    string AsBuilt, 
                    global::System.Nullable<global::System.DateTime> Instdate, 
                    global::System.Nullable<double> FromX, 
                    global::System.Nullable<double> FromY, 
                    global::System.Nullable<double> ToX, 
                    global::System.Nullable<double> ToY, 
                    global::System.Nullable<double> Roughness, 
                    string LinkReach, 
                    global::System.Nullable<int> ReachElement, 
                    global::System.Nullable<int> DataFlagSynth, 
                    string DataQual, 
                    bool IsSpecLink, 
                    string HServStat, 
                    string TraceVisit, 
                    string DataSource, 
                    string Source, 
                    bool IsActive) {
            if ((LinkID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(LinkID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((USNode == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(USNode));
            }
            if ((DSNode == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(DSNode));
            }
            if ((LinkType == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(LinkType));
            }
            if ((PipeFlowType == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(PipeFlowType));
            }
            if ((MLinkID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(MLinkID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((SimLinkID == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(SimLinkID));
            }
            if ((CompKey.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(CompKey.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Length.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(Length.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((DiamWidth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(DiamWidth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Height.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(Height.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((PipeShape == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(PipeShape));
            }
            if ((Material == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(Material));
            }
            if ((upsdpth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((double)(upsdpth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((dwndpth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((double)(dwndpth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((USIE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((double)(USIE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((DSIE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((double)(DSIE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((AsBuilt == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(AsBuilt));
            }
            if ((Instdate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((System.DateTime)(Instdate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((FromX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((double)(FromX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((FromY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((double)(FromY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((ToX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((double)(ToX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((ToY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((double)(ToY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Roughness.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((double)(Roughness.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((LinkReach == null)) {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((string)(LinkReach));
            }
            if ((ReachElement.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((int)(ReachElement.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((DataFlagSynth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((int)(DataFlagSynth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((DataQual == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(DataQual));
            }
            this.Adapter.InsertCommand.Parameters[28].Value = ((bool)(IsSpecLink));
            if ((HServStat == null)) {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = ((string)(HServStat));
            }
            if ((TraceVisit == null)) {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = ((string)(TraceVisit));
            }
            if ((DataSource == null)) {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = ((string)(DataSource));
            }
            if ((Source == null)) {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = ((string)(Source));
            }
            this.Adapter.InsertCommand.Parameters[33].Value = ((bool)(IsActive));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> LinkID, 
                    string USNode, 
                    string DSNode, 
                    string LinkType, 
                    string PipeFlowType, 
                    global::System.Nullable<int> MLinkID, 
                    string SimLinkID, 
                    global::System.Nullable<int> CompKey, 
                    global::System.Nullable<double> Length, 
                    global::System.Nullable<double> DiamWidth, 
                    global::System.Nullable<double> Height, 
                    string PipeShape, 
                    string Material, 
                    global::System.Nullable<double> upsdpth, 
                    global::System.Nullable<double> dwndpth, 
                    global::System.Nullable<double> USIE, 
                    global::System.Nullable<double> DSIE, 
                    string AsBuilt, 
                    global::System.Nullable<global::System.DateTime> Instdate, 
                    global::System.Nullable<double> FromX, 
                    global::System.Nullable<double> FromY, 
                    global::System.Nullable<double> ToX, 
                    global::System.Nullable<double> ToY, 
                    global::System.Nullable<double> Roughness, 
                    string LinkReach, 
                    global::System.Nullable<int> ReachElement, 
                    global::System.Nullable<int> DataFlagSynth, 
                    string DataQual, 
                    bool IsSpecLink, 
                    string HServStat, 
                    string TraceVisit, 
                    string DataSource, 
                    string Source, 
                    bool IsActive, 
                    int Original_MAPINFO_ID, 
                    global::System.Nullable<int> Original_LinkID, 
                    string Original_USNode, 
                    string Original_DSNode, 
                    string Original_LinkType, 
                    string Original_PipeFlowType, 
                    global::System.Nullable<int> Original_MLinkID, 
                    string Original_SimLinkID, 
                    global::System.Nullable<int> Original_CompKey, 
                    global::System.Nullable<double> Original_Length, 
                    global::System.Nullable<double> Original_DiamWidth, 
                    global::System.Nullable<double> Original_Height, 
                    string Original_PipeShape, 
                    string Original_Material, 
                    global::System.Nullable<double> Original_upsdpth, 
                    global::System.Nullable<double> Original_dwndpth, 
                    global::System.Nullable<double> Original_USIE, 
                    global::System.Nullable<double> Original_DSIE, 
                    string Original_AsBuilt, 
                    global::System.Nullable<global::System.DateTime> Original_Instdate, 
                    global::System.Nullable<double> Original_FromX, 
                    global::System.Nullable<double> Original_FromY, 
                    global::System.Nullable<double> Original_ToX, 
                    global::System.Nullable<double> Original_ToY, 
                    global::System.Nullable<double> Original_Roughness, 
                    string Original_LinkReach, 
                    global::System.Nullable<int> Original_ReachElement, 
                    global::System.Nullable<int> Original_DataFlagSynth, 
                    string Original_DataQual, 
                    bool Original_IsSpecLink, 
                    string Original_HServStat, 
                    string Original_TraceVisit, 
                    string Original_DataSource, 
                    string Original_Source, 
                    bool Original_IsActive) {
            if ((LinkID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(LinkID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((USNode == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(USNode));
            }
            if ((DSNode == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(DSNode));
            }
            if ((LinkType == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(LinkType));
            }
            if ((PipeFlowType == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(PipeFlowType));
            }
            if ((MLinkID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(MLinkID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((SimLinkID == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(SimLinkID));
            }
            if ((CompKey.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(CompKey.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Length.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((double)(Length.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((DiamWidth.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((double)(DiamWidth.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Height.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((double)(Height.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((PipeShape == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(PipeShape));
            }
            if ((Material == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Material));
            }
            if ((upsdpth.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((double)(upsdpth.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((dwndpth.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((double)(dwndpth.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((USIE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((double)(USIE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((DSIE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((double)(DSIE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((AsBuilt == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(AsBuilt));
            }
            if ((Instdate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(Instdate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((FromX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((double)(FromX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((FromY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((double)(FromY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((ToX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((double)(ToX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((ToY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((double)(ToY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Roughness.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((double)(Roughness.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((LinkReach == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(LinkReach));
            }
            if ((ReachElement.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(ReachElement.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((DataFlagSynth.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(DataFlagSynth.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((DataQual == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(DataQual));
            }
            this.Adapter.UpdateCommand.Parameters[28].Value = ((bool)(IsSpecLink));
            if ((HServStat == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(HServStat));
            }
            if ((TraceVisit == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(TraceVisit));
            }
            if ((DataSource == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(DataSource));
            }
            if ((Source == null)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Source));
            }
            this.Adapter.UpdateCommand.Parameters[33].Value = ((bool)(IsActive));
            this.Adapter.UpdateCommand.Parameters[34].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_LinkID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((int)(Original_LinkID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_USNode == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_USNode));
            }
            if ((Original_DSNode == null)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_DSNode));
            }
            if ((Original_LinkType == null)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Original_LinkType));
            }
            if ((Original_PipeFlowType == null)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_PipeFlowType));
            }
            if ((Original_MLinkID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((int)(Original_MLinkID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_SimLinkID == null)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((string)(Original_SimLinkID));
            }
            if ((Original_CompKey.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((int)(Original_CompKey.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((Original_Length.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[52].Value = ((double)(Original_Length.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((Original_DiamWidth.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[54].Value = ((double)(Original_DiamWidth.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((Original_Height.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[56].Value = ((double)(Original_Height.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((Original_PipeShape == null)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[58].Value = ((string)(Original_PipeShape));
            }
            if ((Original_Material == null)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[60].Value = ((string)(Original_Material));
            }
            if ((Original_upsdpth.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[62].Value = ((double)(Original_upsdpth.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((Original_dwndpth.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[64].Value = ((double)(Original_dwndpth.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((Original_USIE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[66].Value = ((double)(Original_USIE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            if ((Original_DSIE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[68].Value = ((double)(Original_DSIE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            if ((Original_AsBuilt == null)) {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[70].Value = ((string)(Original_AsBuilt));
            }
            if ((Original_Instdate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[72].Value = ((System.DateTime)(Original_Instdate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            if ((Original_FromX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[74].Value = ((double)(Original_FromX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[74].Value = global::System.DBNull.Value;
            }
            if ((Original_FromY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[76].Value = ((double)(Original_FromY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            if ((Original_ToX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[78].Value = ((double)(Original_ToX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            if ((Original_ToY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[79].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[80].Value = ((double)(Original_ToY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[79].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            if ((Original_Roughness.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[81].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[82].Value = ((double)(Original_Roughness.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[81].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[82].Value = global::System.DBNull.Value;
            }
            if ((Original_LinkReach == null)) {
                this.Adapter.UpdateCommand.Parameters[83].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[84].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[83].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[84].Value = ((string)(Original_LinkReach));
            }
            if ((Original_ReachElement.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[85].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[86].Value = ((int)(Original_ReachElement.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[85].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[86].Value = global::System.DBNull.Value;
            }
            if ((Original_DataFlagSynth.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[87].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[88].Value = ((int)(Original_DataFlagSynth.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[87].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[88].Value = global::System.DBNull.Value;
            }
            if ((Original_DataQual == null)) {
                this.Adapter.UpdateCommand.Parameters[89].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[90].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[89].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[90].Value = ((string)(Original_DataQual));
            }
            this.Adapter.UpdateCommand.Parameters[91].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[92].Value = ((bool)(Original_IsSpecLink));
            if ((Original_HServStat == null)) {
                this.Adapter.UpdateCommand.Parameters[93].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[94].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[93].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[94].Value = ((string)(Original_HServStat));
            }
            if ((Original_TraceVisit == null)) {
                this.Adapter.UpdateCommand.Parameters[95].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[96].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[95].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[96].Value = ((string)(Original_TraceVisit));
            }
            if ((Original_DataSource == null)) {
                this.Adapter.UpdateCommand.Parameters[97].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[98].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[97].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[98].Value = ((string)(Original_DataSource));
            }
            if ((Original_Source == null)) {
                this.Adapter.UpdateCommand.Parameters[99].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[100].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[99].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[100].Value = ((string)(Original_Source));
            }
            this.Adapter.UpdateCommand.Parameters[101].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[102].Value = ((bool)(Original_IsActive));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MdlNodesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MdlNodesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MdlNodes";
            tableMapping.ColumnMappings.Add("MAPINFO_ID", "MapInfoID");
            tableMapping.ColumnMappings.Add("Node", "Node");
            tableMapping.ColumnMappings.Add("XCoord", "XCoord");
            tableMapping.ColumnMappings.Add("YCoord", "YCoord");
            tableMapping.ColumnMappings.Add("NodeType", "NodeType");
            tableMapping.ColumnMappings.Add("GrndElev", "GrndElev");
            tableMapping.ColumnMappings.Add("HasSpecNode", "HasSpecNode");
            tableMapping.ColumnMappings.Add("HasSpecLink", "HasSpecLink");
            tableMapping.ColumnMappings.Add("GageID", "GageID");
            tableMapping.ColumnMappings.Add("TraceVisit", "TraceVisit");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `mdl_nodes` WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `Node` IS NULL) OR (`Node` = ?)) AND ((? = 1 AND `XCoord` IS NULL) OR (`XCoord` = ?)) AND ((? = 1 AND `YCoord` IS NULL) OR (`YCoord` = ?)) AND ((? = 1 AND `NodeType` IS NULL) OR (`NodeType` = ?)) AND ((? = 1 AND `GrndElev` IS NULL) OR (`GrndElev` = ?)) AND ((? = 1 AND `HasSpecNode` IS NULL) OR (`HasSpecNode` = ?)) AND ((? = 1 AND `HasSpecLink` IS NULL) OR (`HasSpecLink` = ?)) AND ((? = 1 AND `GageID` IS NULL) OR (`GageID` = ?)) AND ((? = 1 AND `TraceVisit` IS NULL) OR (`TraceVisit` = ?)) AND ((? = 1 AND `IsActive` IS NULL) OR (`IsActive` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Node", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Node", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Node", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Node", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_XCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XCoord", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_XCoord", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XCoord", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_YCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "YCoord", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_YCoord", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "YCoord", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NodeType", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NodeType", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NodeType", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NodeType", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_GrndElev", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GrndElev", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_GrndElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GrndElev", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_HasSpecNode", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasSpecNode", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_HasSpecNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasSpecNode", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_HasSpecLink", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasSpecLink", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_HasSpecLink", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasSpecLink", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_GageID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GageID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_GageID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GageID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_TraceVisit", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_TraceVisit", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_IsActive", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `mdl_nodes` (`Node`, `XCoord`, `YCoord`, `NodeType`, `GrndElev`, `Has" +
                "SpecNode`, `HasSpecLink`, `GageID`, `TraceVisit`, `IsActive`) VALUES (?, ?, ?, ?" +
                ", ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Node", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Node", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("XCoord", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XCoord", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("YCoord", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "YCoord", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NodeType", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NodeType", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("GrndElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GrndElev", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("HasSpecNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasSpecNode", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("HasSpecLink", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasSpecLink", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("GageID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GageID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("TraceVisit", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `mdl_nodes` SET `Node` = ?, `XCoord` = ?, `YCoord` = ?, `NodeType` = ?, `GrndElev` = ?, `HasSpecNode` = ?, `HasSpecLink` = ?, `GageID` = ?, `TraceVisit` = ?, `IsActive` = ? WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `Node` IS NULL) OR (`Node` = ?)) AND ((? = 1 AND `XCoord` IS NULL) OR (`XCoord` = ?)) AND ((? = 1 AND `YCoord` IS NULL) OR (`YCoord` = ?)) AND ((? = 1 AND `NodeType` IS NULL) OR (`NodeType` = ?)) AND ((? = 1 AND `GrndElev` IS NULL) OR (`GrndElev` = ?)) AND ((? = 1 AND `HasSpecNode` IS NULL) OR (`HasSpecNode` = ?)) AND ((? = 1 AND `HasSpecLink` IS NULL) OR (`HasSpecLink` = ?)) AND ((? = 1 AND `GageID` IS NULL) OR (`GageID` = ?)) AND ((? = 1 AND `TraceVisit` IS NULL) OR (`TraceVisit` = ?)) AND ((? = 1 AND `IsActive` IS NULL) OR (`IsActive` = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Node", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Node", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("XCoord", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XCoord", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("YCoord", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "YCoord", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NodeType", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NodeType", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("GrndElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GrndElev", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("HasSpecNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasSpecNode", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("HasSpecLink", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasSpecLink", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("GageID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GageID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("TraceVisit", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Node", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Node", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Node", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Node", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_XCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XCoord", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_XCoord", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XCoord", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_YCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "YCoord", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_YCoord", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "YCoord", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NodeType", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NodeType", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NodeType", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NodeType", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_GrndElev", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GrndElev", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_GrndElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GrndElev", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_HasSpecNode", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasSpecNode", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_HasSpecNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasSpecNode", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_HasSpecLink", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasSpecLink", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_HasSpecLink", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasSpecLink", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_GageID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GageID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_GageID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GageID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_TraceVisit", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_TraceVisit", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_IsActive", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.DataAccessConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MAPINFO_ID, Node, XCoord, YCoord, NodeType, GrndElev, HasSpecNode, HasSpec" +
                "Link, GageID, TraceVisit, IsActive FROM mdl_nodes";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ModelDataSet.MdlNodesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ModelDataSet.MdlNodesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ModelDataSet.MdlNodesDataTable dataTable = new ModelDataSet.MdlNodesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ModelDataSet.MdlNodesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ModelDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MdlNodes");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_MAPINFO_ID, string Original_Node, global::System.Nullable<double> Original_XCoord, global::System.Nullable<double> Original_YCoord, string Original_NodeType, global::System.Nullable<double> Original_GrndElev, string Original_HasSpecNode, string Original_HasSpecLink, string Original_GageID, string Original_TraceVisit, bool Original_IsActive) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_Node == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Node));
            }
            if ((Original_XCoord.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((double)(Original_XCoord.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_YCoord.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((double)(Original_YCoord.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_NodeType == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_NodeType));
            }
            if ((Original_GrndElev.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((double)(Original_GrndElev.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_HasSpecNode == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_HasSpecNode));
            }
            if ((Original_HasSpecLink == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_HasSpecLink));
            }
            if ((Original_GageID == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_GageID));
            }
            if ((Original_TraceVisit == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_TraceVisit));
            }
            this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[20].Value = ((bool)(Original_IsActive));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Node, global::System.Nullable<double> XCoord, global::System.Nullable<double> YCoord, string NodeType, global::System.Nullable<double> GrndElev, string HasSpecNode, string HasSpecLink, string GageID, string TraceVisit, bool IsActive) {
            if ((Node == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Node));
            }
            if ((XCoord.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((double)(XCoord.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((YCoord.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((double)(YCoord.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((NodeType == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(NodeType));
            }
            if ((GrndElev.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(GrndElev.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((HasSpecNode == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(HasSpecNode));
            }
            if ((HasSpecLink == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(HasSpecLink));
            }
            if ((GageID == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(GageID));
            }
            if ((TraceVisit == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(TraceVisit));
            }
            this.Adapter.InsertCommand.Parameters[9].Value = ((bool)(IsActive));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Node, 
                    global::System.Nullable<double> XCoord, 
                    global::System.Nullable<double> YCoord, 
                    string NodeType, 
                    global::System.Nullable<double> GrndElev, 
                    string HasSpecNode, 
                    string HasSpecLink, 
                    string GageID, 
                    string TraceVisit, 
                    bool IsActive, 
                    int Original_MAPINFO_ID, 
                    string Original_Node, 
                    global::System.Nullable<double> Original_XCoord, 
                    global::System.Nullable<double> Original_YCoord, 
                    string Original_NodeType, 
                    global::System.Nullable<double> Original_GrndElev, 
                    string Original_HasSpecNode, 
                    string Original_HasSpecLink, 
                    string Original_GageID, 
                    string Original_TraceVisit, 
                    bool Original_IsActive) {
            if ((Node == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Node));
            }
            if ((XCoord.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((double)(XCoord.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((YCoord.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((double)(YCoord.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((NodeType == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(NodeType));
            }
            if ((GrndElev.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(GrndElev.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((HasSpecNode == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(HasSpecNode));
            }
            if ((HasSpecLink == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(HasSpecLink));
            }
            if ((GageID == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(GageID));
            }
            if ((TraceVisit == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(TraceVisit));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(IsActive));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_Node == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_Node));
            }
            if ((Original_XCoord.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((double)(Original_XCoord.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_YCoord.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((double)(Original_YCoord.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_NodeType == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_NodeType));
            }
            if ((Original_GrndElev.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((double)(Original_GrndElev.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_HasSpecNode == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_HasSpecNode));
            }
            if ((Original_HasSpecLink == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_HasSpecLink));
            }
            if ((Original_GageID == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_GageID));
            }
            if ((Original_TraceVisit == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_TraceVisit));
            }
            this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[30].Value = ((bool)(Original_IsActive));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MdlSpecLinkDataTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MdlSpecLinkDataTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MdlSpecLinkData";
            tableMapping.ColumnMappings.Add("MAPINFO_ID", "MapInfoID");
            tableMapping.ColumnMappings.Add("Node", "Node");
            tableMapping.ColumnMappings.Add("ToLinkID", "ToLinkID");
            tableMapping.ColumnMappings.Add("ToLinkNDX", "ToLinkNDX");
            tableMapping.ColumnMappings.Add("Tag", "Tag");
            tableMapping.ColumnMappings.Add("TValue", "TValue");
            tableMapping.ColumnMappings.Add("NValue", "NValue");
            tableMapping.ColumnMappings.Add("SLID", "SLID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `mdl_speclinkdata` WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `Node` IS NULL) OR (`Node` = ?)) AND ((? = 1 AND `ToLinkID` IS NULL) OR (`ToLinkID` = ?)) AND ((? = 1 AND `ToLinkNDX` IS NULL) OR (`ToLinkNDX` = ?)) AND ((? = 1 AND `Tag` IS NULL) OR (`Tag` = ?)) AND ((? = 1 AND `TValue` IS NULL) OR (`TValue` = ?)) AND ((? = 1 AND `NValue` IS NULL) OR (`NValue` = ?)) AND ((? = 1 AND `SLID` IS NULL) OR (`SLID` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Node", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Node", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Node", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Node", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToLinkNDX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkNDX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToLinkNDX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkNDX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Tag", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Tag", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Tag", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Tag", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_TValue", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TValue", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_TValue", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TValue", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NValue", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NValue", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NValue", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NValue", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SLID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SLID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SLID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SLID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `mdl_speclinkdata` (`Node`, `ToLinkID`, `ToLinkNDX`, `Tag`, `TValue`," +
                " `NValue`, `SLID`) VALUES (?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Node", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Node", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToLinkNDX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkNDX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Tag", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Tag", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("TValue", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TValue", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NValue", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NValue", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SLID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SLID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `mdl_speclinkdata` SET `Node` = ?, `ToLinkID` = ?, `ToLinkNDX` = ?, `Tag` = ?, `TValue` = ?, `NValue` = ?, `SLID` = ? WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `Node` IS NULL) OR (`Node` = ?)) AND ((? = 1 AND `ToLinkID` IS NULL) OR (`ToLinkID` = ?)) AND ((? = 1 AND `ToLinkNDX` IS NULL) OR (`ToLinkNDX` = ?)) AND ((? = 1 AND `Tag` IS NULL) OR (`Tag` = ?)) AND ((? = 1 AND `TValue` IS NULL) OR (`TValue` = ?)) AND ((? = 1 AND `NValue` IS NULL) OR (`NValue` = ?)) AND ((? = 1 AND `SLID` IS NULL) OR (`SLID` = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Node", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Node", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToLinkNDX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkNDX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Tag", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Tag", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("TValue", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TValue", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NValue", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NValue", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SLID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SLID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Node", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Node", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Node", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Node", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToLinkNDX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkNDX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToLinkNDX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkNDX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Tag", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Tag", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Tag", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Tag", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_TValue", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TValue", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_TValue", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TValue", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NValue", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NValue", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NValue", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NValue", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SLID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SLID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SLID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SLID", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.DataAccessConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MAPINFO_ID, Node, ToLinkID, ToLinkNDX, Tag, TValue, NValue, SLID FROM mdl_" +
                "speclinkdata";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ModelDataSet.MdlSpecLinkDataDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ModelDataSet.MdlSpecLinkDataDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ModelDataSet.MdlSpecLinkDataDataTable dataTable = new ModelDataSet.MdlSpecLinkDataDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ModelDataSet.MdlSpecLinkDataDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ModelDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MdlSpecLinkData");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_MAPINFO_ID, string Original_Node, global::System.Nullable<int> Original_ToLinkID, global::System.Nullable<int> Original_ToLinkNDX, string Original_Tag, string Original_TValue, global::System.Nullable<double> Original_NValue, global::System.Nullable<int> Original_SLID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_Node == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Node));
            }
            if ((Original_ToLinkID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_ToLinkID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_ToLinkNDX.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_ToLinkNDX.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_Tag == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_Tag));
            }
            if ((Original_TValue == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_TValue));
            }
            if ((Original_NValue.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((double)(Original_NValue.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_SLID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_SLID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Node, global::System.Nullable<int> ToLinkID, global::System.Nullable<int> ToLinkNDX, string Tag, string TValue, global::System.Nullable<double> NValue, global::System.Nullable<int> SLID) {
            if ((Node == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Node));
            }
            if ((ToLinkID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ToLinkID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ToLinkNDX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(ToLinkNDX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Tag == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Tag));
            }
            if ((TValue == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(TValue));
            }
            if ((NValue.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(NValue.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((SLID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(SLID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Node, global::System.Nullable<int> ToLinkID, global::System.Nullable<int> ToLinkNDX, string Tag, string TValue, global::System.Nullable<double> NValue, global::System.Nullable<int> SLID, int Original_MAPINFO_ID, string Original_Node, global::System.Nullable<int> Original_ToLinkID, global::System.Nullable<int> Original_ToLinkNDX, string Original_Tag, string Original_TValue, global::System.Nullable<double> Original_NValue, global::System.Nullable<int> Original_SLID) {
            if ((Node == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Node));
            }
            if ((ToLinkID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ToLinkID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ToLinkNDX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(ToLinkNDX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Tag == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Tag));
            }
            if ((TValue == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(TValue));
            }
            if ((NValue.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(NValue.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((SLID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(SLID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_Node == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Node));
            }
            if ((Original_ToLinkID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_ToLinkID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_ToLinkNDX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_ToLinkNDX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_Tag == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_Tag));
            }
            if ((Original_TValue == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_TValue));
            }
            if ((Original_NValue.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((double)(Original_NValue.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((Original_SLID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(Original_SLID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MdlParkingTargetsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MdlParkingTargetsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MdlParkingTargets";
            tableMapping.ColumnMappings.Add("MAPINFO_ID", "MAPINFO_ID");
            tableMapping.ColumnMappings.Add("ParcelID", "ParcelID");
            tableMapping.ColumnMappings.Add("DivideID", "DivideID");
            tableMapping.ColumnMappings.Add("EXICFtParking", "EXICFtParking");
            tableMapping.ColumnMappings.Add("EXPkAreaFt", "EXPkAreaFt");
            tableMapping.ColumnMappings.Add("ParkingTargetArea", "ParkingTargetArea");
            tableMapping.ColumnMappings.Add("NGTO_Direct", "NGTO_Direct");
            tableMapping.ColumnMappings.Add("NGTO_Surface", "NGTO_Surface");
            tableMapping.ColumnMappings.Add("NGTOParking", "NGTOParking");
            tableMapping.ColumnMappings.Add("Evaluated", "Evaluated");
            tableMapping.ColumnMappings.Add("Inlets", "Inlets");
            tableMapping.ColumnMappings.Add("Parking_Spaces", "Parking_Spaces");
            tableMapping.ColumnMappings.Add("Perc_Space_Used", "Perc_Space_Used");
            tableMapping.ColumnMappings.Add("Drainage", "Drainage");
            tableMapping.ColumnMappings.Add("NGTO", "NGTO");
            tableMapping.ColumnMappings.Add("Controllable", "Controllable");
            tableMapping.ColumnMappings.Add("FractionControllable", "FractionControllable");
            tableMapping.ColumnMappings.Add("Difficulty", "Difficulty");
            tableMapping.ColumnMappings.Add("ParkingEffDisc", "ParkingEffDisc");
            tableMapping.ColumnMappings.Add("Comments", "Comments");
            tableMapping.ColumnMappings.Add("Fraction2Drywell", "Fraction2Drywell");
            tableMapping.ColumnMappings.Add("BuildModelIC", "BuildModelIC");
            tableMapping.ColumnMappings.Add("Source", "Source");
            tableMapping.ColumnMappings.Add("AppendDate", "AppendDate");
            tableMapping.ColumnMappings.Add("ICID", "ICID");
            tableMapping.ColumnMappings.Add("Constructed", "Constructed");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `mst_ic_parkingtargets_ac` WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND " +
                "`ParcelID` IS NULL) OR (`ParcelID` = ?)) AND ((? = 1 AND `DivideID` IS NULL) OR " +
                "(`DivideID` = ?)) AND ((? = 1 AND `EXICFtParking` IS NULL) OR (`EXICFtParking` =" +
                " ?)) AND ((? = 1 AND `EXPkAreaFt` IS NULL) OR (`EXPkAreaFt` = ?)) AND ((? = 1 AN" +
                "D `ParkingTargetArea` IS NULL) OR (`ParkingTargetArea` = ?)) AND ((? = 1 AND `NG" +
                "TO_Direct` IS NULL) OR (`NGTO_Direct` = ?)) AND ((? = 1 AND `NGTO_Surface` IS NU" +
                "LL) OR (`NGTO_Surface` = ?)) AND ((? = 1 AND `NGTOParking` IS NULL) OR (`NGTOPar" +
                "king` = ?)) AND ((? = 1 AND `Evaluated` IS NULL) OR (`Evaluated` = ?)) AND ((? =" +
                " 1 AND `Inlets` IS NULL) OR (`Inlets` = ?)) AND ((? = 1 AND `Parking_Spaces` IS " +
                "NULL) OR (`Parking_Spaces` = ?)) AND ((? = 1 AND `Perc_Space_Used` IS NULL) OR (" +
                "`Perc_Space_Used` = ?)) AND ((? = 1 AND `Drainage` IS NULL) OR (`Drainage` = ?))" +
                " AND ((? = 1 AND `NGTO` IS NULL) OR (`NGTO` = ?)) AND ((? = 1 AND `Controllable`" +
                " IS NULL) OR (`Controllable` = ?)) AND ((? = 1 AND `FractionControllable` IS NUL" +
                "L) OR (`FractionControllable` = ?)) AND ((? = 1 AND `Difficulty` IS NULL) OR (`D" +
                "ifficulty` = ?)) AND ((? = 1 AND `ParkingEffDisc` IS NULL) OR (`ParkingEffDisc` " +
                "= ?)) AND ((? = 1 AND `Comments` IS NULL) OR (`Comments` = ?)) AND ((? = 1 AND `" +
                "Fraction2Drywell` IS NULL) OR (`Fraction2Drywell` = ?)) AND ((? = 1 AND `BuildMo" +
                "delIC` IS NULL) OR (`BuildModelIC` = ?)) AND ((? = 1 AND `Source` IS NULL) OR (`" +
                "Source` = ?)) AND ((? = 1 AND `AppendDate` IS NULL) OR (`AppendDate` = ?)) AND (" +
                "(? = 1 AND `ICID` IS NULL) OR (`ICID` = ?)) AND ((? = 1 AND `Constructed` IS NUL" +
                "L) OR (`Constructed` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DivideID", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EXICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXICFtParking", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EXICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXICFtParking", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EXPkAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXPkAreaFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EXPkAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXPkAreaFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ParkingTargetArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParkingTargetArea", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ParkingTargetArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParkingTargetArea", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTO_Direct", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Direct", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTO_Direct", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Direct", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTO_Surface", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Surface", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTO_Surface", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Surface", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTOParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOParking", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTOParking", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOParking", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Evaluated", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Evaluated", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Evaluated", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Evaluated", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Inlets", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Inlets", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Inlets", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Inlets", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Parking_Spaces", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Parking_Spaces", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Parking_Spaces", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Parking_Spaces", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Perc_Space_Used", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Perc_Space_Used", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Perc_Space_Used", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Perc_Space_Used", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Drainage", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Drainage", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Drainage", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Drainage", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTO", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Controllable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Controllable", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Controllable", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Controllable", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FractionControllable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FractionControllable", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FractionControllable", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FractionControllable", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Difficulty", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ParkingEffDisc", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParkingEffDisc", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ParkingEffDisc", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParkingEffDisc", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Comments", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Fraction2Drywell", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Fraction2Drywell", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Fraction2Drywell", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Fraction2Drywell", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BuildModelIC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Source", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AppendDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AppendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `mst_ic_parkingtargets_ac` (`ParcelID`, `DivideID`, `EXICFtParking`, `EXPkAreaFt`, `ParkingTargetArea`, `NGTO_Direct`, `NGTO_Surface`, `NGTOParking`, `Evaluated`, `Inlets`, `Parking_Spaces`, `Perc_Space_Used`, `Drainage`, `NGTO`, `Controllable`, `FractionControllable`, `Difficulty`, `ParkingEffDisc`, `Comments`, `Fraction2Drywell`, `BuildModelIC`, `Source`, `AppendDate`, `ICID`, `Constructed`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DivideID", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EXICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXICFtParking", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EXPkAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXPkAreaFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ParkingTargetArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParkingTargetArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTO_Direct", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Direct", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTO_Surface", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Surface", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTOParking", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOParking", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Evaluated", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Evaluated", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Inlets", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Inlets", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Parking_Spaces", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Parking_Spaces", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Perc_Space_Used", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Perc_Space_Used", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Drainage", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Drainage", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Controllable", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Controllable", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FractionControllable", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FractionControllable", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ParkingEffDisc", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParkingEffDisc", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Fraction2Drywell", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Fraction2Drywell", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AppendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE `mst_ic_parkingtargets_ac` SET `ParcelID` = ?, `DivideID` = ?, `EXICFtPark" +
                "ing` = ?, `EXPkAreaFt` = ?, `ParkingTargetArea` = ?, `NGTO_Direct` = ?, `NGTO_Su" +
                "rface` = ?, `NGTOParking` = ?, `Evaluated` = ?, `Inlets` = ?, `Parking_Spaces` =" +
                " ?, `Perc_Space_Used` = ?, `Drainage` = ?, `NGTO` = ?, `Controllable` = ?, `Frac" +
                "tionControllable` = ?, `Difficulty` = ?, `ParkingEffDisc` = ?, `Comments` = ?, `" +
                "Fraction2Drywell` = ?, `BuildModelIC` = ?, `Source` = ?, `AppendDate` = ?, `ICID" +
                "` = ?, `Constructed` = ? WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `ParcelID` IS" +
                " NULL) OR (`ParcelID` = ?)) AND ((? = 1 AND `DivideID` IS NULL) OR (`DivideID` =" +
                " ?)) AND ((? = 1 AND `EXICFtParking` IS NULL) OR (`EXICFtParking` = ?)) AND ((? " +
                "= 1 AND `EXPkAreaFt` IS NULL) OR (`EXPkAreaFt` = ?)) AND ((? = 1 AND `ParkingTar" +
                "getArea` IS NULL) OR (`ParkingTargetArea` = ?)) AND ((? = 1 AND `NGTO_Direct` IS" +
                " NULL) OR (`NGTO_Direct` = ?)) AND ((? = 1 AND `NGTO_Surface` IS NULL) OR (`NGTO" +
                "_Surface` = ?)) AND ((? = 1 AND `NGTOParking` IS NULL) OR (`NGTOParking` = ?)) A" +
                "ND ((? = 1 AND `Evaluated` IS NULL) OR (`Evaluated` = ?)) AND ((? = 1 AND `Inlet" +
                "s` IS NULL) OR (`Inlets` = ?)) AND ((? = 1 AND `Parking_Spaces` IS NULL) OR (`Pa" +
                "rking_Spaces` = ?)) AND ((? = 1 AND `Perc_Space_Used` IS NULL) OR (`Perc_Space_U" +
                "sed` = ?)) AND ((? = 1 AND `Drainage` IS NULL) OR (`Drainage` = ?)) AND ((? = 1 " +
                "AND `NGTO` IS NULL) OR (`NGTO` = ?)) AND ((? = 1 AND `Controllable` IS NULL) OR " +
                "(`Controllable` = ?)) AND ((? = 1 AND `FractionControllable` IS NULL) OR (`Fract" +
                "ionControllable` = ?)) AND ((? = 1 AND `Difficulty` IS NULL) OR (`Difficulty` = " +
                "?)) AND ((? = 1 AND `ParkingEffDisc` IS NULL) OR (`ParkingEffDisc` = ?)) AND ((?" +
                " = 1 AND `Comments` IS NULL) OR (`Comments` = ?)) AND ((? = 1 AND `Fraction2Dryw" +
                "ell` IS NULL) OR (`Fraction2Drywell` = ?)) AND ((? = 1 AND `BuildModelIC` IS NUL" +
                "L) OR (`BuildModelIC` = ?)) AND ((? = 1 AND `Source` IS NULL) OR (`Source` = ?))" +
                " AND ((? = 1 AND `AppendDate` IS NULL) OR (`AppendDate` = ?)) AND ((? = 1 AND `I" +
                "CID` IS NULL) OR (`ICID` = ?)) AND ((? = 1 AND `Constructed` IS NULL) OR (`Const" +
                "ructed` = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DivideID", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EXICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXICFtParking", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EXPkAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXPkAreaFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ParkingTargetArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParkingTargetArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTO_Direct", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Direct", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTO_Surface", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Surface", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTOParking", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOParking", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Evaluated", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Evaluated", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Inlets", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Inlets", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Parking_Spaces", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Parking_Spaces", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Perc_Space_Used", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Perc_Space_Used", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Drainage", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Drainage", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Controllable", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Controllable", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FractionControllable", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FractionControllable", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ParkingEffDisc", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParkingEffDisc", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Fraction2Drywell", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Fraction2Drywell", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AppendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DivideID", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EXICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXICFtParking", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EXICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXICFtParking", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EXPkAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXPkAreaFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EXPkAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXPkAreaFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ParkingTargetArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParkingTargetArea", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ParkingTargetArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParkingTargetArea", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTO_Direct", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Direct", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTO_Direct", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Direct", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTO_Surface", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Surface", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTO_Surface", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Surface", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTOParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOParking", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTOParking", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOParking", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Evaluated", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Evaluated", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Evaluated", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Evaluated", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Inlets", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Inlets", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Inlets", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Inlets", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Parking_Spaces", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Parking_Spaces", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Parking_Spaces", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Parking_Spaces", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Perc_Space_Used", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Perc_Space_Used", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Perc_Space_Used", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Perc_Space_Used", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Drainage", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Drainage", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Drainage", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Drainage", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTO", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Controllable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Controllable", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Controllable", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Controllable", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FractionControllable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FractionControllable", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FractionControllable", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FractionControllable", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Difficulty", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ParkingEffDisc", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParkingEffDisc", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ParkingEffDisc", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParkingEffDisc", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Comments", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Fraction2Drywell", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Fraction2Drywell", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Fraction2Drywell", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Fraction2Drywell", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BuildModelIC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Source", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AppendDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AppendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.DataAccessConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[2];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        mst_ic_parkingtargets_ac.*\r\nFROM            mst_ic_parkingtargets_a" +
                "c";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT        MAPINFO_ID, ParcelID, DivideID, EXICFtParking, EXPkAreaFt, ParkingTargetArea, NGTO_Direct, NGTO_Surface, NGTOParking, Evaluated, Inlets, 
                         Parking_Spaces, Perc_Space_Used, Drainage, NGTO, Controllable, FractionControllable, Difficulty, ParkingEffDisc, Comments, Fraction2Drywell, 
                         BuildModelIC, Source, AppendDate, ICID, Constructed
FROM            mst_ic_parkingtargets_ac
WHERE        (Constructed > 0) OR
                         (BuildModelIC = 1)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ModelDataSet.MdlParkingTargetsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ModelDataSet.MdlParkingTargetsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ModelDataSet.MdlParkingTargetsDataTable dataTable = new ModelDataSet.MdlParkingTargetsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByAppliedICsOnly(ModelDataSet.MdlParkingTargetsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ModelDataSet.MdlParkingTargetsDataTable GetDataByAppliedICsOnly() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            ModelDataSet.MdlParkingTargetsDataTable dataTable = new ModelDataSet.MdlParkingTargetsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ModelDataSet.MdlParkingTargetsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ModelDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MdlParkingTargets");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_MAPINFO_ID, 
                    global::System.Nullable<int> Original_ParcelID, 
                    global::System.Nullable<short> Original_DivideID, 
                    global::System.Nullable<int> Original_EXICFtParking, 
                    global::System.Nullable<int> Original_EXPkAreaFt, 
                    global::System.Nullable<int> Original_ParkingTargetArea, 
                    string Original_NGTO_Direct, 
                    string Original_NGTO_Surface, 
                    string Original_NGTOParking, 
                    bool Original_Evaluated, 
                    bool Original_Inlets, 
                    global::System.Nullable<int> Original_Parking_Spaces, 
                    global::System.Nullable<int> Original_Perc_Space_Used, 
                    string Original_Drainage, 
                    string Original_NGTO, 
                    string Original_Controllable, 
                    global::System.Nullable<double> Original_FractionControllable, 
                    global::System.Nullable<short> Original_Difficulty, 
                    global::System.Nullable<double> Original_ParkingEffDisc, 
                    string Original_Comments, 
                    global::System.Nullable<double> Original_Fraction2Drywell, 
                    bool Original_BuildModelIC, 
                    string Original_Source, 
                    string Original_AppendDate, 
                    global::System.Nullable<int> Original_ICID, 
                    global::System.Nullable<int> Original_Constructed) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_ParcelID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ParcelID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_DivideID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((short)(Original_DivideID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_EXICFtParking.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_EXICFtParking.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_EXPkAreaFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_EXPkAreaFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_ParkingTargetArea.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_ParkingTargetArea.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_NGTO_Direct == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_NGTO_Direct));
            }
            if ((Original_NGTO_Surface == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_NGTO_Surface));
            }
            if ((Original_NGTOParking == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_NGTOParking));
            }
            this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[18].Value = ((bool)(Original_Evaluated));
            this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[20].Value = ((bool)(Original_Inlets));
            if ((Original_Parking_Spaces.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((int)(Original_Parking_Spaces.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_Perc_Space_Used.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((int)(Original_Perc_Space_Used.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_Drainage == null)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_Drainage));
            }
            if ((Original_NGTO == null)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((string)(Original_NGTO));
            }
            if ((Original_Controllable == null)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((string)(Original_Controllable));
            }
            if ((Original_FractionControllable.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((double)(Original_FractionControllable.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_Difficulty.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((short)(Original_Difficulty.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_ParkingEffDisc.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((double)(Original_ParkingEffDisc.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_Comments == null)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((string)(Original_Comments));
            }
            if ((Original_Fraction2Drywell.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((double)(Original_Fraction2Drywell.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[42].Value = ((bool)(Original_BuildModelIC));
            if ((Original_Source == null)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((string)(Original_Source));
            }
            if ((Original_AppendDate == null)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((string)(Original_AppendDate));
            }
            if ((Original_ICID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((int)(Original_ICID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_Constructed.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((int)(Original_Constructed.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<int> ParcelID, 
                    global::System.Nullable<short> DivideID, 
                    global::System.Nullable<int> EXICFtParking, 
                    global::System.Nullable<int> EXPkAreaFt, 
                    global::System.Nullable<int> ParkingTargetArea, 
                    string NGTO_Direct, 
                    string NGTO_Surface, 
                    string NGTOParking, 
                    bool Evaluated, 
                    bool Inlets, 
                    global::System.Nullable<int> Parking_Spaces, 
                    global::System.Nullable<int> Perc_Space_Used, 
                    string Drainage, 
                    string NGTO, 
                    string Controllable, 
                    global::System.Nullable<double> FractionControllable, 
                    global::System.Nullable<short> Difficulty, 
                    global::System.Nullable<double> ParkingEffDisc, 
                    string Comments, 
                    global::System.Nullable<double> Fraction2Drywell, 
                    bool BuildModelIC, 
                    string Source, 
                    string AppendDate, 
                    global::System.Nullable<int> ICID, 
                    global::System.Nullable<int> Constructed) {
            if ((ParcelID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ParcelID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((DivideID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((short)(DivideID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((EXICFtParking.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(EXICFtParking.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((EXPkAreaFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(EXPkAreaFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((ParkingTargetArea.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(ParkingTargetArea.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((NGTO_Direct == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(NGTO_Direct));
            }
            if ((NGTO_Surface == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(NGTO_Surface));
            }
            if ((NGTOParking == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(NGTOParking));
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((bool)(Evaluated));
            this.Adapter.InsertCommand.Parameters[9].Value = ((bool)(Inlets));
            if ((Parking_Spaces.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(Parking_Spaces.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Perc_Space_Used.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(Perc_Space_Used.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Drainage == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(Drainage));
            }
            if ((NGTO == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(NGTO));
            }
            if ((Controllable == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(Controllable));
            }
            if ((FractionControllable.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((double)(FractionControllable.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Difficulty.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((short)(Difficulty.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((ParkingEffDisc.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((double)(ParkingEffDisc.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Comments == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(Comments));
            }
            if ((Fraction2Drywell.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((double)(Fraction2Drywell.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[20].Value = ((bool)(BuildModelIC));
            if ((Source == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(Source));
            }
            if ((AppendDate == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(AppendDate));
            }
            if ((ICID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((int)(ICID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Constructed.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((int)(Constructed.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> ParcelID, 
                    global::System.Nullable<short> DivideID, 
                    global::System.Nullable<int> EXICFtParking, 
                    global::System.Nullable<int> EXPkAreaFt, 
                    global::System.Nullable<int> ParkingTargetArea, 
                    string NGTO_Direct, 
                    string NGTO_Surface, 
                    string NGTOParking, 
                    bool Evaluated, 
                    bool Inlets, 
                    global::System.Nullable<int> Parking_Spaces, 
                    global::System.Nullable<int> Perc_Space_Used, 
                    string Drainage, 
                    string NGTO, 
                    string Controllable, 
                    global::System.Nullable<double> FractionControllable, 
                    global::System.Nullable<short> Difficulty, 
                    global::System.Nullable<double> ParkingEffDisc, 
                    string Comments, 
                    global::System.Nullable<double> Fraction2Drywell, 
                    bool BuildModelIC, 
                    string Source, 
                    string AppendDate, 
                    global::System.Nullable<int> ICID, 
                    global::System.Nullable<int> Constructed, 
                    int Original_MAPINFO_ID, 
                    global::System.Nullable<int> Original_ParcelID, 
                    global::System.Nullable<short> Original_DivideID, 
                    global::System.Nullable<int> Original_EXICFtParking, 
                    global::System.Nullable<int> Original_EXPkAreaFt, 
                    global::System.Nullable<int> Original_ParkingTargetArea, 
                    string Original_NGTO_Direct, 
                    string Original_NGTO_Surface, 
                    string Original_NGTOParking, 
                    bool Original_Evaluated, 
                    bool Original_Inlets, 
                    global::System.Nullable<int> Original_Parking_Spaces, 
                    global::System.Nullable<int> Original_Perc_Space_Used, 
                    string Original_Drainage, 
                    string Original_NGTO, 
                    string Original_Controllable, 
                    global::System.Nullable<double> Original_FractionControllable, 
                    global::System.Nullable<short> Original_Difficulty, 
                    global::System.Nullable<double> Original_ParkingEffDisc, 
                    string Original_Comments, 
                    global::System.Nullable<double> Original_Fraction2Drywell, 
                    bool Original_BuildModelIC, 
                    string Original_Source, 
                    string Original_AppendDate, 
                    global::System.Nullable<int> Original_ICID, 
                    global::System.Nullable<int> Original_Constructed) {
            if ((ParcelID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ParcelID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((DivideID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((short)(DivideID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((EXICFtParking.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(EXICFtParking.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((EXPkAreaFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(EXPkAreaFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((ParkingTargetArea.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(ParkingTargetArea.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((NGTO_Direct == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(NGTO_Direct));
            }
            if ((NGTO_Surface == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(NGTO_Surface));
            }
            if ((NGTOParking == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(NGTOParking));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(Evaluated));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(Inlets));
            if ((Parking_Spaces.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Parking_Spaces.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Perc_Space_Used.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Perc_Space_Used.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Drainage == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Drainage));
            }
            if ((NGTO == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(NGTO));
            }
            if ((Controllable == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Controllable));
            }
            if ((FractionControllable.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((double)(FractionControllable.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Difficulty.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((short)(Difficulty.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((ParkingEffDisc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((double)(ParkingEffDisc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Comments == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Comments));
            }
            if ((Fraction2Drywell.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((double)(Fraction2Drywell.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[20].Value = ((bool)(BuildModelIC));
            if ((Source == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Source));
            }
            if ((AppendDate == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(AppendDate));
            }
            if ((ICID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(ICID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Constructed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(Constructed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_ParcelID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(Original_ParcelID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Original_DivideID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((short)(Original_DivideID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Original_EXICFtParking.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((int)(Original_EXICFtParking.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((Original_EXPkAreaFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((int)(Original_EXPkAreaFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((Original_ParkingTargetArea.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((int)(Original_ParkingTargetArea.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((Original_NGTO_Direct == null)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(Original_NGTO_Direct));
            }
            if ((Original_NGTO_Surface == null)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[39].Value = ((string)(Original_NGTO_Surface));
            }
            if ((Original_NGTOParking == null)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(Original_NGTOParking));
            }
            this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[43].Value = ((bool)(Original_Evaluated));
            this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[45].Value = ((bool)(Original_Inlets));
            if ((Original_Parking_Spaces.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[47].Value = ((int)(Original_Parking_Spaces.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            if ((Original_Perc_Space_Used.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[49].Value = ((int)(Original_Perc_Space_Used.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            if ((Original_Drainage == null)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[51].Value = ((string)(Original_Drainage));
            }
            if ((Original_NGTO == null)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[53].Value = ((string)(Original_NGTO));
            }
            if ((Original_Controllable == null)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[55].Value = ((string)(Original_Controllable));
            }
            if ((Original_FractionControllable.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[57].Value = ((double)(Original_FractionControllable.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            if ((Original_Difficulty.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[59].Value = ((short)(Original_Difficulty.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            if ((Original_ParkingEffDisc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[61].Value = ((double)(Original_ParkingEffDisc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            if ((Original_Comments == null)) {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[63].Value = ((string)(Original_Comments));
            }
            if ((Original_Fraction2Drywell.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[65].Value = ((double)(Original_Fraction2Drywell.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[67].Value = ((bool)(Original_BuildModelIC));
            if ((Original_Source == null)) {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[69].Value = ((string)(Original_Source));
            }
            if ((Original_AppendDate == null)) {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[71].Value = ((string)(Original_AppendDate));
            }
            if ((Original_ICID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[73].Value = ((int)(Original_ICID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[73].Value = global::System.DBNull.Value;
            }
            if ((Original_Constructed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[75].Value = ((int)(Original_Constructed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[75].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MdlRoofTargetsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MdlRoofTargetsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MdlRoofTargets";
            tableMapping.ColumnMappings.Add("MAPINFO_ID", "MAPINFO_ID");
            tableMapping.ColumnMappings.Add("ParcelID", "ParcelID");
            tableMapping.ColumnMappings.Add("DivideID", "DivideID");
            tableMapping.ColumnMappings.Add("NGTORoof", "NGTORoof");
            tableMapping.ColumnMappings.Add("EXICFtRoof", "EXICFtRoof");
            tableMapping.ColumnMappings.Add("EXRfAreaFt", "EXRfAreaFt");
            tableMapping.ColumnMappings.Add("ExternalDS", "ExternalDS");
            tableMapping.ColumnMappings.Add("DSTotal", "DSTotal");
            tableMapping.ColumnMappings.Add("EXtoVeg", "EXtoVeg");
            tableMapping.ColumnMappings.Add("EXtoStreet", "EXtoStreet");
            tableMapping.ColumnMappings.Add("EXtoPlanter", "EXtoPlanter");
            tableMapping.ColumnMappings.Add("EXtoBioretention", "EXtoBioretention");
            tableMapping.ColumnMappings.Add("EXtoDrywell", "EXtoDrywell");
            tableMapping.ColumnMappings.Add("EXtoEcoroof", "EXtoEcoroof");
            tableMapping.ColumnMappings.Add("DStoVeg", "DStoVeg");
            tableMapping.ColumnMappings.Add("DStoStreet", "DStoStreet");
            tableMapping.ColumnMappings.Add("DStoPlanter", "DStoPlanter");
            tableMapping.ColumnMappings.Add("DStoBioretention", "DStoBioretention");
            tableMapping.ColumnMappings.Add("DStoDrywell", "DStoDrywell");
            tableMapping.ColumnMappings.Add("DStoEcoroof", "DStoEcoroof");
            tableMapping.ColumnMappings.Add("DSUncontrollable", "DSUncontrollable");
            tableMapping.ColumnMappings.Add("LandscapeAvailable", "LandscapeAvailable");
            tableMapping.ColumnMappings.Add("FractionDrained", "FractionDrained");
            tableMapping.ColumnMappings.Add("Difficulty", "Difficulty");
            tableMapping.ColumnMappings.Add("RoofEffDisc", "RoofEffDisc");
            tableMapping.ColumnMappings.Add("Comments", "Comments");
            tableMapping.ColumnMappings.Add("PlantersOK", "PlantersOK");
            tableMapping.ColumnMappings.Add("BioretentionOK", "BioretentionOK");
            tableMapping.ColumnMappings.Add("BuildModelIC", "BuildModelIC");
            tableMapping.ColumnMappings.Add("Source", "Source");
            tableMapping.ColumnMappings.Add("AppendDate", "AppendDate");
            tableMapping.ColumnMappings.Add("ICID", "ICID");
            tableMapping.ColumnMappings.Add("Constructed", "Constructed");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `mst_ic_rooftargets_ac` WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `Pa" +
                "rcelID` IS NULL) OR (`ParcelID` = ?)) AND ((? = 1 AND `DivideID` IS NULL) OR (`D" +
                "ivideID` = ?)) AND ((? = 1 AND `NGTORoof` IS NULL) OR (`NGTORoof` = ?)) AND ((? " +
                "= 1 AND `EXICFtRoof` IS NULL) OR (`EXICFtRoof` = ?)) AND ((? = 1 AND `EXRfAreaFt" +
                "` IS NULL) OR (`EXRfAreaFt` = ?)) AND ((? = 1 AND `ExternalDS` IS NULL) OR (`Ext" +
                "ernalDS` = ?)) AND ((? = 1 AND `DSTotal` IS NULL) OR (`DSTotal` = ?)) AND ((? = " +
                "1 AND `EXtoVeg` IS NULL) OR (`EXtoVeg` = ?)) AND ((? = 1 AND `EXtoStreet` IS NUL" +
                "L) OR (`EXtoStreet` = ?)) AND ((? = 1 AND `EXtoPlanter` IS NULL) OR (`EXtoPlante" +
                "r` = ?)) AND ((? = 1 AND `EXtoBioretention` IS NULL) OR (`EXtoBioretention` = ?)" +
                ") AND ((? = 1 AND `EXtoDrywell` IS NULL) OR (`EXtoDrywell` = ?)) AND ((? = 1 AND" +
                " `EXtoEcoroof` IS NULL) OR (`EXtoEcoroof` = ?)) AND ((? = 1 AND `DStoVeg` IS NUL" +
                "L) OR (`DStoVeg` = ?)) AND ((? = 1 AND `DStoStreet` IS NULL) OR (`DStoStreet` = " +
                "?)) AND ((? = 1 AND `DStoPlanter` IS NULL) OR (`DStoPlanter` = ?)) AND ((? = 1 A" +
                "ND `DStoBioretention` IS NULL) OR (`DStoBioretention` = ?)) AND ((? = 1 AND `DSt" +
                "oDrywell` IS NULL) OR (`DStoDrywell` = ?)) AND ((? = 1 AND `DStoEcoroof` IS NULL" +
                ") OR (`DStoEcoroof` = ?)) AND ((? = 1 AND `DSUncontrollable` IS NULL) OR (`DSUnc" +
                "ontrollable` = ?)) AND ((? = 1 AND `LandscapeAvailable` IS NULL) OR (`LandscapeA" +
                "vailable` = ?)) AND ((? = 1 AND `FractionDrained` IS NULL) OR (`FractionDrained`" +
                " = ?)) AND ((? = 1 AND `Difficulty` IS NULL) OR (`Difficulty` = ?)) AND ((? = 1 " +
                "AND `RoofEffDisc` IS NULL) OR (`RoofEffDisc` = ?)) AND ((? = 1 AND `Comments` IS" +
                " NULL) OR (`Comments` = ?)) AND ((? = 1 AND `PlantersOK` IS NULL) OR (`PlantersO" +
                "K` = ?)) AND ((? = 1 AND `BioretentionOK` IS NULL) OR (`BioretentionOK` = ?)) AN" +
                "D ((? = 1 AND `BuildModelIC` IS NULL) OR (`BuildModelIC` = ?)) AND ((? = 1 AND `" +
                "Source` IS NULL) OR (`Source` = ?)) AND ((? = 1 AND `AppendDate` IS NULL) OR (`A" +
                "ppendDate` = ?)) AND ((? = 1 AND `ICID` IS NULL) OR (`ICID` = ?)) AND ((? = 1 AN" +
                "D `Constructed` IS NULL) OR (`Constructed` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTORoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTORoof", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTORoof", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTORoof", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EXICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXICFtRoof", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EXICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXICFtRoof", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EXRfAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXRfAreaFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EXRfAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXRfAreaFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ExternalDS", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ExternalDS", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ExternalDS", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ExternalDS", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DSTotal", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSTotal", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DSTotal", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSTotal", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EXtoVeg", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoVeg", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EXtoVeg", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoVeg", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EXtoStreet", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoStreet", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EXtoStreet", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoStreet", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EXtoPlanter", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoPlanter", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EXtoPlanter", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoPlanter", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EXtoBioretention", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoBioretention", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EXtoBioretention", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoBioretention", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EXtoDrywell", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoDrywell", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EXtoDrywell", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoDrywell", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EXtoEcoroof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoEcoroof", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EXtoEcoroof", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoEcoroof", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DStoVeg", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoVeg", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DStoVeg", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoVeg", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DStoStreet", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoStreet", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DStoStreet", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoStreet", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DStoPlanter", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoPlanter", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DStoPlanter", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoPlanter", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DStoBioretention", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoBioretention", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DStoBioretention", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoBioretention", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DStoDrywell", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoDrywell", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DStoDrywell", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoDrywell", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DStoEcoroof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoEcoroof", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DStoEcoroof", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoEcoroof", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DSUncontrollable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSUncontrollable", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DSUncontrollable", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSUncontrollable", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_LandscapeAvailable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LandscapeAvailable", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_LandscapeAvailable", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LandscapeAvailable", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FractionDrained", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FractionDrained", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FractionDrained", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FractionDrained", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Difficulty", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RoofEffDisc", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RoofEffDisc", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RoofEffDisc", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RoofEffDisc", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Comments", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PlantersOK", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PlantersOK", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PlantersOK", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PlantersOK", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BioretentionOK", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BioretentionOK", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BioretentionOK", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BioretentionOK", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BuildModelIC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Source", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AppendDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AppendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `mst_ic_rooftargets_ac` (`ParcelID`, `DivideID`, `NGTORoof`, `EXICFtRoof`, `EXRfAreaFt`, `ExternalDS`, `DSTotal`, `EXtoVeg`, `EXtoStreet`, `EXtoPlanter`, `EXtoBioretention`, `EXtoDrywell`, `EXtoEcoroof`, `DStoVeg`, `DStoStreet`, `DStoPlanter`, `DStoBioretention`, `DStoDrywell`, `DStoEcoroof`, `DSUncontrollable`, `LandscapeAvailable`, `FractionDrained`, `Difficulty`, `RoofEffDisc`, `Comments`, `PlantersOK`, `BioretentionOK`, `BuildModelIC`, `Source`, `AppendDate`, `ICID`, `Constructed`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTORoof", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTORoof", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EXICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXICFtRoof", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EXRfAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXRfAreaFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ExternalDS", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ExternalDS", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DSTotal", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSTotal", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EXtoVeg", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoVeg", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EXtoStreet", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoStreet", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EXtoPlanter", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoPlanter", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EXtoBioretention", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoBioretention", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EXtoDrywell", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoDrywell", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EXtoEcoroof", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoEcoroof", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DStoVeg", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoVeg", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DStoStreet", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoStreet", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DStoPlanter", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoPlanter", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DStoBioretention", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoBioretention", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DStoDrywell", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoDrywell", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DStoEcoroof", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoEcoroof", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DSUncontrollable", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSUncontrollable", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("LandscapeAvailable", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LandscapeAvailable", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FractionDrained", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FractionDrained", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RoofEffDisc", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RoofEffDisc", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PlantersOK", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PlantersOK", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BioretentionOK", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BioretentionOK", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AppendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE `mst_ic_rooftargets_ac` SET `ParcelID` = ?, `DivideID` = ?, `NGTORoof` = ?" +
                ", `EXICFtRoof` = ?, `EXRfAreaFt` = ?, `ExternalDS` = ?, `DSTotal` = ?, `EXtoVeg`" +
                " = ?, `EXtoStreet` = ?, `EXtoPlanter` = ?, `EXtoBioretention` = ?, `EXtoDrywell`" +
                " = ?, `EXtoEcoroof` = ?, `DStoVeg` = ?, `DStoStreet` = ?, `DStoPlanter` = ?, `DS" +
                "toBioretention` = ?, `DStoDrywell` = ?, `DStoEcoroof` = ?, `DSUncontrollable` = " +
                "?, `LandscapeAvailable` = ?, `FractionDrained` = ?, `Difficulty` = ?, `RoofEffDi" +
                "sc` = ?, `Comments` = ?, `PlantersOK` = ?, `BioretentionOK` = ?, `BuildModelIC` " +
                "= ?, `Source` = ?, `AppendDate` = ?, `ICID` = ?, `Constructed` = ? WHERE ((`MAPI" +
                "NFO_ID` = ?) AND ((? = 1 AND `ParcelID` IS NULL) OR (`ParcelID` = ?)) AND ((? = " +
                "1 AND `DivideID` IS NULL) OR (`DivideID` = ?)) AND ((? = 1 AND `NGTORoof` IS NUL" +
                "L) OR (`NGTORoof` = ?)) AND ((? = 1 AND `EXICFtRoof` IS NULL) OR (`EXICFtRoof` =" +
                " ?)) AND ((? = 1 AND `EXRfAreaFt` IS NULL) OR (`EXRfAreaFt` = ?)) AND ((? = 1 AN" +
                "D `ExternalDS` IS NULL) OR (`ExternalDS` = ?)) AND ((? = 1 AND `DSTotal` IS NULL" +
                ") OR (`DSTotal` = ?)) AND ((? = 1 AND `EXtoVeg` IS NULL) OR (`EXtoVeg` = ?)) AND" +
                " ((? = 1 AND `EXtoStreet` IS NULL) OR (`EXtoStreet` = ?)) AND ((? = 1 AND `EXtoP" +
                "lanter` IS NULL) OR (`EXtoPlanter` = ?)) AND ((? = 1 AND `EXtoBioretention` IS N" +
                "ULL) OR (`EXtoBioretention` = ?)) AND ((? = 1 AND `EXtoDrywell` IS NULL) OR (`EX" +
                "toDrywell` = ?)) AND ((? = 1 AND `EXtoEcoroof` IS NULL) OR (`EXtoEcoroof` = ?)) " +
                "AND ((? = 1 AND `DStoVeg` IS NULL) OR (`DStoVeg` = ?)) AND ((? = 1 AND `DStoStre" +
                "et` IS NULL) OR (`DStoStreet` = ?)) AND ((? = 1 AND `DStoPlanter` IS NULL) OR (`" +
                "DStoPlanter` = ?)) AND ((? = 1 AND `DStoBioretention` IS NULL) OR (`DStoBioreten" +
                "tion` = ?)) AND ((? = 1 AND `DStoDrywell` IS NULL) OR (`DStoDrywell` = ?)) AND (" +
                "(? = 1 AND `DStoEcoroof` IS NULL) OR (`DStoEcoroof` = ?)) AND ((? = 1 AND `DSUnc" +
                "ontrollable` IS NULL) OR (`DSUncontrollable` = ?)) AND ((? = 1 AND `LandscapeAva" +
                "ilable` IS NULL) OR (`LandscapeAvailable` = ?)) AND ((? = 1 AND `FractionDrained" +
                "` IS NULL) OR (`FractionDrained` = ?)) AND ((? = 1 AND `Difficulty` IS NULL) OR " +
                "(`Difficulty` = ?)) AND ((? = 1 AND `RoofEffDisc` IS NULL) OR (`RoofEffDisc` = ?" +
                ")) AND ((? = 1 AND `Comments` IS NULL) OR (`Comments` = ?)) AND ((? = 1 AND `Pla" +
                "ntersOK` IS NULL) OR (`PlantersOK` = ?)) AND ((? = 1 AND `BioretentionOK` IS NUL" +
                "L) OR (`BioretentionOK` = ?)) AND ((? = 1 AND `BuildModelIC` IS NULL) OR (`Build" +
                "ModelIC` = ?)) AND ((? = 1 AND `Source` IS NULL) OR (`Source` = ?)) AND ((? = 1 " +
                "AND `AppendDate` IS NULL) OR (`AppendDate` = ?)) AND ((? = 1 AND `ICID` IS NULL)" +
                " OR (`ICID` = ?)) AND ((? = 1 AND `Constructed` IS NULL) OR (`Constructed` = ?))" +
                ")";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTORoof", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTORoof", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EXICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXICFtRoof", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EXRfAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXRfAreaFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ExternalDS", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ExternalDS", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DSTotal", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSTotal", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EXtoVeg", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoVeg", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EXtoStreet", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoStreet", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EXtoPlanter", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoPlanter", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EXtoBioretention", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoBioretention", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EXtoDrywell", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoDrywell", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EXtoEcoroof", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoEcoroof", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DStoVeg", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoVeg", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DStoStreet", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoStreet", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DStoPlanter", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoPlanter", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DStoBioretention", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoBioretention", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DStoDrywell", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoDrywell", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DStoEcoroof", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoEcoroof", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DSUncontrollable", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSUncontrollable", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("LandscapeAvailable", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LandscapeAvailable", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FractionDrained", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FractionDrained", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RoofEffDisc", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RoofEffDisc", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PlantersOK", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PlantersOK", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BioretentionOK", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BioretentionOK", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AppendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTORoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTORoof", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTORoof", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTORoof", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EXICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXICFtRoof", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EXICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXICFtRoof", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EXRfAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXRfAreaFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EXRfAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXRfAreaFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ExternalDS", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ExternalDS", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ExternalDS", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ExternalDS", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DSTotal", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSTotal", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DSTotal", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSTotal", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EXtoVeg", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoVeg", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EXtoVeg", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoVeg", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EXtoStreet", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoStreet", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EXtoStreet", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoStreet", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EXtoPlanter", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoPlanter", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EXtoPlanter", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoPlanter", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EXtoBioretention", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoBioretention", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EXtoBioretention", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoBioretention", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EXtoDrywell", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoDrywell", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EXtoDrywell", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoDrywell", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EXtoEcoroof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoEcoroof", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EXtoEcoroof", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EXtoEcoroof", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DStoVeg", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoVeg", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DStoVeg", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoVeg", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DStoStreet", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoStreet", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DStoStreet", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoStreet", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DStoPlanter", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoPlanter", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DStoPlanter", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoPlanter", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DStoBioretention", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoBioretention", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DStoBioretention", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoBioretention", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DStoDrywell", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoDrywell", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DStoDrywell", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoDrywell", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DStoEcoroof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoEcoroof", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DStoEcoroof", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DStoEcoroof", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DSUncontrollable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSUncontrollable", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DSUncontrollable", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSUncontrollable", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_LandscapeAvailable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LandscapeAvailable", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_LandscapeAvailable", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LandscapeAvailable", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FractionDrained", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FractionDrained", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FractionDrained", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FractionDrained", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Difficulty", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RoofEffDisc", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RoofEffDisc", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RoofEffDisc", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RoofEffDisc", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Comments", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PlantersOK", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PlantersOK", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PlantersOK", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PlantersOK", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BioretentionOK", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BioretentionOK", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BioretentionOK", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BioretentionOK", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BuildModelIC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Source", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AppendDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AppendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.DataAccessConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[2];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        mst_ic_rooftargets_ac.*\r\nFROM            mst_ic_rooftargets_ac";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT        MAPINFO_ID, ParcelID, DivideID, NGTORoof, EXICFtRoof, EXRfAreaFt, ExternalDS, DSTotal, EXtoVeg, EXtoStreet, EXtoPlanter, EXtoBioretention, EXtoDrywell, 
                         EXtoEcoroof, DStoVeg, DStoStreet, DStoPlanter, DStoBioretention, DStoDrywell, DStoEcoroof, DSUncontrollable, LandscapeAvailable, FractionDrained, 
                         Difficulty, RoofEffDisc, Comments, PlantersOK, BioretentionOK, BuildModelIC, Source, AppendDate, ICID, Constructed
FROM            mst_ic_rooftargets_ac
WHERE        (Constructed > 0) OR
                         (BuildModelIC = 1)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ModelDataSet.MdlRoofTargetsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ModelDataSet.MdlRoofTargetsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ModelDataSet.MdlRoofTargetsDataTable dataTable = new ModelDataSet.MdlRoofTargetsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByAppliedICsOnly(ModelDataSet.MdlRoofTargetsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ModelDataSet.MdlRoofTargetsDataTable GetDataByAppliedICsOnly() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            ModelDataSet.MdlRoofTargetsDataTable dataTable = new ModelDataSet.MdlRoofTargetsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ModelDataSet.MdlRoofTargetsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ModelDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MdlRoofTargets");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_MAPINFO_ID, 
                    global::System.Nullable<int> Original_ParcelID, 
                    global::System.Nullable<int> Original_DivideID, 
                    string Original_NGTORoof, 
                    global::System.Nullable<int> Original_EXICFtRoof, 
                    global::System.Nullable<int> Original_EXRfAreaFt, 
                    bool Original_ExternalDS, 
                    global::System.Nullable<short> Original_DSTotal, 
                    global::System.Nullable<short> Original_EXtoVeg, 
                    global::System.Nullable<short> Original_EXtoStreet, 
                    global::System.Nullable<short> Original_EXtoPlanter, 
                    global::System.Nullable<short> Original_EXtoBioretention, 
                    global::System.Nullable<short> Original_EXtoDrywell, 
                    global::System.Nullable<short> Original_EXtoEcoroof, 
                    global::System.Nullable<short> Original_DStoVeg, 
                    global::System.Nullable<short> Original_DStoStreet, 
                    global::System.Nullable<short> Original_DStoPlanter, 
                    global::System.Nullable<short> Original_DStoBioretention, 
                    global::System.Nullable<short> Original_DStoDrywell, 
                    global::System.Nullable<short> Original_DStoEcoroof, 
                    global::System.Nullable<short> Original_DSUncontrollable, 
                    bool Original_LandscapeAvailable, 
                    global::System.Nullable<double> Original_FractionDrained, 
                    global::System.Nullable<short> Original_Difficulty, 
                    global::System.Nullable<double> Original_RoofEffDisc, 
                    string Original_Comments, 
                    bool Original_PlantersOK, 
                    bool Original_BioretentionOK, 
                    bool Original_BuildModelIC, 
                    string Original_Source, 
                    string Original_AppendDate, 
                    global::System.Nullable<int> Original_ICID, 
                    global::System.Nullable<int> Original_Constructed) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_ParcelID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ParcelID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_DivideID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_DivideID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_NGTORoof == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_NGTORoof));
            }
            if ((Original_EXICFtRoof.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_EXICFtRoof.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_EXRfAreaFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_EXRfAreaFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((bool)(Original_ExternalDS));
            if ((Original_DSTotal.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((short)(Original_DSTotal.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_EXtoVeg.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((short)(Original_EXtoVeg.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_EXtoStreet.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((short)(Original_EXtoStreet.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_EXtoPlanter.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((short)(Original_EXtoPlanter.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_EXtoBioretention.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((short)(Original_EXtoBioretention.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_EXtoDrywell.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((short)(Original_EXtoDrywell.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_EXtoEcoroof.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((short)(Original_EXtoEcoroof.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_DStoVeg.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((short)(Original_DStoVeg.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_DStoStreet.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((short)(Original_DStoStreet.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_DStoPlanter.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((short)(Original_DStoPlanter.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_DStoBioretention.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((short)(Original_DStoBioretention.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_DStoDrywell.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((short)(Original_DStoDrywell.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_DStoEcoroof.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((short)(Original_DStoEcoroof.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_DSUncontrollable.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((short)(Original_DSUncontrollable.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[42].Value = ((bool)(Original_LandscapeAvailable));
            if ((Original_FractionDrained.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((double)(Original_FractionDrained.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((Original_Difficulty.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((short)(Original_Difficulty.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_RoofEffDisc.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((double)(Original_RoofEffDisc.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_Comments == null)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((string)(Original_Comments));
            }
            this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[52].Value = ((bool)(Original_PlantersOK));
            this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[54].Value = ((bool)(Original_BioretentionOK));
            this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[56].Value = ((bool)(Original_BuildModelIC));
            if ((Original_Source == null)) {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[58].Value = ((string)(Original_Source));
            }
            if ((Original_AppendDate == null)) {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[60].Value = ((string)(Original_AppendDate));
            }
            if ((Original_ICID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[62].Value = ((int)(Original_ICID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((Original_Constructed.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[64].Value = ((int)(Original_Constructed.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<int> ParcelID, 
                    global::System.Nullable<int> DivideID, 
                    string NGTORoof, 
                    global::System.Nullable<int> EXICFtRoof, 
                    global::System.Nullable<int> EXRfAreaFt, 
                    bool ExternalDS, 
                    global::System.Nullable<short> DSTotal, 
                    global::System.Nullable<short> EXtoVeg, 
                    global::System.Nullable<short> EXtoStreet, 
                    global::System.Nullable<short> EXtoPlanter, 
                    global::System.Nullable<short> EXtoBioretention, 
                    global::System.Nullable<short> EXtoDrywell, 
                    global::System.Nullable<short> EXtoEcoroof, 
                    global::System.Nullable<short> DStoVeg, 
                    global::System.Nullable<short> DStoStreet, 
                    global::System.Nullable<short> DStoPlanter, 
                    global::System.Nullable<short> DStoBioretention, 
                    global::System.Nullable<short> DStoDrywell, 
                    global::System.Nullable<short> DStoEcoroof, 
                    global::System.Nullable<short> DSUncontrollable, 
                    bool LandscapeAvailable, 
                    global::System.Nullable<double> FractionDrained, 
                    global::System.Nullable<short> Difficulty, 
                    global::System.Nullable<double> RoofEffDisc, 
                    string Comments, 
                    bool PlantersOK, 
                    bool BioretentionOK, 
                    bool BuildModelIC, 
                    string Source, 
                    string AppendDate, 
                    global::System.Nullable<int> ICID, 
                    global::System.Nullable<int> Constructed) {
            if ((ParcelID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ParcelID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((DivideID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(DivideID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((NGTORoof == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(NGTORoof));
            }
            if ((EXICFtRoof.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(EXICFtRoof.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((EXRfAreaFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(EXRfAreaFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(ExternalDS));
            if ((DSTotal.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((short)(DSTotal.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((EXtoVeg.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((short)(EXtoVeg.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((EXtoStreet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((short)(EXtoStreet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((EXtoPlanter.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((short)(EXtoPlanter.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((EXtoBioretention.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((short)(EXtoBioretention.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((EXtoDrywell.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((short)(EXtoDrywell.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((EXtoEcoroof.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((short)(EXtoEcoroof.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((DStoVeg.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((short)(DStoVeg.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((DStoStreet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((short)(DStoStreet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((DStoPlanter.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((short)(DStoPlanter.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((DStoBioretention.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((short)(DStoBioretention.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((DStoDrywell.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((short)(DStoDrywell.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((DStoEcoroof.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((short)(DStoEcoroof.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((DSUncontrollable.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((short)(DSUncontrollable.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[20].Value = ((bool)(LandscapeAvailable));
            if ((FractionDrained.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((double)(FractionDrained.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Difficulty.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((short)(Difficulty.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((RoofEffDisc.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((double)(RoofEffDisc.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Comments == null)) {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((string)(Comments));
            }
            this.Adapter.InsertCommand.Parameters[25].Value = ((bool)(PlantersOK));
            this.Adapter.InsertCommand.Parameters[26].Value = ((bool)(BioretentionOK));
            this.Adapter.InsertCommand.Parameters[27].Value = ((bool)(BuildModelIC));
            if ((Source == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(Source));
            }
            if ((AppendDate == null)) {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = ((string)(AppendDate));
            }
            if ((ICID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((int)(ICID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Constructed.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((int)(Constructed.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> ParcelID, 
                    global::System.Nullable<int> DivideID, 
                    string NGTORoof, 
                    global::System.Nullable<int> EXICFtRoof, 
                    global::System.Nullable<int> EXRfAreaFt, 
                    bool ExternalDS, 
                    global::System.Nullable<short> DSTotal, 
                    global::System.Nullable<short> EXtoVeg, 
                    global::System.Nullable<short> EXtoStreet, 
                    global::System.Nullable<short> EXtoPlanter, 
                    global::System.Nullable<short> EXtoBioretention, 
                    global::System.Nullable<short> EXtoDrywell, 
                    global::System.Nullable<short> EXtoEcoroof, 
                    global::System.Nullable<short> DStoVeg, 
                    global::System.Nullable<short> DStoStreet, 
                    global::System.Nullable<short> DStoPlanter, 
                    global::System.Nullable<short> DStoBioretention, 
                    global::System.Nullable<short> DStoDrywell, 
                    global::System.Nullable<short> DStoEcoroof, 
                    global::System.Nullable<short> DSUncontrollable, 
                    bool LandscapeAvailable, 
                    global::System.Nullable<double> FractionDrained, 
                    global::System.Nullable<short> Difficulty, 
                    global::System.Nullable<double> RoofEffDisc, 
                    string Comments, 
                    bool PlantersOK, 
                    bool BioretentionOK, 
                    bool BuildModelIC, 
                    string Source, 
                    string AppendDate, 
                    global::System.Nullable<int> ICID, 
                    global::System.Nullable<int> Constructed, 
                    int Original_MAPINFO_ID, 
                    global::System.Nullable<int> Original_ParcelID, 
                    global::System.Nullable<int> Original_DivideID, 
                    string Original_NGTORoof, 
                    global::System.Nullable<int> Original_EXICFtRoof, 
                    global::System.Nullable<int> Original_EXRfAreaFt, 
                    bool Original_ExternalDS, 
                    global::System.Nullable<short> Original_DSTotal, 
                    global::System.Nullable<short> Original_EXtoVeg, 
                    global::System.Nullable<short> Original_EXtoStreet, 
                    global::System.Nullable<short> Original_EXtoPlanter, 
                    global::System.Nullable<short> Original_EXtoBioretention, 
                    global::System.Nullable<short> Original_EXtoDrywell, 
                    global::System.Nullable<short> Original_EXtoEcoroof, 
                    global::System.Nullable<short> Original_DStoVeg, 
                    global::System.Nullable<short> Original_DStoStreet, 
                    global::System.Nullable<short> Original_DStoPlanter, 
                    global::System.Nullable<short> Original_DStoBioretention, 
                    global::System.Nullable<short> Original_DStoDrywell, 
                    global::System.Nullable<short> Original_DStoEcoroof, 
                    global::System.Nullable<short> Original_DSUncontrollable, 
                    bool Original_LandscapeAvailable, 
                    global::System.Nullable<double> Original_FractionDrained, 
                    global::System.Nullable<short> Original_Difficulty, 
                    global::System.Nullable<double> Original_RoofEffDisc, 
                    string Original_Comments, 
                    bool Original_PlantersOK, 
                    bool Original_BioretentionOK, 
                    bool Original_BuildModelIC, 
                    string Original_Source, 
                    string Original_AppendDate, 
                    global::System.Nullable<int> Original_ICID, 
                    global::System.Nullable<int> Original_Constructed) {
            if ((ParcelID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ParcelID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((DivideID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(DivideID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((NGTORoof == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(NGTORoof));
            }
            if ((EXICFtRoof.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(EXICFtRoof.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((EXRfAreaFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(EXRfAreaFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(ExternalDS));
            if ((DSTotal.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((short)(DSTotal.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((EXtoVeg.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((short)(EXtoVeg.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((EXtoStreet.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((short)(EXtoStreet.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((EXtoPlanter.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((short)(EXtoPlanter.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((EXtoBioretention.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((short)(EXtoBioretention.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((EXtoDrywell.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((short)(EXtoDrywell.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((EXtoEcoroof.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((short)(EXtoEcoroof.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((DStoVeg.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((short)(DStoVeg.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((DStoStreet.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((short)(DStoStreet.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((DStoPlanter.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((short)(DStoPlanter.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((DStoBioretention.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((short)(DStoBioretention.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((DStoDrywell.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((short)(DStoDrywell.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((DStoEcoroof.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((short)(DStoEcoroof.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((DSUncontrollable.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((short)(DSUncontrollable.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[20].Value = ((bool)(LandscapeAvailable));
            if ((FractionDrained.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((double)(FractionDrained.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Difficulty.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((short)(Difficulty.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((RoofEffDisc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((double)(RoofEffDisc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Comments == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Comments));
            }
            this.Adapter.UpdateCommand.Parameters[25].Value = ((bool)(PlantersOK));
            this.Adapter.UpdateCommand.Parameters[26].Value = ((bool)(BioretentionOK));
            this.Adapter.UpdateCommand.Parameters[27].Value = ((bool)(BuildModelIC));
            if ((Source == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Source));
            }
            if ((AppendDate == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(AppendDate));
            }
            if ((ICID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((int)(ICID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Constructed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((int)(Constructed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_ParcelID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((int)(Original_ParcelID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_DivideID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((int)(Original_DivideID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_NGTORoof == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_NGTORoof));
            }
            if ((Original_EXICFtRoof.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((int)(Original_EXICFtRoof.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_EXRfAreaFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((int)(Original_EXRfAreaFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[44].Value = ((bool)(Original_ExternalDS));
            if ((Original_DSTotal.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((short)(Original_DSTotal.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_EXtoVeg.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((short)(Original_EXtoVeg.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_EXtoStreet.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((short)(Original_EXtoStreet.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((Original_EXtoPlanter.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[52].Value = ((short)(Original_EXtoPlanter.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((Original_EXtoBioretention.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[54].Value = ((short)(Original_EXtoBioretention.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((Original_EXtoDrywell.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[56].Value = ((short)(Original_EXtoDrywell.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((Original_EXtoEcoroof.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[58].Value = ((short)(Original_EXtoEcoroof.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((Original_DStoVeg.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[60].Value = ((short)(Original_DStoVeg.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((Original_DStoStreet.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[62].Value = ((short)(Original_DStoStreet.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((Original_DStoPlanter.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[64].Value = ((short)(Original_DStoPlanter.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((Original_DStoBioretention.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[66].Value = ((short)(Original_DStoBioretention.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            if ((Original_DStoDrywell.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[68].Value = ((short)(Original_DStoDrywell.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            if ((Original_DStoEcoroof.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[70].Value = ((short)(Original_DStoEcoroof.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            if ((Original_DSUncontrollable.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[72].Value = ((short)(Original_DSUncontrollable.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[74].Value = ((bool)(Original_LandscapeAvailable));
            if ((Original_FractionDrained.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[76].Value = ((double)(Original_FractionDrained.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            if ((Original_Difficulty.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[78].Value = ((short)(Original_Difficulty.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            if ((Original_RoofEffDisc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[79].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[80].Value = ((double)(Original_RoofEffDisc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[79].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            if ((Original_Comments == null)) {
                this.Adapter.UpdateCommand.Parameters[81].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[82].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[81].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[82].Value = ((string)(Original_Comments));
            }
            this.Adapter.UpdateCommand.Parameters[83].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[84].Value = ((bool)(Original_PlantersOK));
            this.Adapter.UpdateCommand.Parameters[85].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[86].Value = ((bool)(Original_BioretentionOK));
            this.Adapter.UpdateCommand.Parameters[87].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[88].Value = ((bool)(Original_BuildModelIC));
            if ((Original_Source == null)) {
                this.Adapter.UpdateCommand.Parameters[89].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[90].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[89].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[90].Value = ((string)(Original_Source));
            }
            if ((Original_AppendDate == null)) {
                this.Adapter.UpdateCommand.Parameters[91].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[92].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[91].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[92].Value = ((string)(Original_AppendDate));
            }
            if ((Original_ICID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[93].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[94].Value = ((int)(Original_ICID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[93].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[94].Value = global::System.DBNull.Value;
            }
            if ((Original_Constructed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[95].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[96].Value = ((int)(Original_Constructed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[95].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[96].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MdlStreetTargetsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MdlStreetTargetsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MdlStreetTargets";
            tableMapping.ColumnMappings.Add("MAPINFO_ID", "MAPINFO_ID");
            tableMapping.ColumnMappings.Add("NGTOStreet", "NGTOStreet");
            tableMapping.ColumnMappings.Add("SurfSCID", "SurfSCID");
            tableMapping.ColumnMappings.Add("Evaluation", "Evaluation");
            tableMapping.ColumnMappings.Add("Comments", "Comments");
            tableMapping.ColumnMappings.Add("Type", "Type");
            tableMapping.ColumnMappings.Add("StreetArea", "StreetArea");
            tableMapping.ColumnMappings.Add("FlowControl", "FlowControl");
            tableMapping.ColumnMappings.Add("Intersection", "Intersection");
            tableMapping.ColumnMappings.Add("Corner", "Corner");
            tableMapping.ColumnMappings.Add("Street1", "Street1");
            tableMapping.ColumnMappings.Add("Street1Area", "Street1Area");
            tableMapping.ColumnMappings.Add("Street1CExtVol", "Street1CExtVol");
            tableMapping.ColumnMappings.Add("Street1CExtFlow", "Street1CExtFlow");
            tableMapping.ColumnMappings.Add("Street2", "Street2");
            tableMapping.ColumnMappings.Add("Street2Area", "Street2Area");
            tableMapping.ColumnMappings.Add("Street2CExtVol", "Street2CExtVol");
            tableMapping.ColumnMappings.Add("Street2CExtFlow", "Street2CExtFlow");
            tableMapping.ColumnMappings.Add("OrificeArea", "OrificeArea");
            tableMapping.ColumnMappings.Add("CurbExtensionArea", "CurbExtensionArea");
            tableMapping.ColumnMappings.Add("PondingVol", "PondingVol");
            tableMapping.ColumnMappings.Add("CurbExtensionVol", "CurbExtensionVol");
            tableMapping.ColumnMappings.Add("Comments2", "Comments2");
            tableMapping.ColumnMappings.Add("TypeCode", "TypeCode");
            tableMapping.ColumnMappings.Add("XPSWMM_Name", "XPSWMM_Name");
            tableMapping.ColumnMappings.Add("XCoord", "XCoord");
            tableMapping.ColumnMappings.Add("YCoord", "YCoord");
            tableMapping.ColumnMappings.Add("BuildModelIC", "BuildModelIC");
            tableMapping.ColumnMappings.Add("Source", "Source");
            tableMapping.ColumnMappings.Add("AppendDate", "AppendDate");
            tableMapping.ColumnMappings.Add("NGTOStreet_2", "NGTOStreet_2");
            tableMapping.ColumnMappings.Add("ICID", "ICID");
            tableMapping.ColumnMappings.Add("Constructed", "Constructed");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `mst_ic_streettargets_ac` WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `" +
                "NGTOStreet` IS NULL) OR (`NGTOStreet` = ?)) AND ((? = 1 AND `SurfSCID` IS NULL) " +
                "OR (`SurfSCID` = ?)) AND ((? = 1 AND `Evaluation` IS NULL) OR (`Evaluation` = ?)" +
                ") AND ((? = 1 AND `Comments` IS NULL) OR (`Comments` = ?)) AND ((? = 1 AND `Type" +
                "` IS NULL) OR (`Type` = ?)) AND ((? = 1 AND `StreetArea` IS NULL) OR (`StreetAre" +
                "a` = ?)) AND ((? = 1 AND `FlowControl` IS NULL) OR (`FlowControl` = ?)) AND ((? " +
                "= 1 AND `Intersection` IS NULL) OR (`Intersection` = ?)) AND ((? = 1 AND `Corner" +
                "` IS NULL) OR (`Corner` = ?)) AND ((? = 1 AND `Street1` IS NULL) OR (`Street1` =" +
                " ?)) AND ((? = 1 AND `Street1Area` IS NULL) OR (`Street1Area` = ?)) AND ((? = 1 " +
                "AND `Street1CExtVol` IS NULL) OR (`Street1CExtVol` = ?)) AND ((? = 1 AND `Street" +
                "1CExtFlow` IS NULL) OR (`Street1CExtFlow` = ?)) AND ((? = 1 AND `Street2` IS NUL" +
                "L) OR (`Street2` = ?)) AND ((? = 1 AND `Street2Area` IS NULL) OR (`Street2Area` " +
                "= ?)) AND ((? = 1 AND `Street2CExtVol` IS NULL) OR (`Street2CExtVol` = ?)) AND (" +
                "(? = 1 AND `Street2CExtFlow` IS NULL) OR (`Street2CExtFlow` = ?)) AND ((? = 1 AN" +
                "D `OrificeArea` IS NULL) OR (`OrificeArea` = ?)) AND ((? = 1 AND `CurbExtensionA" +
                "rea` IS NULL) OR (`CurbExtensionArea` = ?)) AND ((? = 1 AND `PondingVol` IS NULL" +
                ") OR (`PondingVol` = ?)) AND ((? = 1 AND `CurbExtensionVol` IS NULL) OR (`CurbEx" +
                "tensionVol` = ?)) AND ((? = 1 AND `Comments2` IS NULL) OR (`Comments2` = ?)) AND" +
                " ((? = 1 AND `TypeCode` IS NULL) OR (`TypeCode` = ?)) AND ((? = 1 AND `XPSWMM_Na" +
                "me` IS NULL) OR (`XPSWMM_Name` = ?)) AND ((? = 1 AND `XCoord` IS NULL) OR (`XCoo" +
                "rd` = ?)) AND ((? = 1 AND `YCoord` IS NULL) OR (`YCoord` = ?)) AND ((? = 1 AND `" +
                "BuildModelIC` IS NULL) OR (`BuildModelIC` = ?)) AND ((? = 1 AND `Source` IS NULL" +
                ") OR (`Source` = ?)) AND ((? = 1 AND `AppendDate` IS NULL) OR (`AppendDate` = ?)" +
                ") AND ((? = 1 AND `NGTOStreet_2` IS NULL) OR (`NGTOStreet_2` = ?)) AND ((? = 1 A" +
                "ND `ICID` IS NULL) OR (`ICID` = ?)) AND ((? = 1 AND `Constructed` IS NULL) OR (`" +
                "Constructed` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTOStreet", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStreet", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTOStreet", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStreet", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SurfSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SurfSCID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SurfSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SurfSCID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Evaluation", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Evaluation", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Evaluation", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Evaluation", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Comments", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Type", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Type", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Type", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Type", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_StreetArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "StreetArea", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_StreetArea", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "StreetArea", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FlowControl", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FlowControl", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FlowControl", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FlowControl", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Intersection", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Intersection", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Intersection", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Intersection", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Corner", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Corner", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Corner", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Corner", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Street1", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Street1", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Street1Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1Area", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Street1Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1Area", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Street1CExtVol", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1CExtVol", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Street1CExtVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1CExtVol", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Street1CExtFlow", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1CExtFlow", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Street1CExtFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1CExtFlow", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Street2", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Street2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Street2Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2Area", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Street2Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2Area", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Street2CExtVol", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2CExtVol", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Street2CExtVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2CExtVol", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Street2CExtFlow", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2CExtFlow", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Street2CExtFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2CExtFlow", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OrificeArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrificeArea", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OrificeArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrificeArea", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_CurbExtensionArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CurbExtensionArea", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_CurbExtensionArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CurbExtensionArea", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PondingVol", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PondingVol", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PondingVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PondingVol", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_CurbExtensionVol", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CurbExtensionVol", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_CurbExtensionVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CurbExtensionVol", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Comments2", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments2", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Comments2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments2", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_TypeCode", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TypeCode", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_TypeCode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TypeCode", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_XPSWMM_Name", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XPSWMM_Name", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_XPSWMM_Name", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XPSWMM_Name", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_XCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XCoord", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_XCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XCoord", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_YCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "YCoord", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_YCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "YCoord", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BuildModelIC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Source", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AppendDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AppendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTOStreet_2", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStreet_2", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTOStreet_2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStreet_2", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `mst_ic_streettargets_ac` (`NGTOStreet`, `SurfSCID`, `Evaluation`, `Comments`, `Type`, `StreetArea`, `FlowControl`, `Intersection`, `Corner`, `Street1`, `Street1Area`, `Street1CExtVol`, `Street1CExtFlow`, `Street2`, `Street2Area`, `Street2CExtVol`, `Street2CExtFlow`, `OrificeArea`, `CurbExtensionArea`, `PondingVol`, `CurbExtensionVol`, `Comments2`, `TypeCode`, `XPSWMM_Name`, `XCoord`, `YCoord`, `BuildModelIC`, `Source`, `AppendDate`, `NGTOStreet_2`, `ICID`, `Constructed`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTOStreet", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStreet", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SurfSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SurfSCID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Evaluation", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Evaluation", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Type", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Type", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("StreetArea", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "StreetArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FlowControl", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FlowControl", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Intersection", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Intersection", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Corner", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Corner", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Street1", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Street1Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1Area", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Street1CExtVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1CExtVol", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Street1CExtFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1CExtFlow", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Street2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Street2Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2Area", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Street2CExtVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2CExtVol", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Street2CExtFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2CExtFlow", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OrificeArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrificeArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CurbExtensionArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CurbExtensionArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PondingVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PondingVol", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CurbExtensionVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CurbExtensionVol", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Comments2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments2", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("TypeCode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TypeCode", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("XPSWMM_Name", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XPSWMM_Name", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("XCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XCoord", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("YCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "YCoord", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AppendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTOStreet_2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStreet_2", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE `mst_ic_streettargets_ac` SET `NGTOStreet` = ?, `SurfSCID` = ?, `Evaluatio" +
                "n` = ?, `Comments` = ?, `Type` = ?, `StreetArea` = ?, `FlowControl` = ?, `Inters" +
                "ection` = ?, `Corner` = ?, `Street1` = ?, `Street1Area` = ?, `Street1CExtVol` = " +
                "?, `Street1CExtFlow` = ?, `Street2` = ?, `Street2Area` = ?, `Street2CExtVol` = ?" +
                ", `Street2CExtFlow` = ?, `OrificeArea` = ?, `CurbExtensionArea` = ?, `PondingVol" +
                "` = ?, `CurbExtensionVol` = ?, `Comments2` = ?, `TypeCode` = ?, `XPSWMM_Name` = " +
                "?, `XCoord` = ?, `YCoord` = ?, `BuildModelIC` = ?, `Source` = ?, `AppendDate` = " +
                "?, `NGTOStreet_2` = ?, `ICID` = ?, `Constructed` = ? WHERE ((`MAPINFO_ID` = ?) A" +
                "ND ((? = 1 AND `NGTOStreet` IS NULL) OR (`NGTOStreet` = ?)) AND ((? = 1 AND `Sur" +
                "fSCID` IS NULL) OR (`SurfSCID` = ?)) AND ((? = 1 AND `Evaluation` IS NULL) OR (`" +
                "Evaluation` = ?)) AND ((? = 1 AND `Comments` IS NULL) OR (`Comments` = ?)) AND (" +
                "(? = 1 AND `Type` IS NULL) OR (`Type` = ?)) AND ((? = 1 AND `StreetArea` IS NULL" +
                ") OR (`StreetArea` = ?)) AND ((? = 1 AND `FlowControl` IS NULL) OR (`FlowControl" +
                "` = ?)) AND ((? = 1 AND `Intersection` IS NULL) OR (`Intersection` = ?)) AND ((?" +
                " = 1 AND `Corner` IS NULL) OR (`Corner` = ?)) AND ((? = 1 AND `Street1` IS NULL)" +
                " OR (`Street1` = ?)) AND ((? = 1 AND `Street1Area` IS NULL) OR (`Street1Area` = " +
                "?)) AND ((? = 1 AND `Street1CExtVol` IS NULL) OR (`Street1CExtVol` = ?)) AND ((?" +
                " = 1 AND `Street1CExtFlow` IS NULL) OR (`Street1CExtFlow` = ?)) AND ((? = 1 AND " +
                "`Street2` IS NULL) OR (`Street2` = ?)) AND ((? = 1 AND `Street2Area` IS NULL) OR" +
                " (`Street2Area` = ?)) AND ((? = 1 AND `Street2CExtVol` IS NULL) OR (`Street2CExt" +
                "Vol` = ?)) AND ((? = 1 AND `Street2CExtFlow` IS NULL) OR (`Street2CExtFlow` = ?)" +
                ") AND ((? = 1 AND `OrificeArea` IS NULL) OR (`OrificeArea` = ?)) AND ((? = 1 AND" +
                " `CurbExtensionArea` IS NULL) OR (`CurbExtensionArea` = ?)) AND ((? = 1 AND `Pon" +
                "dingVol` IS NULL) OR (`PondingVol` = ?)) AND ((? = 1 AND `CurbExtensionVol` IS N" +
                "ULL) OR (`CurbExtensionVol` = ?)) AND ((? = 1 AND `Comments2` IS NULL) OR (`Comm" +
                "ents2` = ?)) AND ((? = 1 AND `TypeCode` IS NULL) OR (`TypeCode` = ?)) AND ((? = " +
                "1 AND `XPSWMM_Name` IS NULL) OR (`XPSWMM_Name` = ?)) AND ((? = 1 AND `XCoord` IS" +
                " NULL) OR (`XCoord` = ?)) AND ((? = 1 AND `YCoord` IS NULL) OR (`YCoord` = ?)) A" +
                "ND ((? = 1 AND `BuildModelIC` IS NULL) OR (`BuildModelIC` = ?)) AND ((? = 1 AND " +
                "`Source` IS NULL) OR (`Source` = ?)) AND ((? = 1 AND `AppendDate` IS NULL) OR (`" +
                "AppendDate` = ?)) AND ((? = 1 AND `NGTOStreet_2` IS NULL) OR (`NGTOStreet_2` = ?" +
                ")) AND ((? = 1 AND `ICID` IS NULL) OR (`ICID` = ?)) AND ((? = 1 AND `Constructed" +
                "` IS NULL) OR (`Constructed` = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTOStreet", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStreet", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SurfSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SurfSCID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Evaluation", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Evaluation", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Type", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Type", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("StreetArea", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "StreetArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FlowControl", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FlowControl", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Intersection", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Intersection", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Corner", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Corner", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Street1", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Street1Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1Area", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Street1CExtVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1CExtVol", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Street1CExtFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1CExtFlow", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Street2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Street2Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2Area", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Street2CExtVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2CExtVol", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Street2CExtFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2CExtFlow", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OrificeArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrificeArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CurbExtensionArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CurbExtensionArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PondingVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PondingVol", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CurbExtensionVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CurbExtensionVol", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Comments2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments2", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("TypeCode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TypeCode", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("XPSWMM_Name", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XPSWMM_Name", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("XCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XCoord", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("YCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "YCoord", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AppendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTOStreet_2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStreet_2", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTOStreet", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStreet", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTOStreet", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStreet", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SurfSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SurfSCID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SurfSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SurfSCID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Evaluation", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Evaluation", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Evaluation", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Evaluation", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Comments", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Type", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Type", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Type", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Type", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_StreetArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "StreetArea", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_StreetArea", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "StreetArea", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FlowControl", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FlowControl", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FlowControl", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FlowControl", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Intersection", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Intersection", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Intersection", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Intersection", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Corner", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Corner", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Corner", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Corner", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Street1", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Street1", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Street1Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1Area", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Street1Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1Area", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Street1CExtVol", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1CExtVol", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Street1CExtVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1CExtVol", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Street1CExtFlow", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1CExtFlow", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Street1CExtFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street1CExtFlow", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Street2", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Street2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Street2Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2Area", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Street2Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2Area", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Street2CExtVol", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2CExtVol", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Street2CExtVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2CExtVol", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Street2CExtFlow", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2CExtFlow", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Street2CExtFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Street2CExtFlow", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OrificeArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrificeArea", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OrificeArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrificeArea", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_CurbExtensionArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CurbExtensionArea", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_CurbExtensionArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CurbExtensionArea", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PondingVol", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PondingVol", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PondingVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PondingVol", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_CurbExtensionVol", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CurbExtensionVol", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_CurbExtensionVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CurbExtensionVol", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Comments2", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments2", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Comments2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comments2", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_TypeCode", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TypeCode", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_TypeCode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TypeCode", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_XPSWMM_Name", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XPSWMM_Name", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_XPSWMM_Name", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XPSWMM_Name", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_XCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XCoord", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_XCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XCoord", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_YCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "YCoord", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_YCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "YCoord", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BuildModelIC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Source", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Source", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AppendDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AppendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTOStreet_2", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStreet_2", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTOStreet_2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStreet_2", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.DataAccessConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[2];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        mst_ic_streettargets_ac.*\r\nFROM            mst_ic_streettargets_ac";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT        MAPINFO_ID, NGTOStreet, SurfSCID, Evaluation, Comments, Type, StreetArea, FlowControl, Intersection, Corner, Street1, Street1Area, Street1CExtVol, 
                         Street1CExtFlow, Street2, Street2Area, Street2CExtVol, Street2CExtFlow, OrificeArea, CurbExtensionArea, PondingVol, CurbExtensionVol, Comments2, 
                         TypeCode, XPSWMM_Name, XCoord, YCoord, BuildModelIC, Source, AppendDate, NGTOStreet_2, ICID, Constructed
FROM            mst_ic_streettargets_ac
WHERE        (Constructed > 0) OR
                         (BuildModelIC = 1)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ModelDataSet.MdlStreetTargetsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ModelDataSet.MdlStreetTargetsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ModelDataSet.MdlStreetTargetsDataTable dataTable = new ModelDataSet.MdlStreetTargetsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByAppliedICsOnly(ModelDataSet.MdlStreetTargetsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ModelDataSet.MdlStreetTargetsDataTable GetDataByAppliedICsOnly() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            ModelDataSet.MdlStreetTargetsDataTable dataTable = new ModelDataSet.MdlStreetTargetsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ModelDataSet.MdlStreetTargetsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ModelDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MdlStreetTargets");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_MAPINFO_ID, 
                    string Original_NGTOStreet, 
                    global::System.Nullable<int> Original_SurfSCID, 
                    string Original_Evaluation, 
                    string Original_Comments, 
                    string Original_Type, 
                    global::System.Nullable<double> Original_StreetArea, 
                    global::System.Nullable<double> Original_FlowControl, 
                    string Original_Intersection, 
                    string Original_Corner, 
                    string Original_Street1, 
                    global::System.Nullable<int> Original_Street1Area, 
                    global::System.Nullable<short> Original_Street1CExtVol, 
                    global::System.Nullable<double> Original_Street1CExtFlow, 
                    string Original_Street2, 
                    global::System.Nullable<int> Original_Street2Area, 
                    global::System.Nullable<short> Original_Street2CExtVol, 
                    global::System.Nullable<double> Original_Street2CExtFlow, 
                    global::System.Nullable<int> Original_OrificeArea, 
                    global::System.Nullable<int> Original_CurbExtensionArea, 
                    global::System.Nullable<short> Original_PondingVol, 
                    global::System.Nullable<short> Original_CurbExtensionVol, 
                    string Original_Comments2, 
                    string Original_TypeCode, 
                    string Original_XPSWMM_Name, 
                    global::System.Nullable<int> Original_XCoord, 
                    global::System.Nullable<int> Original_YCoord, 
                    bool Original_BuildModelIC, 
                    string Original_Source, 
                    string Original_AppendDate, 
                    string Original_NGTOStreet_2, 
                    global::System.Nullable<int> Original_ICID, 
                    global::System.Nullable<int> Original_Constructed) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_NGTOStreet == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_NGTOStreet));
            }
            if ((Original_SurfSCID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_SurfSCID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_Evaluation == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Evaluation));
            }
            if ((Original_Comments == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_Comments));
            }
            if ((Original_Type == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_Type));
            }
            if ((Original_StreetArea.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((double)(Original_StreetArea.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_FlowControl.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((double)(Original_FlowControl.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_Intersection == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_Intersection));
            }
            if ((Original_Corner == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_Corner));
            }
            if ((Original_Street1 == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_Street1));
            }
            if ((Original_Street1Area.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((int)(Original_Street1Area.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_Street1CExtVol.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((short)(Original_Street1CExtVol.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_Street1CExtFlow.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((double)(Original_Street1CExtFlow.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_Street2 == null)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((string)(Original_Street2));
            }
            if ((Original_Street2Area.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((int)(Original_Street2Area.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_Street2CExtVol.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((short)(Original_Street2CExtVol.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_Street2CExtFlow.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((double)(Original_Street2CExtFlow.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_OrificeArea.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((int)(Original_OrificeArea.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_CurbExtensionArea.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((int)(Original_CurbExtensionArea.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_PondingVol.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((short)(Original_PondingVol.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_CurbExtensionVol.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((short)(Original_CurbExtensionVol.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((Original_Comments2 == null)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((string)(Original_Comments2));
            }
            if ((Original_TypeCode == null)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((string)(Original_TypeCode));
            }
            if ((Original_XPSWMM_Name == null)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((string)(Original_XPSWMM_Name));
            }
            if ((Original_XCoord.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((int)(Original_XCoord.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((Original_YCoord.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((int)(Original_YCoord.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[54].Value = ((bool)(Original_BuildModelIC));
            if ((Original_Source == null)) {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[56].Value = ((string)(Original_Source));
            }
            if ((Original_AppendDate == null)) {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[58].Value = ((string)(Original_AppendDate));
            }
            if ((Original_NGTOStreet_2 == null)) {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[60].Value = ((string)(Original_NGTOStreet_2));
            }
            if ((Original_ICID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[62].Value = ((int)(Original_ICID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((Original_Constructed.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[64].Value = ((int)(Original_Constructed.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string NGTOStreet, 
                    global::System.Nullable<int> SurfSCID, 
                    string Evaluation, 
                    string Comments, 
                    string Type, 
                    global::System.Nullable<double> StreetArea, 
                    global::System.Nullable<double> FlowControl, 
                    string Intersection, 
                    string Corner, 
                    string Street1, 
                    global::System.Nullable<int> Street1Area, 
                    global::System.Nullable<short> Street1CExtVol, 
                    global::System.Nullable<double> Street1CExtFlow, 
                    string Street2, 
                    global::System.Nullable<int> Street2Area, 
                    global::System.Nullable<short> Street2CExtVol, 
                    global::System.Nullable<double> Street2CExtFlow, 
                    global::System.Nullable<int> OrificeArea, 
                    global::System.Nullable<int> CurbExtensionArea, 
                    global::System.Nullable<short> PondingVol, 
                    global::System.Nullable<short> CurbExtensionVol, 
                    string Comments2, 
                    string TypeCode, 
                    string XPSWMM_Name, 
                    global::System.Nullable<int> XCoord, 
                    global::System.Nullable<int> YCoord, 
                    bool BuildModelIC, 
                    string Source, 
                    string AppendDate, 
                    string NGTOStreet_2, 
                    global::System.Nullable<int> ICID, 
                    global::System.Nullable<int> Constructed) {
            if ((NGTOStreet == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(NGTOStreet));
            }
            if ((SurfSCID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(SurfSCID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Evaluation == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Evaluation));
            }
            if ((Comments == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Comments));
            }
            if ((Type == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Type));
            }
            if ((StreetArea.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(StreetArea.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((FlowControl.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(FlowControl.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Intersection == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Intersection));
            }
            if ((Corner == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Corner));
            }
            if ((Street1 == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(Street1));
            }
            if ((Street1Area.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(Street1Area.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Street1CExtVol.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((short)(Street1CExtVol.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Street1CExtFlow.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((double)(Street1CExtFlow.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Street2 == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(Street2));
            }
            if ((Street2Area.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((int)(Street2Area.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Street2CExtVol.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((short)(Street2CExtVol.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Street2CExtFlow.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((double)(Street2CExtFlow.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((OrificeArea.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((int)(OrificeArea.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((CurbExtensionArea.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((int)(CurbExtensionArea.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((PondingVol.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((short)(PondingVol.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((CurbExtensionVol.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((short)(CurbExtensionVol.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Comments2 == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(Comments2));
            }
            if ((TypeCode == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(TypeCode));
            }
            if ((XPSWMM_Name == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(XPSWMM_Name));
            }
            if ((XCoord.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((int)(XCoord.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((YCoord.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((int)(YCoord.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[26].Value = ((bool)(BuildModelIC));
            if ((Source == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(Source));
            }
            if ((AppendDate == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(AppendDate));
            }
            if ((NGTOStreet_2 == null)) {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = ((string)(NGTOStreet_2));
            }
            if ((ICID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((int)(ICID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Constructed.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((int)(Constructed.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string NGTOStreet, 
                    global::System.Nullable<int> SurfSCID, 
                    string Evaluation, 
                    string Comments, 
                    string Type, 
                    global::System.Nullable<double> StreetArea, 
                    global::System.Nullable<double> FlowControl, 
                    string Intersection, 
                    string Corner, 
                    string Street1, 
                    global::System.Nullable<int> Street1Area, 
                    global::System.Nullable<short> Street1CExtVol, 
                    global::System.Nullable<double> Street1CExtFlow, 
                    string Street2, 
                    global::System.Nullable<int> Street2Area, 
                    global::System.Nullable<short> Street2CExtVol, 
                    global::System.Nullable<double> Street2CExtFlow, 
                    global::System.Nullable<int> OrificeArea, 
                    global::System.Nullable<int> CurbExtensionArea, 
                    global::System.Nullable<short> PondingVol, 
                    global::System.Nullable<short> CurbExtensionVol, 
                    string Comments2, 
                    string TypeCode, 
                    string XPSWMM_Name, 
                    global::System.Nullable<int> XCoord, 
                    global::System.Nullable<int> YCoord, 
                    bool BuildModelIC, 
                    string Source, 
                    string AppendDate, 
                    string NGTOStreet_2, 
                    global::System.Nullable<int> ICID, 
                    global::System.Nullable<int> Constructed, 
                    int Original_MAPINFO_ID, 
                    string Original_NGTOStreet, 
                    global::System.Nullable<int> Original_SurfSCID, 
                    string Original_Evaluation, 
                    string Original_Comments, 
                    string Original_Type, 
                    global::System.Nullable<double> Original_StreetArea, 
                    global::System.Nullable<double> Original_FlowControl, 
                    string Original_Intersection, 
                    string Original_Corner, 
                    string Original_Street1, 
                    global::System.Nullable<int> Original_Street1Area, 
                    global::System.Nullable<short> Original_Street1CExtVol, 
                    global::System.Nullable<double> Original_Street1CExtFlow, 
                    string Original_Street2, 
                    global::System.Nullable<int> Original_Street2Area, 
                    global::System.Nullable<short> Original_Street2CExtVol, 
                    global::System.Nullable<double> Original_Street2CExtFlow, 
                    global::System.Nullable<int> Original_OrificeArea, 
                    global::System.Nullable<int> Original_CurbExtensionArea, 
                    global::System.Nullable<short> Original_PondingVol, 
                    global::System.Nullable<short> Original_CurbExtensionVol, 
                    string Original_Comments2, 
                    string Original_TypeCode, 
                    string Original_XPSWMM_Name, 
                    global::System.Nullable<int> Original_XCoord, 
                    global::System.Nullable<int> Original_YCoord, 
                    bool Original_BuildModelIC, 
                    string Original_Source, 
                    string Original_AppendDate, 
                    string Original_NGTOStreet_2, 
                    global::System.Nullable<int> Original_ICID, 
                    global::System.Nullable<int> Original_Constructed) {
            if ((NGTOStreet == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(NGTOStreet));
            }
            if ((SurfSCID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(SurfSCID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Evaluation == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Evaluation));
            }
            if ((Comments == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Comments));
            }
            if ((Type == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Type));
            }
            if ((StreetArea.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(StreetArea.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((FlowControl.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(FlowControl.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Intersection == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Intersection));
            }
            if ((Corner == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Corner));
            }
            if ((Street1 == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Street1));
            }
            if ((Street1Area.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Street1Area.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Street1CExtVol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((short)(Street1CExtVol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Street1CExtFlow.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((double)(Street1CExtFlow.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Street2 == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Street2));
            }
            if ((Street2Area.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Street2Area.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Street2CExtVol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((short)(Street2CExtVol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Street2CExtFlow.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((double)(Street2CExtFlow.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((OrificeArea.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(OrificeArea.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((CurbExtensionArea.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(CurbExtensionArea.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((PondingVol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((short)(PondingVol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((CurbExtensionVol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((short)(CurbExtensionVol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Comments2 == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Comments2));
            }
            if ((TypeCode == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(TypeCode));
            }
            if ((XPSWMM_Name == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(XPSWMM_Name));
            }
            if ((XCoord.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(XCoord.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((YCoord.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(YCoord.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[26].Value = ((bool)(BuildModelIC));
            if ((Source == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Source));
            }
            if ((AppendDate == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(AppendDate));
            }
            if ((NGTOStreet_2 == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(NGTOStreet_2));
            }
            if ((ICID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((int)(ICID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Constructed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((int)(Constructed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_NGTOStreet == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_NGTOStreet));
            }
            if ((Original_SurfSCID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((int)(Original_SurfSCID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_Evaluation == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_Evaluation));
            }
            if ((Original_Comments == null)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_Comments));
            }
            if ((Original_Type == null)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Original_Type));
            }
            if ((Original_StreetArea.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((double)(Original_StreetArea.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((Original_FlowControl.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((double)(Original_FlowControl.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_Intersection == null)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((string)(Original_Intersection));
            }
            if ((Original_Corner == null)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((string)(Original_Corner));
            }
            if ((Original_Street1 == null)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[52].Value = ((string)(Original_Street1));
            }
            if ((Original_Street1Area.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[54].Value = ((int)(Original_Street1Area.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((Original_Street1CExtVol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[56].Value = ((short)(Original_Street1CExtVol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((Original_Street1CExtFlow.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[58].Value = ((double)(Original_Street1CExtFlow.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((Original_Street2 == null)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[60].Value = ((string)(Original_Street2));
            }
            if ((Original_Street2Area.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[62].Value = ((int)(Original_Street2Area.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((Original_Street2CExtVol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[64].Value = ((short)(Original_Street2CExtVol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((Original_Street2CExtFlow.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[66].Value = ((double)(Original_Street2CExtFlow.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            if ((Original_OrificeArea.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[68].Value = ((int)(Original_OrificeArea.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            if ((Original_CurbExtensionArea.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[70].Value = ((int)(Original_CurbExtensionArea.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            if ((Original_PondingVol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[72].Value = ((short)(Original_PondingVol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            if ((Original_CurbExtensionVol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[74].Value = ((short)(Original_CurbExtensionVol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[74].Value = global::System.DBNull.Value;
            }
            if ((Original_Comments2 == null)) {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[76].Value = ((string)(Original_Comments2));
            }
            if ((Original_TypeCode == null)) {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[78].Value = ((string)(Original_TypeCode));
            }
            if ((Original_XPSWMM_Name == null)) {
                this.Adapter.UpdateCommand.Parameters[79].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[79].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[80].Value = ((string)(Original_XPSWMM_Name));
            }
            if ((Original_XCoord.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[81].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[82].Value = ((int)(Original_XCoord.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[81].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[82].Value = global::System.DBNull.Value;
            }
            if ((Original_YCoord.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[83].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[84].Value = ((int)(Original_YCoord.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[83].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[84].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[85].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[86].Value = ((bool)(Original_BuildModelIC));
            if ((Original_Source == null)) {
                this.Adapter.UpdateCommand.Parameters[87].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[88].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[87].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[88].Value = ((string)(Original_Source));
            }
            if ((Original_AppendDate == null)) {
                this.Adapter.UpdateCommand.Parameters[89].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[90].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[89].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[90].Value = ((string)(Original_AppendDate));
            }
            if ((Original_NGTOStreet_2 == null)) {
                this.Adapter.UpdateCommand.Parameters[91].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[92].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[91].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[92].Value = ((string)(Original_NGTOStreet_2));
            }
            if ((Original_ICID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[93].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[94].Value = ((int)(Original_ICID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[93].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[94].Value = global::System.DBNull.Value;
            }
            if ((Original_Constructed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[95].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[96].Value = ((int)(Original_Constructed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[95].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[96].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MdlPipXPTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MdlPipXPTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MdlPipXP";
            tableMapping.ColumnMappings.Add("MAPINFO_ID", "MAPINFO_ID");
            tableMapping.ColumnMappings.Add("xWtr", "xWtr");
            tableMapping.ColumnMappings.Add("xWMinD", "xWMinD");
            tableMapping.ColumnMappings.Add("xWMaxD", "xWMaxD");
            tableMapping.ColumnMappings.Add("pWtr", "pWtr");
            tableMapping.ColumnMappings.Add("pWtrMaxD", "pWtrMaxD");
            tableMapping.ColumnMappings.Add("pFt2Wtr", "pFt2Wtr");
            tableMapping.ColumnMappings.Add("xSewer", "xSewer");
            tableMapping.ColumnMappings.Add("xSwrMinD", "xSwrMinD");
            tableMapping.ColumnMappings.Add("xSwrMaxD", "xSwrMaxD");
            tableMapping.ColumnMappings.Add("pSewer", "pSewer");
            tableMapping.ColumnMappings.Add("pSwrMaxD", "pSwrMaxD");
            tableMapping.ColumnMappings.Add("pFt2Swr", "pFt2Swr");
            tableMapping.ColumnMappings.Add("xStrt", "xStrt");
            tableMapping.ColumnMappings.Add("xArt", "xArt");
            tableMapping.ColumnMappings.Add("xMJArt", "xMJArt");
            tableMapping.ColumnMappings.Add("xFrwy", "xFrwy");
            tableMapping.ColumnMappings.Add("pStrt", "pStrt");
            tableMapping.ColumnMappings.Add("pStrtTyp", "pStrtTyp");
            tableMapping.ColumnMappings.Add("pFt2Strt", "pFt2Strt");
            tableMapping.ColumnMappings.Add("pTraffic", "pTraffic");
            tableMapping.ColumnMappings.Add("uxCLx", "uxCLx");
            tableMapping.ColumnMappings.Add("uxFt2CLx", "uxFt2CLx");
            tableMapping.ColumnMappings.Add("dxCLx", "dxCLx");
            tableMapping.ColumnMappings.Add("dxFt2CLx", "dxFt2CLx");
            tableMapping.ColumnMappings.Add("xFiber", "xFiber");
            tableMapping.ColumnMappings.Add("pFiber", "pFiber");
            tableMapping.ColumnMappings.Add("pFt2Fiber", "pFt2Fiber");
            tableMapping.ColumnMappings.Add("xGas", "xGas");
            tableMapping.ColumnMappings.Add("pGas", "pGas");
            tableMapping.ColumnMappings.Add("pFt2Gas", "pFt2Gas");
            tableMapping.ColumnMappings.Add("xRail", "xRail");
            tableMapping.ColumnMappings.Add("pRail", "pRail");
            tableMapping.ColumnMappings.Add("pFt2Rail", "pFt2Rail");
            tableMapping.ColumnMappings.Add("xLRT", "xLRT");
            tableMapping.ColumnMappings.Add("pLRT", "pLRT");
            tableMapping.ColumnMappings.Add("pFt2LRT", "pFt2LRT");
            tableMapping.ColumnMappings.Add("xEmt", "xEmt");
            tableMapping.ColumnMappings.Add("pEmt", "pEmt");
            tableMapping.ColumnMappings.Add("pFt2Emt", "pFt2Emt");
            tableMapping.ColumnMappings.Add("xEzonC", "xEzonC");
            tableMapping.ColumnMappings.Add("xEzonP", "xEzonP");
            tableMapping.ColumnMappings.Add("xFtEzonC", "xFtEzonC");
            tableMapping.ColumnMappings.Add("xFtEzonP", "xFtEzonP");
            tableMapping.ColumnMappings.Add("xEzAreaC", "xEzAreaC");
            tableMapping.ColumnMappings.Add("xEzAreaP", "xEzAreaP");
            tableMapping.ColumnMappings.Add("uxMS4", "uxMS4");
            tableMapping.ColumnMappings.Add("uxUIC", "uxUIC");
            tableMapping.ColumnMappings.Add("uDepth", "uDepth");
            tableMapping.ColumnMappings.Add("dDepth", "dDepth");
            tableMapping.ColumnMappings.Add("xPipSlope", "xPipSlope");
            tableMapping.ColumnMappings.Add("xEcsi", "xEcsi");
            tableMapping.ColumnMappings.Add("xFt2Ecsi", "xFt2Ecsi");
            tableMapping.ColumnMappings.Add("xEcsiLen", "xEcsiLen");
            tableMapping.ColumnMappings.Add("xEcsiVol", "xEcsiVol");
            tableMapping.ColumnMappings.Add("xSchl", "xSchl");
            tableMapping.ColumnMappings.Add("xFt2Schl", "xFt2Schl");
            tableMapping.ColumnMappings.Add("xHosp", "xHosp");
            tableMapping.ColumnMappings.Add("xFt2Hosp", "xFt2Hosp");
            tableMapping.ColumnMappings.Add("xPol", "xPol");
            tableMapping.ColumnMappings.Add("xFt2Pol", "xFt2Pol");
            tableMapping.ColumnMappings.Add("xFire", "xFire");
            tableMapping.ColumnMappings.Add("xFt2Fire", "xFt2Fire");
            tableMapping.ColumnMappings.Add("xBldg", "xBldg");
            tableMapping.ColumnMappings.Add("xFt2Bldg", "xFt2Bldg");
            tableMapping.ColumnMappings.Add("xHyd", "xHyd");
            tableMapping.ColumnMappings.Add("xFt2Hyd", "xFt2Hyd");
            tableMapping.ColumnMappings.Add("HardArea", "HardArea");
            tableMapping.ColumnMappings.Add("MLINKID", "MLINKID");
            tableMapping.ColumnMappings.Add("USNODE", "USNODE");
            tableMapping.ColumnMappings.Add("DSNODE", "DSNODE");
            tableMapping.ColumnMappings.Add("COMPKEY", "COMPKEY");
            tableMapping.ColumnMappings.Add("xa", "xa");
            tableMapping.ColumnMappings.Add("ya", "ya");
            tableMapping.ColumnMappings.Add("xb", "xb");
            tableMapping.ColumnMappings.Add("yb", "yb");
            tableMapping.ColumnMappings.Add("Deg2N", "Deg2N");
            tableMapping.ColumnMappings.Add("pWtr2", "pWtr2");
            tableMapping.ColumnMappings.Add("pWtr4", "pWtr4");
            tableMapping.ColumnMappings.Add("pWtr6", "pWtr6");
            tableMapping.ColumnMappings.Add("pWtr8", "pWtr8");
            tableMapping.ColumnMappings.Add("pWtr10", "pWtr10");
            tableMapping.ColumnMappings.Add("pWtr12", "pWtr12");
            tableMapping.ColumnMappings.Add("pSwr2", "pSwr2");
            tableMapping.ColumnMappings.Add("pSwr4", "pSwr4");
            tableMapping.ColumnMappings.Add("pSwr6", "pSwr6");
            tableMapping.ColumnMappings.Add("pSwr8", "pSwr8");
            tableMapping.ColumnMappings.Add("pSwr10", "pSwr10");
            tableMapping.ColumnMappings.Add("gSlope", "gSlope");
            tableMapping.ColumnMappings.Add("xLUST", "xLUST");
            tableMapping.ColumnMappings.Add("xFt2LUST", "xFt2LUST");
            tableMapping.ColumnMappings.Add("xpDeg2N", "xpDeg2N");
            tableMapping.ColumnMappings.Add("INT01", "INT01");
            tableMapping.ColumnMappings.Add("INT02", "INT02");
            tableMapping.ColumnMappings.Add("FLT01", "FLT01");
            tableMapping.ColumnMappings.Add("FLT02", "FLT02");
            tableMapping.ColumnMappings.Add("TXT50", "TXT50");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `mdl_pipxp_ac` (`MLINKID`, `USNODE`, `DSNODE`, `COMPKEY`, `xa`, `ya`, `xb`, `yb`, `Deg2N`, `xWtr`, `xWMinD`, `xWMaxD`, `pWtr`, `pWtr2`, `pWtr4`, `pWtr6`, `pWtr8`, `pWtr10`, `pWtr12`, `pWtrMaxD`, `pFt2Wtr`, `xSewer`, `xSwrMinD`, `xSwrMaxD`, `pSewer`, `pSwr2`, `pSwr4`, `pSwr6`, `pSwr8`, `pSwr10`, `pSwrMaxD`, `pFt2Swr`, `xStrt`, `xArt`, `xMJArt`, `xFrwy`, `pStrt`, `pStrtTyp`, `pFt2Strt`, `pTraffic`, `uxCLx`, `uxFt2CLx`, `dxCLx`, `dxFt2CLx`, `xFiber`, `pFiber`, `pFt2Fiber`, `xGas`, `pGas`, `pFt2Gas`, `xRail`, `pRail`, `pFt2Rail`, `xLRT`, `pLRT`, `pFt2LRT`, `xEmt`, `pEmt`, `pFt2Emt`, `xEzonC`, `xEzonP`, `xFtEzonC`, `xFtEzonP`, `xEzAreaC`, `xEzAreaP`, `uxMS4`, `uxUIC`, `uDepth`, `dDepth`, `xPipSlope`, `gSlope`, `xEcsi`, `xFt2Ecsi`, `xEcsiLen`, `xEcsiVol`, `xLUST`, `xFt2LUST`, `xSchl`, `xFt2Schl`, `xHosp`, `xFt2Hosp`, `xPol`, `xFt2Pol`, `xFire`, `xFt2Fire`, `xBldg`, `xFt2Bldg`, `xHyd`, `xFt2Hyd`, `HardArea`, `xpDeg2N`, `INT01`, `INT02`, `FLT01`, `FLT02`, `TXT50`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("MLINKID", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MLINKID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("USNODE", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "USNODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DSNODE", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSNODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("COMPKEY", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "COMPKEY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xa", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xa", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ya", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ya", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xb", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xb", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("yb", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "yb", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Deg2N", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Deg2N", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xWtr", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xWtr", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xWMinD", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xWMinD", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xWMaxD", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xWMaxD", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pWtr", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pWtr", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pWtr2", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pWtr2", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pWtr4", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pWtr4", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pWtr6", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pWtr6", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pWtr8", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pWtr8", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pWtr10", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pWtr10", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pWtr12", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pWtr12", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pWtrMaxD", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pWtrMaxD", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pFt2Wtr", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pFt2Wtr", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xSewer", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xSewer", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xSwrMinD", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xSwrMinD", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xSwrMaxD", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xSwrMaxD", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pSewer", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pSewer", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pSwr2", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pSwr2", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pSwr4", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pSwr4", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pSwr6", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pSwr6", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pSwr8", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pSwr8", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pSwr10", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pSwr10", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pSwrMaxD", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pSwrMaxD", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pFt2Swr", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pFt2Swr", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xStrt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xStrt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xArt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xArt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xMJArt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xMJArt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xFrwy", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xFrwy", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pStrt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pStrt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pStrtTyp", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pStrtTyp", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pFt2Strt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pFt2Strt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pTraffic", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pTraffic", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("uxCLx", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "uxCLx", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("uxFt2CLx", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "uxFt2CLx", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dxCLx", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dxCLx", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dxFt2CLx", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dxFt2CLx", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xFiber", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xFiber", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pFiber", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pFiber", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pFt2Fiber", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pFt2Fiber", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xGas", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xGas", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pGas", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pGas", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pFt2Gas", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pFt2Gas", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xRail", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xRail", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pRail", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pRail", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pFt2Rail", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pFt2Rail", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xLRT", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xLRT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pLRT", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pLRT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pFt2LRT", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pFt2LRT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xEmt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xEmt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pEmt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pEmt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pFt2Emt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pFt2Emt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xEzonC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xEzonC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xEzonP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xEzonP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xFtEzonC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xFtEzonC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xFtEzonP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xFtEzonP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xEzAreaC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xEzAreaC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xEzAreaP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xEzAreaP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("uxMS4", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "uxMS4", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("uxUIC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "uxUIC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("uDepth", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "uDepth", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dDepth", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dDepth", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xPipSlope", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xPipSlope", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("gSlope", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "gSlope", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xEcsi", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xEcsi", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xFt2Ecsi", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xFt2Ecsi", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xEcsiLen", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xEcsiLen", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xEcsiVol", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xEcsiVol", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xLUST", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xLUST", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xFt2LUST", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xFt2LUST", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xSchl", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xSchl", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xFt2Schl", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xFt2Schl", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xHosp", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xHosp", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xFt2Hosp", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xFt2Hosp", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xPol", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xPol", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xFt2Pol", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xFt2Pol", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xFire", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xFire", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xFt2Fire", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xFt2Fire", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xBldg", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xBldg", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xFt2Bldg", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xFt2Bldg", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xHyd", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xHyd", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xFt2Hyd", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xFt2Hyd", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("HardArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HardArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xpDeg2N", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xpDeg2N", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("INT01", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "INT01", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("INT02", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "INT02", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FLT01", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FLT01", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FLT02", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FLT02", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("TXT50", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TXT50", global::System.Data.DataRowVersion.Current, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\\Development\\ALD_EX\\mdbs\\DataAcces" +
                "s.mdb";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     mdl_pipxp_ac.*\r\nFROM         mdl_pipxp_ac";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ModelDataSet.MdlPipXPDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ModelDataSet.MdlPipXPDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ModelDataSet.MdlPipXPDataTable dataTable = new ModelDataSet.MdlPipXPDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ModelDataSet.MdlPipXPDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ModelDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MdlPipXP");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<double> MLINKID, 
                    string USNODE, 
                    string DSNODE, 
                    global::System.Nullable<double> COMPKEY, 
                    global::System.Nullable<double> xa, 
                    global::System.Nullable<double> ya, 
                    global::System.Nullable<double> xb, 
                    global::System.Nullable<double> yb, 
                    global::System.Nullable<double> Deg2N, 
                    global::System.Nullable<int> xWtr, 
                    global::System.Nullable<int> xWMinD, 
                    global::System.Nullable<int> xWMaxD, 
                    global::System.Nullable<int> pWtr, 
                    global::System.Nullable<double> pWtr2, 
                    global::System.Nullable<double> pWtr4, 
                    global::System.Nullable<double> pWtr6, 
                    global::System.Nullable<double> pWtr8, 
                    global::System.Nullable<double> pWtr10, 
                    global::System.Nullable<double> pWtr12, 
                    global::System.Nullable<int> pWtrMaxD, 
                    global::System.Nullable<int> pFt2Wtr, 
                    global::System.Nullable<int> xSewer, 
                    global::System.Nullable<int> xSwrMinD, 
                    global::System.Nullable<int> xSwrMaxD, 
                    global::System.Nullable<int> pSewer, 
                    global::System.Nullable<double> pSwr2, 
                    global::System.Nullable<double> pSwr4, 
                    global::System.Nullable<double> pSwr6, 
                    global::System.Nullable<double> pSwr8, 
                    global::System.Nullable<double> pSwr10, 
                    global::System.Nullable<int> pSwrMaxD, 
                    global::System.Nullable<int> pFt2Swr, 
                    global::System.Nullable<int> xStrt, 
                    global::System.Nullable<int> xArt, 
                    global::System.Nullable<int> xMJArt, 
                    global::System.Nullable<int> xFrwy, 
                    global::System.Nullable<int> pStrt, 
                    global::System.Nullable<int> pStrtTyp, 
                    global::System.Nullable<int> pFt2Strt, 
                    global::System.Nullable<int> pTraffic, 
                    global::System.Nullable<int> uxCLx, 
                    global::System.Nullable<int> uxFt2CLx, 
                    global::System.Nullable<int> dxCLx, 
                    global::System.Nullable<int> dxFt2CLx, 
                    global::System.Nullable<int> xFiber, 
                    global::System.Nullable<int> pFiber, 
                    global::System.Nullable<int> pFt2Fiber, 
                    global::System.Nullable<int> xGas, 
                    global::System.Nullable<int> pGas, 
                    global::System.Nullable<int> pFt2Gas, 
                    global::System.Nullable<int> xRail, 
                    global::System.Nullable<int> pRail, 
                    global::System.Nullable<int> pFt2Rail, 
                    global::System.Nullable<int> xLRT, 
                    global::System.Nullable<int> pLRT, 
                    global::System.Nullable<int> pFt2LRT, 
                    global::System.Nullable<int> xEmt, 
                    global::System.Nullable<int> pEmt, 
                    global::System.Nullable<int> pFt2Emt, 
                    global::System.Nullable<int> xEzonC, 
                    global::System.Nullable<int> xEzonP, 
                    global::System.Nullable<int> xFtEzonC, 
                    global::System.Nullable<int> xFtEzonP, 
                    global::System.Nullable<int> xEzAreaC, 
                    global::System.Nullable<int> xEzAreaP, 
                    global::System.Nullable<int> uxMS4, 
                    global::System.Nullable<int> uxUIC, 
                    global::System.Nullable<double> uDepth, 
                    global::System.Nullable<double> dDepth, 
                    global::System.Nullable<double> xPipSlope, 
                    global::System.Nullable<double> gSlope, 
                    global::System.Nullable<int> xEcsi, 
                    global::System.Nullable<int> xFt2Ecsi, 
                    global::System.Nullable<int> xEcsiLen, 
                    global::System.Nullable<int> xEcsiVol, 
                    global::System.Nullable<int> xLUST, 
                    global::System.Nullable<int> xFt2LUST, 
                    global::System.Nullable<int> xSchl, 
                    global::System.Nullable<int> xFt2Schl, 
                    global::System.Nullable<int> xHosp, 
                    global::System.Nullable<int> xFt2Hosp, 
                    global::System.Nullable<int> xPol, 
                    global::System.Nullable<int> xFt2Pol, 
                    global::System.Nullable<int> xFire, 
                    global::System.Nullable<int> xFt2Fire, 
                    global::System.Nullable<int> xBldg, 
                    global::System.Nullable<int> xFt2Bldg, 
                    global::System.Nullable<int> xHyd, 
                    global::System.Nullable<int> xFt2Hyd, 
                    global::System.Nullable<int> HardArea, 
                    global::System.Nullable<double> xpDeg2N, 
                    global::System.Nullable<int> INT01, 
                    global::System.Nullable<int> INT02, 
                    global::System.Nullable<double> FLT01, 
                    global::System.Nullable<double> FLT02, 
                    string TXT50) {
            if ((MLINKID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((double)(MLINKID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((USNODE == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(USNODE));
            }
            if ((DSNODE == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(DSNODE));
            }
            if ((COMPKEY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(COMPKEY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((xa.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(xa.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((ya.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(ya.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((xb.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(xb.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((yb.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(yb.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Deg2N.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(Deg2N.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((xWtr.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(xWtr.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((xWMinD.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(xWMinD.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((xWMaxD.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(xWMaxD.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((pWtr.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((int)(pWtr.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((pWtr2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((double)(pWtr2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((pWtr4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((double)(pWtr4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((pWtr6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((double)(pWtr6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((pWtr8.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((double)(pWtr8.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((pWtr10.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((double)(pWtr10.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((pWtr12.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((double)(pWtr12.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((pWtrMaxD.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((int)(pWtrMaxD.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((pFt2Wtr.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((int)(pFt2Wtr.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((xSewer.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((int)(xSewer.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((xSwrMinD.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((int)(xSwrMinD.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((xSwrMaxD.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((int)(xSwrMaxD.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((pSewer.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((int)(pSewer.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((pSwr2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((double)(pSwr2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((pSwr4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((double)(pSwr4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((pSwr6.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[27].Value = ((double)(pSwr6.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((pSwr8.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[28].Value = ((double)(pSwr8.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((pSwr10.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[29].Value = ((double)(pSwr10.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((pSwrMaxD.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((int)(pSwrMaxD.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((pFt2Swr.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((int)(pFt2Swr.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((xStrt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[32].Value = ((int)(xStrt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((xArt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[33].Value = ((int)(xArt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((xMJArt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[34].Value = ((int)(xMJArt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((xFrwy.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[35].Value = ((int)(xFrwy.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((pStrt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[36].Value = ((int)(pStrt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((pStrtTyp.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[37].Value = ((int)(pStrtTyp.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((pFt2Strt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[38].Value = ((int)(pFt2Strt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((pTraffic.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[39].Value = ((int)(pTraffic.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((uxCLx.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[40].Value = ((int)(uxCLx.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((uxFt2CLx.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[41].Value = ((int)(uxFt2CLx.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((dxCLx.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[42].Value = ((int)(dxCLx.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((dxFt2CLx.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[43].Value = ((int)(dxFt2CLx.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((xFiber.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[44].Value = ((int)(xFiber.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((pFiber.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[45].Value = ((int)(pFiber.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((pFt2Fiber.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[46].Value = ((int)(pFt2Fiber.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((xGas.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[47].Value = ((int)(xGas.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            if ((pGas.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[48].Value = ((int)(pGas.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((pFt2Gas.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[49].Value = ((int)(pFt2Gas.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            if ((xRail.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[50].Value = ((int)(xRail.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((pRail.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[51].Value = ((int)(pRail.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((pFt2Rail.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[52].Value = ((int)(pFt2Rail.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((xLRT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[53].Value = ((int)(xLRT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            if ((pLRT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[54].Value = ((int)(pLRT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((pFt2LRT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[55].Value = ((int)(pFt2LRT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            if ((xEmt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[56].Value = ((int)(xEmt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((pEmt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[57].Value = ((int)(pEmt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            if ((pFt2Emt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[58].Value = ((int)(pFt2Emt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((xEzonC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[59].Value = ((int)(xEzonC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            if ((xEzonP.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[60].Value = ((int)(xEzonP.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((xFtEzonC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[61].Value = ((int)(xFtEzonC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            if ((xFtEzonP.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[62].Value = ((int)(xFtEzonP.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((xEzAreaC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[63].Value = ((int)(xEzAreaC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            if ((xEzAreaP.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[64].Value = ((int)(xEzAreaP.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((uxMS4.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[65].Value = ((int)(uxMS4.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            if ((uxUIC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[66].Value = ((int)(uxUIC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            if ((uDepth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[67].Value = ((double)(uDepth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            if ((dDepth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[68].Value = ((double)(dDepth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            if ((xPipSlope.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[69].Value = ((double)(xPipSlope.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            if ((gSlope.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[70].Value = ((double)(gSlope.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            if ((xEcsi.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[71].Value = ((int)(xEcsi.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            if ((xFt2Ecsi.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[72].Value = ((int)(xFt2Ecsi.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            if ((xEcsiLen.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[73].Value = ((int)(xEcsiLen.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[73].Value = global::System.DBNull.Value;
            }
            if ((xEcsiVol.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[74].Value = ((int)(xEcsiVol.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[74].Value = global::System.DBNull.Value;
            }
            if ((xLUST.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[75].Value = ((int)(xLUST.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[75].Value = global::System.DBNull.Value;
            }
            if ((xFt2LUST.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[76].Value = ((int)(xFt2LUST.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            if ((xSchl.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[77].Value = ((int)(xSchl.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[77].Value = global::System.DBNull.Value;
            }
            if ((xFt2Schl.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[78].Value = ((int)(xFt2Schl.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            if ((xHosp.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[79].Value = ((int)(xHosp.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[79].Value = global::System.DBNull.Value;
            }
            if ((xFt2Hosp.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[80].Value = ((int)(xFt2Hosp.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            if ((xPol.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[81].Value = ((int)(xPol.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[81].Value = global::System.DBNull.Value;
            }
            if ((xFt2Pol.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[82].Value = ((int)(xFt2Pol.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[82].Value = global::System.DBNull.Value;
            }
            if ((xFire.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[83].Value = ((int)(xFire.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[83].Value = global::System.DBNull.Value;
            }
            if ((xFt2Fire.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[84].Value = ((int)(xFt2Fire.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[84].Value = global::System.DBNull.Value;
            }
            if ((xBldg.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[85].Value = ((int)(xBldg.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[85].Value = global::System.DBNull.Value;
            }
            if ((xFt2Bldg.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[86].Value = ((int)(xFt2Bldg.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[86].Value = global::System.DBNull.Value;
            }
            if ((xHyd.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[87].Value = ((int)(xHyd.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[87].Value = global::System.DBNull.Value;
            }
            if ((xFt2Hyd.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[88].Value = ((int)(xFt2Hyd.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[88].Value = global::System.DBNull.Value;
            }
            if ((HardArea.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[89].Value = ((int)(HardArea.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[89].Value = global::System.DBNull.Value;
            }
            if ((xpDeg2N.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[90].Value = ((double)(xpDeg2N.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[90].Value = global::System.DBNull.Value;
            }
            if ((INT01.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[91].Value = ((int)(INT01.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[91].Value = global::System.DBNull.Value;
            }
            if ((INT02.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[92].Value = ((int)(INT02.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[92].Value = global::System.DBNull.Value;
            }
            if ((FLT01.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[93].Value = ((double)(FLT01.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[93].Value = global::System.DBNull.Value;
            }
            if ((FLT02.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[94].Value = ((double)(FLT02.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[94].Value = global::System.DBNull.Value;
            }
            if ((TXT50 == null)) {
                this.Adapter.InsertCommand.Parameters[95].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[95].Value = ((string)(TXT50));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591
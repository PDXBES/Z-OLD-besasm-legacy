//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace SystemsAnalysis.ModelConstruction.AlternativesBuilder {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class AltEngineConfiguration : DataSet {
        
        private ProgramSettingsDataTable tableProgramSettings;
        
        private BaseModelComponentsDataTable tableBaseModelComponents;
        
        private BaseDirectoryDataTable tableBaseDirectory;
        
        private BaseFileDataTable tableBaseFile;
        
        private FileHistoryDataTable tableFileHistory;
        
        private OutputModelDataTable tableOutputModel;
        
        private BaseModelDataTable tableBaseModel;
        
        private MapBasicFrameworkDataTable tableMapBasicFramework;
        
        private LibraryDataTable tableLibrary;
        
        private GlobalVariableDataTable tableGlobalVariable;
        
        private FunctionDataTable tableFunction;
        
        private DataRelation relationBaseModelComponents_BaseDirectory;
        
        private DataRelation relationBaseModelComponents_BaseFile;
        
        private DataRelation relationFileHistory_OutputModel;
        
        private DataRelation relationFileHistory_BaseModel;
        
        private DataRelation relationLibrary_GlobalVariable;
        
        private DataRelation relationLibrary_Function;
        
        private DataRelation relationMapBasicFramework_Library;
        
        public AltEngineConfiguration() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected AltEngineConfiguration(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ProgramSettings"] != null)) {
                    this.Tables.Add(new ProgramSettingsDataTable(ds.Tables["ProgramSettings"]));
                }
                if ((ds.Tables["BaseModelComponents"] != null)) {
                    this.Tables.Add(new BaseModelComponentsDataTable(ds.Tables["BaseModelComponents"]));
                }
                if ((ds.Tables["BaseDirectory"] != null)) {
                    this.Tables.Add(new BaseDirectoryDataTable(ds.Tables["BaseDirectory"]));
                }
                if ((ds.Tables["BaseFile"] != null)) {
                    this.Tables.Add(new BaseFileDataTable(ds.Tables["BaseFile"]));
                }
                if ((ds.Tables["FileHistory"] != null)) {
                    this.Tables.Add(new FileHistoryDataTable(ds.Tables["FileHistory"]));
                }
                if ((ds.Tables["OutputModel"] != null)) {
                    this.Tables.Add(new OutputModelDataTable(ds.Tables["OutputModel"]));
                }
                if ((ds.Tables["BaseModel"] != null)) {
                    this.Tables.Add(new BaseModelDataTable(ds.Tables["BaseModel"]));
                }
                if ((ds.Tables["MapBasicFramework"] != null)) {
                    this.Tables.Add(new MapBasicFrameworkDataTable(ds.Tables["MapBasicFramework"]));
                }
                if ((ds.Tables["Library"] != null)) {
                    this.Tables.Add(new LibraryDataTable(ds.Tables["Library"]));
                }
                if ((ds.Tables["GlobalVariable"] != null)) {
                    this.Tables.Add(new GlobalVariableDataTable(ds.Tables["GlobalVariable"]));
                }
                if ((ds.Tables["Function"] != null)) {
                    this.Tables.Add(new FunctionDataTable(ds.Tables["Function"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProgramSettingsDataTable ProgramSettings {
            get {
                return this.tableProgramSettings;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BaseModelComponentsDataTable BaseModelComponents {
            get {
                return this.tableBaseModelComponents;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BaseDirectoryDataTable BaseDirectory {
            get {
                return this.tableBaseDirectory;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BaseFileDataTable BaseFile {
            get {
                return this.tableBaseFile;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FileHistoryDataTable FileHistory {
            get {
                return this.tableFileHistory;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OutputModelDataTable OutputModel {
            get {
                return this.tableOutputModel;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BaseModelDataTable BaseModel {
            get {
                return this.tableBaseModel;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MapBasicFrameworkDataTable MapBasicFramework {
            get {
                return this.tableMapBasicFramework;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LibraryDataTable Library {
            get {
                return this.tableLibrary;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GlobalVariableDataTable GlobalVariable {
            get {
                return this.tableGlobalVariable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FunctionDataTable Function {
            get {
                return this.tableFunction;
            }
        }
        
        public override DataSet Clone() {
            AltEngineConfiguration cln = ((AltEngineConfiguration)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ProgramSettings"] != null)) {
                this.Tables.Add(new ProgramSettingsDataTable(ds.Tables["ProgramSettings"]));
            }
            if ((ds.Tables["BaseModelComponents"] != null)) {
                this.Tables.Add(new BaseModelComponentsDataTable(ds.Tables["BaseModelComponents"]));
            }
            if ((ds.Tables["BaseDirectory"] != null)) {
                this.Tables.Add(new BaseDirectoryDataTable(ds.Tables["BaseDirectory"]));
            }
            if ((ds.Tables["BaseFile"] != null)) {
                this.Tables.Add(new BaseFileDataTable(ds.Tables["BaseFile"]));
            }
            if ((ds.Tables["FileHistory"] != null)) {
                this.Tables.Add(new FileHistoryDataTable(ds.Tables["FileHistory"]));
            }
            if ((ds.Tables["OutputModel"] != null)) {
                this.Tables.Add(new OutputModelDataTable(ds.Tables["OutputModel"]));
            }
            if ((ds.Tables["BaseModel"] != null)) {
                this.Tables.Add(new BaseModelDataTable(ds.Tables["BaseModel"]));
            }
            if ((ds.Tables["MapBasicFramework"] != null)) {
                this.Tables.Add(new MapBasicFrameworkDataTable(ds.Tables["MapBasicFramework"]));
            }
            if ((ds.Tables["Library"] != null)) {
                this.Tables.Add(new LibraryDataTable(ds.Tables["Library"]));
            }
            if ((ds.Tables["GlobalVariable"] != null)) {
                this.Tables.Add(new GlobalVariableDataTable(ds.Tables["GlobalVariable"]));
            }
            if ((ds.Tables["Function"] != null)) {
                this.Tables.Add(new FunctionDataTable(ds.Tables["Function"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableProgramSettings = ((ProgramSettingsDataTable)(this.Tables["ProgramSettings"]));
            if ((this.tableProgramSettings != null)) {
                this.tableProgramSettings.InitVars();
            }
            this.tableBaseModelComponents = ((BaseModelComponentsDataTable)(this.Tables["BaseModelComponents"]));
            if ((this.tableBaseModelComponents != null)) {
                this.tableBaseModelComponents.InitVars();
            }
            this.tableBaseDirectory = ((BaseDirectoryDataTable)(this.Tables["BaseDirectory"]));
            if ((this.tableBaseDirectory != null)) {
                this.tableBaseDirectory.InitVars();
            }
            this.tableBaseFile = ((BaseFileDataTable)(this.Tables["BaseFile"]));
            if ((this.tableBaseFile != null)) {
                this.tableBaseFile.InitVars();
            }
            this.tableFileHistory = ((FileHistoryDataTable)(this.Tables["FileHistory"]));
            if ((this.tableFileHistory != null)) {
                this.tableFileHistory.InitVars();
            }
            this.tableOutputModel = ((OutputModelDataTable)(this.Tables["OutputModel"]));
            if ((this.tableOutputModel != null)) {
                this.tableOutputModel.InitVars();
            }
            this.tableBaseModel = ((BaseModelDataTable)(this.Tables["BaseModel"]));
            if ((this.tableBaseModel != null)) {
                this.tableBaseModel.InitVars();
            }
            this.tableMapBasicFramework = ((MapBasicFrameworkDataTable)(this.Tables["MapBasicFramework"]));
            if ((this.tableMapBasicFramework != null)) {
                this.tableMapBasicFramework.InitVars();
            }
            this.tableLibrary = ((LibraryDataTable)(this.Tables["Library"]));
            if ((this.tableLibrary != null)) {
                this.tableLibrary.InitVars();
            }
            this.tableGlobalVariable = ((GlobalVariableDataTable)(this.Tables["GlobalVariable"]));
            if ((this.tableGlobalVariable != null)) {
                this.tableGlobalVariable.InitVars();
            }
            this.tableFunction = ((FunctionDataTable)(this.Tables["Function"]));
            if ((this.tableFunction != null)) {
                this.tableFunction.InitVars();
            }
            this.relationBaseModelComponents_BaseDirectory = this.Relations["BaseModelComponents_BaseDirectory"];
            this.relationBaseModelComponents_BaseFile = this.Relations["BaseModelComponents_BaseFile"];
            this.relationFileHistory_OutputModel = this.Relations["FileHistory_OutputModel"];
            this.relationFileHistory_BaseModel = this.Relations["FileHistory_BaseModel"];
            this.relationLibrary_GlobalVariable = this.Relations["Library_GlobalVariable"];
            this.relationLibrary_Function = this.Relations["Library_Function"];
            this.relationMapBasicFramework_Library = this.Relations["MapBasicFramework_Library"];
        }
        
        private void InitClass() {
            this.DataSetName = "AltEngineConfiguration";
            this.Prefix = "";
            this.Namespace = "SystemsAnalysis.ModelConstruction.AlternativesBuilder.EngineConfiguration";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableProgramSettings = new ProgramSettingsDataTable();
            this.Tables.Add(this.tableProgramSettings);
            this.tableBaseModelComponents = new BaseModelComponentsDataTable();
            this.Tables.Add(this.tableBaseModelComponents);
            this.tableBaseDirectory = new BaseDirectoryDataTable();
            this.Tables.Add(this.tableBaseDirectory);
            this.tableBaseFile = new BaseFileDataTable();
            this.Tables.Add(this.tableBaseFile);
            this.tableFileHistory = new FileHistoryDataTable();
            this.Tables.Add(this.tableFileHistory);
            this.tableOutputModel = new OutputModelDataTable();
            this.Tables.Add(this.tableOutputModel);
            this.tableBaseModel = new BaseModelDataTable();
            this.Tables.Add(this.tableBaseModel);
            this.tableMapBasicFramework = new MapBasicFrameworkDataTable();
            this.Tables.Add(this.tableMapBasicFramework);
            this.tableLibrary = new LibraryDataTable();
            this.Tables.Add(this.tableLibrary);
            this.tableGlobalVariable = new GlobalVariableDataTable();
            this.Tables.Add(this.tableGlobalVariable);
            this.tableFunction = new FunctionDataTable();
            this.Tables.Add(this.tableFunction);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("BaseModelComponents_BaseDirectory", new DataColumn[] {
                        this.tableBaseModelComponents.BaseModelComponents_IdColumn}, new DataColumn[] {
                        this.tableBaseDirectory.BaseModelComponents_IdColumn});
            this.tableBaseDirectory.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("BaseModelComponents_BaseFile", new DataColumn[] {
                        this.tableBaseModelComponents.BaseModelComponents_IdColumn}, new DataColumn[] {
                        this.tableBaseFile.BaseModelComponents_IdColumn});
            this.tableBaseFile.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FileHistory_OutputModel", new DataColumn[] {
                        this.tableFileHistory.FileHistory_IdColumn}, new DataColumn[] {
                        this.tableOutputModel.FileHistory_IdColumn});
            this.tableOutputModel.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FileHistory_BaseModel", new DataColumn[] {
                        this.tableFileHistory.FileHistory_IdColumn}, new DataColumn[] {
                        this.tableBaseModel.FileHistory_IdColumn});
            this.tableBaseModel.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("MapBasicFramework_Library", new DataColumn[] {
                        this.tableMapBasicFramework.MapBasicFramework_IdColumn}, new DataColumn[] {
                        this.tableLibrary.MapBasicFramework_IdColumn});
            this.tableLibrary.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Library_GlobalVariable", new DataColumn[] {
                        this.tableLibrary.LibraryNameColumn}, new DataColumn[] {
                        this.tableGlobalVariable.LibraryNameColumn});
            this.tableGlobalVariable.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Library_Function", new DataColumn[] {
                        this.tableLibrary.LibraryNameColumn}, new DataColumn[] {
                        this.tableFunction.LibraryNameColumn});
            this.tableFunction.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationBaseModelComponents_BaseDirectory = new DataRelation("BaseModelComponents_BaseDirectory", new DataColumn[] {
                        this.tableBaseModelComponents.BaseModelComponents_IdColumn}, new DataColumn[] {
                        this.tableBaseDirectory.BaseModelComponents_IdColumn}, false);
            this.relationBaseModelComponents_BaseDirectory.Nested = true;
            this.Relations.Add(this.relationBaseModelComponents_BaseDirectory);
            this.relationBaseModelComponents_BaseFile = new DataRelation("BaseModelComponents_BaseFile", new DataColumn[] {
                        this.tableBaseModelComponents.BaseModelComponents_IdColumn}, new DataColumn[] {
                        this.tableBaseFile.BaseModelComponents_IdColumn}, false);
            this.relationBaseModelComponents_BaseFile.Nested = true;
            this.Relations.Add(this.relationBaseModelComponents_BaseFile);
            this.relationFileHistory_OutputModel = new DataRelation("FileHistory_OutputModel", new DataColumn[] {
                        this.tableFileHistory.FileHistory_IdColumn}, new DataColumn[] {
                        this.tableOutputModel.FileHistory_IdColumn}, false);
            this.relationFileHistory_OutputModel.Nested = true;
            this.Relations.Add(this.relationFileHistory_OutputModel);
            this.relationFileHistory_BaseModel = new DataRelation("FileHistory_BaseModel", new DataColumn[] {
                        this.tableFileHistory.FileHistory_IdColumn}, new DataColumn[] {
                        this.tableBaseModel.FileHistory_IdColumn}, false);
            this.relationFileHistory_BaseModel.Nested = true;
            this.Relations.Add(this.relationFileHistory_BaseModel);
            this.relationLibrary_GlobalVariable = new DataRelation("Library_GlobalVariable", new DataColumn[] {
                        this.tableLibrary.LibraryNameColumn}, new DataColumn[] {
                        this.tableGlobalVariable.LibraryNameColumn}, false);
            this.relationLibrary_GlobalVariable.Nested = true;
            this.Relations.Add(this.relationLibrary_GlobalVariable);
            this.relationLibrary_Function = new DataRelation("Library_Function", new DataColumn[] {
                        this.tableLibrary.LibraryNameColumn}, new DataColumn[] {
                        this.tableFunction.LibraryNameColumn}, false);
            this.relationLibrary_Function.Nested = true;
            this.Relations.Add(this.relationLibrary_Function);
            this.relationMapBasicFramework_Library = new DataRelation("MapBasicFramework_Library", new DataColumn[] {
                        this.tableMapBasicFramework.MapBasicFramework_IdColumn}, new DataColumn[] {
                        this.tableLibrary.MapBasicFramework_IdColumn}, false);
            this.relationMapBasicFramework_Library.Nested = true;
            this.Relations.Add(this.relationMapBasicFramework_Library);
        }
        
        private bool ShouldSerializeProgramSettings() {
            return false;
        }
        
        private bool ShouldSerializeBaseModelComponents() {
            return false;
        }
        
        private bool ShouldSerializeBaseDirectory() {
            return false;
        }
        
        private bool ShouldSerializeBaseFile() {
            return false;
        }
        
        private bool ShouldSerializeFileHistory() {
            return false;
        }
        
        private bool ShouldSerializeOutputModel() {
            return false;
        }
        
        private bool ShouldSerializeBaseModel() {
            return false;
        }
        
        private bool ShouldSerializeMapBasicFramework() {
            return false;
        }
        
        private bool ShouldSerializeLibrary() {
            return false;
        }
        
        private bool ShouldSerializeGlobalVariable() {
            return false;
        }
        
        private bool ShouldSerializeFunction() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ProgramSettingsRowChangeEventHandler(object sender, ProgramSettingsRowChangeEvent e);
        
        public delegate void BaseModelComponentsRowChangeEventHandler(object sender, BaseModelComponentsRowChangeEvent e);
        
        public delegate void BaseDirectoryRowChangeEventHandler(object sender, BaseDirectoryRowChangeEvent e);
        
        public delegate void BaseFileRowChangeEventHandler(object sender, BaseFileRowChangeEvent e);
        
        public delegate void FileHistoryRowChangeEventHandler(object sender, FileHistoryRowChangeEvent e);
        
        public delegate void OutputModelRowChangeEventHandler(object sender, OutputModelRowChangeEvent e);
        
        public delegate void BaseModelRowChangeEventHandler(object sender, BaseModelRowChangeEvent e);
        
        public delegate void MapBasicFrameworkRowChangeEventHandler(object sender, MapBasicFrameworkRowChangeEvent e);
        
        public delegate void LibraryRowChangeEventHandler(object sender, LibraryRowChangeEvent e);
        
        public delegate void GlobalVariableRowChangeEventHandler(object sender, GlobalVariableRowChangeEvent e);
        
        public delegate void FunctionRowChangeEventHandler(object sender, FunctionRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProgramSettingsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAlternativeTemplate;
            
            internal ProgramSettingsDataTable() : 
                    base("ProgramSettings") {
                this.InitClass();
            }
            
            internal ProgramSettingsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AlternativeTemplateColumn {
                get {
                    return this.columnAlternativeTemplate;
                }
            }
            
            public ProgramSettingsRow this[int index] {
                get {
                    return ((ProgramSettingsRow)(this.Rows[index]));
                }
            }
            
            public event ProgramSettingsRowChangeEventHandler ProgramSettingsRowChanged;
            
            public event ProgramSettingsRowChangeEventHandler ProgramSettingsRowChanging;
            
            public event ProgramSettingsRowChangeEventHandler ProgramSettingsRowDeleted;
            
            public event ProgramSettingsRowChangeEventHandler ProgramSettingsRowDeleting;
            
            public void AddProgramSettingsRow(ProgramSettingsRow row) {
                this.Rows.Add(row);
            }
            
            public ProgramSettingsRow AddProgramSettingsRow(string AlternativeTemplate) {
                ProgramSettingsRow rowProgramSettingsRow = ((ProgramSettingsRow)(this.NewRow()));
                rowProgramSettingsRow.ItemArray = new object[] {
                        AlternativeTemplate};
                this.Rows.Add(rowProgramSettingsRow);
                return rowProgramSettingsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProgramSettingsDataTable cln = ((ProgramSettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProgramSettingsDataTable();
            }
            
            internal void InitVars() {
                this.columnAlternativeTemplate = this.Columns["AlternativeTemplate"];
            }
            
            private void InitClass() {
                this.columnAlternativeTemplate = new DataColumn("AlternativeTemplate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAlternativeTemplate);
                this.columnAlternativeTemplate.AllowDBNull = false;
            }
            
            public ProgramSettingsRow NewProgramSettingsRow() {
                return ((ProgramSettingsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProgramSettingsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProgramSettingsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProgramSettingsRowChanged != null)) {
                    this.ProgramSettingsRowChanged(this, new ProgramSettingsRowChangeEvent(((ProgramSettingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProgramSettingsRowChanging != null)) {
                    this.ProgramSettingsRowChanging(this, new ProgramSettingsRowChangeEvent(((ProgramSettingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProgramSettingsRowDeleted != null)) {
                    this.ProgramSettingsRowDeleted(this, new ProgramSettingsRowChangeEvent(((ProgramSettingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProgramSettingsRowDeleting != null)) {
                    this.ProgramSettingsRowDeleting(this, new ProgramSettingsRowChangeEvent(((ProgramSettingsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProgramSettingsRow(ProgramSettingsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProgramSettingsRow : DataRow {
            
            private ProgramSettingsDataTable tableProgramSettings;
            
            internal ProgramSettingsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProgramSettings = ((ProgramSettingsDataTable)(this.Table));
            }
            
            public string AlternativeTemplate {
                get {
                    return ((string)(this[this.tableProgramSettings.AlternativeTemplateColumn]));
                }
                set {
                    this[this.tableProgramSettings.AlternativeTemplateColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProgramSettingsRowChangeEvent : EventArgs {
            
            private ProgramSettingsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProgramSettingsRowChangeEvent(ProgramSettingsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProgramSettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseModelComponentsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnBaseModelComponents_Id;
            
            internal BaseModelComponentsDataTable() : 
                    base("BaseModelComponents") {
                this.InitClass();
            }
            
            internal BaseModelComponentsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn BaseModelComponents_IdColumn {
                get {
                    return this.columnBaseModelComponents_Id;
                }
            }
            
            public BaseModelComponentsRow this[int index] {
                get {
                    return ((BaseModelComponentsRow)(this.Rows[index]));
                }
            }
            
            public event BaseModelComponentsRowChangeEventHandler BaseModelComponentsRowChanged;
            
            public event BaseModelComponentsRowChangeEventHandler BaseModelComponentsRowChanging;
            
            public event BaseModelComponentsRowChangeEventHandler BaseModelComponentsRowDeleted;
            
            public event BaseModelComponentsRowChangeEventHandler BaseModelComponentsRowDeleting;
            
            public void AddBaseModelComponentsRow(BaseModelComponentsRow row) {
                this.Rows.Add(row);
            }
            
            public BaseModelComponentsRow AddBaseModelComponentsRow() {
                BaseModelComponentsRow rowBaseModelComponentsRow = ((BaseModelComponentsRow)(this.NewRow()));
                rowBaseModelComponentsRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowBaseModelComponentsRow);
                return rowBaseModelComponentsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                BaseModelComponentsDataTable cln = ((BaseModelComponentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new BaseModelComponentsDataTable();
            }
            
            internal void InitVars() {
                this.columnBaseModelComponents_Id = this.Columns["BaseModelComponents_Id"];
            }
            
            private void InitClass() {
                this.columnBaseModelComponents_Id = new DataColumn("BaseModelComponents_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnBaseModelComponents_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnBaseModelComponents_Id}, true));
                this.columnBaseModelComponents_Id.AutoIncrement = true;
                this.columnBaseModelComponents_Id.AllowDBNull = false;
                this.columnBaseModelComponents_Id.Unique = true;
            }
            
            public BaseModelComponentsRow NewBaseModelComponentsRow() {
                return ((BaseModelComponentsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new BaseModelComponentsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BaseModelComponentsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BaseModelComponentsRowChanged != null)) {
                    this.BaseModelComponentsRowChanged(this, new BaseModelComponentsRowChangeEvent(((BaseModelComponentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BaseModelComponentsRowChanging != null)) {
                    this.BaseModelComponentsRowChanging(this, new BaseModelComponentsRowChangeEvent(((BaseModelComponentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BaseModelComponentsRowDeleted != null)) {
                    this.BaseModelComponentsRowDeleted(this, new BaseModelComponentsRowChangeEvent(((BaseModelComponentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BaseModelComponentsRowDeleting != null)) {
                    this.BaseModelComponentsRowDeleting(this, new BaseModelComponentsRowChangeEvent(((BaseModelComponentsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBaseModelComponentsRow(BaseModelComponentsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseModelComponentsRow : DataRow {
            
            private BaseModelComponentsDataTable tableBaseModelComponents;
            
            internal BaseModelComponentsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBaseModelComponents = ((BaseModelComponentsDataTable)(this.Table));
            }
            
            public BaseDirectoryRow[] GetBaseDirectoryRows() {
                return ((BaseDirectoryRow[])(this.GetChildRows(this.Table.ChildRelations["BaseModelComponents_BaseDirectory"])));
            }
            
            public BaseFileRow[] GetBaseFileRows() {
                return ((BaseFileRow[])(this.GetChildRows(this.Table.ChildRelations["BaseModelComponents_BaseFile"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseModelComponentsRowChangeEvent : EventArgs {
            
            private BaseModelComponentsRow eventRow;
            
            private DataRowAction eventAction;
            
            public BaseModelComponentsRowChangeEvent(BaseModelComponentsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BaseModelComponentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseDirectoryDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnIncludeFiles;
            
            private DataColumn columnRecurse;
            
            private DataColumn columnBaseDirectory_text;
            
            private DataColumn columnBaseModelComponents_Id;
            
            internal BaseDirectoryDataTable() : 
                    base("BaseDirectory") {
                this.InitClass();
            }
            
            internal BaseDirectoryDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IncludeFilesColumn {
                get {
                    return this.columnIncludeFiles;
                }
            }
            
            internal DataColumn RecurseColumn {
                get {
                    return this.columnRecurse;
                }
            }
            
            internal DataColumn BaseDirectory_textColumn {
                get {
                    return this.columnBaseDirectory_text;
                }
            }
            
            internal DataColumn BaseModelComponents_IdColumn {
                get {
                    return this.columnBaseModelComponents_Id;
                }
            }
            
            public BaseDirectoryRow this[int index] {
                get {
                    return ((BaseDirectoryRow)(this.Rows[index]));
                }
            }
            
            public event BaseDirectoryRowChangeEventHandler BaseDirectoryRowChanged;
            
            public event BaseDirectoryRowChangeEventHandler BaseDirectoryRowChanging;
            
            public event BaseDirectoryRowChangeEventHandler BaseDirectoryRowDeleted;
            
            public event BaseDirectoryRowChangeEventHandler BaseDirectoryRowDeleting;
            
            public void AddBaseDirectoryRow(BaseDirectoryRow row) {
                this.Rows.Add(row);
            }
            
            public BaseDirectoryRow AddBaseDirectoryRow(bool IncludeFiles, bool Recurse, string BaseDirectory_text, BaseModelComponentsRow parentBaseModelComponentsRowByBaseModelComponents_BaseDirectory) {
                BaseDirectoryRow rowBaseDirectoryRow = ((BaseDirectoryRow)(this.NewRow()));
                rowBaseDirectoryRow.ItemArray = new object[] {
                        IncludeFiles,
                        Recurse,
                        BaseDirectory_text,
                        parentBaseModelComponentsRowByBaseModelComponents_BaseDirectory[0]};
                this.Rows.Add(rowBaseDirectoryRow);
                return rowBaseDirectoryRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                BaseDirectoryDataTable cln = ((BaseDirectoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new BaseDirectoryDataTable();
            }
            
            internal void InitVars() {
                this.columnIncludeFiles = this.Columns["IncludeFiles"];
                this.columnRecurse = this.Columns["Recurse"];
                this.columnBaseDirectory_text = this.Columns["BaseDirectory_text"];
                this.columnBaseModelComponents_Id = this.Columns["BaseModelComponents_Id"];
            }
            
            private void InitClass() {
                this.columnIncludeFiles = new DataColumn("IncludeFiles", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnIncludeFiles);
                this.columnRecurse = new DataColumn("Recurse", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRecurse);
                this.columnBaseDirectory_text = new DataColumn("BaseDirectory_text", typeof(string), null, System.Data.MappingType.SimpleContent);
                this.Columns.Add(this.columnBaseDirectory_text);
                this.columnBaseModelComponents_Id = new DataColumn("BaseModelComponents_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnBaseModelComponents_Id);
                this.columnIncludeFiles.Namespace = "";
                this.columnIncludeFiles.DefaultValue = true;
                this.columnRecurse.Namespace = "";
                this.columnRecurse.DefaultValue = false;
                this.columnBaseDirectory_text.AllowDBNull = false;
            }
            
            public BaseDirectoryRow NewBaseDirectoryRow() {
                return ((BaseDirectoryRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new BaseDirectoryRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BaseDirectoryRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BaseDirectoryRowChanged != null)) {
                    this.BaseDirectoryRowChanged(this, new BaseDirectoryRowChangeEvent(((BaseDirectoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BaseDirectoryRowChanging != null)) {
                    this.BaseDirectoryRowChanging(this, new BaseDirectoryRowChangeEvent(((BaseDirectoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BaseDirectoryRowDeleted != null)) {
                    this.BaseDirectoryRowDeleted(this, new BaseDirectoryRowChangeEvent(((BaseDirectoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BaseDirectoryRowDeleting != null)) {
                    this.BaseDirectoryRowDeleting(this, new BaseDirectoryRowChangeEvent(((BaseDirectoryRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBaseDirectoryRow(BaseDirectoryRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseDirectoryRow : DataRow {
            
            private BaseDirectoryDataTable tableBaseDirectory;
            
            internal BaseDirectoryRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBaseDirectory = ((BaseDirectoryDataTable)(this.Table));
            }
            
            public bool IncludeFiles {
                get {
                    try {
                        return ((bool)(this[this.tableBaseDirectory.IncludeFilesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBaseDirectory.IncludeFilesColumn] = value;
                }
            }
            
            public bool Recurse {
                get {
                    try {
                        return ((bool)(this[this.tableBaseDirectory.RecurseColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBaseDirectory.RecurseColumn] = value;
                }
            }
            
            public string BaseDirectory_text {
                get {
                    return ((string)(this[this.tableBaseDirectory.BaseDirectory_textColumn]));
                }
                set {
                    this[this.tableBaseDirectory.BaseDirectory_textColumn] = value;
                }
            }
            
            public BaseModelComponentsRow BaseModelComponentsRow {
                get {
                    return ((BaseModelComponentsRow)(this.GetParentRow(this.Table.ParentRelations["BaseModelComponents_BaseDirectory"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["BaseModelComponents_BaseDirectory"]);
                }
            }
            
            public bool IsIncludeFilesNull() {
                return this.IsNull(this.tableBaseDirectory.IncludeFilesColumn);
            }
            
            public void SetIncludeFilesNull() {
                this[this.tableBaseDirectory.IncludeFilesColumn] = System.Convert.DBNull;
            }
            
            public bool IsRecurseNull() {
                return this.IsNull(this.tableBaseDirectory.RecurseColumn);
            }
            
            public void SetRecurseNull() {
                this[this.tableBaseDirectory.RecurseColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseDirectoryRowChangeEvent : EventArgs {
            
            private BaseDirectoryRow eventRow;
            
            private DataRowAction eventAction;
            
            public BaseDirectoryRowChangeEvent(BaseDirectoryRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BaseDirectoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseFileDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnBaseFile_text;
            
            private DataColumn columnBaseModelComponents_Id;
            
            internal BaseFileDataTable() : 
                    base("BaseFile") {
                this.InitClass();
            }
            
            internal BaseFileDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn BaseFile_textColumn {
                get {
                    return this.columnBaseFile_text;
                }
            }
            
            internal DataColumn BaseModelComponents_IdColumn {
                get {
                    return this.columnBaseModelComponents_Id;
                }
            }
            
            public BaseFileRow this[int index] {
                get {
                    return ((BaseFileRow)(this.Rows[index]));
                }
            }
            
            public event BaseFileRowChangeEventHandler BaseFileRowChanged;
            
            public event BaseFileRowChangeEventHandler BaseFileRowChanging;
            
            public event BaseFileRowChangeEventHandler BaseFileRowDeleted;
            
            public event BaseFileRowChangeEventHandler BaseFileRowDeleting;
            
            public void AddBaseFileRow(BaseFileRow row) {
                this.Rows.Add(row);
            }
            
            public BaseFileRow AddBaseFileRow(string BaseFile_text, BaseModelComponentsRow parentBaseModelComponentsRowByBaseModelComponents_BaseFile) {
                BaseFileRow rowBaseFileRow = ((BaseFileRow)(this.NewRow()));
                rowBaseFileRow.ItemArray = new object[] {
                        BaseFile_text,
                        parentBaseModelComponentsRowByBaseModelComponents_BaseFile[0]};
                this.Rows.Add(rowBaseFileRow);
                return rowBaseFileRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                BaseFileDataTable cln = ((BaseFileDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new BaseFileDataTable();
            }
            
            internal void InitVars() {
                this.columnBaseFile_text = this.Columns["BaseFile_text"];
                this.columnBaseModelComponents_Id = this.Columns["BaseModelComponents_Id"];
            }
            
            private void InitClass() {
                this.columnBaseFile_text = new DataColumn("BaseFile_text", typeof(string), null, System.Data.MappingType.SimpleContent);
                this.Columns.Add(this.columnBaseFile_text);
                this.columnBaseModelComponents_Id = new DataColumn("BaseModelComponents_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnBaseModelComponents_Id);
                this.columnBaseFile_text.AllowDBNull = false;
            }
            
            public BaseFileRow NewBaseFileRow() {
                return ((BaseFileRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new BaseFileRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BaseFileRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BaseFileRowChanged != null)) {
                    this.BaseFileRowChanged(this, new BaseFileRowChangeEvent(((BaseFileRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BaseFileRowChanging != null)) {
                    this.BaseFileRowChanging(this, new BaseFileRowChangeEvent(((BaseFileRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BaseFileRowDeleted != null)) {
                    this.BaseFileRowDeleted(this, new BaseFileRowChangeEvent(((BaseFileRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BaseFileRowDeleting != null)) {
                    this.BaseFileRowDeleting(this, new BaseFileRowChangeEvent(((BaseFileRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBaseFileRow(BaseFileRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseFileRow : DataRow {
            
            private BaseFileDataTable tableBaseFile;
            
            internal BaseFileRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBaseFile = ((BaseFileDataTable)(this.Table));
            }
            
            public string BaseFile_text {
                get {
                    return ((string)(this[this.tableBaseFile.BaseFile_textColumn]));
                }
                set {
                    this[this.tableBaseFile.BaseFile_textColumn] = value;
                }
            }
            
            public BaseModelComponentsRow BaseModelComponentsRow {
                get {
                    return ((BaseModelComponentsRow)(this.GetParentRow(this.Table.ParentRelations["BaseModelComponents_BaseFile"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["BaseModelComponents_BaseFile"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseFileRowChangeEvent : EventArgs {
            
            private BaseFileRow eventRow;
            
            private DataRowAction eventAction;
            
            public BaseFileRowChangeEvent(BaseFileRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BaseFileRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FileHistoryDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnHistoryCount;
            
            private DataColumn columnFileHistory_Id;
            
            internal FileHistoryDataTable() : 
                    base("FileHistory") {
                this.InitClass();
            }
            
            internal FileHistoryDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn HistoryCountColumn {
                get {
                    return this.columnHistoryCount;
                }
            }
            
            internal DataColumn FileHistory_IdColumn {
                get {
                    return this.columnFileHistory_Id;
                }
            }
            
            public FileHistoryRow this[int index] {
                get {
                    return ((FileHistoryRow)(this.Rows[index]));
                }
            }
            
            public event FileHistoryRowChangeEventHandler FileHistoryRowChanged;
            
            public event FileHistoryRowChangeEventHandler FileHistoryRowChanging;
            
            public event FileHistoryRowChangeEventHandler FileHistoryRowDeleted;
            
            public event FileHistoryRowChangeEventHandler FileHistoryRowDeleting;
            
            public void AddFileHistoryRow(FileHistoryRow row) {
                this.Rows.Add(row);
            }
            
            public FileHistoryRow AddFileHistoryRow(int HistoryCount) {
                FileHistoryRow rowFileHistoryRow = ((FileHistoryRow)(this.NewRow()));
                rowFileHistoryRow.ItemArray = new object[] {
                        HistoryCount,
                        null};
                this.Rows.Add(rowFileHistoryRow);
                return rowFileHistoryRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FileHistoryDataTable cln = ((FileHistoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FileHistoryDataTable();
            }
            
            internal void InitVars() {
                this.columnHistoryCount = this.Columns["HistoryCount"];
                this.columnFileHistory_Id = this.Columns["FileHistory_Id"];
            }
            
            private void InitClass() {
                this.columnHistoryCount = new DataColumn("HistoryCount", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnHistoryCount);
                this.columnFileHistory_Id = new DataColumn("FileHistory_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnFileHistory_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnFileHistory_Id}, true));
                this.columnHistoryCount.Namespace = "";
                this.columnHistoryCount.DefaultValue = 4;
                this.columnFileHistory_Id.AutoIncrement = true;
                this.columnFileHistory_Id.AllowDBNull = false;
                this.columnFileHistory_Id.Unique = true;
            }
            
            public FileHistoryRow NewFileHistoryRow() {
                return ((FileHistoryRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FileHistoryRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FileHistoryRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FileHistoryRowChanged != null)) {
                    this.FileHistoryRowChanged(this, new FileHistoryRowChangeEvent(((FileHistoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FileHistoryRowChanging != null)) {
                    this.FileHistoryRowChanging(this, new FileHistoryRowChangeEvent(((FileHistoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FileHistoryRowDeleted != null)) {
                    this.FileHistoryRowDeleted(this, new FileHistoryRowChangeEvent(((FileHistoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FileHistoryRowDeleting != null)) {
                    this.FileHistoryRowDeleting(this, new FileHistoryRowChangeEvent(((FileHistoryRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFileHistoryRow(FileHistoryRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FileHistoryRow : DataRow {
            
            private FileHistoryDataTable tableFileHistory;
            
            internal FileHistoryRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFileHistory = ((FileHistoryDataTable)(this.Table));
            }
            
            public int HistoryCount {
                get {
                    if (this.IsHistoryCountNull()) {
                        return 4;
                    }
                    else {
                        return ((int)(this[this.tableFileHistory.HistoryCountColumn]));
                    }
                }
                set {
                    this[this.tableFileHistory.HistoryCountColumn] = value;
                }
            }
            
            public bool IsHistoryCountNull() {
                return this.IsNull(this.tableFileHistory.HistoryCountColumn);
            }
            
            public void SetHistoryCountNull() {
                this[this.tableFileHistory.HistoryCountColumn] = System.Convert.DBNull;
            }
            
            public OutputModelRow[] GetOutputModelRows() {
                return ((OutputModelRow[])(this.GetChildRows(this.Table.ChildRelations["FileHistory_OutputModel"])));
            }
            
            public BaseModelRow[] GetBaseModelRows() {
                return ((BaseModelRow[])(this.GetChildRows(this.Table.ChildRelations["FileHistory_BaseModel"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FileHistoryRowChangeEvent : EventArgs {
            
            private FileHistoryRow eventRow;
            
            private DataRowAction eventAction;
            
            public FileHistoryRowChangeEvent(FileHistoryRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FileHistoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OutputModelDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDate;
            
            private DataColumn columnOutputModel_text;
            
            private DataColumn columnFileHistory_Id;
            
            internal OutputModelDataTable() : 
                    base("OutputModel") {
                this.InitClass();
            }
            
            internal OutputModelDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            internal DataColumn OutputModel_textColumn {
                get {
                    return this.columnOutputModel_text;
                }
            }
            
            internal DataColumn FileHistory_IdColumn {
                get {
                    return this.columnFileHistory_Id;
                }
            }
            
            public OutputModelRow this[int index] {
                get {
                    return ((OutputModelRow)(this.Rows[index]));
                }
            }
            
            public event OutputModelRowChangeEventHandler OutputModelRowChanged;
            
            public event OutputModelRowChangeEventHandler OutputModelRowChanging;
            
            public event OutputModelRowChangeEventHandler OutputModelRowDeleted;
            
            public event OutputModelRowChangeEventHandler OutputModelRowDeleting;
            
            public void AddOutputModelRow(OutputModelRow row) {
                this.Rows.Add(row);
            }
            
            public OutputModelRow AddOutputModelRow(string Date, string OutputModel_text, FileHistoryRow parentFileHistoryRowByFileHistory_OutputModel) {
                OutputModelRow rowOutputModelRow = ((OutputModelRow)(this.NewRow()));
                rowOutputModelRow.ItemArray = new object[] {
                        Date,
                        OutputModel_text,
                        parentFileHistoryRowByFileHistory_OutputModel[1]};
                this.Rows.Add(rowOutputModelRow);
                return rowOutputModelRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                OutputModelDataTable cln = ((OutputModelDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new OutputModelDataTable();
            }
            
            internal void InitVars() {
                this.columnDate = this.Columns["Date"];
                this.columnOutputModel_text = this.Columns["OutputModel_text"];
                this.columnFileHistory_Id = this.Columns["FileHistory_Id"];
            }
            
            private void InitClass() {
                this.columnDate = new DataColumn("Date", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDate);
                this.columnOutputModel_text = new DataColumn("OutputModel_text", typeof(string), null, System.Data.MappingType.SimpleContent);
                this.Columns.Add(this.columnOutputModel_text);
                this.columnFileHistory_Id = new DataColumn("FileHistory_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnFileHistory_Id);
                this.columnDate.Namespace = "";
                this.columnOutputModel_text.AllowDBNull = false;
            }
            
            public OutputModelRow NewOutputModelRow() {
                return ((OutputModelRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new OutputModelRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(OutputModelRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OutputModelRowChanged != null)) {
                    this.OutputModelRowChanged(this, new OutputModelRowChangeEvent(((OutputModelRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OutputModelRowChanging != null)) {
                    this.OutputModelRowChanging(this, new OutputModelRowChangeEvent(((OutputModelRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OutputModelRowDeleted != null)) {
                    this.OutputModelRowDeleted(this, new OutputModelRowChangeEvent(((OutputModelRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OutputModelRowDeleting != null)) {
                    this.OutputModelRowDeleting(this, new OutputModelRowChangeEvent(((OutputModelRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOutputModelRow(OutputModelRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OutputModelRow : DataRow {
            
            private OutputModelDataTable tableOutputModel;
            
            internal OutputModelRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableOutputModel = ((OutputModelDataTable)(this.Table));
            }
            
            public string Date {
                get {
                    if (this.IsDateNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableOutputModel.DateColumn]));
                    }
                }
                set {
                    this[this.tableOutputModel.DateColumn] = value;
                }
            }
            
            public string OutputModel_text {
                get {
                    return ((string)(this[this.tableOutputModel.OutputModel_textColumn]));
                }
                set {
                    this[this.tableOutputModel.OutputModel_textColumn] = value;
                }
            }
            
            public FileHistoryRow FileHistoryRow {
                get {
                    return ((FileHistoryRow)(this.GetParentRow(this.Table.ParentRelations["FileHistory_OutputModel"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FileHistory_OutputModel"]);
                }
            }
            
            public bool IsDateNull() {
                return this.IsNull(this.tableOutputModel.DateColumn);
            }
            
            public void SetDateNull() {
                this[this.tableOutputModel.DateColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OutputModelRowChangeEvent : EventArgs {
            
            private OutputModelRow eventRow;
            
            private DataRowAction eventAction;
            
            public OutputModelRowChangeEvent(OutputModelRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OutputModelRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseModelDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDate;
            
            private DataColumn columnBaseModel_text;
            
            private DataColumn columnFileHistory_Id;
            
            internal BaseModelDataTable() : 
                    base("BaseModel") {
                this.InitClass();
            }
            
            internal BaseModelDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            internal DataColumn BaseModel_textColumn {
                get {
                    return this.columnBaseModel_text;
                }
            }
            
            internal DataColumn FileHistory_IdColumn {
                get {
                    return this.columnFileHistory_Id;
                }
            }
            
            public BaseModelRow this[int index] {
                get {
                    return ((BaseModelRow)(this.Rows[index]));
                }
            }
            
            public event BaseModelRowChangeEventHandler BaseModelRowChanged;
            
            public event BaseModelRowChangeEventHandler BaseModelRowChanging;
            
            public event BaseModelRowChangeEventHandler BaseModelRowDeleted;
            
            public event BaseModelRowChangeEventHandler BaseModelRowDeleting;
            
            public void AddBaseModelRow(BaseModelRow row) {
                this.Rows.Add(row);
            }
            
            public BaseModelRow AddBaseModelRow(string Date, string BaseModel_text, FileHistoryRow parentFileHistoryRowByFileHistory_BaseModel) {
                BaseModelRow rowBaseModelRow = ((BaseModelRow)(this.NewRow()));
                rowBaseModelRow.ItemArray = new object[] {
                        Date,
                        BaseModel_text,
                        parentFileHistoryRowByFileHistory_BaseModel[1]};
                this.Rows.Add(rowBaseModelRow);
                return rowBaseModelRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                BaseModelDataTable cln = ((BaseModelDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new BaseModelDataTable();
            }
            
            internal void InitVars() {
                this.columnDate = this.Columns["Date"];
                this.columnBaseModel_text = this.Columns["BaseModel_text"];
                this.columnFileHistory_Id = this.Columns["FileHistory_Id"];
            }
            
            private void InitClass() {
                this.columnDate = new DataColumn("Date", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDate);
                this.columnBaseModel_text = new DataColumn("BaseModel_text", typeof(string), null, System.Data.MappingType.SimpleContent);
                this.Columns.Add(this.columnBaseModel_text);
                this.columnFileHistory_Id = new DataColumn("FileHistory_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnFileHistory_Id);
                this.columnDate.Namespace = "";
            }
            
            public BaseModelRow NewBaseModelRow() {
                return ((BaseModelRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new BaseModelRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BaseModelRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BaseModelRowChanged != null)) {
                    this.BaseModelRowChanged(this, new BaseModelRowChangeEvent(((BaseModelRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BaseModelRowChanging != null)) {
                    this.BaseModelRowChanging(this, new BaseModelRowChangeEvent(((BaseModelRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BaseModelRowDeleted != null)) {
                    this.BaseModelRowDeleted(this, new BaseModelRowChangeEvent(((BaseModelRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BaseModelRowDeleting != null)) {
                    this.BaseModelRowDeleting(this, new BaseModelRowChangeEvent(((BaseModelRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBaseModelRow(BaseModelRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseModelRow : DataRow {
            
            private BaseModelDataTable tableBaseModel;
            
            internal BaseModelRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBaseModel = ((BaseModelDataTable)(this.Table));
            }
            
            public string Date {
                get {
                    if (this.IsDateNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableBaseModel.DateColumn]));
                    }
                }
                set {
                    this[this.tableBaseModel.DateColumn] = value;
                }
            }
            
            public string BaseModel_text {
                get {
                    try {
                        return ((string)(this[this.tableBaseModel.BaseModel_textColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBaseModel.BaseModel_textColumn] = value;
                }
            }
            
            public FileHistoryRow FileHistoryRow {
                get {
                    return ((FileHistoryRow)(this.GetParentRow(this.Table.ParentRelations["FileHistory_BaseModel"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FileHistory_BaseModel"]);
                }
            }
            
            public bool IsDateNull() {
                return this.IsNull(this.tableBaseModel.DateColumn);
            }
            
            public void SetDateNull() {
                this[this.tableBaseModel.DateColumn] = System.Convert.DBNull;
            }
            
            public bool IsBaseModel_textNull() {
                return this.IsNull(this.tableBaseModel.BaseModel_textColumn);
            }
            
            public void SetBaseModel_textNull() {
                this[this.tableBaseModel.BaseModel_textColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseModelRowChangeEvent : EventArgs {
            
            private BaseModelRow eventRow;
            
            private DataRowAction eventAction;
            
            public BaseModelRowChangeEvent(BaseModelRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BaseModelRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MapBasicFrameworkDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnMapBasicFramework_Id;
            
            internal MapBasicFrameworkDataTable() : 
                    base("MapBasicFramework") {
                this.InitClass();
            }
            
            internal MapBasicFrameworkDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn MapBasicFramework_IdColumn {
                get {
                    return this.columnMapBasicFramework_Id;
                }
            }
            
            public MapBasicFrameworkRow this[int index] {
                get {
                    return ((MapBasicFrameworkRow)(this.Rows[index]));
                }
            }
            
            public event MapBasicFrameworkRowChangeEventHandler MapBasicFrameworkRowChanged;
            
            public event MapBasicFrameworkRowChangeEventHandler MapBasicFrameworkRowChanging;
            
            public event MapBasicFrameworkRowChangeEventHandler MapBasicFrameworkRowDeleted;
            
            public event MapBasicFrameworkRowChangeEventHandler MapBasicFrameworkRowDeleting;
            
            public void AddMapBasicFrameworkRow(MapBasicFrameworkRow row) {
                this.Rows.Add(row);
            }
            
            public MapBasicFrameworkRow AddMapBasicFrameworkRow() {
                MapBasicFrameworkRow rowMapBasicFrameworkRow = ((MapBasicFrameworkRow)(this.NewRow()));
                rowMapBasicFrameworkRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowMapBasicFrameworkRow);
                return rowMapBasicFrameworkRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MapBasicFrameworkDataTable cln = ((MapBasicFrameworkDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MapBasicFrameworkDataTable();
            }
            
            internal void InitVars() {
                this.columnMapBasicFramework_Id = this.Columns["MapBasicFramework_Id"];
            }
            
            private void InitClass() {
                this.columnMapBasicFramework_Id = new DataColumn("MapBasicFramework_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnMapBasicFramework_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnMapBasicFramework_Id}, true));
                this.columnMapBasicFramework_Id.AutoIncrement = true;
                this.columnMapBasicFramework_Id.AllowDBNull = false;
                this.columnMapBasicFramework_Id.Unique = true;
            }
            
            public MapBasicFrameworkRow NewMapBasicFrameworkRow() {
                return ((MapBasicFrameworkRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MapBasicFrameworkRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MapBasicFrameworkRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MapBasicFrameworkRowChanged != null)) {
                    this.MapBasicFrameworkRowChanged(this, new MapBasicFrameworkRowChangeEvent(((MapBasicFrameworkRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MapBasicFrameworkRowChanging != null)) {
                    this.MapBasicFrameworkRowChanging(this, new MapBasicFrameworkRowChangeEvent(((MapBasicFrameworkRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MapBasicFrameworkRowDeleted != null)) {
                    this.MapBasicFrameworkRowDeleted(this, new MapBasicFrameworkRowChangeEvent(((MapBasicFrameworkRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MapBasicFrameworkRowDeleting != null)) {
                    this.MapBasicFrameworkRowDeleting(this, new MapBasicFrameworkRowChangeEvent(((MapBasicFrameworkRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMapBasicFrameworkRow(MapBasicFrameworkRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MapBasicFrameworkRow : DataRow {
            
            private MapBasicFrameworkDataTable tableMapBasicFramework;
            
            internal MapBasicFrameworkRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMapBasicFramework = ((MapBasicFrameworkDataTable)(this.Table));
            }
            
            public LibraryRow[] GetLibraryRows() {
                return ((LibraryRow[])(this.GetChildRows(this.Table.ChildRelations["MapBasicFramework_Library"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MapBasicFrameworkRowChangeEvent : EventArgs {
            
            private MapBasicFrameworkRow eventRow;
            
            private DataRowAction eventAction;
            
            public MapBasicFrameworkRowChangeEvent(MapBasicFrameworkRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MapBasicFrameworkRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LibraryDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLibraryName;
            
            private DataColumn columnLocation;
            
            private DataColumn columnExecGroup;
            
            private DataColumn columnMapBasicFramework_Id;
            
            internal LibraryDataTable() : 
                    base("Library") {
                this.InitClass();
            }
            
            internal LibraryDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LibraryNameColumn {
                get {
                    return this.columnLibraryName;
                }
            }
            
            internal DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            internal DataColumn ExecGroupColumn {
                get {
                    return this.columnExecGroup;
                }
            }
            
            internal DataColumn MapBasicFramework_IdColumn {
                get {
                    return this.columnMapBasicFramework_Id;
                }
            }
            
            public LibraryRow this[int index] {
                get {
                    return ((LibraryRow)(this.Rows[index]));
                }
            }
            
            public event LibraryRowChangeEventHandler LibraryRowChanged;
            
            public event LibraryRowChangeEventHandler LibraryRowChanging;
            
            public event LibraryRowChangeEventHandler LibraryRowDeleted;
            
            public event LibraryRowChangeEventHandler LibraryRowDeleting;
            
            public void AddLibraryRow(LibraryRow row) {
                this.Rows.Add(row);
            }
            
            public LibraryRow AddLibraryRow(string LibraryName, string Location, string ExecGroup, MapBasicFrameworkRow parentMapBasicFrameworkRowByMapBasicFramework_Library) {
                LibraryRow rowLibraryRow = ((LibraryRow)(this.NewRow()));
                rowLibraryRow.ItemArray = new object[] {
                        LibraryName,
                        Location,
                        ExecGroup,
                        parentMapBasicFrameworkRowByMapBasicFramework_Library[0]};
                this.Rows.Add(rowLibraryRow);
                return rowLibraryRow;
            }
            
            public LibraryRow FindByLibraryName(string LibraryName) {
                return ((LibraryRow)(this.Rows.Find(new object[] {
                            LibraryName})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                LibraryDataTable cln = ((LibraryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new LibraryDataTable();
            }
            
            internal void InitVars() {
                this.columnLibraryName = this.Columns["LibraryName"];
                this.columnLocation = this.Columns["Location"];
                this.columnExecGroup = this.Columns["ExecGroup"];
                this.columnMapBasicFramework_Id = this.Columns["MapBasicFramework_Id"];
            }
            
            private void InitClass() {
                this.columnLibraryName = new DataColumn("LibraryName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLibraryName);
                this.columnLocation = new DataColumn("Location", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocation);
                this.columnExecGroup = new DataColumn("ExecGroup", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExecGroup);
                this.columnMapBasicFramework_Id = new DataColumn("MapBasicFramework_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnMapBasicFramework_Id);
                this.Constraints.Add(new UniqueConstraint("AltEngineConfigurationKey1", new DataColumn[] {
                                this.columnLibraryName}, true));
                this.columnLibraryName.AllowDBNull = false;
                this.columnLibraryName.Unique = true;
                this.columnLocation.AllowDBNull = false;
                this.columnExecGroup.AllowDBNull = false;
            }
            
            public LibraryRow NewLibraryRow() {
                return ((LibraryRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new LibraryRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(LibraryRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LibraryRowChanged != null)) {
                    this.LibraryRowChanged(this, new LibraryRowChangeEvent(((LibraryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LibraryRowChanging != null)) {
                    this.LibraryRowChanging(this, new LibraryRowChangeEvent(((LibraryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LibraryRowDeleted != null)) {
                    this.LibraryRowDeleted(this, new LibraryRowChangeEvent(((LibraryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LibraryRowDeleting != null)) {
                    this.LibraryRowDeleting(this, new LibraryRowChangeEvent(((LibraryRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveLibraryRow(LibraryRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LibraryRow : DataRow {
            
            private LibraryDataTable tableLibrary;
            
            internal LibraryRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableLibrary = ((LibraryDataTable)(this.Table));
            }
            
            public string LibraryName {
                get {
                    return ((string)(this[this.tableLibrary.LibraryNameColumn]));
                }
                set {
                    this[this.tableLibrary.LibraryNameColumn] = value;
                }
            }
            
            public string Location {
                get {
                    return ((string)(this[this.tableLibrary.LocationColumn]));
                }
                set {
                    this[this.tableLibrary.LocationColumn] = value;
                }
            }
            
            public string ExecGroup {
                get {
                    return ((string)(this[this.tableLibrary.ExecGroupColumn]));
                }
                set {
                    this[this.tableLibrary.ExecGroupColumn] = value;
                }
            }
            
            public MapBasicFrameworkRow MapBasicFrameworkRow {
                get {
                    return ((MapBasicFrameworkRow)(this.GetParentRow(this.Table.ParentRelations["MapBasicFramework_Library"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MapBasicFramework_Library"]);
                }
            }
            
            public GlobalVariableRow[] GetGlobalVariableRows() {
                return ((GlobalVariableRow[])(this.GetChildRows(this.Table.ChildRelations["Library_GlobalVariable"])));
            }
            
            public FunctionRow[] GetFunctionRows() {
                return ((FunctionRow[])(this.GetChildRows(this.Table.ChildRelations["Library_Function"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LibraryRowChangeEvent : EventArgs {
            
            private LibraryRow eventRow;
            
            private DataRowAction eventAction;
            
            public LibraryRowChangeEvent(LibraryRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public LibraryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GlobalVariableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnValue;
            
            private DataColumn columnRelativeTo;
            
            private DataColumn columnLibraryName;
            
            internal GlobalVariableDataTable() : 
                    base("GlobalVariable") {
                this.InitClass();
            }
            
            internal GlobalVariableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            internal DataColumn RelativeToColumn {
                get {
                    return this.columnRelativeTo;
                }
            }
            
            internal DataColumn LibraryNameColumn {
                get {
                    return this.columnLibraryName;
                }
            }
            
            public GlobalVariableRow this[int index] {
                get {
                    return ((GlobalVariableRow)(this.Rows[index]));
                }
            }
            
            public event GlobalVariableRowChangeEventHandler GlobalVariableRowChanged;
            
            public event GlobalVariableRowChangeEventHandler GlobalVariableRowChanging;
            
            public event GlobalVariableRowChangeEventHandler GlobalVariableRowDeleted;
            
            public event GlobalVariableRowChangeEventHandler GlobalVariableRowDeleting;
            
            public void AddGlobalVariableRow(GlobalVariableRow row) {
                this.Rows.Add(row);
            }
            
            public GlobalVariableRow AddGlobalVariableRow(string Name, string Value, string RelativeTo, LibraryRow parentLibraryRowByLibrary_GlobalVariable) {
                GlobalVariableRow rowGlobalVariableRow = ((GlobalVariableRow)(this.NewRow()));
                rowGlobalVariableRow.ItemArray = new object[] {
                        Name,
                        Value,
                        RelativeTo,
                        parentLibraryRowByLibrary_GlobalVariable[0]};
                this.Rows.Add(rowGlobalVariableRow);
                return rowGlobalVariableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GlobalVariableDataTable cln = ((GlobalVariableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GlobalVariableDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnValue = this.Columns["Value"];
                this.columnRelativeTo = this.Columns["RelativeTo"];
                this.columnLibraryName = this.Columns["LibraryName"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnValue = new DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnValue);
                this.columnRelativeTo = new DataColumn("RelativeTo", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRelativeTo);
                this.columnLibraryName = new DataColumn("LibraryName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnLibraryName);
                this.columnName.Namespace = "";
                this.columnValue.Namespace = "";
                this.columnRelativeTo.Namespace = "";
            }
            
            public GlobalVariableRow NewGlobalVariableRow() {
                return ((GlobalVariableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GlobalVariableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GlobalVariableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GlobalVariableRowChanged != null)) {
                    this.GlobalVariableRowChanged(this, new GlobalVariableRowChangeEvent(((GlobalVariableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GlobalVariableRowChanging != null)) {
                    this.GlobalVariableRowChanging(this, new GlobalVariableRowChangeEvent(((GlobalVariableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GlobalVariableRowDeleted != null)) {
                    this.GlobalVariableRowDeleted(this, new GlobalVariableRowChangeEvent(((GlobalVariableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GlobalVariableRowDeleting != null)) {
                    this.GlobalVariableRowDeleting(this, new GlobalVariableRowChangeEvent(((GlobalVariableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGlobalVariableRow(GlobalVariableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GlobalVariableRow : DataRow {
            
            private GlobalVariableDataTable tableGlobalVariable;
            
            internal GlobalVariableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGlobalVariable = ((GlobalVariableDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableGlobalVariable.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGlobalVariable.NameColumn] = value;
                }
            }
            
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableGlobalVariable.ValueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGlobalVariable.ValueColumn] = value;
                }
            }
            
            public string RelativeTo {
                get {
                    try {
                        return ((string)(this[this.tableGlobalVariable.RelativeToColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGlobalVariable.RelativeToColumn] = value;
                }
            }
            
            public LibraryRow LibraryRow {
                get {
                    return ((LibraryRow)(this.GetParentRow(this.Table.ParentRelations["Library_GlobalVariable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Library_GlobalVariable"]);
                }
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableGlobalVariable.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableGlobalVariable.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsValueNull() {
                return this.IsNull(this.tableGlobalVariable.ValueColumn);
            }
            
            public void SetValueNull() {
                this[this.tableGlobalVariable.ValueColumn] = System.Convert.DBNull;
            }
            
            public bool IsRelativeToNull() {
                return this.IsNull(this.tableGlobalVariable.RelativeToColumn);
            }
            
            public void SetRelativeToNull() {
                this[this.tableGlobalVariable.RelativeToColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GlobalVariableRowChangeEvent : EventArgs {
            
            private GlobalVariableRow eventRow;
            
            private DataRowAction eventAction;
            
            public GlobalVariableRowChangeEvent(GlobalVariableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GlobalVariableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FunctionDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnCommandID;
            
            private DataColumn columnLibraryName;
            
            internal FunctionDataTable() : 
                    base("Function") {
                this.InitClass();
            }
            
            internal FunctionDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn CommandIDColumn {
                get {
                    return this.columnCommandID;
                }
            }
            
            internal DataColumn LibraryNameColumn {
                get {
                    return this.columnLibraryName;
                }
            }
            
            public FunctionRow this[int index] {
                get {
                    return ((FunctionRow)(this.Rows[index]));
                }
            }
            
            public event FunctionRowChangeEventHandler FunctionRowChanged;
            
            public event FunctionRowChangeEventHandler FunctionRowChanging;
            
            public event FunctionRowChangeEventHandler FunctionRowDeleted;
            
            public event FunctionRowChangeEventHandler FunctionRowDeleting;
            
            public void AddFunctionRow(FunctionRow row) {
                this.Rows.Add(row);
            }
            
            public FunctionRow AddFunctionRow(string Name, string CommandID, LibraryRow parentLibraryRowByLibrary_Function) {
                FunctionRow rowFunctionRow = ((FunctionRow)(this.NewRow()));
                rowFunctionRow.ItemArray = new object[] {
                        Name,
                        CommandID,
                        parentLibraryRowByLibrary_Function[0]};
                this.Rows.Add(rowFunctionRow);
                return rowFunctionRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FunctionDataTable cln = ((FunctionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FunctionDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnCommandID = this.Columns["CommandID"];
                this.columnLibraryName = this.Columns["LibraryName"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnCommandID = new DataColumn("CommandID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCommandID);
                this.columnLibraryName = new DataColumn("LibraryName", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnLibraryName);
                this.columnName.AllowDBNull = false;
                this.columnCommandID.AllowDBNull = false;
            }
            
            public FunctionRow NewFunctionRow() {
                return ((FunctionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FunctionRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FunctionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FunctionRowChanged != null)) {
                    this.FunctionRowChanged(this, new FunctionRowChangeEvent(((FunctionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FunctionRowChanging != null)) {
                    this.FunctionRowChanging(this, new FunctionRowChangeEvent(((FunctionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FunctionRowDeleted != null)) {
                    this.FunctionRowDeleted(this, new FunctionRowChangeEvent(((FunctionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FunctionRowDeleting != null)) {
                    this.FunctionRowDeleting(this, new FunctionRowChangeEvent(((FunctionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFunctionRow(FunctionRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FunctionRow : DataRow {
            
            private FunctionDataTable tableFunction;
            
            internal FunctionRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFunction = ((FunctionDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableFunction.NameColumn]));
                }
                set {
                    this[this.tableFunction.NameColumn] = value;
                }
            }
            
            public string CommandID {
                get {
                    return ((string)(this[this.tableFunction.CommandIDColumn]));
                }
                set {
                    this[this.tableFunction.CommandIDColumn] = value;
                }
            }
            
            public LibraryRow LibraryRow {
                get {
                    return ((LibraryRow)(this.GetParentRow(this.Table.ParentRelations["Library_Function"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Library_Function"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FunctionRowChangeEvent : EventArgs {
            
            private FunctionRow eventRow;
            
            private DataRowAction eventAction;
            
            public FunctionRowChangeEvent(FunctionRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FunctionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

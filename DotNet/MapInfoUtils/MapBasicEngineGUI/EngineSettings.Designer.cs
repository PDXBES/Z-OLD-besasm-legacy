//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SystemsAnalysis.Utils.MapInfoUtils {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("EngineConfiguration")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class EngineConfiguration : System.Data.DataSet {
        
        private MapBasicFrameworkDataTable tableMapBasicFramework;
        
        private LibraryDataTable tableLibrary;
        
        private GlobalVariableDataTable tableGlobalVariable;
        
        private FunctionDataTable tableFunction;
        
        private System.Data.DataRelation relationMapBasicFramework_Library;
        
        private System.Data.DataRelation relationLibrary_GlobalVariable;
        
        private System.Data.DataRelation relationLibrary_Function;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EngineConfiguration() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected EngineConfiguration(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["MapBasicFramework"] != null)) {
                    base.Tables.Add(new MapBasicFrameworkDataTable(ds.Tables["MapBasicFramework"]));
                }
                if ((ds.Tables["Library"] != null)) {
                    base.Tables.Add(new LibraryDataTable(ds.Tables["Library"]));
                }
                if ((ds.Tables["GlobalVariable"] != null)) {
                    base.Tables.Add(new GlobalVariableDataTable(ds.Tables["GlobalVariable"]));
                }
                if ((ds.Tables["Function"] != null)) {
                    base.Tables.Add(new FunctionDataTable(ds.Tables["Function"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MapBasicFrameworkDataTable MapBasicFramework {
            get {
                return this.tableMapBasicFramework;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LibraryDataTable Library {
            get {
                return this.tableLibrary;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GlobalVariableDataTable GlobalVariable {
            get {
                return this.tableGlobalVariable;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FunctionDataTable Function {
            get {
                return this.tableFunction;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            EngineConfiguration cln = ((EngineConfiguration)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["MapBasicFramework"] != null)) {
                    base.Tables.Add(new MapBasicFrameworkDataTable(ds.Tables["MapBasicFramework"]));
                }
                if ((ds.Tables["Library"] != null)) {
                    base.Tables.Add(new LibraryDataTable(ds.Tables["Library"]));
                }
                if ((ds.Tables["GlobalVariable"] != null)) {
                    base.Tables.Add(new GlobalVariableDataTable(ds.Tables["GlobalVariable"]));
                }
                if ((ds.Tables["Function"] != null)) {
                    base.Tables.Add(new FunctionDataTable(ds.Tables["Function"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableMapBasicFramework = ((MapBasicFrameworkDataTable)(base.Tables["MapBasicFramework"]));
            if ((initTable == true)) {
                if ((this.tableMapBasicFramework != null)) {
                    this.tableMapBasicFramework.InitVars();
                }
            }
            this.tableLibrary = ((LibraryDataTable)(base.Tables["Library"]));
            if ((initTable == true)) {
                if ((this.tableLibrary != null)) {
                    this.tableLibrary.InitVars();
                }
            }
            this.tableGlobalVariable = ((GlobalVariableDataTable)(base.Tables["GlobalVariable"]));
            if ((initTable == true)) {
                if ((this.tableGlobalVariable != null)) {
                    this.tableGlobalVariable.InitVars();
                }
            }
            this.tableFunction = ((FunctionDataTable)(base.Tables["Function"]));
            if ((initTable == true)) {
                if ((this.tableFunction != null)) {
                    this.tableFunction.InitVars();
                }
            }
            this.relationMapBasicFramework_Library = this.Relations["MapBasicFramework_Library"];
            this.relationLibrary_GlobalVariable = this.Relations["Library_GlobalVariable"];
            this.relationLibrary_Function = this.Relations["Library_Function"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "EngineConfiguration";
            this.Prefix = "";
            this.Namespace = "SystemsAnalysis.Utils.MapInfoUtils.MapInfoEngineGUI.EngineConfiguration";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableMapBasicFramework = new MapBasicFrameworkDataTable();
            base.Tables.Add(this.tableMapBasicFramework);
            this.tableLibrary = new LibraryDataTable();
            base.Tables.Add(this.tableLibrary);
            this.tableGlobalVariable = new GlobalVariableDataTable();
            base.Tables.Add(this.tableGlobalVariable);
            this.tableFunction = new FunctionDataTable();
            base.Tables.Add(this.tableFunction);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("MapBasicFramework_Library", new System.Data.DataColumn[] {
                        this.tableMapBasicFramework.MapBasicFramework_IdColumn}, new System.Data.DataColumn[] {
                        this.tableLibrary.MapBasicFramework_IdColumn});
            this.tableLibrary.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Library_GlobalVariable", new System.Data.DataColumn[] {
                        this.tableLibrary.LibraryNameColumn}, new System.Data.DataColumn[] {
                        this.tableGlobalVariable.LibraryNameColumn});
            this.tableGlobalVariable.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Library_Function", new System.Data.DataColumn[] {
                        this.tableLibrary.LibraryNameColumn}, new System.Data.DataColumn[] {
                        this.tableFunction.LibraryNameColumn});
            this.tableFunction.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationMapBasicFramework_Library = new System.Data.DataRelation("MapBasicFramework_Library", new System.Data.DataColumn[] {
                        this.tableMapBasicFramework.MapBasicFramework_IdColumn}, new System.Data.DataColumn[] {
                        this.tableLibrary.MapBasicFramework_IdColumn}, false);
            this.relationMapBasicFramework_Library.Nested = true;
            this.Relations.Add(this.relationMapBasicFramework_Library);
            this.relationLibrary_GlobalVariable = new System.Data.DataRelation("Library_GlobalVariable", new System.Data.DataColumn[] {
                        this.tableLibrary.LibraryNameColumn}, new System.Data.DataColumn[] {
                        this.tableGlobalVariable.LibraryNameColumn}, false);
            this.relationLibrary_GlobalVariable.Nested = true;
            this.Relations.Add(this.relationLibrary_GlobalVariable);
            this.relationLibrary_Function = new System.Data.DataRelation("Library_Function", new System.Data.DataColumn[] {
                        this.tableLibrary.LibraryNameColumn}, new System.Data.DataColumn[] {
                        this.tableFunction.LibraryNameColumn}, false);
            this.relationLibrary_Function.Nested = true;
            this.Relations.Add(this.relationLibrary_Function);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMapBasicFramework() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLibrary() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGlobalVariable() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFunction() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            EngineConfiguration ds = new EngineConfiguration();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void MapBasicFrameworkRowChangeEventHandler(object sender, MapBasicFrameworkRowChangeEvent e);
        
        public delegate void LibraryRowChangeEventHandler(object sender, LibraryRowChangeEvent e);
        
        public delegate void GlobalVariableRowChangeEventHandler(object sender, GlobalVariableRowChangeEvent e);
        
        public delegate void FunctionRowChangeEventHandler(object sender, FunctionRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MapBasicFrameworkDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnMapBasicFramework_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapBasicFrameworkDataTable() {
                this.TableName = "MapBasicFramework";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MapBasicFrameworkDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MapBasicFrameworkDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MapBasicFramework_IdColumn {
                get {
                    return this.columnMapBasicFramework_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapBasicFrameworkRow this[int index] {
                get {
                    return ((MapBasicFrameworkRow)(this.Rows[index]));
                }
            }
            
            public event MapBasicFrameworkRowChangeEventHandler MapBasicFrameworkRowChanging;
            
            public event MapBasicFrameworkRowChangeEventHandler MapBasicFrameworkRowChanged;
            
            public event MapBasicFrameworkRowChangeEventHandler MapBasicFrameworkRowDeleting;
            
            public event MapBasicFrameworkRowChangeEventHandler MapBasicFrameworkRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMapBasicFrameworkRow(MapBasicFrameworkRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapBasicFrameworkRow AddMapBasicFrameworkRow() {
                MapBasicFrameworkRow rowMapBasicFrameworkRow = ((MapBasicFrameworkRow)(this.NewRow()));
                rowMapBasicFrameworkRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowMapBasicFrameworkRow);
                return rowMapBasicFrameworkRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MapBasicFrameworkDataTable cln = ((MapBasicFrameworkDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MapBasicFrameworkDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMapBasicFramework_Id = base.Columns["MapBasicFramework_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMapBasicFramework_Id = new System.Data.DataColumn("MapBasicFramework_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMapBasicFramework_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnMapBasicFramework_Id}, true));
                this.columnMapBasicFramework_Id.AutoIncrement = true;
                this.columnMapBasicFramework_Id.AllowDBNull = false;
                this.columnMapBasicFramework_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapBasicFrameworkRow NewMapBasicFrameworkRow() {
                return ((MapBasicFrameworkRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MapBasicFrameworkRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MapBasicFrameworkRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MapBasicFrameworkRowChanged != null)) {
                    this.MapBasicFrameworkRowChanged(this, new MapBasicFrameworkRowChangeEvent(((MapBasicFrameworkRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MapBasicFrameworkRowChanging != null)) {
                    this.MapBasicFrameworkRowChanging(this, new MapBasicFrameworkRowChangeEvent(((MapBasicFrameworkRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MapBasicFrameworkRowDeleted != null)) {
                    this.MapBasicFrameworkRowDeleted(this, new MapBasicFrameworkRowChangeEvent(((MapBasicFrameworkRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MapBasicFrameworkRowDeleting != null)) {
                    this.MapBasicFrameworkRowDeleting(this, new MapBasicFrameworkRowChangeEvent(((MapBasicFrameworkRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMapBasicFrameworkRow(MapBasicFrameworkRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                EngineConfiguration ds = new EngineConfiguration();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MapBasicFrameworkDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LibraryDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLibraryName;
            
            private System.Data.DataColumn columnLocation;
            
            private System.Data.DataColumn columnExecGroup;
            
            private System.Data.DataColumn columnMapBasicFramework_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LibraryDataTable() {
                this.TableName = "Library";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LibraryDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LibraryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LibraryNameColumn {
                get {
                    return this.columnLibraryName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExecGroupColumn {
                get {
                    return this.columnExecGroup;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MapBasicFramework_IdColumn {
                get {
                    return this.columnMapBasicFramework_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LibraryRow this[int index] {
                get {
                    return ((LibraryRow)(this.Rows[index]));
                }
            }
            
            public event LibraryRowChangeEventHandler LibraryRowChanging;
            
            public event LibraryRowChangeEventHandler LibraryRowChanged;
            
            public event LibraryRowChangeEventHandler LibraryRowDeleting;
            
            public event LibraryRowChangeEventHandler LibraryRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLibraryRow(LibraryRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LibraryRow AddLibraryRow(string LibraryName, string Location, string ExecGroup, MapBasicFrameworkRow parentMapBasicFrameworkRowByMapBasicFramework_Library) {
                LibraryRow rowLibraryRow = ((LibraryRow)(this.NewRow()));
                rowLibraryRow.ItemArray = new object[] {
                        LibraryName,
                        Location,
                        ExecGroup,
                        parentMapBasicFrameworkRowByMapBasicFramework_Library[0]};
                this.Rows.Add(rowLibraryRow);
                return rowLibraryRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LibraryRow FindByLibraryName(string LibraryName) {
                return ((LibraryRow)(this.Rows.Find(new object[] {
                            LibraryName})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LibraryDataTable cln = ((LibraryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LibraryDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLibraryName = base.Columns["LibraryName"];
                this.columnLocation = base.Columns["Location"];
                this.columnExecGroup = base.Columns["ExecGroup"];
                this.columnMapBasicFramework_Id = base.Columns["MapBasicFramework_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLibraryName = new System.Data.DataColumn("LibraryName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLibraryName);
                this.columnLocation = new System.Data.DataColumn("Location", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnExecGroup = new System.Data.DataColumn("ExecGroup", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExecGroup);
                this.columnMapBasicFramework_Id = new System.Data.DataColumn("MapBasicFramework_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMapBasicFramework_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("AltEngineConfigurationKey1", new System.Data.DataColumn[] {
                                this.columnLibraryName}, true));
                this.columnLibraryName.AllowDBNull = false;
                this.columnLibraryName.Unique = true;
                this.columnLocation.AllowDBNull = false;
                this.columnExecGroup.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LibraryRow NewLibraryRow() {
                return ((LibraryRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LibraryRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LibraryRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LibraryRowChanged != null)) {
                    this.LibraryRowChanged(this, new LibraryRowChangeEvent(((LibraryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LibraryRowChanging != null)) {
                    this.LibraryRowChanging(this, new LibraryRowChangeEvent(((LibraryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LibraryRowDeleted != null)) {
                    this.LibraryRowDeleted(this, new LibraryRowChangeEvent(((LibraryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LibraryRowDeleting != null)) {
                    this.LibraryRowDeleting(this, new LibraryRowChangeEvent(((LibraryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLibraryRow(LibraryRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                EngineConfiguration ds = new EngineConfiguration();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LibraryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GlobalVariableDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnRelativeTo;
            
            private System.Data.DataColumn columnLibraryName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalVariableDataTable() {
                this.TableName = "GlobalVariable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GlobalVariableDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GlobalVariableDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RelativeToColumn {
                get {
                    return this.columnRelativeTo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LibraryNameColumn {
                get {
                    return this.columnLibraryName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalVariableRow this[int index] {
                get {
                    return ((GlobalVariableRow)(this.Rows[index]));
                }
            }
            
            public event GlobalVariableRowChangeEventHandler GlobalVariableRowChanging;
            
            public event GlobalVariableRowChangeEventHandler GlobalVariableRowChanged;
            
            public event GlobalVariableRowChangeEventHandler GlobalVariableRowDeleting;
            
            public event GlobalVariableRowChangeEventHandler GlobalVariableRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGlobalVariableRow(GlobalVariableRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalVariableRow AddGlobalVariableRow(string Name, string Value, string RelativeTo, LibraryRow parentLibraryRowByLibrary_GlobalVariable) {
                GlobalVariableRow rowGlobalVariableRow = ((GlobalVariableRow)(this.NewRow()));
                rowGlobalVariableRow.ItemArray = new object[] {
                        Name,
                        Value,
                        RelativeTo,
                        parentLibraryRowByLibrary_GlobalVariable[0]};
                this.Rows.Add(rowGlobalVariableRow);
                return rowGlobalVariableRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GlobalVariableDataTable cln = ((GlobalVariableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GlobalVariableDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnValue = base.Columns["Value"];
                this.columnRelativeTo = base.Columns["RelativeTo"];
                this.columnLibraryName = base.Columns["LibraryName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnRelativeTo = new System.Data.DataColumn("RelativeTo", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRelativeTo);
                this.columnLibraryName = new System.Data.DataColumn("LibraryName", typeof(string), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLibraryName);
                this.columnName.Namespace = "";
                this.columnValue.Namespace = "";
                this.columnRelativeTo.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalVariableRow NewGlobalVariableRow() {
                return ((GlobalVariableRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GlobalVariableRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GlobalVariableRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GlobalVariableRowChanged != null)) {
                    this.GlobalVariableRowChanged(this, new GlobalVariableRowChangeEvent(((GlobalVariableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GlobalVariableRowChanging != null)) {
                    this.GlobalVariableRowChanging(this, new GlobalVariableRowChangeEvent(((GlobalVariableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GlobalVariableRowDeleted != null)) {
                    this.GlobalVariableRowDeleted(this, new GlobalVariableRowChangeEvent(((GlobalVariableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GlobalVariableRowDeleting != null)) {
                    this.GlobalVariableRowDeleting(this, new GlobalVariableRowChangeEvent(((GlobalVariableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGlobalVariableRow(GlobalVariableRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                EngineConfiguration ds = new EngineConfiguration();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GlobalVariableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FunctionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnCommandID;
            
            private System.Data.DataColumn columnLibraryName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FunctionDataTable() {
                this.TableName = "Function";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FunctionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FunctionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CommandIDColumn {
                get {
                    return this.columnCommandID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LibraryNameColumn {
                get {
                    return this.columnLibraryName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FunctionRow this[int index] {
                get {
                    return ((FunctionRow)(this.Rows[index]));
                }
            }
            
            public event FunctionRowChangeEventHandler FunctionRowChanging;
            
            public event FunctionRowChangeEventHandler FunctionRowChanged;
            
            public event FunctionRowChangeEventHandler FunctionRowDeleting;
            
            public event FunctionRowChangeEventHandler FunctionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFunctionRow(FunctionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FunctionRow AddFunctionRow(string Name, string CommandID, LibraryRow parentLibraryRowByLibrary_Function) {
                FunctionRow rowFunctionRow = ((FunctionRow)(this.NewRow()));
                rowFunctionRow.ItemArray = new object[] {
                        Name,
                        CommandID,
                        parentLibraryRowByLibrary_Function[0]};
                this.Rows.Add(rowFunctionRow);
                return rowFunctionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FunctionDataTable cln = ((FunctionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FunctionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnCommandID = base.Columns["CommandID"];
                this.columnLibraryName = base.Columns["LibraryName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnCommandID = new System.Data.DataColumn("CommandID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommandID);
                this.columnLibraryName = new System.Data.DataColumn("LibraryName", typeof(string), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLibraryName);
                this.columnName.AllowDBNull = false;
                this.columnCommandID.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FunctionRow NewFunctionRow() {
                return ((FunctionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FunctionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FunctionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FunctionRowChanged != null)) {
                    this.FunctionRowChanged(this, new FunctionRowChangeEvent(((FunctionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FunctionRowChanging != null)) {
                    this.FunctionRowChanging(this, new FunctionRowChangeEvent(((FunctionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FunctionRowDeleted != null)) {
                    this.FunctionRowDeleted(this, new FunctionRowChangeEvent(((FunctionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FunctionRowDeleting != null)) {
                    this.FunctionRowDeleting(this, new FunctionRowChangeEvent(((FunctionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFunctionRow(FunctionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                EngineConfiguration ds = new EngineConfiguration();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FunctionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MapBasicFrameworkRow : System.Data.DataRow {
            
            private MapBasicFrameworkDataTable tableMapBasicFramework;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MapBasicFrameworkRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMapBasicFramework = ((MapBasicFrameworkDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MapBasicFramework_Id {
                get {
                    return ((int)(this[this.tableMapBasicFramework.MapBasicFramework_IdColumn]));
                }
                set {
                    this[this.tableMapBasicFramework.MapBasicFramework_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LibraryRow[] GetLibraryRows() {
                return ((LibraryRow[])(base.GetChildRows(this.Table.ChildRelations["MapBasicFramework_Library"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LibraryRow : System.Data.DataRow {
            
            private LibraryDataTable tableLibrary;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LibraryRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLibrary = ((LibraryDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LibraryName {
                get {
                    return ((string)(this[this.tableLibrary.LibraryNameColumn]));
                }
                set {
                    this[this.tableLibrary.LibraryNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Location {
                get {
                    return ((string)(this[this.tableLibrary.LocationColumn]));
                }
                set {
                    this[this.tableLibrary.LocationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExecGroup {
                get {
                    return ((string)(this[this.tableLibrary.ExecGroupColumn]));
                }
                set {
                    this[this.tableLibrary.ExecGroupColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MapBasicFramework_Id {
                get {
                    try {
                        return ((int)(this[this.tableLibrary.MapBasicFramework_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MapBasicFramework_Id\' in table \'Library\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLibrary.MapBasicFramework_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapBasicFrameworkRow MapBasicFrameworkRow {
                get {
                    return ((MapBasicFrameworkRow)(this.GetParentRow(this.Table.ParentRelations["MapBasicFramework_Library"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MapBasicFramework_Library"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMapBasicFramework_IdNull() {
                return this.IsNull(this.tableLibrary.MapBasicFramework_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMapBasicFramework_IdNull() {
                this[this.tableLibrary.MapBasicFramework_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalVariableRow[] GetGlobalVariableRows() {
                return ((GlobalVariableRow[])(base.GetChildRows(this.Table.ChildRelations["Library_GlobalVariable"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FunctionRow[] GetFunctionRows() {
                return ((FunctionRow[])(base.GetChildRows(this.Table.ChildRelations["Library_Function"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GlobalVariableRow : System.Data.DataRow {
            
            private GlobalVariableDataTable tableGlobalVariable;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GlobalVariableRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGlobalVariable = ((GlobalVariableDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableGlobalVariable.NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Name\' in table \'GlobalVariable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGlobalVariable.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableGlobalVariable.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'GlobalVariable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGlobalVariable.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RelativeTo {
                get {
                    if (this.IsRelativeToNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGlobalVariable.RelativeToColumn]));
                    }
                }
                set {
                    this[this.tableGlobalVariable.RelativeToColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LibraryName {
                get {
                    try {
                        return ((string)(this[this.tableGlobalVariable.LibraryNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LibraryName\' in table \'GlobalVariable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGlobalVariable.LibraryNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LibraryRow LibraryRow {
                get {
                    return ((LibraryRow)(this.GetParentRow(this.Table.ParentRelations["Library_GlobalVariable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Library_GlobalVariable"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableGlobalVariable.NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableGlobalVariable.NameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableGlobalVariable.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableGlobalVariable.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRelativeToNull() {
                return this.IsNull(this.tableGlobalVariable.RelativeToColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRelativeToNull() {
                this[this.tableGlobalVariable.RelativeToColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLibraryNameNull() {
                return this.IsNull(this.tableGlobalVariable.LibraryNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLibraryNameNull() {
                this[this.tableGlobalVariable.LibraryNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FunctionRow : System.Data.DataRow {
            
            private FunctionDataTable tableFunction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FunctionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFunction = ((FunctionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableFunction.NameColumn]));
                }
                set {
                    this[this.tableFunction.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CommandID {
                get {
                    return ((string)(this[this.tableFunction.CommandIDColumn]));
                }
                set {
                    this[this.tableFunction.CommandIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LibraryName {
                get {
                    try {
                        return ((string)(this[this.tableFunction.LibraryNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LibraryName\' in table \'Function\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFunction.LibraryNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LibraryRow LibraryRow {
                get {
                    return ((LibraryRow)(this.GetParentRow(this.Table.ParentRelations["Library_Function"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Library_Function"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLibraryNameNull() {
                return this.IsNull(this.tableFunction.LibraryNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLibraryNameNull() {
                this[this.tableFunction.LibraryNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MapBasicFrameworkRowChangeEvent : System.EventArgs {
            
            private MapBasicFrameworkRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapBasicFrameworkRowChangeEvent(MapBasicFrameworkRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapBasicFrameworkRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LibraryRowChangeEvent : System.EventArgs {
            
            private LibraryRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LibraryRowChangeEvent(LibraryRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LibraryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GlobalVariableRowChangeEvent : System.EventArgs {
            
            private GlobalVariableRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalVariableRowChangeEvent(GlobalVariableRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalVariableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FunctionRowChangeEvent : System.EventArgs {
            
            private FunctionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FunctionRowChangeEvent(FunctionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FunctionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591
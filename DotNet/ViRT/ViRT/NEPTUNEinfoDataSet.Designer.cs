//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ViRT {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("NEPTUNEinfoDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class NEPTUNEinfoDataSet : global::System.Data.DataSet {
        
        private CONDUCTANCE_DATADataTable tableCONDUCTANCE_DATA;
        
        private CURRENT_DATADataTable tableCURRENT_DATA;
        
        private DEPTH_DATADataTable tableDEPTH_DATA;
        
        private EXPLOSIVITY_DATADataTable tableEXPLOSIVITY_DATA;
        
        private FLOW_DATADataTable tableFLOW_DATA;
        
        private GATEPOSITION_DATADataTable tableGATEPOSITION_DATA;
        
        private H2S_DATADataTable tableH2S_DATA;
        
        private HUMIDITY_DATADataTable tableHUMIDITY_DATA;
        
        private PH_DATADataTable tablePH_DATA;
        
        private PRESSURE_DATADataTable tablePRESSURE_DATA;
        
        private SHAFTSPEED_DATADataTable tableSHAFTSPEED_DATA;
        
        private TEMPERATURE_DATADataTable tableTEMPERATURE_DATA;
        
        private VELOCITY_DATADataTable tableVELOCITY_DATA;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NEPTUNEinfoDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected NEPTUNEinfoDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["CONDUCTANCE_DATA"] != null)) {
                    base.Tables.Add(new CONDUCTANCE_DATADataTable(ds.Tables["CONDUCTANCE_DATA"]));
                }
                if ((ds.Tables["CURRENT_DATA"] != null)) {
                    base.Tables.Add(new CURRENT_DATADataTable(ds.Tables["CURRENT_DATA"]));
                }
                if ((ds.Tables["DEPTH_DATA"] != null)) {
                    base.Tables.Add(new DEPTH_DATADataTable(ds.Tables["DEPTH_DATA"]));
                }
                if ((ds.Tables["EXPLOSIVITY_DATA"] != null)) {
                    base.Tables.Add(new EXPLOSIVITY_DATADataTable(ds.Tables["EXPLOSIVITY_DATA"]));
                }
                if ((ds.Tables["FLOW_DATA"] != null)) {
                    base.Tables.Add(new FLOW_DATADataTable(ds.Tables["FLOW_DATA"]));
                }
                if ((ds.Tables["GATEPOSITION_DATA"] != null)) {
                    base.Tables.Add(new GATEPOSITION_DATADataTable(ds.Tables["GATEPOSITION_DATA"]));
                }
                if ((ds.Tables["H2S_DATA"] != null)) {
                    base.Tables.Add(new H2S_DATADataTable(ds.Tables["H2S_DATA"]));
                }
                if ((ds.Tables["HUMIDITY_DATA"] != null)) {
                    base.Tables.Add(new HUMIDITY_DATADataTable(ds.Tables["HUMIDITY_DATA"]));
                }
                if ((ds.Tables["PH_DATA"] != null)) {
                    base.Tables.Add(new PH_DATADataTable(ds.Tables["PH_DATA"]));
                }
                if ((ds.Tables["PRESSURE_DATA"] != null)) {
                    base.Tables.Add(new PRESSURE_DATADataTable(ds.Tables["PRESSURE_DATA"]));
                }
                if ((ds.Tables["SHAFTSPEED_DATA"] != null)) {
                    base.Tables.Add(new SHAFTSPEED_DATADataTable(ds.Tables["SHAFTSPEED_DATA"]));
                }
                if ((ds.Tables["TEMPERATURE_DATA"] != null)) {
                    base.Tables.Add(new TEMPERATURE_DATADataTable(ds.Tables["TEMPERATURE_DATA"]));
                }
                if ((ds.Tables["VELOCITY_DATA"] != null)) {
                    base.Tables.Add(new VELOCITY_DATADataTable(ds.Tables["VELOCITY_DATA"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CONDUCTANCE_DATADataTable CONDUCTANCE_DATA {
            get {
                return this.tableCONDUCTANCE_DATA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CURRENT_DATADataTable CURRENT_DATA {
            get {
                return this.tableCURRENT_DATA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DEPTH_DATADataTable DEPTH_DATA {
            get {
                return this.tableDEPTH_DATA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EXPLOSIVITY_DATADataTable EXPLOSIVITY_DATA {
            get {
                return this.tableEXPLOSIVITY_DATA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FLOW_DATADataTable FLOW_DATA {
            get {
                return this.tableFLOW_DATA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GATEPOSITION_DATADataTable GATEPOSITION_DATA {
            get {
                return this.tableGATEPOSITION_DATA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public H2S_DATADataTable H2S_DATA {
            get {
                return this.tableH2S_DATA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HUMIDITY_DATADataTable HUMIDITY_DATA {
            get {
                return this.tableHUMIDITY_DATA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PH_DATADataTable PH_DATA {
            get {
                return this.tablePH_DATA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PRESSURE_DATADataTable PRESSURE_DATA {
            get {
                return this.tablePRESSURE_DATA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SHAFTSPEED_DATADataTable SHAFTSPEED_DATA {
            get {
                return this.tableSHAFTSPEED_DATA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TEMPERATURE_DATADataTable TEMPERATURE_DATA {
            get {
                return this.tableTEMPERATURE_DATA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VELOCITY_DATADataTable VELOCITY_DATA {
            get {
                return this.tableVELOCITY_DATA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            NEPTUNEinfoDataSet cln = ((NEPTUNEinfoDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["CONDUCTANCE_DATA"] != null)) {
                    base.Tables.Add(new CONDUCTANCE_DATADataTable(ds.Tables["CONDUCTANCE_DATA"]));
                }
                if ((ds.Tables["CURRENT_DATA"] != null)) {
                    base.Tables.Add(new CURRENT_DATADataTable(ds.Tables["CURRENT_DATA"]));
                }
                if ((ds.Tables["DEPTH_DATA"] != null)) {
                    base.Tables.Add(new DEPTH_DATADataTable(ds.Tables["DEPTH_DATA"]));
                }
                if ((ds.Tables["EXPLOSIVITY_DATA"] != null)) {
                    base.Tables.Add(new EXPLOSIVITY_DATADataTable(ds.Tables["EXPLOSIVITY_DATA"]));
                }
                if ((ds.Tables["FLOW_DATA"] != null)) {
                    base.Tables.Add(new FLOW_DATADataTable(ds.Tables["FLOW_DATA"]));
                }
                if ((ds.Tables["GATEPOSITION_DATA"] != null)) {
                    base.Tables.Add(new GATEPOSITION_DATADataTable(ds.Tables["GATEPOSITION_DATA"]));
                }
                if ((ds.Tables["H2S_DATA"] != null)) {
                    base.Tables.Add(new H2S_DATADataTable(ds.Tables["H2S_DATA"]));
                }
                if ((ds.Tables["HUMIDITY_DATA"] != null)) {
                    base.Tables.Add(new HUMIDITY_DATADataTable(ds.Tables["HUMIDITY_DATA"]));
                }
                if ((ds.Tables["PH_DATA"] != null)) {
                    base.Tables.Add(new PH_DATADataTable(ds.Tables["PH_DATA"]));
                }
                if ((ds.Tables["PRESSURE_DATA"] != null)) {
                    base.Tables.Add(new PRESSURE_DATADataTable(ds.Tables["PRESSURE_DATA"]));
                }
                if ((ds.Tables["SHAFTSPEED_DATA"] != null)) {
                    base.Tables.Add(new SHAFTSPEED_DATADataTable(ds.Tables["SHAFTSPEED_DATA"]));
                }
                if ((ds.Tables["TEMPERATURE_DATA"] != null)) {
                    base.Tables.Add(new TEMPERATURE_DATADataTable(ds.Tables["TEMPERATURE_DATA"]));
                }
                if ((ds.Tables["VELOCITY_DATA"] != null)) {
                    base.Tables.Add(new VELOCITY_DATADataTable(ds.Tables["VELOCITY_DATA"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableCONDUCTANCE_DATA = ((CONDUCTANCE_DATADataTable)(base.Tables["CONDUCTANCE_DATA"]));
            if ((initTable == true)) {
                if ((this.tableCONDUCTANCE_DATA != null)) {
                    this.tableCONDUCTANCE_DATA.InitVars();
                }
            }
            this.tableCURRENT_DATA = ((CURRENT_DATADataTable)(base.Tables["CURRENT_DATA"]));
            if ((initTable == true)) {
                if ((this.tableCURRENT_DATA != null)) {
                    this.tableCURRENT_DATA.InitVars();
                }
            }
            this.tableDEPTH_DATA = ((DEPTH_DATADataTable)(base.Tables["DEPTH_DATA"]));
            if ((initTable == true)) {
                if ((this.tableDEPTH_DATA != null)) {
                    this.tableDEPTH_DATA.InitVars();
                }
            }
            this.tableEXPLOSIVITY_DATA = ((EXPLOSIVITY_DATADataTable)(base.Tables["EXPLOSIVITY_DATA"]));
            if ((initTable == true)) {
                if ((this.tableEXPLOSIVITY_DATA != null)) {
                    this.tableEXPLOSIVITY_DATA.InitVars();
                }
            }
            this.tableFLOW_DATA = ((FLOW_DATADataTable)(base.Tables["FLOW_DATA"]));
            if ((initTable == true)) {
                if ((this.tableFLOW_DATA != null)) {
                    this.tableFLOW_DATA.InitVars();
                }
            }
            this.tableGATEPOSITION_DATA = ((GATEPOSITION_DATADataTable)(base.Tables["GATEPOSITION_DATA"]));
            if ((initTable == true)) {
                if ((this.tableGATEPOSITION_DATA != null)) {
                    this.tableGATEPOSITION_DATA.InitVars();
                }
            }
            this.tableH2S_DATA = ((H2S_DATADataTable)(base.Tables["H2S_DATA"]));
            if ((initTable == true)) {
                if ((this.tableH2S_DATA != null)) {
                    this.tableH2S_DATA.InitVars();
                }
            }
            this.tableHUMIDITY_DATA = ((HUMIDITY_DATADataTable)(base.Tables["HUMIDITY_DATA"]));
            if ((initTable == true)) {
                if ((this.tableHUMIDITY_DATA != null)) {
                    this.tableHUMIDITY_DATA.InitVars();
                }
            }
            this.tablePH_DATA = ((PH_DATADataTable)(base.Tables["PH_DATA"]));
            if ((initTable == true)) {
                if ((this.tablePH_DATA != null)) {
                    this.tablePH_DATA.InitVars();
                }
            }
            this.tablePRESSURE_DATA = ((PRESSURE_DATADataTable)(base.Tables["PRESSURE_DATA"]));
            if ((initTable == true)) {
                if ((this.tablePRESSURE_DATA != null)) {
                    this.tablePRESSURE_DATA.InitVars();
                }
            }
            this.tableSHAFTSPEED_DATA = ((SHAFTSPEED_DATADataTable)(base.Tables["SHAFTSPEED_DATA"]));
            if ((initTable == true)) {
                if ((this.tableSHAFTSPEED_DATA != null)) {
                    this.tableSHAFTSPEED_DATA.InitVars();
                }
            }
            this.tableTEMPERATURE_DATA = ((TEMPERATURE_DATADataTable)(base.Tables["TEMPERATURE_DATA"]));
            if ((initTable == true)) {
                if ((this.tableTEMPERATURE_DATA != null)) {
                    this.tableTEMPERATURE_DATA.InitVars();
                }
            }
            this.tableVELOCITY_DATA = ((VELOCITY_DATADataTable)(base.Tables["VELOCITY_DATA"]));
            if ((initTable == true)) {
                if ((this.tableVELOCITY_DATA != null)) {
                    this.tableVELOCITY_DATA.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "NEPTUNEinfoDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/NEPTUNEinfoDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCONDUCTANCE_DATA = new CONDUCTANCE_DATADataTable();
            base.Tables.Add(this.tableCONDUCTANCE_DATA);
            this.tableCURRENT_DATA = new CURRENT_DATADataTable();
            base.Tables.Add(this.tableCURRENT_DATA);
            this.tableDEPTH_DATA = new DEPTH_DATADataTable();
            base.Tables.Add(this.tableDEPTH_DATA);
            this.tableEXPLOSIVITY_DATA = new EXPLOSIVITY_DATADataTable();
            base.Tables.Add(this.tableEXPLOSIVITY_DATA);
            this.tableFLOW_DATA = new FLOW_DATADataTable();
            base.Tables.Add(this.tableFLOW_DATA);
            this.tableGATEPOSITION_DATA = new GATEPOSITION_DATADataTable();
            base.Tables.Add(this.tableGATEPOSITION_DATA);
            this.tableH2S_DATA = new H2S_DATADataTable();
            base.Tables.Add(this.tableH2S_DATA);
            this.tableHUMIDITY_DATA = new HUMIDITY_DATADataTable();
            base.Tables.Add(this.tableHUMIDITY_DATA);
            this.tablePH_DATA = new PH_DATADataTable();
            base.Tables.Add(this.tablePH_DATA);
            this.tablePRESSURE_DATA = new PRESSURE_DATADataTable();
            base.Tables.Add(this.tablePRESSURE_DATA);
            this.tableSHAFTSPEED_DATA = new SHAFTSPEED_DATADataTable();
            base.Tables.Add(this.tableSHAFTSPEED_DATA);
            this.tableTEMPERATURE_DATA = new TEMPERATURE_DATADataTable();
            base.Tables.Add(this.tableTEMPERATURE_DATA);
            this.tableVELOCITY_DATA = new VELOCITY_DATADataTable();
            base.Tables.Add(this.tableVELOCITY_DATA);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCONDUCTANCE_DATA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCURRENT_DATA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDEPTH_DATA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEXPLOSIVITY_DATA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFLOW_DATA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGATEPOSITION_DATA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeH2S_DATA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHUMIDITY_DATA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePH_DATA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePRESSURE_DATA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSHAFTSPEED_DATA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTEMPERATURE_DATA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVELOCITY_DATA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            NEPTUNEinfoDataSet ds = new NEPTUNEinfoDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void CONDUCTANCE_DATARowChangeEventHandler(object sender, CONDUCTANCE_DATARowChangeEvent e);
        
        public delegate void CURRENT_DATARowChangeEventHandler(object sender, CURRENT_DATARowChangeEvent e);
        
        public delegate void DEPTH_DATARowChangeEventHandler(object sender, DEPTH_DATARowChangeEvent e);
        
        public delegate void EXPLOSIVITY_DATARowChangeEventHandler(object sender, EXPLOSIVITY_DATARowChangeEvent e);
        
        public delegate void FLOW_DATARowChangeEventHandler(object sender, FLOW_DATARowChangeEvent e);
        
        public delegate void GATEPOSITION_DATARowChangeEventHandler(object sender, GATEPOSITION_DATARowChangeEvent e);
        
        public delegate void H2S_DATARowChangeEventHandler(object sender, H2S_DATARowChangeEvent e);
        
        public delegate void HUMIDITY_DATARowChangeEventHandler(object sender, HUMIDITY_DATARowChangeEvent e);
        
        public delegate void PH_DATARowChangeEventHandler(object sender, PH_DATARowChangeEvent e);
        
        public delegate void PRESSURE_DATARowChangeEventHandler(object sender, PRESSURE_DATARowChangeEvent e);
        
        public delegate void SHAFTSPEED_DATARowChangeEventHandler(object sender, SHAFTSPEED_DATARowChangeEvent e);
        
        public delegate void TEMPERATURE_DATARowChangeEventHandler(object sender, TEMPERATURE_DATARowChangeEvent e);
        
        public delegate void VELOCITY_DATARowChangeEventHandler(object sender, VELOCITY_DATARowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CONDUCTANCE_DATADataTable : global::System.Data.TypedTableBase<CONDUCTANCE_DATARow> {
            
            private global::System.Data.DataColumn columnconductance_data_id;
            
            private global::System.Data.DataColumn columncalendar_date_id;
            
            private global::System.Data.DataColumn columntime_of_day_id;
            
            private global::System.Data.DataColumn columnstation_id;
            
            private global::System.Data.DataColumn columnenviron_sensor_id;
            
            private global::System.Data.DataColumn columnlocation_qualifier;
            
            private global::System.Data.DataColumn columnoriginal_sample_time;
            
            private global::System.Data.DataColumn columnassigned_sample_time;
            
            private global::System.Data.DataColumn columnraw_value;
            
            private global::System.Data.DataColumn columnfinal_value;
            
            private global::System.Data.DataColumn columnload_date;
            
            private global::System.Data.DataColumn columnsource_filename;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONDUCTANCE_DATADataTable() {
                this.TableName = "CONDUCTANCE_DATA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CONDUCTANCE_DATADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CONDUCTANCE_DATADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn conductance_data_idColumn {
                get {
                    return this.columnconductance_data_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn calendar_date_idColumn {
                get {
                    return this.columncalendar_date_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn time_of_day_idColumn {
                get {
                    return this.columntime_of_day_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn station_idColumn {
                get {
                    return this.columnstation_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn environ_sensor_idColumn {
                get {
                    return this.columnenviron_sensor_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn location_qualifierColumn {
                get {
                    return this.columnlocation_qualifier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn original_sample_timeColumn {
                get {
                    return this.columnoriginal_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assigned_sample_timeColumn {
                get {
                    return this.columnassigned_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn raw_valueColumn {
                get {
                    return this.columnraw_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn final_valueColumn {
                get {
                    return this.columnfinal_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn load_dateColumn {
                get {
                    return this.columnload_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn source_filenameColumn {
                get {
                    return this.columnsource_filename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONDUCTANCE_DATARow this[int index] {
                get {
                    return ((CONDUCTANCE_DATARow)(this.Rows[index]));
                }
            }
            
            public event CONDUCTANCE_DATARowChangeEventHandler CONDUCTANCE_DATARowChanging;
            
            public event CONDUCTANCE_DATARowChangeEventHandler CONDUCTANCE_DATARowChanged;
            
            public event CONDUCTANCE_DATARowChangeEventHandler CONDUCTANCE_DATARowDeleting;
            
            public event CONDUCTANCE_DATARowChangeEventHandler CONDUCTANCE_DATARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCONDUCTANCE_DATARow(CONDUCTANCE_DATARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONDUCTANCE_DATARow AddCONDUCTANCE_DATARow(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime original_sample_time, System.DateTime assigned_sample_time, int raw_value, decimal final_value, System.DateTime load_date, string source_filename) {
                CONDUCTANCE_DATARow rowCONDUCTANCE_DATARow = ((CONDUCTANCE_DATARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        calendar_date_id,
                        time_of_day_id,
                        station_id,
                        environ_sensor_id,
                        location_qualifier,
                        original_sample_time,
                        assigned_sample_time,
                        raw_value,
                        final_value,
                        load_date,
                        source_filename};
                rowCONDUCTANCE_DATARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCONDUCTANCE_DATARow);
                return rowCONDUCTANCE_DATARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONDUCTANCE_DATARow FindByconductance_data_id(int conductance_data_id) {
                return ((CONDUCTANCE_DATARow)(this.Rows.Find(new object[] {
                            conductance_data_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CONDUCTANCE_DATADataTable cln = ((CONDUCTANCE_DATADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CONDUCTANCE_DATADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnconductance_data_id = base.Columns["conductance_data_id"];
                this.columncalendar_date_id = base.Columns["calendar_date_id"];
                this.columntime_of_day_id = base.Columns["time_of_day_id"];
                this.columnstation_id = base.Columns["station_id"];
                this.columnenviron_sensor_id = base.Columns["environ_sensor_id"];
                this.columnlocation_qualifier = base.Columns["location_qualifier"];
                this.columnoriginal_sample_time = base.Columns["original_sample_time"];
                this.columnassigned_sample_time = base.Columns["assigned_sample_time"];
                this.columnraw_value = base.Columns["raw_value"];
                this.columnfinal_value = base.Columns["final_value"];
                this.columnload_date = base.Columns["load_date"];
                this.columnsource_filename = base.Columns["source_filename"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnconductance_data_id = new global::System.Data.DataColumn("conductance_data_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconductance_data_id);
                this.columncalendar_date_id = new global::System.Data.DataColumn("calendar_date_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncalendar_date_id);
                this.columntime_of_day_id = new global::System.Data.DataColumn("time_of_day_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime_of_day_id);
                this.columnstation_id = new global::System.Data.DataColumn("station_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstation_id);
                this.columnenviron_sensor_id = new global::System.Data.DataColumn("environ_sensor_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnenviron_sensor_id);
                this.columnlocation_qualifier = new global::System.Data.DataColumn("location_qualifier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlocation_qualifier);
                this.columnoriginal_sample_time = new global::System.Data.DataColumn("original_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoriginal_sample_time);
                this.columnassigned_sample_time = new global::System.Data.DataColumn("assigned_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassigned_sample_time);
                this.columnraw_value = new global::System.Data.DataColumn("raw_value", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnraw_value);
                this.columnfinal_value = new global::System.Data.DataColumn("final_value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfinal_value);
                this.columnload_date = new global::System.Data.DataColumn("load_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnload_date);
                this.columnsource_filename = new global::System.Data.DataColumn("source_filename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsource_filename);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnconductance_data_id}, true));
                this.columnconductance_data_id.AutoIncrement = true;
                this.columnconductance_data_id.AutoIncrementSeed = -1;
                this.columnconductance_data_id.AutoIncrementStep = -1;
                this.columnconductance_data_id.AllowDBNull = false;
                this.columnconductance_data_id.ReadOnly = true;
                this.columnconductance_data_id.Unique = true;
                this.columncalendar_date_id.AllowDBNull = false;
                this.columntime_of_day_id.AllowDBNull = false;
                this.columnstation_id.AllowDBNull = false;
                this.columnenviron_sensor_id.AllowDBNull = false;
                this.columnlocation_qualifier.AllowDBNull = false;
                this.columnlocation_qualifier.MaxLength = 25;
                this.columnoriginal_sample_time.AllowDBNull = false;
                this.columnassigned_sample_time.AllowDBNull = false;
                this.columnraw_value.AllowDBNull = false;
                this.columnfinal_value.AllowDBNull = false;
                this.columnload_date.AllowDBNull = false;
                this.columnsource_filename.AllowDBNull = false;
                this.columnsource_filename.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONDUCTANCE_DATARow NewCONDUCTANCE_DATARow() {
                return ((CONDUCTANCE_DATARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CONDUCTANCE_DATARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CONDUCTANCE_DATARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CONDUCTANCE_DATARowChanged != null)) {
                    this.CONDUCTANCE_DATARowChanged(this, new CONDUCTANCE_DATARowChangeEvent(((CONDUCTANCE_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CONDUCTANCE_DATARowChanging != null)) {
                    this.CONDUCTANCE_DATARowChanging(this, new CONDUCTANCE_DATARowChangeEvent(((CONDUCTANCE_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CONDUCTANCE_DATARowDeleted != null)) {
                    this.CONDUCTANCE_DATARowDeleted(this, new CONDUCTANCE_DATARowChangeEvent(((CONDUCTANCE_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CONDUCTANCE_DATARowDeleting != null)) {
                    this.CONDUCTANCE_DATARowDeleting(this, new CONDUCTANCE_DATARowChangeEvent(((CONDUCTANCE_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCONDUCTANCE_DATARow(CONDUCTANCE_DATARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NEPTUNEinfoDataSet ds = new NEPTUNEinfoDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CONDUCTANCE_DATADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CURRENT_DATADataTable : global::System.Data.TypedTableBase<CURRENT_DATARow> {
            
            private global::System.Data.DataColumn columncurrent_data_id;
            
            private global::System.Data.DataColumn columncalendar_date_id;
            
            private global::System.Data.DataColumn columntime_of_day_id;
            
            private global::System.Data.DataColumn columnstation_id;
            
            private global::System.Data.DataColumn columnenviron_sensor_id;
            
            private global::System.Data.DataColumn columnlocation_qualifier;
            
            private global::System.Data.DataColumn columnoriginal_sample_time;
            
            private global::System.Data.DataColumn columnassigned_sample_time;
            
            private global::System.Data.DataColumn columnraw_value;
            
            private global::System.Data.DataColumn columnfinal_value;
            
            private global::System.Data.DataColumn columnload_date;
            
            private global::System.Data.DataColumn columnsource_filename;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CURRENT_DATADataTable() {
                this.TableName = "CURRENT_DATA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CURRENT_DATADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CURRENT_DATADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn current_data_idColumn {
                get {
                    return this.columncurrent_data_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn calendar_date_idColumn {
                get {
                    return this.columncalendar_date_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn time_of_day_idColumn {
                get {
                    return this.columntime_of_day_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn station_idColumn {
                get {
                    return this.columnstation_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn environ_sensor_idColumn {
                get {
                    return this.columnenviron_sensor_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn location_qualifierColumn {
                get {
                    return this.columnlocation_qualifier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn original_sample_timeColumn {
                get {
                    return this.columnoriginal_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assigned_sample_timeColumn {
                get {
                    return this.columnassigned_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn raw_valueColumn {
                get {
                    return this.columnraw_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn final_valueColumn {
                get {
                    return this.columnfinal_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn load_dateColumn {
                get {
                    return this.columnload_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn source_filenameColumn {
                get {
                    return this.columnsource_filename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CURRENT_DATARow this[int index] {
                get {
                    return ((CURRENT_DATARow)(this.Rows[index]));
                }
            }
            
            public event CURRENT_DATARowChangeEventHandler CURRENT_DATARowChanging;
            
            public event CURRENT_DATARowChangeEventHandler CURRENT_DATARowChanged;
            
            public event CURRENT_DATARowChangeEventHandler CURRENT_DATARowDeleting;
            
            public event CURRENT_DATARowChangeEventHandler CURRENT_DATARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCURRENT_DATARow(CURRENT_DATARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CURRENT_DATARow AddCURRENT_DATARow(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime original_sample_time, System.DateTime assigned_sample_time, int raw_value, decimal final_value, System.DateTime load_date, string source_filename) {
                CURRENT_DATARow rowCURRENT_DATARow = ((CURRENT_DATARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        calendar_date_id,
                        time_of_day_id,
                        station_id,
                        environ_sensor_id,
                        location_qualifier,
                        original_sample_time,
                        assigned_sample_time,
                        raw_value,
                        final_value,
                        load_date,
                        source_filename};
                rowCURRENT_DATARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCURRENT_DATARow);
                return rowCURRENT_DATARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CURRENT_DATARow FindBycurrent_data_id(int current_data_id) {
                return ((CURRENT_DATARow)(this.Rows.Find(new object[] {
                            current_data_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CURRENT_DATADataTable cln = ((CURRENT_DATADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CURRENT_DATADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncurrent_data_id = base.Columns["current_data_id"];
                this.columncalendar_date_id = base.Columns["calendar_date_id"];
                this.columntime_of_day_id = base.Columns["time_of_day_id"];
                this.columnstation_id = base.Columns["station_id"];
                this.columnenviron_sensor_id = base.Columns["environ_sensor_id"];
                this.columnlocation_qualifier = base.Columns["location_qualifier"];
                this.columnoriginal_sample_time = base.Columns["original_sample_time"];
                this.columnassigned_sample_time = base.Columns["assigned_sample_time"];
                this.columnraw_value = base.Columns["raw_value"];
                this.columnfinal_value = base.Columns["final_value"];
                this.columnload_date = base.Columns["load_date"];
                this.columnsource_filename = base.Columns["source_filename"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncurrent_data_id = new global::System.Data.DataColumn("current_data_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncurrent_data_id);
                this.columncalendar_date_id = new global::System.Data.DataColumn("calendar_date_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncalendar_date_id);
                this.columntime_of_day_id = new global::System.Data.DataColumn("time_of_day_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime_of_day_id);
                this.columnstation_id = new global::System.Data.DataColumn("station_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstation_id);
                this.columnenviron_sensor_id = new global::System.Data.DataColumn("environ_sensor_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnenviron_sensor_id);
                this.columnlocation_qualifier = new global::System.Data.DataColumn("location_qualifier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlocation_qualifier);
                this.columnoriginal_sample_time = new global::System.Data.DataColumn("original_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoriginal_sample_time);
                this.columnassigned_sample_time = new global::System.Data.DataColumn("assigned_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassigned_sample_time);
                this.columnraw_value = new global::System.Data.DataColumn("raw_value", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnraw_value);
                this.columnfinal_value = new global::System.Data.DataColumn("final_value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfinal_value);
                this.columnload_date = new global::System.Data.DataColumn("load_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnload_date);
                this.columnsource_filename = new global::System.Data.DataColumn("source_filename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsource_filename);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columncurrent_data_id}, true));
                this.columncurrent_data_id.AutoIncrement = true;
                this.columncurrent_data_id.AutoIncrementSeed = -1;
                this.columncurrent_data_id.AutoIncrementStep = -1;
                this.columncurrent_data_id.AllowDBNull = false;
                this.columncurrent_data_id.ReadOnly = true;
                this.columncurrent_data_id.Unique = true;
                this.columncalendar_date_id.AllowDBNull = false;
                this.columntime_of_day_id.AllowDBNull = false;
                this.columnstation_id.AllowDBNull = false;
                this.columnenviron_sensor_id.AllowDBNull = false;
                this.columnlocation_qualifier.AllowDBNull = false;
                this.columnlocation_qualifier.MaxLength = 25;
                this.columnoriginal_sample_time.AllowDBNull = false;
                this.columnassigned_sample_time.AllowDBNull = false;
                this.columnraw_value.AllowDBNull = false;
                this.columnfinal_value.AllowDBNull = false;
                this.columnload_date.AllowDBNull = false;
                this.columnsource_filename.AllowDBNull = false;
                this.columnsource_filename.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CURRENT_DATARow NewCURRENT_DATARow() {
                return ((CURRENT_DATARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CURRENT_DATARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CURRENT_DATARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CURRENT_DATARowChanged != null)) {
                    this.CURRENT_DATARowChanged(this, new CURRENT_DATARowChangeEvent(((CURRENT_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CURRENT_DATARowChanging != null)) {
                    this.CURRENT_DATARowChanging(this, new CURRENT_DATARowChangeEvent(((CURRENT_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CURRENT_DATARowDeleted != null)) {
                    this.CURRENT_DATARowDeleted(this, new CURRENT_DATARowChangeEvent(((CURRENT_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CURRENT_DATARowDeleting != null)) {
                    this.CURRENT_DATARowDeleting(this, new CURRENT_DATARowChangeEvent(((CURRENT_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCURRENT_DATARow(CURRENT_DATARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NEPTUNEinfoDataSet ds = new NEPTUNEinfoDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CURRENT_DATADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DEPTH_DATADataTable : global::System.Data.TypedTableBase<DEPTH_DATARow> {
            
            private global::System.Data.DataColumn columndate_time;
            
            private global::System.Data.DataColumn columnsum_data;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DEPTH_DATADataTable() {
                this.TableName = "DEPTH_DATA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DEPTH_DATADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DEPTH_DATADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn date_timeColumn {
                get {
                    return this.columndate_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sum_dataColumn {
                get {
                    return this.columnsum_data;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DEPTH_DATARow this[int index] {
                get {
                    return ((DEPTH_DATARow)(this.Rows[index]));
                }
            }
            
            public event DEPTH_DATARowChangeEventHandler DEPTH_DATARowChanging;
            
            public event DEPTH_DATARowChangeEventHandler DEPTH_DATARowChanged;
            
            public event DEPTH_DATARowChangeEventHandler DEPTH_DATARowDeleting;
            
            public event DEPTH_DATARowChangeEventHandler DEPTH_DATARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDEPTH_DATARow(DEPTH_DATARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DEPTH_DATARow AddDEPTH_DATARow(System.DateTime date_time, decimal sum_data) {
                DEPTH_DATARow rowDEPTH_DATARow = ((DEPTH_DATARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        date_time,
                        sum_data};
                rowDEPTH_DATARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDEPTH_DATARow);
                return rowDEPTH_DATARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DEPTH_DATADataTable cln = ((DEPTH_DATADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DEPTH_DATADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndate_time = base.Columns["date_time"];
                this.columnsum_data = base.Columns["sum_data"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndate_time = new global::System.Data.DataColumn("date_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndate_time);
                this.columnsum_data = new global::System.Data.DataColumn("sum_data", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsum_data);
                this.columnsum_data.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DEPTH_DATARow NewDEPTH_DATARow() {
                return ((DEPTH_DATARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DEPTH_DATARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DEPTH_DATARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DEPTH_DATARowChanged != null)) {
                    this.DEPTH_DATARowChanged(this, new DEPTH_DATARowChangeEvent(((DEPTH_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DEPTH_DATARowChanging != null)) {
                    this.DEPTH_DATARowChanging(this, new DEPTH_DATARowChangeEvent(((DEPTH_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DEPTH_DATARowDeleted != null)) {
                    this.DEPTH_DATARowDeleted(this, new DEPTH_DATARowChangeEvent(((DEPTH_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DEPTH_DATARowDeleting != null)) {
                    this.DEPTH_DATARowDeleting(this, new DEPTH_DATARowChangeEvent(((DEPTH_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDEPTH_DATARow(DEPTH_DATARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NEPTUNEinfoDataSet ds = new NEPTUNEinfoDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DEPTH_DATADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EXPLOSIVITY_DATADataTable : global::System.Data.TypedTableBase<EXPLOSIVITY_DATARow> {
            
            private global::System.Data.DataColumn columnexplosivity_data_id;
            
            private global::System.Data.DataColumn columncalendar_date_id;
            
            private global::System.Data.DataColumn columntime_of_day_id;
            
            private global::System.Data.DataColumn columnstation_id;
            
            private global::System.Data.DataColumn columnenviron_sensor_id;
            
            private global::System.Data.DataColumn columnlocation_qualifier;
            
            private global::System.Data.DataColumn columnoriginal_sample_time;
            
            private global::System.Data.DataColumn columnassigned_sample_time;
            
            private global::System.Data.DataColumn columnraw_value;
            
            private global::System.Data.DataColumn columnfinal_value;
            
            private global::System.Data.DataColumn columnload_date;
            
            private global::System.Data.DataColumn columnsource_filename;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EXPLOSIVITY_DATADataTable() {
                this.TableName = "EXPLOSIVITY_DATA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EXPLOSIVITY_DATADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EXPLOSIVITY_DATADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn explosivity_data_idColumn {
                get {
                    return this.columnexplosivity_data_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn calendar_date_idColumn {
                get {
                    return this.columncalendar_date_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn time_of_day_idColumn {
                get {
                    return this.columntime_of_day_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn station_idColumn {
                get {
                    return this.columnstation_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn environ_sensor_idColumn {
                get {
                    return this.columnenviron_sensor_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn location_qualifierColumn {
                get {
                    return this.columnlocation_qualifier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn original_sample_timeColumn {
                get {
                    return this.columnoriginal_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assigned_sample_timeColumn {
                get {
                    return this.columnassigned_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn raw_valueColumn {
                get {
                    return this.columnraw_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn final_valueColumn {
                get {
                    return this.columnfinal_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn load_dateColumn {
                get {
                    return this.columnload_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn source_filenameColumn {
                get {
                    return this.columnsource_filename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EXPLOSIVITY_DATARow this[int index] {
                get {
                    return ((EXPLOSIVITY_DATARow)(this.Rows[index]));
                }
            }
            
            public event EXPLOSIVITY_DATARowChangeEventHandler EXPLOSIVITY_DATARowChanging;
            
            public event EXPLOSIVITY_DATARowChangeEventHandler EXPLOSIVITY_DATARowChanged;
            
            public event EXPLOSIVITY_DATARowChangeEventHandler EXPLOSIVITY_DATARowDeleting;
            
            public event EXPLOSIVITY_DATARowChangeEventHandler EXPLOSIVITY_DATARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEXPLOSIVITY_DATARow(EXPLOSIVITY_DATARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EXPLOSIVITY_DATARow AddEXPLOSIVITY_DATARow(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime original_sample_time, System.DateTime assigned_sample_time, int raw_value, decimal final_value, System.DateTime load_date, string source_filename) {
                EXPLOSIVITY_DATARow rowEXPLOSIVITY_DATARow = ((EXPLOSIVITY_DATARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        calendar_date_id,
                        time_of_day_id,
                        station_id,
                        environ_sensor_id,
                        location_qualifier,
                        original_sample_time,
                        assigned_sample_time,
                        raw_value,
                        final_value,
                        load_date,
                        source_filename};
                rowEXPLOSIVITY_DATARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEXPLOSIVITY_DATARow);
                return rowEXPLOSIVITY_DATARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EXPLOSIVITY_DATARow FindByexplosivity_data_id(int explosivity_data_id) {
                return ((EXPLOSIVITY_DATARow)(this.Rows.Find(new object[] {
                            explosivity_data_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EXPLOSIVITY_DATADataTable cln = ((EXPLOSIVITY_DATADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EXPLOSIVITY_DATADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnexplosivity_data_id = base.Columns["explosivity_data_id"];
                this.columncalendar_date_id = base.Columns["calendar_date_id"];
                this.columntime_of_day_id = base.Columns["time_of_day_id"];
                this.columnstation_id = base.Columns["station_id"];
                this.columnenviron_sensor_id = base.Columns["environ_sensor_id"];
                this.columnlocation_qualifier = base.Columns["location_qualifier"];
                this.columnoriginal_sample_time = base.Columns["original_sample_time"];
                this.columnassigned_sample_time = base.Columns["assigned_sample_time"];
                this.columnraw_value = base.Columns["raw_value"];
                this.columnfinal_value = base.Columns["final_value"];
                this.columnload_date = base.Columns["load_date"];
                this.columnsource_filename = base.Columns["source_filename"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnexplosivity_data_id = new global::System.Data.DataColumn("explosivity_data_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnexplosivity_data_id);
                this.columncalendar_date_id = new global::System.Data.DataColumn("calendar_date_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncalendar_date_id);
                this.columntime_of_day_id = new global::System.Data.DataColumn("time_of_day_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime_of_day_id);
                this.columnstation_id = new global::System.Data.DataColumn("station_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstation_id);
                this.columnenviron_sensor_id = new global::System.Data.DataColumn("environ_sensor_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnenviron_sensor_id);
                this.columnlocation_qualifier = new global::System.Data.DataColumn("location_qualifier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlocation_qualifier);
                this.columnoriginal_sample_time = new global::System.Data.DataColumn("original_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoriginal_sample_time);
                this.columnassigned_sample_time = new global::System.Data.DataColumn("assigned_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassigned_sample_time);
                this.columnraw_value = new global::System.Data.DataColumn("raw_value", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnraw_value);
                this.columnfinal_value = new global::System.Data.DataColumn("final_value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfinal_value);
                this.columnload_date = new global::System.Data.DataColumn("load_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnload_date);
                this.columnsource_filename = new global::System.Data.DataColumn("source_filename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsource_filename);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnexplosivity_data_id}, true));
                this.columnexplosivity_data_id.AutoIncrement = true;
                this.columnexplosivity_data_id.AutoIncrementSeed = -1;
                this.columnexplosivity_data_id.AutoIncrementStep = -1;
                this.columnexplosivity_data_id.AllowDBNull = false;
                this.columnexplosivity_data_id.ReadOnly = true;
                this.columnexplosivity_data_id.Unique = true;
                this.columncalendar_date_id.AllowDBNull = false;
                this.columntime_of_day_id.AllowDBNull = false;
                this.columnstation_id.AllowDBNull = false;
                this.columnenviron_sensor_id.AllowDBNull = false;
                this.columnlocation_qualifier.AllowDBNull = false;
                this.columnlocation_qualifier.MaxLength = 25;
                this.columnoriginal_sample_time.AllowDBNull = false;
                this.columnassigned_sample_time.AllowDBNull = false;
                this.columnraw_value.AllowDBNull = false;
                this.columnfinal_value.AllowDBNull = false;
                this.columnload_date.AllowDBNull = false;
                this.columnsource_filename.AllowDBNull = false;
                this.columnsource_filename.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EXPLOSIVITY_DATARow NewEXPLOSIVITY_DATARow() {
                return ((EXPLOSIVITY_DATARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EXPLOSIVITY_DATARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EXPLOSIVITY_DATARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EXPLOSIVITY_DATARowChanged != null)) {
                    this.EXPLOSIVITY_DATARowChanged(this, new EXPLOSIVITY_DATARowChangeEvent(((EXPLOSIVITY_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EXPLOSIVITY_DATARowChanging != null)) {
                    this.EXPLOSIVITY_DATARowChanging(this, new EXPLOSIVITY_DATARowChangeEvent(((EXPLOSIVITY_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EXPLOSIVITY_DATARowDeleted != null)) {
                    this.EXPLOSIVITY_DATARowDeleted(this, new EXPLOSIVITY_DATARowChangeEvent(((EXPLOSIVITY_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EXPLOSIVITY_DATARowDeleting != null)) {
                    this.EXPLOSIVITY_DATARowDeleting(this, new EXPLOSIVITY_DATARowChangeEvent(((EXPLOSIVITY_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEXPLOSIVITY_DATARow(EXPLOSIVITY_DATARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NEPTUNEinfoDataSet ds = new NEPTUNEinfoDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EXPLOSIVITY_DATADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FLOW_DATADataTable : global::System.Data.TypedTableBase<FLOW_DATARow> {
            
            private global::System.Data.DataColumn columnflow_data_id;
            
            private global::System.Data.DataColumn columncalendar_date_id;
            
            private global::System.Data.DataColumn columntime_of_day_id;
            
            private global::System.Data.DataColumn columnstation_id;
            
            private global::System.Data.DataColumn columnenviron_sensor_id;
            
            private global::System.Data.DataColumn columnlocation_qualifier;
            
            private global::System.Data.DataColumn columnoriginal_sample_time;
            
            private global::System.Data.DataColumn columnassigned_sample_time;
            
            private global::System.Data.DataColumn columnraw_value;
            
            private global::System.Data.DataColumn columnfinal_value;
            
            private global::System.Data.DataColumn columnunits;
            
            private global::System.Data.DataColumn columnload_date;
            
            private global::System.Data.DataColumn columnsource_filename;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FLOW_DATADataTable() {
                this.TableName = "FLOW_DATA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FLOW_DATADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FLOW_DATADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn flow_data_idColumn {
                get {
                    return this.columnflow_data_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn calendar_date_idColumn {
                get {
                    return this.columncalendar_date_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn time_of_day_idColumn {
                get {
                    return this.columntime_of_day_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn station_idColumn {
                get {
                    return this.columnstation_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn environ_sensor_idColumn {
                get {
                    return this.columnenviron_sensor_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn location_qualifierColumn {
                get {
                    return this.columnlocation_qualifier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn original_sample_timeColumn {
                get {
                    return this.columnoriginal_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assigned_sample_timeColumn {
                get {
                    return this.columnassigned_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn raw_valueColumn {
                get {
                    return this.columnraw_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn final_valueColumn {
                get {
                    return this.columnfinal_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unitsColumn {
                get {
                    return this.columnunits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn load_dateColumn {
                get {
                    return this.columnload_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn source_filenameColumn {
                get {
                    return this.columnsource_filename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FLOW_DATARow this[int index] {
                get {
                    return ((FLOW_DATARow)(this.Rows[index]));
                }
            }
            
            public event FLOW_DATARowChangeEventHandler FLOW_DATARowChanging;
            
            public event FLOW_DATARowChangeEventHandler FLOW_DATARowChanged;
            
            public event FLOW_DATARowChangeEventHandler FLOW_DATARowDeleting;
            
            public event FLOW_DATARowChangeEventHandler FLOW_DATARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFLOW_DATARow(FLOW_DATARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FLOW_DATARow AddFLOW_DATARow(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime original_sample_time, System.DateTime assigned_sample_time, int raw_value, decimal final_value, string units, System.DateTime load_date, string source_filename) {
                FLOW_DATARow rowFLOW_DATARow = ((FLOW_DATARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        calendar_date_id,
                        time_of_day_id,
                        station_id,
                        environ_sensor_id,
                        location_qualifier,
                        original_sample_time,
                        assigned_sample_time,
                        raw_value,
                        final_value,
                        units,
                        load_date,
                        source_filename};
                rowFLOW_DATARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFLOW_DATARow);
                return rowFLOW_DATARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FLOW_DATARow FindByflow_data_id(int flow_data_id) {
                return ((FLOW_DATARow)(this.Rows.Find(new object[] {
                            flow_data_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FLOW_DATADataTable cln = ((FLOW_DATADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FLOW_DATADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnflow_data_id = base.Columns["flow_data_id"];
                this.columncalendar_date_id = base.Columns["calendar_date_id"];
                this.columntime_of_day_id = base.Columns["time_of_day_id"];
                this.columnstation_id = base.Columns["station_id"];
                this.columnenviron_sensor_id = base.Columns["environ_sensor_id"];
                this.columnlocation_qualifier = base.Columns["location_qualifier"];
                this.columnoriginal_sample_time = base.Columns["original_sample_time"];
                this.columnassigned_sample_time = base.Columns["assigned_sample_time"];
                this.columnraw_value = base.Columns["raw_value"];
                this.columnfinal_value = base.Columns["final_value"];
                this.columnunits = base.Columns["units"];
                this.columnload_date = base.Columns["load_date"];
                this.columnsource_filename = base.Columns["source_filename"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnflow_data_id = new global::System.Data.DataColumn("flow_data_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnflow_data_id);
                this.columncalendar_date_id = new global::System.Data.DataColumn("calendar_date_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncalendar_date_id);
                this.columntime_of_day_id = new global::System.Data.DataColumn("time_of_day_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime_of_day_id);
                this.columnstation_id = new global::System.Data.DataColumn("station_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstation_id);
                this.columnenviron_sensor_id = new global::System.Data.DataColumn("environ_sensor_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnenviron_sensor_id);
                this.columnlocation_qualifier = new global::System.Data.DataColumn("location_qualifier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlocation_qualifier);
                this.columnoriginal_sample_time = new global::System.Data.DataColumn("original_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoriginal_sample_time);
                this.columnassigned_sample_time = new global::System.Data.DataColumn("assigned_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassigned_sample_time);
                this.columnraw_value = new global::System.Data.DataColumn("raw_value", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnraw_value);
                this.columnfinal_value = new global::System.Data.DataColumn("final_value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfinal_value);
                this.columnunits = new global::System.Data.DataColumn("units", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunits);
                this.columnload_date = new global::System.Data.DataColumn("load_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnload_date);
                this.columnsource_filename = new global::System.Data.DataColumn("source_filename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsource_filename);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnflow_data_id}, true));
                this.columnflow_data_id.AutoIncrement = true;
                this.columnflow_data_id.AutoIncrementSeed = -1;
                this.columnflow_data_id.AutoIncrementStep = -1;
                this.columnflow_data_id.AllowDBNull = false;
                this.columnflow_data_id.ReadOnly = true;
                this.columnflow_data_id.Unique = true;
                this.columncalendar_date_id.AllowDBNull = false;
                this.columntime_of_day_id.AllowDBNull = false;
                this.columnstation_id.AllowDBNull = false;
                this.columnenviron_sensor_id.AllowDBNull = false;
                this.columnlocation_qualifier.AllowDBNull = false;
                this.columnlocation_qualifier.MaxLength = 25;
                this.columnoriginal_sample_time.AllowDBNull = false;
                this.columnassigned_sample_time.AllowDBNull = false;
                this.columnraw_value.AllowDBNull = false;
                this.columnfinal_value.AllowDBNull = false;
                this.columnunits.AllowDBNull = false;
                this.columnunits.MaxLength = 10;
                this.columnload_date.AllowDBNull = false;
                this.columnsource_filename.AllowDBNull = false;
                this.columnsource_filename.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FLOW_DATARow NewFLOW_DATARow() {
                return ((FLOW_DATARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FLOW_DATARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FLOW_DATARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FLOW_DATARowChanged != null)) {
                    this.FLOW_DATARowChanged(this, new FLOW_DATARowChangeEvent(((FLOW_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FLOW_DATARowChanging != null)) {
                    this.FLOW_DATARowChanging(this, new FLOW_DATARowChangeEvent(((FLOW_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FLOW_DATARowDeleted != null)) {
                    this.FLOW_DATARowDeleted(this, new FLOW_DATARowChangeEvent(((FLOW_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FLOW_DATARowDeleting != null)) {
                    this.FLOW_DATARowDeleting(this, new FLOW_DATARowChangeEvent(((FLOW_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFLOW_DATARow(FLOW_DATARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NEPTUNEinfoDataSet ds = new NEPTUNEinfoDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FLOW_DATADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GATEPOSITION_DATADataTable : global::System.Data.TypedTableBase<GATEPOSITION_DATARow> {
            
            private global::System.Data.DataColumn columngateposition_data_id;
            
            private global::System.Data.DataColumn columncalendar_date_id;
            
            private global::System.Data.DataColumn columntime_of_day_id;
            
            private global::System.Data.DataColumn columnstation_id;
            
            private global::System.Data.DataColumn columnenviron_sensor_id;
            
            private global::System.Data.DataColumn columnlocation_qualifier;
            
            private global::System.Data.DataColumn columnoriginal_sample_time;
            
            private global::System.Data.DataColumn columnassigned_sample_time;
            
            private global::System.Data.DataColumn columnraw_value;
            
            private global::System.Data.DataColumn columnfinal_value;
            
            private global::System.Data.DataColumn columnload_date;
            
            private global::System.Data.DataColumn columnsource_filename;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GATEPOSITION_DATADataTable() {
                this.TableName = "GATEPOSITION_DATA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GATEPOSITION_DATADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GATEPOSITION_DATADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gateposition_data_idColumn {
                get {
                    return this.columngateposition_data_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn calendar_date_idColumn {
                get {
                    return this.columncalendar_date_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn time_of_day_idColumn {
                get {
                    return this.columntime_of_day_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn station_idColumn {
                get {
                    return this.columnstation_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn environ_sensor_idColumn {
                get {
                    return this.columnenviron_sensor_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn location_qualifierColumn {
                get {
                    return this.columnlocation_qualifier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn original_sample_timeColumn {
                get {
                    return this.columnoriginal_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assigned_sample_timeColumn {
                get {
                    return this.columnassigned_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn raw_valueColumn {
                get {
                    return this.columnraw_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn final_valueColumn {
                get {
                    return this.columnfinal_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn load_dateColumn {
                get {
                    return this.columnload_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn source_filenameColumn {
                get {
                    return this.columnsource_filename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GATEPOSITION_DATARow this[int index] {
                get {
                    return ((GATEPOSITION_DATARow)(this.Rows[index]));
                }
            }
            
            public event GATEPOSITION_DATARowChangeEventHandler GATEPOSITION_DATARowChanging;
            
            public event GATEPOSITION_DATARowChangeEventHandler GATEPOSITION_DATARowChanged;
            
            public event GATEPOSITION_DATARowChangeEventHandler GATEPOSITION_DATARowDeleting;
            
            public event GATEPOSITION_DATARowChangeEventHandler GATEPOSITION_DATARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGATEPOSITION_DATARow(GATEPOSITION_DATARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GATEPOSITION_DATARow AddGATEPOSITION_DATARow(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime original_sample_time, System.DateTime assigned_sample_time, int raw_value, decimal final_value, System.DateTime load_date, string source_filename) {
                GATEPOSITION_DATARow rowGATEPOSITION_DATARow = ((GATEPOSITION_DATARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        calendar_date_id,
                        time_of_day_id,
                        station_id,
                        environ_sensor_id,
                        location_qualifier,
                        original_sample_time,
                        assigned_sample_time,
                        raw_value,
                        final_value,
                        load_date,
                        source_filename};
                rowGATEPOSITION_DATARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGATEPOSITION_DATARow);
                return rowGATEPOSITION_DATARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GATEPOSITION_DATARow FindBygateposition_data_id(int gateposition_data_id) {
                return ((GATEPOSITION_DATARow)(this.Rows.Find(new object[] {
                            gateposition_data_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GATEPOSITION_DATADataTable cln = ((GATEPOSITION_DATADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GATEPOSITION_DATADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columngateposition_data_id = base.Columns["gateposition_data_id"];
                this.columncalendar_date_id = base.Columns["calendar_date_id"];
                this.columntime_of_day_id = base.Columns["time_of_day_id"];
                this.columnstation_id = base.Columns["station_id"];
                this.columnenviron_sensor_id = base.Columns["environ_sensor_id"];
                this.columnlocation_qualifier = base.Columns["location_qualifier"];
                this.columnoriginal_sample_time = base.Columns["original_sample_time"];
                this.columnassigned_sample_time = base.Columns["assigned_sample_time"];
                this.columnraw_value = base.Columns["raw_value"];
                this.columnfinal_value = base.Columns["final_value"];
                this.columnload_date = base.Columns["load_date"];
                this.columnsource_filename = base.Columns["source_filename"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columngateposition_data_id = new global::System.Data.DataColumn("gateposition_data_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngateposition_data_id);
                this.columncalendar_date_id = new global::System.Data.DataColumn("calendar_date_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncalendar_date_id);
                this.columntime_of_day_id = new global::System.Data.DataColumn("time_of_day_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime_of_day_id);
                this.columnstation_id = new global::System.Data.DataColumn("station_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstation_id);
                this.columnenviron_sensor_id = new global::System.Data.DataColumn("environ_sensor_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnenviron_sensor_id);
                this.columnlocation_qualifier = new global::System.Data.DataColumn("location_qualifier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlocation_qualifier);
                this.columnoriginal_sample_time = new global::System.Data.DataColumn("original_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoriginal_sample_time);
                this.columnassigned_sample_time = new global::System.Data.DataColumn("assigned_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassigned_sample_time);
                this.columnraw_value = new global::System.Data.DataColumn("raw_value", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnraw_value);
                this.columnfinal_value = new global::System.Data.DataColumn("final_value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfinal_value);
                this.columnload_date = new global::System.Data.DataColumn("load_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnload_date);
                this.columnsource_filename = new global::System.Data.DataColumn("source_filename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsource_filename);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columngateposition_data_id}, true));
                this.columngateposition_data_id.AutoIncrement = true;
                this.columngateposition_data_id.AutoIncrementSeed = -1;
                this.columngateposition_data_id.AutoIncrementStep = -1;
                this.columngateposition_data_id.AllowDBNull = false;
                this.columngateposition_data_id.ReadOnly = true;
                this.columngateposition_data_id.Unique = true;
                this.columncalendar_date_id.AllowDBNull = false;
                this.columntime_of_day_id.AllowDBNull = false;
                this.columnstation_id.AllowDBNull = false;
                this.columnenviron_sensor_id.AllowDBNull = false;
                this.columnlocation_qualifier.AllowDBNull = false;
                this.columnlocation_qualifier.MaxLength = 25;
                this.columnoriginal_sample_time.AllowDBNull = false;
                this.columnassigned_sample_time.AllowDBNull = false;
                this.columnraw_value.AllowDBNull = false;
                this.columnfinal_value.AllowDBNull = false;
                this.columnload_date.AllowDBNull = false;
                this.columnsource_filename.AllowDBNull = false;
                this.columnsource_filename.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GATEPOSITION_DATARow NewGATEPOSITION_DATARow() {
                return ((GATEPOSITION_DATARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GATEPOSITION_DATARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GATEPOSITION_DATARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GATEPOSITION_DATARowChanged != null)) {
                    this.GATEPOSITION_DATARowChanged(this, new GATEPOSITION_DATARowChangeEvent(((GATEPOSITION_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GATEPOSITION_DATARowChanging != null)) {
                    this.GATEPOSITION_DATARowChanging(this, new GATEPOSITION_DATARowChangeEvent(((GATEPOSITION_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GATEPOSITION_DATARowDeleted != null)) {
                    this.GATEPOSITION_DATARowDeleted(this, new GATEPOSITION_DATARowChangeEvent(((GATEPOSITION_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GATEPOSITION_DATARowDeleting != null)) {
                    this.GATEPOSITION_DATARowDeleting(this, new GATEPOSITION_DATARowChangeEvent(((GATEPOSITION_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGATEPOSITION_DATARow(GATEPOSITION_DATARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NEPTUNEinfoDataSet ds = new NEPTUNEinfoDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GATEPOSITION_DATADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class H2S_DATADataTable : global::System.Data.TypedTableBase<H2S_DATARow> {
            
            private global::System.Data.DataColumn columnh2s_data_id;
            
            private global::System.Data.DataColumn columncalendar_date_id;
            
            private global::System.Data.DataColumn columntime_of_day_id;
            
            private global::System.Data.DataColumn columnstation_id;
            
            private global::System.Data.DataColumn columnenviron_sensor_id;
            
            private global::System.Data.DataColumn columnlocation_qualifier;
            
            private global::System.Data.DataColumn columnoriginal_sample_time;
            
            private global::System.Data.DataColumn columnassigned_sample_time;
            
            private global::System.Data.DataColumn columnraw_value;
            
            private global::System.Data.DataColumn columnfinal_value;
            
            private global::System.Data.DataColumn columnload_date;
            
            private global::System.Data.DataColumn columnsource_filename;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public H2S_DATADataTable() {
                this.TableName = "H2S_DATA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal H2S_DATADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected H2S_DATADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn h2s_data_idColumn {
                get {
                    return this.columnh2s_data_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn calendar_date_idColumn {
                get {
                    return this.columncalendar_date_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn time_of_day_idColumn {
                get {
                    return this.columntime_of_day_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn station_idColumn {
                get {
                    return this.columnstation_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn environ_sensor_idColumn {
                get {
                    return this.columnenviron_sensor_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn location_qualifierColumn {
                get {
                    return this.columnlocation_qualifier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn original_sample_timeColumn {
                get {
                    return this.columnoriginal_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assigned_sample_timeColumn {
                get {
                    return this.columnassigned_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn raw_valueColumn {
                get {
                    return this.columnraw_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn final_valueColumn {
                get {
                    return this.columnfinal_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn load_dateColumn {
                get {
                    return this.columnload_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn source_filenameColumn {
                get {
                    return this.columnsource_filename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public H2S_DATARow this[int index] {
                get {
                    return ((H2S_DATARow)(this.Rows[index]));
                }
            }
            
            public event H2S_DATARowChangeEventHandler H2S_DATARowChanging;
            
            public event H2S_DATARowChangeEventHandler H2S_DATARowChanged;
            
            public event H2S_DATARowChangeEventHandler H2S_DATARowDeleting;
            
            public event H2S_DATARowChangeEventHandler H2S_DATARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddH2S_DATARow(H2S_DATARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public H2S_DATARow AddH2S_DATARow(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime original_sample_time, System.DateTime assigned_sample_time, int raw_value, decimal final_value, System.DateTime load_date, string source_filename) {
                H2S_DATARow rowH2S_DATARow = ((H2S_DATARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        calendar_date_id,
                        time_of_day_id,
                        station_id,
                        environ_sensor_id,
                        location_qualifier,
                        original_sample_time,
                        assigned_sample_time,
                        raw_value,
                        final_value,
                        load_date,
                        source_filename};
                rowH2S_DATARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowH2S_DATARow);
                return rowH2S_DATARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public H2S_DATARow FindByh2s_data_id(int h2s_data_id) {
                return ((H2S_DATARow)(this.Rows.Find(new object[] {
                            h2s_data_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                H2S_DATADataTable cln = ((H2S_DATADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new H2S_DATADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnh2s_data_id = base.Columns["h2s_data_id"];
                this.columncalendar_date_id = base.Columns["calendar_date_id"];
                this.columntime_of_day_id = base.Columns["time_of_day_id"];
                this.columnstation_id = base.Columns["station_id"];
                this.columnenviron_sensor_id = base.Columns["environ_sensor_id"];
                this.columnlocation_qualifier = base.Columns["location_qualifier"];
                this.columnoriginal_sample_time = base.Columns["original_sample_time"];
                this.columnassigned_sample_time = base.Columns["assigned_sample_time"];
                this.columnraw_value = base.Columns["raw_value"];
                this.columnfinal_value = base.Columns["final_value"];
                this.columnload_date = base.Columns["load_date"];
                this.columnsource_filename = base.Columns["source_filename"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnh2s_data_id = new global::System.Data.DataColumn("h2s_data_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnh2s_data_id);
                this.columncalendar_date_id = new global::System.Data.DataColumn("calendar_date_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncalendar_date_id);
                this.columntime_of_day_id = new global::System.Data.DataColumn("time_of_day_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime_of_day_id);
                this.columnstation_id = new global::System.Data.DataColumn("station_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstation_id);
                this.columnenviron_sensor_id = new global::System.Data.DataColumn("environ_sensor_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnenviron_sensor_id);
                this.columnlocation_qualifier = new global::System.Data.DataColumn("location_qualifier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlocation_qualifier);
                this.columnoriginal_sample_time = new global::System.Data.DataColumn("original_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoriginal_sample_time);
                this.columnassigned_sample_time = new global::System.Data.DataColumn("assigned_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassigned_sample_time);
                this.columnraw_value = new global::System.Data.DataColumn("raw_value", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnraw_value);
                this.columnfinal_value = new global::System.Data.DataColumn("final_value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfinal_value);
                this.columnload_date = new global::System.Data.DataColumn("load_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnload_date);
                this.columnsource_filename = new global::System.Data.DataColumn("source_filename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsource_filename);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnh2s_data_id}, true));
                this.columnh2s_data_id.AutoIncrement = true;
                this.columnh2s_data_id.AutoIncrementSeed = -1;
                this.columnh2s_data_id.AutoIncrementStep = -1;
                this.columnh2s_data_id.AllowDBNull = false;
                this.columnh2s_data_id.ReadOnly = true;
                this.columnh2s_data_id.Unique = true;
                this.columncalendar_date_id.AllowDBNull = false;
                this.columntime_of_day_id.AllowDBNull = false;
                this.columnstation_id.AllowDBNull = false;
                this.columnenviron_sensor_id.AllowDBNull = false;
                this.columnlocation_qualifier.AllowDBNull = false;
                this.columnlocation_qualifier.MaxLength = 25;
                this.columnoriginal_sample_time.AllowDBNull = false;
                this.columnassigned_sample_time.AllowDBNull = false;
                this.columnraw_value.AllowDBNull = false;
                this.columnfinal_value.AllowDBNull = false;
                this.columnload_date.AllowDBNull = false;
                this.columnsource_filename.AllowDBNull = false;
                this.columnsource_filename.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public H2S_DATARow NewH2S_DATARow() {
                return ((H2S_DATARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new H2S_DATARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(H2S_DATARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.H2S_DATARowChanged != null)) {
                    this.H2S_DATARowChanged(this, new H2S_DATARowChangeEvent(((H2S_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.H2S_DATARowChanging != null)) {
                    this.H2S_DATARowChanging(this, new H2S_DATARowChangeEvent(((H2S_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.H2S_DATARowDeleted != null)) {
                    this.H2S_DATARowDeleted(this, new H2S_DATARowChangeEvent(((H2S_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.H2S_DATARowDeleting != null)) {
                    this.H2S_DATARowDeleting(this, new H2S_DATARowChangeEvent(((H2S_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveH2S_DATARow(H2S_DATARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NEPTUNEinfoDataSet ds = new NEPTUNEinfoDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "H2S_DATADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HUMIDITY_DATADataTable : global::System.Data.TypedTableBase<HUMIDITY_DATARow> {
            
            private global::System.Data.DataColumn columnhumidity_data_id;
            
            private global::System.Data.DataColumn columncalendar_date_id;
            
            private global::System.Data.DataColumn columntime_of_day_id;
            
            private global::System.Data.DataColumn columnstation_id;
            
            private global::System.Data.DataColumn columnenviron_sensor_id;
            
            private global::System.Data.DataColumn columnlocation_qualifier;
            
            private global::System.Data.DataColumn columnoriginal_sample_time;
            
            private global::System.Data.DataColumn columnassigned_sample_time;
            
            private global::System.Data.DataColumn columnraw_value;
            
            private global::System.Data.DataColumn columnfinal_value;
            
            private global::System.Data.DataColumn columnload_date;
            
            private global::System.Data.DataColumn columnsource_filename;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HUMIDITY_DATADataTable() {
                this.TableName = "HUMIDITY_DATA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HUMIDITY_DATADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HUMIDITY_DATADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn humidity_data_idColumn {
                get {
                    return this.columnhumidity_data_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn calendar_date_idColumn {
                get {
                    return this.columncalendar_date_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn time_of_day_idColumn {
                get {
                    return this.columntime_of_day_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn station_idColumn {
                get {
                    return this.columnstation_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn environ_sensor_idColumn {
                get {
                    return this.columnenviron_sensor_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn location_qualifierColumn {
                get {
                    return this.columnlocation_qualifier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn original_sample_timeColumn {
                get {
                    return this.columnoriginal_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assigned_sample_timeColumn {
                get {
                    return this.columnassigned_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn raw_valueColumn {
                get {
                    return this.columnraw_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn final_valueColumn {
                get {
                    return this.columnfinal_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn load_dateColumn {
                get {
                    return this.columnload_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn source_filenameColumn {
                get {
                    return this.columnsource_filename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HUMIDITY_DATARow this[int index] {
                get {
                    return ((HUMIDITY_DATARow)(this.Rows[index]));
                }
            }
            
            public event HUMIDITY_DATARowChangeEventHandler HUMIDITY_DATARowChanging;
            
            public event HUMIDITY_DATARowChangeEventHandler HUMIDITY_DATARowChanged;
            
            public event HUMIDITY_DATARowChangeEventHandler HUMIDITY_DATARowDeleting;
            
            public event HUMIDITY_DATARowChangeEventHandler HUMIDITY_DATARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHUMIDITY_DATARow(HUMIDITY_DATARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HUMIDITY_DATARow AddHUMIDITY_DATARow(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime original_sample_time, System.DateTime assigned_sample_time, int raw_value, decimal final_value, System.DateTime load_date, string source_filename) {
                HUMIDITY_DATARow rowHUMIDITY_DATARow = ((HUMIDITY_DATARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        calendar_date_id,
                        time_of_day_id,
                        station_id,
                        environ_sensor_id,
                        location_qualifier,
                        original_sample_time,
                        assigned_sample_time,
                        raw_value,
                        final_value,
                        load_date,
                        source_filename};
                rowHUMIDITY_DATARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHUMIDITY_DATARow);
                return rowHUMIDITY_DATARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HUMIDITY_DATARow FindByhumidity_data_id(int humidity_data_id) {
                return ((HUMIDITY_DATARow)(this.Rows.Find(new object[] {
                            humidity_data_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HUMIDITY_DATADataTable cln = ((HUMIDITY_DATADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HUMIDITY_DATADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnhumidity_data_id = base.Columns["humidity_data_id"];
                this.columncalendar_date_id = base.Columns["calendar_date_id"];
                this.columntime_of_day_id = base.Columns["time_of_day_id"];
                this.columnstation_id = base.Columns["station_id"];
                this.columnenviron_sensor_id = base.Columns["environ_sensor_id"];
                this.columnlocation_qualifier = base.Columns["location_qualifier"];
                this.columnoriginal_sample_time = base.Columns["original_sample_time"];
                this.columnassigned_sample_time = base.Columns["assigned_sample_time"];
                this.columnraw_value = base.Columns["raw_value"];
                this.columnfinal_value = base.Columns["final_value"];
                this.columnload_date = base.Columns["load_date"];
                this.columnsource_filename = base.Columns["source_filename"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnhumidity_data_id = new global::System.Data.DataColumn("humidity_data_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhumidity_data_id);
                this.columncalendar_date_id = new global::System.Data.DataColumn("calendar_date_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncalendar_date_id);
                this.columntime_of_day_id = new global::System.Data.DataColumn("time_of_day_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime_of_day_id);
                this.columnstation_id = new global::System.Data.DataColumn("station_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstation_id);
                this.columnenviron_sensor_id = new global::System.Data.DataColumn("environ_sensor_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnenviron_sensor_id);
                this.columnlocation_qualifier = new global::System.Data.DataColumn("location_qualifier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlocation_qualifier);
                this.columnoriginal_sample_time = new global::System.Data.DataColumn("original_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoriginal_sample_time);
                this.columnassigned_sample_time = new global::System.Data.DataColumn("assigned_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassigned_sample_time);
                this.columnraw_value = new global::System.Data.DataColumn("raw_value", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnraw_value);
                this.columnfinal_value = new global::System.Data.DataColumn("final_value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfinal_value);
                this.columnload_date = new global::System.Data.DataColumn("load_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnload_date);
                this.columnsource_filename = new global::System.Data.DataColumn("source_filename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsource_filename);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnhumidity_data_id}, true));
                this.columnhumidity_data_id.AutoIncrement = true;
                this.columnhumidity_data_id.AutoIncrementSeed = -1;
                this.columnhumidity_data_id.AutoIncrementStep = -1;
                this.columnhumidity_data_id.AllowDBNull = false;
                this.columnhumidity_data_id.ReadOnly = true;
                this.columnhumidity_data_id.Unique = true;
                this.columncalendar_date_id.AllowDBNull = false;
                this.columntime_of_day_id.AllowDBNull = false;
                this.columnstation_id.AllowDBNull = false;
                this.columnenviron_sensor_id.AllowDBNull = false;
                this.columnlocation_qualifier.AllowDBNull = false;
                this.columnlocation_qualifier.MaxLength = 25;
                this.columnoriginal_sample_time.AllowDBNull = false;
                this.columnassigned_sample_time.AllowDBNull = false;
                this.columnraw_value.AllowDBNull = false;
                this.columnfinal_value.AllowDBNull = false;
                this.columnload_date.AllowDBNull = false;
                this.columnsource_filename.AllowDBNull = false;
                this.columnsource_filename.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HUMIDITY_DATARow NewHUMIDITY_DATARow() {
                return ((HUMIDITY_DATARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HUMIDITY_DATARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HUMIDITY_DATARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HUMIDITY_DATARowChanged != null)) {
                    this.HUMIDITY_DATARowChanged(this, new HUMIDITY_DATARowChangeEvent(((HUMIDITY_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HUMIDITY_DATARowChanging != null)) {
                    this.HUMIDITY_DATARowChanging(this, new HUMIDITY_DATARowChangeEvent(((HUMIDITY_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HUMIDITY_DATARowDeleted != null)) {
                    this.HUMIDITY_DATARowDeleted(this, new HUMIDITY_DATARowChangeEvent(((HUMIDITY_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HUMIDITY_DATARowDeleting != null)) {
                    this.HUMIDITY_DATARowDeleting(this, new HUMIDITY_DATARowChangeEvent(((HUMIDITY_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHUMIDITY_DATARow(HUMIDITY_DATARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NEPTUNEinfoDataSet ds = new NEPTUNEinfoDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HUMIDITY_DATADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PH_DATADataTable : global::System.Data.TypedTableBase<PH_DATARow> {
            
            private global::System.Data.DataColumn columnph_data_id;
            
            private global::System.Data.DataColumn columncalendar_date_id;
            
            private global::System.Data.DataColumn columntime_of_day_id;
            
            private global::System.Data.DataColumn columnstation_id;
            
            private global::System.Data.DataColumn columnenviron_sensor_id;
            
            private global::System.Data.DataColumn columnlocation_qualifier;
            
            private global::System.Data.DataColumn columnoriginal_sample_time;
            
            private global::System.Data.DataColumn columnassigned_sample_time;
            
            private global::System.Data.DataColumn columnraw_value;
            
            private global::System.Data.DataColumn columnfinal_value;
            
            private global::System.Data.DataColumn columnload_date;
            
            private global::System.Data.DataColumn columnsource_filename;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PH_DATADataTable() {
                this.TableName = "PH_DATA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PH_DATADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PH_DATADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ph_data_idColumn {
                get {
                    return this.columnph_data_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn calendar_date_idColumn {
                get {
                    return this.columncalendar_date_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn time_of_day_idColumn {
                get {
                    return this.columntime_of_day_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn station_idColumn {
                get {
                    return this.columnstation_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn environ_sensor_idColumn {
                get {
                    return this.columnenviron_sensor_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn location_qualifierColumn {
                get {
                    return this.columnlocation_qualifier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn original_sample_timeColumn {
                get {
                    return this.columnoriginal_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assigned_sample_timeColumn {
                get {
                    return this.columnassigned_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn raw_valueColumn {
                get {
                    return this.columnraw_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn final_valueColumn {
                get {
                    return this.columnfinal_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn load_dateColumn {
                get {
                    return this.columnload_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn source_filenameColumn {
                get {
                    return this.columnsource_filename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PH_DATARow this[int index] {
                get {
                    return ((PH_DATARow)(this.Rows[index]));
                }
            }
            
            public event PH_DATARowChangeEventHandler PH_DATARowChanging;
            
            public event PH_DATARowChangeEventHandler PH_DATARowChanged;
            
            public event PH_DATARowChangeEventHandler PH_DATARowDeleting;
            
            public event PH_DATARowChangeEventHandler PH_DATARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPH_DATARow(PH_DATARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PH_DATARow AddPH_DATARow(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime original_sample_time, System.DateTime assigned_sample_time, int raw_value, decimal final_value, System.DateTime load_date, string source_filename) {
                PH_DATARow rowPH_DATARow = ((PH_DATARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        calendar_date_id,
                        time_of_day_id,
                        station_id,
                        environ_sensor_id,
                        location_qualifier,
                        original_sample_time,
                        assigned_sample_time,
                        raw_value,
                        final_value,
                        load_date,
                        source_filename};
                rowPH_DATARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPH_DATARow);
                return rowPH_DATARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PH_DATARow FindByph_data_id(int ph_data_id) {
                return ((PH_DATARow)(this.Rows.Find(new object[] {
                            ph_data_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PH_DATADataTable cln = ((PH_DATADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PH_DATADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnph_data_id = base.Columns["ph_data_id"];
                this.columncalendar_date_id = base.Columns["calendar_date_id"];
                this.columntime_of_day_id = base.Columns["time_of_day_id"];
                this.columnstation_id = base.Columns["station_id"];
                this.columnenviron_sensor_id = base.Columns["environ_sensor_id"];
                this.columnlocation_qualifier = base.Columns["location_qualifier"];
                this.columnoriginal_sample_time = base.Columns["original_sample_time"];
                this.columnassigned_sample_time = base.Columns["assigned_sample_time"];
                this.columnraw_value = base.Columns["raw_value"];
                this.columnfinal_value = base.Columns["final_value"];
                this.columnload_date = base.Columns["load_date"];
                this.columnsource_filename = base.Columns["source_filename"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnph_data_id = new global::System.Data.DataColumn("ph_data_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnph_data_id);
                this.columncalendar_date_id = new global::System.Data.DataColumn("calendar_date_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncalendar_date_id);
                this.columntime_of_day_id = new global::System.Data.DataColumn("time_of_day_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime_of_day_id);
                this.columnstation_id = new global::System.Data.DataColumn("station_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstation_id);
                this.columnenviron_sensor_id = new global::System.Data.DataColumn("environ_sensor_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnenviron_sensor_id);
                this.columnlocation_qualifier = new global::System.Data.DataColumn("location_qualifier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlocation_qualifier);
                this.columnoriginal_sample_time = new global::System.Data.DataColumn("original_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoriginal_sample_time);
                this.columnassigned_sample_time = new global::System.Data.DataColumn("assigned_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassigned_sample_time);
                this.columnraw_value = new global::System.Data.DataColumn("raw_value", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnraw_value);
                this.columnfinal_value = new global::System.Data.DataColumn("final_value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfinal_value);
                this.columnload_date = new global::System.Data.DataColumn("load_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnload_date);
                this.columnsource_filename = new global::System.Data.DataColumn("source_filename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsource_filename);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnph_data_id}, true));
                this.columnph_data_id.AutoIncrement = true;
                this.columnph_data_id.AutoIncrementSeed = -1;
                this.columnph_data_id.AutoIncrementStep = -1;
                this.columnph_data_id.AllowDBNull = false;
                this.columnph_data_id.ReadOnly = true;
                this.columnph_data_id.Unique = true;
                this.columncalendar_date_id.AllowDBNull = false;
                this.columntime_of_day_id.AllowDBNull = false;
                this.columnstation_id.AllowDBNull = false;
                this.columnenviron_sensor_id.AllowDBNull = false;
                this.columnlocation_qualifier.AllowDBNull = false;
                this.columnlocation_qualifier.MaxLength = 25;
                this.columnoriginal_sample_time.AllowDBNull = false;
                this.columnassigned_sample_time.AllowDBNull = false;
                this.columnraw_value.AllowDBNull = false;
                this.columnfinal_value.AllowDBNull = false;
                this.columnload_date.AllowDBNull = false;
                this.columnsource_filename.AllowDBNull = false;
                this.columnsource_filename.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PH_DATARow NewPH_DATARow() {
                return ((PH_DATARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PH_DATARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PH_DATARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PH_DATARowChanged != null)) {
                    this.PH_DATARowChanged(this, new PH_DATARowChangeEvent(((PH_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PH_DATARowChanging != null)) {
                    this.PH_DATARowChanging(this, new PH_DATARowChangeEvent(((PH_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PH_DATARowDeleted != null)) {
                    this.PH_DATARowDeleted(this, new PH_DATARowChangeEvent(((PH_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PH_DATARowDeleting != null)) {
                    this.PH_DATARowDeleting(this, new PH_DATARowChangeEvent(((PH_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePH_DATARow(PH_DATARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NEPTUNEinfoDataSet ds = new NEPTUNEinfoDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PH_DATADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PRESSURE_DATADataTable : global::System.Data.TypedTableBase<PRESSURE_DATARow> {
            
            private global::System.Data.DataColumn columnpressure_data_id;
            
            private global::System.Data.DataColumn columncalendar_date_id;
            
            private global::System.Data.DataColumn columntime_of_day_id;
            
            private global::System.Data.DataColumn columnstation_id;
            
            private global::System.Data.DataColumn columnenviron_sensor_id;
            
            private global::System.Data.DataColumn columnlocation_qualifier;
            
            private global::System.Data.DataColumn columnoriginal_sample_time;
            
            private global::System.Data.DataColumn columnassigned_sample_time;
            
            private global::System.Data.DataColumn columnraw_value;
            
            private global::System.Data.DataColumn columnfinal_value;
            
            private global::System.Data.DataColumn columnload_date;
            
            private global::System.Data.DataColumn columnsource_filename;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRESSURE_DATADataTable() {
                this.TableName = "PRESSURE_DATA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PRESSURE_DATADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PRESSURE_DATADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pressure_data_idColumn {
                get {
                    return this.columnpressure_data_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn calendar_date_idColumn {
                get {
                    return this.columncalendar_date_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn time_of_day_idColumn {
                get {
                    return this.columntime_of_day_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn station_idColumn {
                get {
                    return this.columnstation_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn environ_sensor_idColumn {
                get {
                    return this.columnenviron_sensor_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn location_qualifierColumn {
                get {
                    return this.columnlocation_qualifier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn original_sample_timeColumn {
                get {
                    return this.columnoriginal_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assigned_sample_timeColumn {
                get {
                    return this.columnassigned_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn raw_valueColumn {
                get {
                    return this.columnraw_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn final_valueColumn {
                get {
                    return this.columnfinal_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn load_dateColumn {
                get {
                    return this.columnload_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn source_filenameColumn {
                get {
                    return this.columnsource_filename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRESSURE_DATARow this[int index] {
                get {
                    return ((PRESSURE_DATARow)(this.Rows[index]));
                }
            }
            
            public event PRESSURE_DATARowChangeEventHandler PRESSURE_DATARowChanging;
            
            public event PRESSURE_DATARowChangeEventHandler PRESSURE_DATARowChanged;
            
            public event PRESSURE_DATARowChangeEventHandler PRESSURE_DATARowDeleting;
            
            public event PRESSURE_DATARowChangeEventHandler PRESSURE_DATARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPRESSURE_DATARow(PRESSURE_DATARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRESSURE_DATARow AddPRESSURE_DATARow(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime original_sample_time, System.DateTime assigned_sample_time, int raw_value, decimal final_value, System.DateTime load_date, string source_filename) {
                PRESSURE_DATARow rowPRESSURE_DATARow = ((PRESSURE_DATARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        calendar_date_id,
                        time_of_day_id,
                        station_id,
                        environ_sensor_id,
                        location_qualifier,
                        original_sample_time,
                        assigned_sample_time,
                        raw_value,
                        final_value,
                        load_date,
                        source_filename};
                rowPRESSURE_DATARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPRESSURE_DATARow);
                return rowPRESSURE_DATARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRESSURE_DATARow FindBypressure_data_id(int pressure_data_id) {
                return ((PRESSURE_DATARow)(this.Rows.Find(new object[] {
                            pressure_data_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PRESSURE_DATADataTable cln = ((PRESSURE_DATADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PRESSURE_DATADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpressure_data_id = base.Columns["pressure_data_id"];
                this.columncalendar_date_id = base.Columns["calendar_date_id"];
                this.columntime_of_day_id = base.Columns["time_of_day_id"];
                this.columnstation_id = base.Columns["station_id"];
                this.columnenviron_sensor_id = base.Columns["environ_sensor_id"];
                this.columnlocation_qualifier = base.Columns["location_qualifier"];
                this.columnoriginal_sample_time = base.Columns["original_sample_time"];
                this.columnassigned_sample_time = base.Columns["assigned_sample_time"];
                this.columnraw_value = base.Columns["raw_value"];
                this.columnfinal_value = base.Columns["final_value"];
                this.columnload_date = base.Columns["load_date"];
                this.columnsource_filename = base.Columns["source_filename"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpressure_data_id = new global::System.Data.DataColumn("pressure_data_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpressure_data_id);
                this.columncalendar_date_id = new global::System.Data.DataColumn("calendar_date_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncalendar_date_id);
                this.columntime_of_day_id = new global::System.Data.DataColumn("time_of_day_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime_of_day_id);
                this.columnstation_id = new global::System.Data.DataColumn("station_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstation_id);
                this.columnenviron_sensor_id = new global::System.Data.DataColumn("environ_sensor_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnenviron_sensor_id);
                this.columnlocation_qualifier = new global::System.Data.DataColumn("location_qualifier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlocation_qualifier);
                this.columnoriginal_sample_time = new global::System.Data.DataColumn("original_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoriginal_sample_time);
                this.columnassigned_sample_time = new global::System.Data.DataColumn("assigned_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassigned_sample_time);
                this.columnraw_value = new global::System.Data.DataColumn("raw_value", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnraw_value);
                this.columnfinal_value = new global::System.Data.DataColumn("final_value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfinal_value);
                this.columnload_date = new global::System.Data.DataColumn("load_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnload_date);
                this.columnsource_filename = new global::System.Data.DataColumn("source_filename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsource_filename);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnpressure_data_id}, true));
                this.columnpressure_data_id.AutoIncrement = true;
                this.columnpressure_data_id.AutoIncrementSeed = -1;
                this.columnpressure_data_id.AutoIncrementStep = -1;
                this.columnpressure_data_id.AllowDBNull = false;
                this.columnpressure_data_id.ReadOnly = true;
                this.columnpressure_data_id.Unique = true;
                this.columncalendar_date_id.AllowDBNull = false;
                this.columntime_of_day_id.AllowDBNull = false;
                this.columnstation_id.AllowDBNull = false;
                this.columnenviron_sensor_id.AllowDBNull = false;
                this.columnlocation_qualifier.AllowDBNull = false;
                this.columnlocation_qualifier.MaxLength = 25;
                this.columnoriginal_sample_time.AllowDBNull = false;
                this.columnassigned_sample_time.AllowDBNull = false;
                this.columnraw_value.AllowDBNull = false;
                this.columnfinal_value.AllowDBNull = false;
                this.columnload_date.AllowDBNull = false;
                this.columnsource_filename.AllowDBNull = false;
                this.columnsource_filename.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRESSURE_DATARow NewPRESSURE_DATARow() {
                return ((PRESSURE_DATARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PRESSURE_DATARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PRESSURE_DATARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PRESSURE_DATARowChanged != null)) {
                    this.PRESSURE_DATARowChanged(this, new PRESSURE_DATARowChangeEvent(((PRESSURE_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PRESSURE_DATARowChanging != null)) {
                    this.PRESSURE_DATARowChanging(this, new PRESSURE_DATARowChangeEvent(((PRESSURE_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PRESSURE_DATARowDeleted != null)) {
                    this.PRESSURE_DATARowDeleted(this, new PRESSURE_DATARowChangeEvent(((PRESSURE_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PRESSURE_DATARowDeleting != null)) {
                    this.PRESSURE_DATARowDeleting(this, new PRESSURE_DATARowChangeEvent(((PRESSURE_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePRESSURE_DATARow(PRESSURE_DATARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NEPTUNEinfoDataSet ds = new NEPTUNEinfoDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PRESSURE_DATADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SHAFTSPEED_DATADataTable : global::System.Data.TypedTableBase<SHAFTSPEED_DATARow> {
            
            private global::System.Data.DataColumn columnshaftspeed_data_id;
            
            private global::System.Data.DataColumn columncalendar_date_id;
            
            private global::System.Data.DataColumn columntime_of_day_id;
            
            private global::System.Data.DataColumn columnstation_id;
            
            private global::System.Data.DataColumn columnenviron_sensor_id;
            
            private global::System.Data.DataColumn columnlocation_qualifier;
            
            private global::System.Data.DataColumn columnoriginal_sample_time;
            
            private global::System.Data.DataColumn columnassigned_sample_time;
            
            private global::System.Data.DataColumn columnraw_value;
            
            private global::System.Data.DataColumn columnfinal_value;
            
            private global::System.Data.DataColumn columnload_date;
            
            private global::System.Data.DataColumn columnsource_filename;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SHAFTSPEED_DATADataTable() {
                this.TableName = "SHAFTSPEED_DATA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SHAFTSPEED_DATADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SHAFTSPEED_DATADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn shaftspeed_data_idColumn {
                get {
                    return this.columnshaftspeed_data_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn calendar_date_idColumn {
                get {
                    return this.columncalendar_date_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn time_of_day_idColumn {
                get {
                    return this.columntime_of_day_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn station_idColumn {
                get {
                    return this.columnstation_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn environ_sensor_idColumn {
                get {
                    return this.columnenviron_sensor_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn location_qualifierColumn {
                get {
                    return this.columnlocation_qualifier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn original_sample_timeColumn {
                get {
                    return this.columnoriginal_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assigned_sample_timeColumn {
                get {
                    return this.columnassigned_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn raw_valueColumn {
                get {
                    return this.columnraw_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn final_valueColumn {
                get {
                    return this.columnfinal_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn load_dateColumn {
                get {
                    return this.columnload_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn source_filenameColumn {
                get {
                    return this.columnsource_filename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SHAFTSPEED_DATARow this[int index] {
                get {
                    return ((SHAFTSPEED_DATARow)(this.Rows[index]));
                }
            }
            
            public event SHAFTSPEED_DATARowChangeEventHandler SHAFTSPEED_DATARowChanging;
            
            public event SHAFTSPEED_DATARowChangeEventHandler SHAFTSPEED_DATARowChanged;
            
            public event SHAFTSPEED_DATARowChangeEventHandler SHAFTSPEED_DATARowDeleting;
            
            public event SHAFTSPEED_DATARowChangeEventHandler SHAFTSPEED_DATARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSHAFTSPEED_DATARow(SHAFTSPEED_DATARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SHAFTSPEED_DATARow AddSHAFTSPEED_DATARow(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime original_sample_time, System.DateTime assigned_sample_time, int raw_value, decimal final_value, System.DateTime load_date, string source_filename) {
                SHAFTSPEED_DATARow rowSHAFTSPEED_DATARow = ((SHAFTSPEED_DATARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        calendar_date_id,
                        time_of_day_id,
                        station_id,
                        environ_sensor_id,
                        location_qualifier,
                        original_sample_time,
                        assigned_sample_time,
                        raw_value,
                        final_value,
                        load_date,
                        source_filename};
                rowSHAFTSPEED_DATARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSHAFTSPEED_DATARow);
                return rowSHAFTSPEED_DATARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SHAFTSPEED_DATARow FindByshaftspeed_data_id(int shaftspeed_data_id) {
                return ((SHAFTSPEED_DATARow)(this.Rows.Find(new object[] {
                            shaftspeed_data_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SHAFTSPEED_DATADataTable cln = ((SHAFTSPEED_DATADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SHAFTSPEED_DATADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnshaftspeed_data_id = base.Columns["shaftspeed_data_id"];
                this.columncalendar_date_id = base.Columns["calendar_date_id"];
                this.columntime_of_day_id = base.Columns["time_of_day_id"];
                this.columnstation_id = base.Columns["station_id"];
                this.columnenviron_sensor_id = base.Columns["environ_sensor_id"];
                this.columnlocation_qualifier = base.Columns["location_qualifier"];
                this.columnoriginal_sample_time = base.Columns["original_sample_time"];
                this.columnassigned_sample_time = base.Columns["assigned_sample_time"];
                this.columnraw_value = base.Columns["raw_value"];
                this.columnfinal_value = base.Columns["final_value"];
                this.columnload_date = base.Columns["load_date"];
                this.columnsource_filename = base.Columns["source_filename"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnshaftspeed_data_id = new global::System.Data.DataColumn("shaftspeed_data_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnshaftspeed_data_id);
                this.columncalendar_date_id = new global::System.Data.DataColumn("calendar_date_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncalendar_date_id);
                this.columntime_of_day_id = new global::System.Data.DataColumn("time_of_day_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime_of_day_id);
                this.columnstation_id = new global::System.Data.DataColumn("station_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstation_id);
                this.columnenviron_sensor_id = new global::System.Data.DataColumn("environ_sensor_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnenviron_sensor_id);
                this.columnlocation_qualifier = new global::System.Data.DataColumn("location_qualifier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlocation_qualifier);
                this.columnoriginal_sample_time = new global::System.Data.DataColumn("original_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoriginal_sample_time);
                this.columnassigned_sample_time = new global::System.Data.DataColumn("assigned_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassigned_sample_time);
                this.columnraw_value = new global::System.Data.DataColumn("raw_value", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnraw_value);
                this.columnfinal_value = new global::System.Data.DataColumn("final_value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfinal_value);
                this.columnload_date = new global::System.Data.DataColumn("load_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnload_date);
                this.columnsource_filename = new global::System.Data.DataColumn("source_filename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsource_filename);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnshaftspeed_data_id}, true));
                this.columnshaftspeed_data_id.AutoIncrement = true;
                this.columnshaftspeed_data_id.AutoIncrementSeed = -1;
                this.columnshaftspeed_data_id.AutoIncrementStep = -1;
                this.columnshaftspeed_data_id.AllowDBNull = false;
                this.columnshaftspeed_data_id.ReadOnly = true;
                this.columnshaftspeed_data_id.Unique = true;
                this.columncalendar_date_id.AllowDBNull = false;
                this.columntime_of_day_id.AllowDBNull = false;
                this.columnstation_id.AllowDBNull = false;
                this.columnenviron_sensor_id.AllowDBNull = false;
                this.columnlocation_qualifier.AllowDBNull = false;
                this.columnlocation_qualifier.MaxLength = 25;
                this.columnoriginal_sample_time.AllowDBNull = false;
                this.columnassigned_sample_time.AllowDBNull = false;
                this.columnraw_value.AllowDBNull = false;
                this.columnfinal_value.AllowDBNull = false;
                this.columnload_date.AllowDBNull = false;
                this.columnsource_filename.AllowDBNull = false;
                this.columnsource_filename.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SHAFTSPEED_DATARow NewSHAFTSPEED_DATARow() {
                return ((SHAFTSPEED_DATARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SHAFTSPEED_DATARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SHAFTSPEED_DATARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SHAFTSPEED_DATARowChanged != null)) {
                    this.SHAFTSPEED_DATARowChanged(this, new SHAFTSPEED_DATARowChangeEvent(((SHAFTSPEED_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SHAFTSPEED_DATARowChanging != null)) {
                    this.SHAFTSPEED_DATARowChanging(this, new SHAFTSPEED_DATARowChangeEvent(((SHAFTSPEED_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SHAFTSPEED_DATARowDeleted != null)) {
                    this.SHAFTSPEED_DATARowDeleted(this, new SHAFTSPEED_DATARowChangeEvent(((SHAFTSPEED_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SHAFTSPEED_DATARowDeleting != null)) {
                    this.SHAFTSPEED_DATARowDeleting(this, new SHAFTSPEED_DATARowChangeEvent(((SHAFTSPEED_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSHAFTSPEED_DATARow(SHAFTSPEED_DATARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NEPTUNEinfoDataSet ds = new NEPTUNEinfoDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SHAFTSPEED_DATADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TEMPERATURE_DATADataTable : global::System.Data.TypedTableBase<TEMPERATURE_DATARow> {
            
            private global::System.Data.DataColumn columntemperature_data_id;
            
            private global::System.Data.DataColumn columncalendar_date_id;
            
            private global::System.Data.DataColumn columntime_of_day_id;
            
            private global::System.Data.DataColumn columnstation_id;
            
            private global::System.Data.DataColumn columnenviron_sensor_id;
            
            private global::System.Data.DataColumn columnlocation_qualifier;
            
            private global::System.Data.DataColumn columnoriginal_sample_time;
            
            private global::System.Data.DataColumn columnassigned_sample_time;
            
            private global::System.Data.DataColumn columnraw_value;
            
            private global::System.Data.DataColumn columnfinal_value;
            
            private global::System.Data.DataColumn columnload_date;
            
            private global::System.Data.DataColumn columnsource_filename;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEMPERATURE_DATADataTable() {
                this.TableName = "TEMPERATURE_DATA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TEMPERATURE_DATADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TEMPERATURE_DATADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn temperature_data_idColumn {
                get {
                    return this.columntemperature_data_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn calendar_date_idColumn {
                get {
                    return this.columncalendar_date_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn time_of_day_idColumn {
                get {
                    return this.columntime_of_day_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn station_idColumn {
                get {
                    return this.columnstation_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn environ_sensor_idColumn {
                get {
                    return this.columnenviron_sensor_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn location_qualifierColumn {
                get {
                    return this.columnlocation_qualifier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn original_sample_timeColumn {
                get {
                    return this.columnoriginal_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assigned_sample_timeColumn {
                get {
                    return this.columnassigned_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn raw_valueColumn {
                get {
                    return this.columnraw_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn final_valueColumn {
                get {
                    return this.columnfinal_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn load_dateColumn {
                get {
                    return this.columnload_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn source_filenameColumn {
                get {
                    return this.columnsource_filename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEMPERATURE_DATARow this[int index] {
                get {
                    return ((TEMPERATURE_DATARow)(this.Rows[index]));
                }
            }
            
            public event TEMPERATURE_DATARowChangeEventHandler TEMPERATURE_DATARowChanging;
            
            public event TEMPERATURE_DATARowChangeEventHandler TEMPERATURE_DATARowChanged;
            
            public event TEMPERATURE_DATARowChangeEventHandler TEMPERATURE_DATARowDeleting;
            
            public event TEMPERATURE_DATARowChangeEventHandler TEMPERATURE_DATARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTEMPERATURE_DATARow(TEMPERATURE_DATARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEMPERATURE_DATARow AddTEMPERATURE_DATARow(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime original_sample_time, System.DateTime assigned_sample_time, int raw_value, decimal final_value, System.DateTime load_date, string source_filename) {
                TEMPERATURE_DATARow rowTEMPERATURE_DATARow = ((TEMPERATURE_DATARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        calendar_date_id,
                        time_of_day_id,
                        station_id,
                        environ_sensor_id,
                        location_qualifier,
                        original_sample_time,
                        assigned_sample_time,
                        raw_value,
                        final_value,
                        load_date,
                        source_filename};
                rowTEMPERATURE_DATARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTEMPERATURE_DATARow);
                return rowTEMPERATURE_DATARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEMPERATURE_DATARow FindBytemperature_data_id(int temperature_data_id) {
                return ((TEMPERATURE_DATARow)(this.Rows.Find(new object[] {
                            temperature_data_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TEMPERATURE_DATADataTable cln = ((TEMPERATURE_DATADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TEMPERATURE_DATADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntemperature_data_id = base.Columns["temperature_data_id"];
                this.columncalendar_date_id = base.Columns["calendar_date_id"];
                this.columntime_of_day_id = base.Columns["time_of_day_id"];
                this.columnstation_id = base.Columns["station_id"];
                this.columnenviron_sensor_id = base.Columns["environ_sensor_id"];
                this.columnlocation_qualifier = base.Columns["location_qualifier"];
                this.columnoriginal_sample_time = base.Columns["original_sample_time"];
                this.columnassigned_sample_time = base.Columns["assigned_sample_time"];
                this.columnraw_value = base.Columns["raw_value"];
                this.columnfinal_value = base.Columns["final_value"];
                this.columnload_date = base.Columns["load_date"];
                this.columnsource_filename = base.Columns["source_filename"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntemperature_data_id = new global::System.Data.DataColumn("temperature_data_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntemperature_data_id);
                this.columncalendar_date_id = new global::System.Data.DataColumn("calendar_date_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncalendar_date_id);
                this.columntime_of_day_id = new global::System.Data.DataColumn("time_of_day_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime_of_day_id);
                this.columnstation_id = new global::System.Data.DataColumn("station_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstation_id);
                this.columnenviron_sensor_id = new global::System.Data.DataColumn("environ_sensor_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnenviron_sensor_id);
                this.columnlocation_qualifier = new global::System.Data.DataColumn("location_qualifier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlocation_qualifier);
                this.columnoriginal_sample_time = new global::System.Data.DataColumn("original_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoriginal_sample_time);
                this.columnassigned_sample_time = new global::System.Data.DataColumn("assigned_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassigned_sample_time);
                this.columnraw_value = new global::System.Data.DataColumn("raw_value", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnraw_value);
                this.columnfinal_value = new global::System.Data.DataColumn("final_value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfinal_value);
                this.columnload_date = new global::System.Data.DataColumn("load_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnload_date);
                this.columnsource_filename = new global::System.Data.DataColumn("source_filename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsource_filename);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columntemperature_data_id}, true));
                this.columntemperature_data_id.AutoIncrement = true;
                this.columntemperature_data_id.AutoIncrementSeed = -1;
                this.columntemperature_data_id.AutoIncrementStep = -1;
                this.columntemperature_data_id.AllowDBNull = false;
                this.columntemperature_data_id.ReadOnly = true;
                this.columntemperature_data_id.Unique = true;
                this.columncalendar_date_id.AllowDBNull = false;
                this.columntime_of_day_id.AllowDBNull = false;
                this.columnstation_id.AllowDBNull = false;
                this.columnenviron_sensor_id.AllowDBNull = false;
                this.columnlocation_qualifier.AllowDBNull = false;
                this.columnlocation_qualifier.MaxLength = 25;
                this.columnoriginal_sample_time.AllowDBNull = false;
                this.columnassigned_sample_time.AllowDBNull = false;
                this.columnraw_value.AllowDBNull = false;
                this.columnfinal_value.AllowDBNull = false;
                this.columnload_date.AllowDBNull = false;
                this.columnsource_filename.AllowDBNull = false;
                this.columnsource_filename.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEMPERATURE_DATARow NewTEMPERATURE_DATARow() {
                return ((TEMPERATURE_DATARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TEMPERATURE_DATARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TEMPERATURE_DATARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TEMPERATURE_DATARowChanged != null)) {
                    this.TEMPERATURE_DATARowChanged(this, new TEMPERATURE_DATARowChangeEvent(((TEMPERATURE_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TEMPERATURE_DATARowChanging != null)) {
                    this.TEMPERATURE_DATARowChanging(this, new TEMPERATURE_DATARowChangeEvent(((TEMPERATURE_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TEMPERATURE_DATARowDeleted != null)) {
                    this.TEMPERATURE_DATARowDeleted(this, new TEMPERATURE_DATARowChangeEvent(((TEMPERATURE_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TEMPERATURE_DATARowDeleting != null)) {
                    this.TEMPERATURE_DATARowDeleting(this, new TEMPERATURE_DATARowChangeEvent(((TEMPERATURE_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTEMPERATURE_DATARow(TEMPERATURE_DATARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NEPTUNEinfoDataSet ds = new NEPTUNEinfoDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TEMPERATURE_DATADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VELOCITY_DATADataTable : global::System.Data.TypedTableBase<VELOCITY_DATARow> {
            
            private global::System.Data.DataColumn columnvelocity_data_id;
            
            private global::System.Data.DataColumn columncalendar_date_id;
            
            private global::System.Data.DataColumn columntime_of_day_id;
            
            private global::System.Data.DataColumn columnstation_id;
            
            private global::System.Data.DataColumn columnenviron_sensor_id;
            
            private global::System.Data.DataColumn columnlocation_qualifier;
            
            private global::System.Data.DataColumn columnoriginal_sample_time;
            
            private global::System.Data.DataColumn columnassigned_sample_time;
            
            private global::System.Data.DataColumn columnraw_value;
            
            private global::System.Data.DataColumn columnfinal_value;
            
            private global::System.Data.DataColumn columnload_date;
            
            private global::System.Data.DataColumn columnsource_filename;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VELOCITY_DATADataTable() {
                this.TableName = "VELOCITY_DATA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VELOCITY_DATADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VELOCITY_DATADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn velocity_data_idColumn {
                get {
                    return this.columnvelocity_data_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn calendar_date_idColumn {
                get {
                    return this.columncalendar_date_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn time_of_day_idColumn {
                get {
                    return this.columntime_of_day_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn station_idColumn {
                get {
                    return this.columnstation_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn environ_sensor_idColumn {
                get {
                    return this.columnenviron_sensor_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn location_qualifierColumn {
                get {
                    return this.columnlocation_qualifier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn original_sample_timeColumn {
                get {
                    return this.columnoriginal_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assigned_sample_timeColumn {
                get {
                    return this.columnassigned_sample_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn raw_valueColumn {
                get {
                    return this.columnraw_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn final_valueColumn {
                get {
                    return this.columnfinal_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn load_dateColumn {
                get {
                    return this.columnload_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn source_filenameColumn {
                get {
                    return this.columnsource_filename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VELOCITY_DATARow this[int index] {
                get {
                    return ((VELOCITY_DATARow)(this.Rows[index]));
                }
            }
            
            public event VELOCITY_DATARowChangeEventHandler VELOCITY_DATARowChanging;
            
            public event VELOCITY_DATARowChangeEventHandler VELOCITY_DATARowChanged;
            
            public event VELOCITY_DATARowChangeEventHandler VELOCITY_DATARowDeleting;
            
            public event VELOCITY_DATARowChangeEventHandler VELOCITY_DATARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVELOCITY_DATARow(VELOCITY_DATARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VELOCITY_DATARow AddVELOCITY_DATARow(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime original_sample_time, System.DateTime assigned_sample_time, int raw_value, decimal final_value, System.DateTime load_date, string source_filename) {
                VELOCITY_DATARow rowVELOCITY_DATARow = ((VELOCITY_DATARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        calendar_date_id,
                        time_of_day_id,
                        station_id,
                        environ_sensor_id,
                        location_qualifier,
                        original_sample_time,
                        assigned_sample_time,
                        raw_value,
                        final_value,
                        load_date,
                        source_filename};
                rowVELOCITY_DATARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowVELOCITY_DATARow);
                return rowVELOCITY_DATARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VELOCITY_DATARow FindByvelocity_data_id(int velocity_data_id) {
                return ((VELOCITY_DATARow)(this.Rows.Find(new object[] {
                            velocity_data_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                VELOCITY_DATADataTable cln = ((VELOCITY_DATADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new VELOCITY_DATADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnvelocity_data_id = base.Columns["velocity_data_id"];
                this.columncalendar_date_id = base.Columns["calendar_date_id"];
                this.columntime_of_day_id = base.Columns["time_of_day_id"];
                this.columnstation_id = base.Columns["station_id"];
                this.columnenviron_sensor_id = base.Columns["environ_sensor_id"];
                this.columnlocation_qualifier = base.Columns["location_qualifier"];
                this.columnoriginal_sample_time = base.Columns["original_sample_time"];
                this.columnassigned_sample_time = base.Columns["assigned_sample_time"];
                this.columnraw_value = base.Columns["raw_value"];
                this.columnfinal_value = base.Columns["final_value"];
                this.columnload_date = base.Columns["load_date"];
                this.columnsource_filename = base.Columns["source_filename"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnvelocity_data_id = new global::System.Data.DataColumn("velocity_data_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvelocity_data_id);
                this.columncalendar_date_id = new global::System.Data.DataColumn("calendar_date_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncalendar_date_id);
                this.columntime_of_day_id = new global::System.Data.DataColumn("time_of_day_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime_of_day_id);
                this.columnstation_id = new global::System.Data.DataColumn("station_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstation_id);
                this.columnenviron_sensor_id = new global::System.Data.DataColumn("environ_sensor_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnenviron_sensor_id);
                this.columnlocation_qualifier = new global::System.Data.DataColumn("location_qualifier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlocation_qualifier);
                this.columnoriginal_sample_time = new global::System.Data.DataColumn("original_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoriginal_sample_time);
                this.columnassigned_sample_time = new global::System.Data.DataColumn("assigned_sample_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassigned_sample_time);
                this.columnraw_value = new global::System.Data.DataColumn("raw_value", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnraw_value);
                this.columnfinal_value = new global::System.Data.DataColumn("final_value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfinal_value);
                this.columnload_date = new global::System.Data.DataColumn("load_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnload_date);
                this.columnsource_filename = new global::System.Data.DataColumn("source_filename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsource_filename);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnvelocity_data_id}, true));
                this.columnvelocity_data_id.AutoIncrement = true;
                this.columnvelocity_data_id.AutoIncrementSeed = -1;
                this.columnvelocity_data_id.AutoIncrementStep = -1;
                this.columnvelocity_data_id.AllowDBNull = false;
                this.columnvelocity_data_id.ReadOnly = true;
                this.columnvelocity_data_id.Unique = true;
                this.columncalendar_date_id.AllowDBNull = false;
                this.columntime_of_day_id.AllowDBNull = false;
                this.columnstation_id.AllowDBNull = false;
                this.columnenviron_sensor_id.AllowDBNull = false;
                this.columnlocation_qualifier.AllowDBNull = false;
                this.columnlocation_qualifier.MaxLength = 25;
                this.columnoriginal_sample_time.AllowDBNull = false;
                this.columnassigned_sample_time.AllowDBNull = false;
                this.columnraw_value.AllowDBNull = false;
                this.columnfinal_value.AllowDBNull = false;
                this.columnload_date.AllowDBNull = false;
                this.columnsource_filename.AllowDBNull = false;
                this.columnsource_filename.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VELOCITY_DATARow NewVELOCITY_DATARow() {
                return ((VELOCITY_DATARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new VELOCITY_DATARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(VELOCITY_DATARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VELOCITY_DATARowChanged != null)) {
                    this.VELOCITY_DATARowChanged(this, new VELOCITY_DATARowChangeEvent(((VELOCITY_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VELOCITY_DATARowChanging != null)) {
                    this.VELOCITY_DATARowChanging(this, new VELOCITY_DATARowChangeEvent(((VELOCITY_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VELOCITY_DATARowDeleted != null)) {
                    this.VELOCITY_DATARowDeleted(this, new VELOCITY_DATARowChangeEvent(((VELOCITY_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VELOCITY_DATARowDeleting != null)) {
                    this.VELOCITY_DATARowDeleting(this, new VELOCITY_DATARowChangeEvent(((VELOCITY_DATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVELOCITY_DATARow(VELOCITY_DATARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NEPTUNEinfoDataSet ds = new NEPTUNEinfoDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VELOCITY_DATADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CONDUCTANCE_DATARow : global::System.Data.DataRow {
            
            private CONDUCTANCE_DATADataTable tableCONDUCTANCE_DATA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CONDUCTANCE_DATARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCONDUCTANCE_DATA = ((CONDUCTANCE_DATADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int conductance_data_id {
                get {
                    return ((int)(this[this.tableCONDUCTANCE_DATA.conductance_data_idColumn]));
                }
                set {
                    this[this.tableCONDUCTANCE_DATA.conductance_data_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int calendar_date_id {
                get {
                    return ((int)(this[this.tableCONDUCTANCE_DATA.calendar_date_idColumn]));
                }
                set {
                    this[this.tableCONDUCTANCE_DATA.calendar_date_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int time_of_day_id {
                get {
                    return ((int)(this[this.tableCONDUCTANCE_DATA.time_of_day_idColumn]));
                }
                set {
                    this[this.tableCONDUCTANCE_DATA.time_of_day_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int station_id {
                get {
                    return ((int)(this[this.tableCONDUCTANCE_DATA.station_idColumn]));
                }
                set {
                    this[this.tableCONDUCTANCE_DATA.station_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int environ_sensor_id {
                get {
                    return ((int)(this[this.tableCONDUCTANCE_DATA.environ_sensor_idColumn]));
                }
                set {
                    this[this.tableCONDUCTANCE_DATA.environ_sensor_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string location_qualifier {
                get {
                    return ((string)(this[this.tableCONDUCTANCE_DATA.location_qualifierColumn]));
                }
                set {
                    this[this.tableCONDUCTANCE_DATA.location_qualifierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime original_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tableCONDUCTANCE_DATA.original_sample_timeColumn]));
                }
                set {
                    this[this.tableCONDUCTANCE_DATA.original_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime assigned_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tableCONDUCTANCE_DATA.assigned_sample_timeColumn]));
                }
                set {
                    this[this.tableCONDUCTANCE_DATA.assigned_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int raw_value {
                get {
                    return ((int)(this[this.tableCONDUCTANCE_DATA.raw_valueColumn]));
                }
                set {
                    this[this.tableCONDUCTANCE_DATA.raw_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal final_value {
                get {
                    return ((decimal)(this[this.tableCONDUCTANCE_DATA.final_valueColumn]));
                }
                set {
                    this[this.tableCONDUCTANCE_DATA.final_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime load_date {
                get {
                    return ((global::System.DateTime)(this[this.tableCONDUCTANCE_DATA.load_dateColumn]));
                }
                set {
                    this[this.tableCONDUCTANCE_DATA.load_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string source_filename {
                get {
                    return ((string)(this[this.tableCONDUCTANCE_DATA.source_filenameColumn]));
                }
                set {
                    this[this.tableCONDUCTANCE_DATA.source_filenameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CURRENT_DATARow : global::System.Data.DataRow {
            
            private CURRENT_DATADataTable tableCURRENT_DATA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CURRENT_DATARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCURRENT_DATA = ((CURRENT_DATADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int current_data_id {
                get {
                    return ((int)(this[this.tableCURRENT_DATA.current_data_idColumn]));
                }
                set {
                    this[this.tableCURRENT_DATA.current_data_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int calendar_date_id {
                get {
                    return ((int)(this[this.tableCURRENT_DATA.calendar_date_idColumn]));
                }
                set {
                    this[this.tableCURRENT_DATA.calendar_date_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int time_of_day_id {
                get {
                    return ((int)(this[this.tableCURRENT_DATA.time_of_day_idColumn]));
                }
                set {
                    this[this.tableCURRENT_DATA.time_of_day_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int station_id {
                get {
                    return ((int)(this[this.tableCURRENT_DATA.station_idColumn]));
                }
                set {
                    this[this.tableCURRENT_DATA.station_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int environ_sensor_id {
                get {
                    return ((int)(this[this.tableCURRENT_DATA.environ_sensor_idColumn]));
                }
                set {
                    this[this.tableCURRENT_DATA.environ_sensor_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string location_qualifier {
                get {
                    return ((string)(this[this.tableCURRENT_DATA.location_qualifierColumn]));
                }
                set {
                    this[this.tableCURRENT_DATA.location_qualifierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime original_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tableCURRENT_DATA.original_sample_timeColumn]));
                }
                set {
                    this[this.tableCURRENT_DATA.original_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime assigned_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tableCURRENT_DATA.assigned_sample_timeColumn]));
                }
                set {
                    this[this.tableCURRENT_DATA.assigned_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int raw_value {
                get {
                    return ((int)(this[this.tableCURRENT_DATA.raw_valueColumn]));
                }
                set {
                    this[this.tableCURRENT_DATA.raw_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal final_value {
                get {
                    return ((decimal)(this[this.tableCURRENT_DATA.final_valueColumn]));
                }
                set {
                    this[this.tableCURRENT_DATA.final_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime load_date {
                get {
                    return ((global::System.DateTime)(this[this.tableCURRENT_DATA.load_dateColumn]));
                }
                set {
                    this[this.tableCURRENT_DATA.load_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string source_filename {
                get {
                    return ((string)(this[this.tableCURRENT_DATA.source_filenameColumn]));
                }
                set {
                    this[this.tableCURRENT_DATA.source_filenameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DEPTH_DATARow : global::System.Data.DataRow {
            
            private DEPTH_DATADataTable tableDEPTH_DATA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DEPTH_DATARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDEPTH_DATA = ((DEPTH_DATADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime date_time {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDEPTH_DATA.date_timeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'date_time\' in table \'DEPTH_DATA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDEPTH_DATA.date_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal sum_data {
                get {
                    try {
                        return ((decimal)(this[this.tableDEPTH_DATA.sum_dataColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sum_data\' in table \'DEPTH_DATA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDEPTH_DATA.sum_dataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdate_timeNull() {
                return this.IsNull(this.tableDEPTH_DATA.date_timeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdate_timeNull() {
                this[this.tableDEPTH_DATA.date_timeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issum_dataNull() {
                return this.IsNull(this.tableDEPTH_DATA.sum_dataColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsum_dataNull() {
                this[this.tableDEPTH_DATA.sum_dataColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EXPLOSIVITY_DATARow : global::System.Data.DataRow {
            
            private EXPLOSIVITY_DATADataTable tableEXPLOSIVITY_DATA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EXPLOSIVITY_DATARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEXPLOSIVITY_DATA = ((EXPLOSIVITY_DATADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int explosivity_data_id {
                get {
                    return ((int)(this[this.tableEXPLOSIVITY_DATA.explosivity_data_idColumn]));
                }
                set {
                    this[this.tableEXPLOSIVITY_DATA.explosivity_data_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int calendar_date_id {
                get {
                    return ((int)(this[this.tableEXPLOSIVITY_DATA.calendar_date_idColumn]));
                }
                set {
                    this[this.tableEXPLOSIVITY_DATA.calendar_date_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int time_of_day_id {
                get {
                    return ((int)(this[this.tableEXPLOSIVITY_DATA.time_of_day_idColumn]));
                }
                set {
                    this[this.tableEXPLOSIVITY_DATA.time_of_day_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int station_id {
                get {
                    return ((int)(this[this.tableEXPLOSIVITY_DATA.station_idColumn]));
                }
                set {
                    this[this.tableEXPLOSIVITY_DATA.station_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int environ_sensor_id {
                get {
                    return ((int)(this[this.tableEXPLOSIVITY_DATA.environ_sensor_idColumn]));
                }
                set {
                    this[this.tableEXPLOSIVITY_DATA.environ_sensor_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string location_qualifier {
                get {
                    return ((string)(this[this.tableEXPLOSIVITY_DATA.location_qualifierColumn]));
                }
                set {
                    this[this.tableEXPLOSIVITY_DATA.location_qualifierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime original_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tableEXPLOSIVITY_DATA.original_sample_timeColumn]));
                }
                set {
                    this[this.tableEXPLOSIVITY_DATA.original_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime assigned_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tableEXPLOSIVITY_DATA.assigned_sample_timeColumn]));
                }
                set {
                    this[this.tableEXPLOSIVITY_DATA.assigned_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int raw_value {
                get {
                    return ((int)(this[this.tableEXPLOSIVITY_DATA.raw_valueColumn]));
                }
                set {
                    this[this.tableEXPLOSIVITY_DATA.raw_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal final_value {
                get {
                    return ((decimal)(this[this.tableEXPLOSIVITY_DATA.final_valueColumn]));
                }
                set {
                    this[this.tableEXPLOSIVITY_DATA.final_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime load_date {
                get {
                    return ((global::System.DateTime)(this[this.tableEXPLOSIVITY_DATA.load_dateColumn]));
                }
                set {
                    this[this.tableEXPLOSIVITY_DATA.load_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string source_filename {
                get {
                    return ((string)(this[this.tableEXPLOSIVITY_DATA.source_filenameColumn]));
                }
                set {
                    this[this.tableEXPLOSIVITY_DATA.source_filenameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FLOW_DATARow : global::System.Data.DataRow {
            
            private FLOW_DATADataTable tableFLOW_DATA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FLOW_DATARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFLOW_DATA = ((FLOW_DATADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int flow_data_id {
                get {
                    return ((int)(this[this.tableFLOW_DATA.flow_data_idColumn]));
                }
                set {
                    this[this.tableFLOW_DATA.flow_data_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int calendar_date_id {
                get {
                    return ((int)(this[this.tableFLOW_DATA.calendar_date_idColumn]));
                }
                set {
                    this[this.tableFLOW_DATA.calendar_date_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int time_of_day_id {
                get {
                    return ((int)(this[this.tableFLOW_DATA.time_of_day_idColumn]));
                }
                set {
                    this[this.tableFLOW_DATA.time_of_day_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int station_id {
                get {
                    return ((int)(this[this.tableFLOW_DATA.station_idColumn]));
                }
                set {
                    this[this.tableFLOW_DATA.station_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int environ_sensor_id {
                get {
                    return ((int)(this[this.tableFLOW_DATA.environ_sensor_idColumn]));
                }
                set {
                    this[this.tableFLOW_DATA.environ_sensor_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string location_qualifier {
                get {
                    return ((string)(this[this.tableFLOW_DATA.location_qualifierColumn]));
                }
                set {
                    this[this.tableFLOW_DATA.location_qualifierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime original_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tableFLOW_DATA.original_sample_timeColumn]));
                }
                set {
                    this[this.tableFLOW_DATA.original_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime assigned_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tableFLOW_DATA.assigned_sample_timeColumn]));
                }
                set {
                    this[this.tableFLOW_DATA.assigned_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int raw_value {
                get {
                    return ((int)(this[this.tableFLOW_DATA.raw_valueColumn]));
                }
                set {
                    this[this.tableFLOW_DATA.raw_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal final_value {
                get {
                    return ((decimal)(this[this.tableFLOW_DATA.final_valueColumn]));
                }
                set {
                    this[this.tableFLOW_DATA.final_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string units {
                get {
                    return ((string)(this[this.tableFLOW_DATA.unitsColumn]));
                }
                set {
                    this[this.tableFLOW_DATA.unitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime load_date {
                get {
                    return ((global::System.DateTime)(this[this.tableFLOW_DATA.load_dateColumn]));
                }
                set {
                    this[this.tableFLOW_DATA.load_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string source_filename {
                get {
                    return ((string)(this[this.tableFLOW_DATA.source_filenameColumn]));
                }
                set {
                    this[this.tableFLOW_DATA.source_filenameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GATEPOSITION_DATARow : global::System.Data.DataRow {
            
            private GATEPOSITION_DATADataTable tableGATEPOSITION_DATA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GATEPOSITION_DATARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGATEPOSITION_DATA = ((GATEPOSITION_DATADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int gateposition_data_id {
                get {
                    return ((int)(this[this.tableGATEPOSITION_DATA.gateposition_data_idColumn]));
                }
                set {
                    this[this.tableGATEPOSITION_DATA.gateposition_data_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int calendar_date_id {
                get {
                    return ((int)(this[this.tableGATEPOSITION_DATA.calendar_date_idColumn]));
                }
                set {
                    this[this.tableGATEPOSITION_DATA.calendar_date_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int time_of_day_id {
                get {
                    return ((int)(this[this.tableGATEPOSITION_DATA.time_of_day_idColumn]));
                }
                set {
                    this[this.tableGATEPOSITION_DATA.time_of_day_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int station_id {
                get {
                    return ((int)(this[this.tableGATEPOSITION_DATA.station_idColumn]));
                }
                set {
                    this[this.tableGATEPOSITION_DATA.station_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int environ_sensor_id {
                get {
                    return ((int)(this[this.tableGATEPOSITION_DATA.environ_sensor_idColumn]));
                }
                set {
                    this[this.tableGATEPOSITION_DATA.environ_sensor_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string location_qualifier {
                get {
                    return ((string)(this[this.tableGATEPOSITION_DATA.location_qualifierColumn]));
                }
                set {
                    this[this.tableGATEPOSITION_DATA.location_qualifierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime original_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tableGATEPOSITION_DATA.original_sample_timeColumn]));
                }
                set {
                    this[this.tableGATEPOSITION_DATA.original_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime assigned_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tableGATEPOSITION_DATA.assigned_sample_timeColumn]));
                }
                set {
                    this[this.tableGATEPOSITION_DATA.assigned_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int raw_value {
                get {
                    return ((int)(this[this.tableGATEPOSITION_DATA.raw_valueColumn]));
                }
                set {
                    this[this.tableGATEPOSITION_DATA.raw_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal final_value {
                get {
                    return ((decimal)(this[this.tableGATEPOSITION_DATA.final_valueColumn]));
                }
                set {
                    this[this.tableGATEPOSITION_DATA.final_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime load_date {
                get {
                    return ((global::System.DateTime)(this[this.tableGATEPOSITION_DATA.load_dateColumn]));
                }
                set {
                    this[this.tableGATEPOSITION_DATA.load_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string source_filename {
                get {
                    return ((string)(this[this.tableGATEPOSITION_DATA.source_filenameColumn]));
                }
                set {
                    this[this.tableGATEPOSITION_DATA.source_filenameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class H2S_DATARow : global::System.Data.DataRow {
            
            private H2S_DATADataTable tableH2S_DATA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal H2S_DATARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableH2S_DATA = ((H2S_DATADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int h2s_data_id {
                get {
                    return ((int)(this[this.tableH2S_DATA.h2s_data_idColumn]));
                }
                set {
                    this[this.tableH2S_DATA.h2s_data_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int calendar_date_id {
                get {
                    return ((int)(this[this.tableH2S_DATA.calendar_date_idColumn]));
                }
                set {
                    this[this.tableH2S_DATA.calendar_date_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int time_of_day_id {
                get {
                    return ((int)(this[this.tableH2S_DATA.time_of_day_idColumn]));
                }
                set {
                    this[this.tableH2S_DATA.time_of_day_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int station_id {
                get {
                    return ((int)(this[this.tableH2S_DATA.station_idColumn]));
                }
                set {
                    this[this.tableH2S_DATA.station_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int environ_sensor_id {
                get {
                    return ((int)(this[this.tableH2S_DATA.environ_sensor_idColumn]));
                }
                set {
                    this[this.tableH2S_DATA.environ_sensor_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string location_qualifier {
                get {
                    return ((string)(this[this.tableH2S_DATA.location_qualifierColumn]));
                }
                set {
                    this[this.tableH2S_DATA.location_qualifierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime original_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tableH2S_DATA.original_sample_timeColumn]));
                }
                set {
                    this[this.tableH2S_DATA.original_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime assigned_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tableH2S_DATA.assigned_sample_timeColumn]));
                }
                set {
                    this[this.tableH2S_DATA.assigned_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int raw_value {
                get {
                    return ((int)(this[this.tableH2S_DATA.raw_valueColumn]));
                }
                set {
                    this[this.tableH2S_DATA.raw_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal final_value {
                get {
                    return ((decimal)(this[this.tableH2S_DATA.final_valueColumn]));
                }
                set {
                    this[this.tableH2S_DATA.final_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime load_date {
                get {
                    return ((global::System.DateTime)(this[this.tableH2S_DATA.load_dateColumn]));
                }
                set {
                    this[this.tableH2S_DATA.load_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string source_filename {
                get {
                    return ((string)(this[this.tableH2S_DATA.source_filenameColumn]));
                }
                set {
                    this[this.tableH2S_DATA.source_filenameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HUMIDITY_DATARow : global::System.Data.DataRow {
            
            private HUMIDITY_DATADataTable tableHUMIDITY_DATA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HUMIDITY_DATARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHUMIDITY_DATA = ((HUMIDITY_DATADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int humidity_data_id {
                get {
                    return ((int)(this[this.tableHUMIDITY_DATA.humidity_data_idColumn]));
                }
                set {
                    this[this.tableHUMIDITY_DATA.humidity_data_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int calendar_date_id {
                get {
                    return ((int)(this[this.tableHUMIDITY_DATA.calendar_date_idColumn]));
                }
                set {
                    this[this.tableHUMIDITY_DATA.calendar_date_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int time_of_day_id {
                get {
                    return ((int)(this[this.tableHUMIDITY_DATA.time_of_day_idColumn]));
                }
                set {
                    this[this.tableHUMIDITY_DATA.time_of_day_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int station_id {
                get {
                    return ((int)(this[this.tableHUMIDITY_DATA.station_idColumn]));
                }
                set {
                    this[this.tableHUMIDITY_DATA.station_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int environ_sensor_id {
                get {
                    return ((int)(this[this.tableHUMIDITY_DATA.environ_sensor_idColumn]));
                }
                set {
                    this[this.tableHUMIDITY_DATA.environ_sensor_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string location_qualifier {
                get {
                    return ((string)(this[this.tableHUMIDITY_DATA.location_qualifierColumn]));
                }
                set {
                    this[this.tableHUMIDITY_DATA.location_qualifierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime original_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tableHUMIDITY_DATA.original_sample_timeColumn]));
                }
                set {
                    this[this.tableHUMIDITY_DATA.original_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime assigned_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tableHUMIDITY_DATA.assigned_sample_timeColumn]));
                }
                set {
                    this[this.tableHUMIDITY_DATA.assigned_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int raw_value {
                get {
                    return ((int)(this[this.tableHUMIDITY_DATA.raw_valueColumn]));
                }
                set {
                    this[this.tableHUMIDITY_DATA.raw_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal final_value {
                get {
                    return ((decimal)(this[this.tableHUMIDITY_DATA.final_valueColumn]));
                }
                set {
                    this[this.tableHUMIDITY_DATA.final_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime load_date {
                get {
                    return ((global::System.DateTime)(this[this.tableHUMIDITY_DATA.load_dateColumn]));
                }
                set {
                    this[this.tableHUMIDITY_DATA.load_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string source_filename {
                get {
                    return ((string)(this[this.tableHUMIDITY_DATA.source_filenameColumn]));
                }
                set {
                    this[this.tableHUMIDITY_DATA.source_filenameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PH_DATARow : global::System.Data.DataRow {
            
            private PH_DATADataTable tablePH_DATA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PH_DATARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePH_DATA = ((PH_DATADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ph_data_id {
                get {
                    return ((int)(this[this.tablePH_DATA.ph_data_idColumn]));
                }
                set {
                    this[this.tablePH_DATA.ph_data_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int calendar_date_id {
                get {
                    return ((int)(this[this.tablePH_DATA.calendar_date_idColumn]));
                }
                set {
                    this[this.tablePH_DATA.calendar_date_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int time_of_day_id {
                get {
                    return ((int)(this[this.tablePH_DATA.time_of_day_idColumn]));
                }
                set {
                    this[this.tablePH_DATA.time_of_day_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int station_id {
                get {
                    return ((int)(this[this.tablePH_DATA.station_idColumn]));
                }
                set {
                    this[this.tablePH_DATA.station_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int environ_sensor_id {
                get {
                    return ((int)(this[this.tablePH_DATA.environ_sensor_idColumn]));
                }
                set {
                    this[this.tablePH_DATA.environ_sensor_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string location_qualifier {
                get {
                    return ((string)(this[this.tablePH_DATA.location_qualifierColumn]));
                }
                set {
                    this[this.tablePH_DATA.location_qualifierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime original_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tablePH_DATA.original_sample_timeColumn]));
                }
                set {
                    this[this.tablePH_DATA.original_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime assigned_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tablePH_DATA.assigned_sample_timeColumn]));
                }
                set {
                    this[this.tablePH_DATA.assigned_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int raw_value {
                get {
                    return ((int)(this[this.tablePH_DATA.raw_valueColumn]));
                }
                set {
                    this[this.tablePH_DATA.raw_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal final_value {
                get {
                    return ((decimal)(this[this.tablePH_DATA.final_valueColumn]));
                }
                set {
                    this[this.tablePH_DATA.final_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime load_date {
                get {
                    return ((global::System.DateTime)(this[this.tablePH_DATA.load_dateColumn]));
                }
                set {
                    this[this.tablePH_DATA.load_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string source_filename {
                get {
                    return ((string)(this[this.tablePH_DATA.source_filenameColumn]));
                }
                set {
                    this[this.tablePH_DATA.source_filenameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PRESSURE_DATARow : global::System.Data.DataRow {
            
            private PRESSURE_DATADataTable tablePRESSURE_DATA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PRESSURE_DATARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePRESSURE_DATA = ((PRESSURE_DATADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pressure_data_id {
                get {
                    return ((int)(this[this.tablePRESSURE_DATA.pressure_data_idColumn]));
                }
                set {
                    this[this.tablePRESSURE_DATA.pressure_data_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int calendar_date_id {
                get {
                    return ((int)(this[this.tablePRESSURE_DATA.calendar_date_idColumn]));
                }
                set {
                    this[this.tablePRESSURE_DATA.calendar_date_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int time_of_day_id {
                get {
                    return ((int)(this[this.tablePRESSURE_DATA.time_of_day_idColumn]));
                }
                set {
                    this[this.tablePRESSURE_DATA.time_of_day_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int station_id {
                get {
                    return ((int)(this[this.tablePRESSURE_DATA.station_idColumn]));
                }
                set {
                    this[this.tablePRESSURE_DATA.station_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int environ_sensor_id {
                get {
                    return ((int)(this[this.tablePRESSURE_DATA.environ_sensor_idColumn]));
                }
                set {
                    this[this.tablePRESSURE_DATA.environ_sensor_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string location_qualifier {
                get {
                    return ((string)(this[this.tablePRESSURE_DATA.location_qualifierColumn]));
                }
                set {
                    this[this.tablePRESSURE_DATA.location_qualifierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime original_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tablePRESSURE_DATA.original_sample_timeColumn]));
                }
                set {
                    this[this.tablePRESSURE_DATA.original_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime assigned_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tablePRESSURE_DATA.assigned_sample_timeColumn]));
                }
                set {
                    this[this.tablePRESSURE_DATA.assigned_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int raw_value {
                get {
                    return ((int)(this[this.tablePRESSURE_DATA.raw_valueColumn]));
                }
                set {
                    this[this.tablePRESSURE_DATA.raw_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal final_value {
                get {
                    return ((decimal)(this[this.tablePRESSURE_DATA.final_valueColumn]));
                }
                set {
                    this[this.tablePRESSURE_DATA.final_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime load_date {
                get {
                    return ((global::System.DateTime)(this[this.tablePRESSURE_DATA.load_dateColumn]));
                }
                set {
                    this[this.tablePRESSURE_DATA.load_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string source_filename {
                get {
                    return ((string)(this[this.tablePRESSURE_DATA.source_filenameColumn]));
                }
                set {
                    this[this.tablePRESSURE_DATA.source_filenameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SHAFTSPEED_DATARow : global::System.Data.DataRow {
            
            private SHAFTSPEED_DATADataTable tableSHAFTSPEED_DATA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SHAFTSPEED_DATARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSHAFTSPEED_DATA = ((SHAFTSPEED_DATADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int shaftspeed_data_id {
                get {
                    return ((int)(this[this.tableSHAFTSPEED_DATA.shaftspeed_data_idColumn]));
                }
                set {
                    this[this.tableSHAFTSPEED_DATA.shaftspeed_data_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int calendar_date_id {
                get {
                    return ((int)(this[this.tableSHAFTSPEED_DATA.calendar_date_idColumn]));
                }
                set {
                    this[this.tableSHAFTSPEED_DATA.calendar_date_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int time_of_day_id {
                get {
                    return ((int)(this[this.tableSHAFTSPEED_DATA.time_of_day_idColumn]));
                }
                set {
                    this[this.tableSHAFTSPEED_DATA.time_of_day_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int station_id {
                get {
                    return ((int)(this[this.tableSHAFTSPEED_DATA.station_idColumn]));
                }
                set {
                    this[this.tableSHAFTSPEED_DATA.station_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int environ_sensor_id {
                get {
                    return ((int)(this[this.tableSHAFTSPEED_DATA.environ_sensor_idColumn]));
                }
                set {
                    this[this.tableSHAFTSPEED_DATA.environ_sensor_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string location_qualifier {
                get {
                    return ((string)(this[this.tableSHAFTSPEED_DATA.location_qualifierColumn]));
                }
                set {
                    this[this.tableSHAFTSPEED_DATA.location_qualifierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime original_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tableSHAFTSPEED_DATA.original_sample_timeColumn]));
                }
                set {
                    this[this.tableSHAFTSPEED_DATA.original_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime assigned_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tableSHAFTSPEED_DATA.assigned_sample_timeColumn]));
                }
                set {
                    this[this.tableSHAFTSPEED_DATA.assigned_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int raw_value {
                get {
                    return ((int)(this[this.tableSHAFTSPEED_DATA.raw_valueColumn]));
                }
                set {
                    this[this.tableSHAFTSPEED_DATA.raw_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal final_value {
                get {
                    return ((decimal)(this[this.tableSHAFTSPEED_DATA.final_valueColumn]));
                }
                set {
                    this[this.tableSHAFTSPEED_DATA.final_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime load_date {
                get {
                    return ((global::System.DateTime)(this[this.tableSHAFTSPEED_DATA.load_dateColumn]));
                }
                set {
                    this[this.tableSHAFTSPEED_DATA.load_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string source_filename {
                get {
                    return ((string)(this[this.tableSHAFTSPEED_DATA.source_filenameColumn]));
                }
                set {
                    this[this.tableSHAFTSPEED_DATA.source_filenameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TEMPERATURE_DATARow : global::System.Data.DataRow {
            
            private TEMPERATURE_DATADataTable tableTEMPERATURE_DATA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TEMPERATURE_DATARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTEMPERATURE_DATA = ((TEMPERATURE_DATADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int temperature_data_id {
                get {
                    return ((int)(this[this.tableTEMPERATURE_DATA.temperature_data_idColumn]));
                }
                set {
                    this[this.tableTEMPERATURE_DATA.temperature_data_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int calendar_date_id {
                get {
                    return ((int)(this[this.tableTEMPERATURE_DATA.calendar_date_idColumn]));
                }
                set {
                    this[this.tableTEMPERATURE_DATA.calendar_date_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int time_of_day_id {
                get {
                    return ((int)(this[this.tableTEMPERATURE_DATA.time_of_day_idColumn]));
                }
                set {
                    this[this.tableTEMPERATURE_DATA.time_of_day_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int station_id {
                get {
                    return ((int)(this[this.tableTEMPERATURE_DATA.station_idColumn]));
                }
                set {
                    this[this.tableTEMPERATURE_DATA.station_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int environ_sensor_id {
                get {
                    return ((int)(this[this.tableTEMPERATURE_DATA.environ_sensor_idColumn]));
                }
                set {
                    this[this.tableTEMPERATURE_DATA.environ_sensor_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string location_qualifier {
                get {
                    return ((string)(this[this.tableTEMPERATURE_DATA.location_qualifierColumn]));
                }
                set {
                    this[this.tableTEMPERATURE_DATA.location_qualifierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime original_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tableTEMPERATURE_DATA.original_sample_timeColumn]));
                }
                set {
                    this[this.tableTEMPERATURE_DATA.original_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime assigned_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tableTEMPERATURE_DATA.assigned_sample_timeColumn]));
                }
                set {
                    this[this.tableTEMPERATURE_DATA.assigned_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int raw_value {
                get {
                    return ((int)(this[this.tableTEMPERATURE_DATA.raw_valueColumn]));
                }
                set {
                    this[this.tableTEMPERATURE_DATA.raw_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal final_value {
                get {
                    return ((decimal)(this[this.tableTEMPERATURE_DATA.final_valueColumn]));
                }
                set {
                    this[this.tableTEMPERATURE_DATA.final_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime load_date {
                get {
                    return ((global::System.DateTime)(this[this.tableTEMPERATURE_DATA.load_dateColumn]));
                }
                set {
                    this[this.tableTEMPERATURE_DATA.load_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string source_filename {
                get {
                    return ((string)(this[this.tableTEMPERATURE_DATA.source_filenameColumn]));
                }
                set {
                    this[this.tableTEMPERATURE_DATA.source_filenameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VELOCITY_DATARow : global::System.Data.DataRow {
            
            private VELOCITY_DATADataTable tableVELOCITY_DATA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VELOCITY_DATARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVELOCITY_DATA = ((VELOCITY_DATADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int velocity_data_id {
                get {
                    return ((int)(this[this.tableVELOCITY_DATA.velocity_data_idColumn]));
                }
                set {
                    this[this.tableVELOCITY_DATA.velocity_data_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int calendar_date_id {
                get {
                    return ((int)(this[this.tableVELOCITY_DATA.calendar_date_idColumn]));
                }
                set {
                    this[this.tableVELOCITY_DATA.calendar_date_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int time_of_day_id {
                get {
                    return ((int)(this[this.tableVELOCITY_DATA.time_of_day_idColumn]));
                }
                set {
                    this[this.tableVELOCITY_DATA.time_of_day_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int station_id {
                get {
                    return ((int)(this[this.tableVELOCITY_DATA.station_idColumn]));
                }
                set {
                    this[this.tableVELOCITY_DATA.station_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int environ_sensor_id {
                get {
                    return ((int)(this[this.tableVELOCITY_DATA.environ_sensor_idColumn]));
                }
                set {
                    this[this.tableVELOCITY_DATA.environ_sensor_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string location_qualifier {
                get {
                    return ((string)(this[this.tableVELOCITY_DATA.location_qualifierColumn]));
                }
                set {
                    this[this.tableVELOCITY_DATA.location_qualifierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime original_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tableVELOCITY_DATA.original_sample_timeColumn]));
                }
                set {
                    this[this.tableVELOCITY_DATA.original_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime assigned_sample_time {
                get {
                    return ((global::System.DateTime)(this[this.tableVELOCITY_DATA.assigned_sample_timeColumn]));
                }
                set {
                    this[this.tableVELOCITY_DATA.assigned_sample_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int raw_value {
                get {
                    return ((int)(this[this.tableVELOCITY_DATA.raw_valueColumn]));
                }
                set {
                    this[this.tableVELOCITY_DATA.raw_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal final_value {
                get {
                    return ((decimal)(this[this.tableVELOCITY_DATA.final_valueColumn]));
                }
                set {
                    this[this.tableVELOCITY_DATA.final_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime load_date {
                get {
                    return ((global::System.DateTime)(this[this.tableVELOCITY_DATA.load_dateColumn]));
                }
                set {
                    this[this.tableVELOCITY_DATA.load_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string source_filename {
                get {
                    return ((string)(this[this.tableVELOCITY_DATA.source_filenameColumn]));
                }
                set {
                    this[this.tableVELOCITY_DATA.source_filenameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CONDUCTANCE_DATARowChangeEvent : global::System.EventArgs {
            
            private CONDUCTANCE_DATARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONDUCTANCE_DATARowChangeEvent(CONDUCTANCE_DATARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONDUCTANCE_DATARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CURRENT_DATARowChangeEvent : global::System.EventArgs {
            
            private CURRENT_DATARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CURRENT_DATARowChangeEvent(CURRENT_DATARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CURRENT_DATARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DEPTH_DATARowChangeEvent : global::System.EventArgs {
            
            private DEPTH_DATARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DEPTH_DATARowChangeEvent(DEPTH_DATARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DEPTH_DATARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EXPLOSIVITY_DATARowChangeEvent : global::System.EventArgs {
            
            private EXPLOSIVITY_DATARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EXPLOSIVITY_DATARowChangeEvent(EXPLOSIVITY_DATARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EXPLOSIVITY_DATARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FLOW_DATARowChangeEvent : global::System.EventArgs {
            
            private FLOW_DATARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FLOW_DATARowChangeEvent(FLOW_DATARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FLOW_DATARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GATEPOSITION_DATARowChangeEvent : global::System.EventArgs {
            
            private GATEPOSITION_DATARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GATEPOSITION_DATARowChangeEvent(GATEPOSITION_DATARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GATEPOSITION_DATARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class H2S_DATARowChangeEvent : global::System.EventArgs {
            
            private H2S_DATARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public H2S_DATARowChangeEvent(H2S_DATARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public H2S_DATARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HUMIDITY_DATARowChangeEvent : global::System.EventArgs {
            
            private HUMIDITY_DATARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HUMIDITY_DATARowChangeEvent(HUMIDITY_DATARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HUMIDITY_DATARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PH_DATARowChangeEvent : global::System.EventArgs {
            
            private PH_DATARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PH_DATARowChangeEvent(PH_DATARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PH_DATARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PRESSURE_DATARowChangeEvent : global::System.EventArgs {
            
            private PRESSURE_DATARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRESSURE_DATARowChangeEvent(PRESSURE_DATARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRESSURE_DATARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SHAFTSPEED_DATARowChangeEvent : global::System.EventArgs {
            
            private SHAFTSPEED_DATARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SHAFTSPEED_DATARowChangeEvent(SHAFTSPEED_DATARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SHAFTSPEED_DATARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TEMPERATURE_DATARowChangeEvent : global::System.EventArgs {
            
            private TEMPERATURE_DATARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEMPERATURE_DATARowChangeEvent(TEMPERATURE_DATARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEMPERATURE_DATARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VELOCITY_DATARowChangeEvent : global::System.EventArgs {
            
            private VELOCITY_DATARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VELOCITY_DATARowChangeEvent(VELOCITY_DATARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VELOCITY_DATARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace ViRT.NEPTUNEinfoDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CONDUCTANCE_DATATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CONDUCTANCE_DATATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CONDUCTANCE_DATA";
            tableMapping.ColumnMappings.Add("conductance_data_id", "conductance_data_id");
            tableMapping.ColumnMappings.Add("calendar_date_id", "calendar_date_id");
            tableMapping.ColumnMappings.Add("time_of_day_id", "time_of_day_id");
            tableMapping.ColumnMappings.Add("station_id", "station_id");
            tableMapping.ColumnMappings.Add("environ_sensor_id", "environ_sensor_id");
            tableMapping.ColumnMappings.Add("location_qualifier", "location_qualifier");
            tableMapping.ColumnMappings.Add("original_sample_time", "original_sample_time");
            tableMapping.ColumnMappings.Add("assigned_sample_time", "assigned_sample_time");
            tableMapping.ColumnMappings.Add("raw_value", "raw_value");
            tableMapping.ColumnMappings.Add("final_value", "final_value");
            tableMapping.ColumnMappings.Add("load_date", "load_date");
            tableMapping.ColumnMappings.Add("source_filename", "source_filename");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[CONDUCTANCE_DATA] WHERE (([conductance_data_id] = @Original_conductance_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_conductance_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "conductance_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[CONDUCTANCE_DATA] ([calendar_date_id], [time_of_day_id], [station_id], [environ_sensor_id], [location_qualifier], [original_sample_time], [assigned_sample_time], [raw_value], [final_value], [load_date], [source_filename]) VALUES (@calendar_date_id, @time_of_day_id, @station_id, @environ_sensor_id, @location_qualifier, @p1, @assigned_sample_time, @raw_value, @final_value, @load_date, @source_filename);
SELECT conductance_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, load_date, source_filename FROM dbo.CONDUCTANCE_DATA WHERE (conductance_data_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[CONDUCTANCE_DATA] SET [calendar_date_id] = @calendar_date_id, [time_of_day_id] = @time_of_day_id, [station_id] = @station_id, [environ_sensor_id] = @environ_sensor_id, [location_qualifier] = @location_qualifier, [original_sample_time] = @p1, [assigned_sample_time] = @assigned_sample_time, [raw_value] = @raw_value, [final_value] = @final_value, [load_date] = @load_date, [source_filename] = @source_filename WHERE (([conductance_data_id] = @Original_conductance_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename));
SELECT conductance_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, load_date, source_filename FROM dbo.CONDUCTANCE_DATA WHERE (conductance_data_id = @conductance_data_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_conductance_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "conductance_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@conductance_data_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "conductance_data_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ViRT.Properties.Settings.Default.NEPTUNEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT conductance_data_id, calendar_date_id, time_of_day_id, station_id, environ" +
                "_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_" +
                "value, final_value, load_date, source_filename FROM dbo.CONDUCTANCE_DATA";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NEPTUNEinfoDataSet.CONDUCTANCE_DATADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NEPTUNEinfoDataSet.CONDUCTANCE_DATADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NEPTUNEinfoDataSet.CONDUCTANCE_DATADataTable dataTable = new NEPTUNEinfoDataSet.CONDUCTANCE_DATADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet.CONDUCTANCE_DATADataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CONDUCTANCE_DATA");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_conductance_data_id, int Original_calendar_date_id, int Original_time_of_day_id, int Original_station_id, int Original_environ_sensor_id, string Original_location_qualifier, System.DateTime p2, System.DateTime Original_assigned_sample_time, int Original_raw_value, decimal Original_final_value, System.DateTime Original_load_date, string Original_source_filename) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_conductance_data_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_calendar_date_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_time_of_day_id));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_station_id));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(p2));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_raw_value));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_final_value));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime p1, System.DateTime assigned_sample_time, int raw_value, decimal final_value, System.DateTime load_date, string source_filename) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(final_value));
            this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_conductance_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename, 
                    int conductance_data_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(final_value));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_conductance_data_id));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_station_id));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(p2));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_raw_value));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_final_value));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(conductance_data_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_conductance_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename) {
            return this.Update(calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, p1, assigned_sample_time, raw_value, final_value, load_date, source_filename, Original_conductance_data_id, Original_calendar_date_id, Original_time_of_day_id, Original_station_id, Original_environ_sensor_id, Original_location_qualifier, p2, Original_assigned_sample_time, Original_raw_value, Original_final_value, Original_load_date, Original_source_filename, Original_conductance_data_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CURRENT_DATATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CURRENT_DATATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CURRENT_DATA";
            tableMapping.ColumnMappings.Add("current_data_id", "current_data_id");
            tableMapping.ColumnMappings.Add("calendar_date_id", "calendar_date_id");
            tableMapping.ColumnMappings.Add("time_of_day_id", "time_of_day_id");
            tableMapping.ColumnMappings.Add("station_id", "station_id");
            tableMapping.ColumnMappings.Add("environ_sensor_id", "environ_sensor_id");
            tableMapping.ColumnMappings.Add("location_qualifier", "location_qualifier");
            tableMapping.ColumnMappings.Add("original_sample_time", "original_sample_time");
            tableMapping.ColumnMappings.Add("assigned_sample_time", "assigned_sample_time");
            tableMapping.ColumnMappings.Add("raw_value", "raw_value");
            tableMapping.ColumnMappings.Add("final_value", "final_value");
            tableMapping.ColumnMappings.Add("load_date", "load_date");
            tableMapping.ColumnMappings.Add("source_filename", "source_filename");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[CURRENT_DATA] WHERE (([current_data_id] = @Original_current_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_current_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "current_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[CURRENT_DATA] ([calendar_date_id], [time_of_day_id], [station_id], [environ_sensor_id], [location_qualifier], [original_sample_time], [assigned_sample_time], [raw_value], [final_value], [load_date], [source_filename]) VALUES (@calendar_date_id, @time_of_day_id, @station_id, @environ_sensor_id, @location_qualifier, @p1, @assigned_sample_time, @raw_value, @final_value, @load_date, @source_filename);
SELECT current_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, load_date, source_filename FROM dbo.CURRENT_DATA WHERE (current_data_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[CURRENT_DATA] SET [calendar_date_id] = @calendar_date_id, [time_of_day_id] = @time_of_day_id, [station_id] = @station_id, [environ_sensor_id] = @environ_sensor_id, [location_qualifier] = @location_qualifier, [original_sample_time] = @p1, [assigned_sample_time] = @assigned_sample_time, [raw_value] = @raw_value, [final_value] = @final_value, [load_date] = @load_date, [source_filename] = @source_filename WHERE (([current_data_id] = @Original_current_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename));
SELECT current_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, load_date, source_filename FROM dbo.CURRENT_DATA WHERE (current_data_id = @current_data_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_current_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "current_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@current_data_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "current_data_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ViRT.Properties.Settings.Default.NEPTUNEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT current_data_id, calendar_date_id, time_of_day_id, station_id, environ_sen" +
                "sor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_valu" +
                "e, final_value, load_date, source_filename FROM dbo.CURRENT_DATA";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NEPTUNEinfoDataSet.CURRENT_DATADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NEPTUNEinfoDataSet.CURRENT_DATADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NEPTUNEinfoDataSet.CURRENT_DATADataTable dataTable = new NEPTUNEinfoDataSet.CURRENT_DATADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet.CURRENT_DATADataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CURRENT_DATA");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_current_data_id, int Original_calendar_date_id, int Original_time_of_day_id, int Original_station_id, int Original_environ_sensor_id, string Original_location_qualifier, System.DateTime p2, System.DateTime Original_assigned_sample_time, int Original_raw_value, decimal Original_final_value, System.DateTime Original_load_date, string Original_source_filename) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_current_data_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_calendar_date_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_time_of_day_id));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_station_id));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(p2));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_raw_value));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_final_value));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime p1, System.DateTime assigned_sample_time, int raw_value, decimal final_value, System.DateTime load_date, string source_filename) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(final_value));
            this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_current_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename, 
                    int current_data_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(final_value));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_current_data_id));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_station_id));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(p2));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_raw_value));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_final_value));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(current_data_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_current_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename) {
            return this.Update(calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, p1, assigned_sample_time, raw_value, final_value, load_date, source_filename, Original_current_data_id, Original_calendar_date_id, Original_time_of_day_id, Original_station_id, Original_environ_sensor_id, Original_location_qualifier, p2, Original_assigned_sample_time, Original_raw_value, Original_final_value, Original_load_date, Original_source_filename, Original_current_data_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DEPTH_DATATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DEPTH_DATATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DEPTH_DATA";
            tableMapping.ColumnMappings.Add("date_time", "date_time");
            tableMapping.ColumnMappings.Add("sum_data", "sum_data");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ViRT.Properties.Settings.Default.NEPTUNEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT    date_time, AVG(final_value) AS sum_data
                      FROM         (SELECT  DATEADD(n, DATEDIFF(n, 0,assigned_sample_time) - DATEDIFF(n, 0, assigned_sample_time) %(CAST(@timeStep AS int)) , 0) AS date_time,
                      final_value
                      FROM          dbo.DEPTH_DATA
                      WHERE      (station_id = @station_id) AND (location_qualifier = @location_qualifier) AND (assigned_sample_time >= @StartDate) AND (assigned_sample_time <= @EndDate)) AS derivedtbl_1
                      GROUP BY date_time ORDER BY date_time";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@timeStep", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.VarChar, 25, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 4, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 4, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NEPTUNEinfoDataSet.DEPTH_DATADataTable dataTable, decimal timeStep, int station_id, string location_qualifier, System.DateTime StartDate, System.DateTime EndDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((decimal)(timeStep));
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(station_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(location_qualifier));
            }
            this.Adapter.SelectCommand.Parameters[3].Value = ((System.DateTime)(StartDate));
            this.Adapter.SelectCommand.Parameters[4].Value = ((System.DateTime)(EndDate));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NEPTUNEinfoDataSet.DEPTH_DATADataTable GetData(decimal timeStep, int station_id, string location_qualifier, System.DateTime StartDate, System.DateTime EndDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((decimal)(timeStep));
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(station_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(location_qualifier));
            }
            this.Adapter.SelectCommand.Parameters[3].Value = ((System.DateTime)(StartDate));
            this.Adapter.SelectCommand.Parameters[4].Value = ((System.DateTime)(EndDate));
            NEPTUNEinfoDataSet.DEPTH_DATADataTable dataTable = new NEPTUNEinfoDataSet.DEPTH_DATADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EXPLOSIVITY_DATATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EXPLOSIVITY_DATATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "EXPLOSIVITY_DATA";
            tableMapping.ColumnMappings.Add("explosivity_data_id", "explosivity_data_id");
            tableMapping.ColumnMappings.Add("calendar_date_id", "calendar_date_id");
            tableMapping.ColumnMappings.Add("time_of_day_id", "time_of_day_id");
            tableMapping.ColumnMappings.Add("station_id", "station_id");
            tableMapping.ColumnMappings.Add("environ_sensor_id", "environ_sensor_id");
            tableMapping.ColumnMappings.Add("location_qualifier", "location_qualifier");
            tableMapping.ColumnMappings.Add("original_sample_time", "original_sample_time");
            tableMapping.ColumnMappings.Add("assigned_sample_time", "assigned_sample_time");
            tableMapping.ColumnMappings.Add("raw_value", "raw_value");
            tableMapping.ColumnMappings.Add("final_value", "final_value");
            tableMapping.ColumnMappings.Add("load_date", "load_date");
            tableMapping.ColumnMappings.Add("source_filename", "source_filename");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[EXPLOSIVITY_DATA] WHERE (([explosivity_data_id] = @Original_explosivity_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_explosivity_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "explosivity_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[EXPLOSIVITY_DATA] ([calendar_date_id], [time_of_day_id], [station_id], [environ_sensor_id], [location_qualifier], [original_sample_time], [assigned_sample_time], [raw_value], [final_value], [load_date], [source_filename]) VALUES (@calendar_date_id, @time_of_day_id, @station_id, @environ_sensor_id, @location_qualifier, @p1, @assigned_sample_time, @raw_value, @final_value, @load_date, @source_filename);
SELECT explosivity_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, load_date, source_filename FROM dbo.EXPLOSIVITY_DATA WHERE (explosivity_data_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[EXPLOSIVITY_DATA] SET [calendar_date_id] = @calendar_date_id, [time_of_day_id] = @time_of_day_id, [station_id] = @station_id, [environ_sensor_id] = @environ_sensor_id, [location_qualifier] = @location_qualifier, [original_sample_time] = @p1, [assigned_sample_time] = @assigned_sample_time, [raw_value] = @raw_value, [final_value] = @final_value, [load_date] = @load_date, [source_filename] = @source_filename WHERE (([explosivity_data_id] = @Original_explosivity_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename));
SELECT explosivity_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, load_date, source_filename FROM dbo.EXPLOSIVITY_DATA WHERE (explosivity_data_id = @explosivity_data_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_explosivity_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "explosivity_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@explosivity_data_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "explosivity_data_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ViRT.Properties.Settings.Default.NEPTUNEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT explosivity_data_id, calendar_date_id, time_of_day_id, station_id, environ" +
                "_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_" +
                "value, final_value, load_date, source_filename FROM dbo.EXPLOSIVITY_DATA";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NEPTUNEinfoDataSet.EXPLOSIVITY_DATADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NEPTUNEinfoDataSet.EXPLOSIVITY_DATADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NEPTUNEinfoDataSet.EXPLOSIVITY_DATADataTable dataTable = new NEPTUNEinfoDataSet.EXPLOSIVITY_DATADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet.EXPLOSIVITY_DATADataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet dataSet) {
            return this.Adapter.Update(dataSet, "EXPLOSIVITY_DATA");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_explosivity_data_id, int Original_calendar_date_id, int Original_time_of_day_id, int Original_station_id, int Original_environ_sensor_id, string Original_location_qualifier, System.DateTime p2, System.DateTime Original_assigned_sample_time, int Original_raw_value, decimal Original_final_value, System.DateTime Original_load_date, string Original_source_filename) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_explosivity_data_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_calendar_date_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_time_of_day_id));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_station_id));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(p2));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_raw_value));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_final_value));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime p1, System.DateTime assigned_sample_time, int raw_value, decimal final_value, System.DateTime load_date, string source_filename) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(final_value));
            this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_explosivity_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename, 
                    int explosivity_data_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(final_value));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_explosivity_data_id));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_station_id));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(p2));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_raw_value));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_final_value));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(explosivity_data_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_explosivity_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename) {
            return this.Update(calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, p1, assigned_sample_time, raw_value, final_value, load_date, source_filename, Original_explosivity_data_id, Original_calendar_date_id, Original_time_of_day_id, Original_station_id, Original_environ_sensor_id, Original_location_qualifier, p2, Original_assigned_sample_time, Original_raw_value, Original_final_value, Original_load_date, Original_source_filename, Original_explosivity_data_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FLOW_DATATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FLOW_DATATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FLOW_DATA";
            tableMapping.ColumnMappings.Add("flow_data_id", "flow_data_id");
            tableMapping.ColumnMappings.Add("calendar_date_id", "calendar_date_id");
            tableMapping.ColumnMappings.Add("time_of_day_id", "time_of_day_id");
            tableMapping.ColumnMappings.Add("station_id", "station_id");
            tableMapping.ColumnMappings.Add("environ_sensor_id", "environ_sensor_id");
            tableMapping.ColumnMappings.Add("location_qualifier", "location_qualifier");
            tableMapping.ColumnMappings.Add("original_sample_time", "original_sample_time");
            tableMapping.ColumnMappings.Add("assigned_sample_time", "assigned_sample_time");
            tableMapping.ColumnMappings.Add("raw_value", "raw_value");
            tableMapping.ColumnMappings.Add("final_value", "final_value");
            tableMapping.ColumnMappings.Add("units", "units");
            tableMapping.ColumnMappings.Add("load_date", "load_date");
            tableMapping.ColumnMappings.Add("source_filename", "source_filename");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[FLOW_DATA] WHERE (([flow_data_id] = @Original_flow_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([units] = @Original_units) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_flow_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "flow_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_units", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "units", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[FLOW_DATA] ([calendar_date_id], [time_of_day_id], [station_id], [environ_sensor_id], [location_qualifier], [original_sample_time], [assigned_sample_time], [raw_value], [final_value], [units], [load_date], [source_filename]) VALUES (@calendar_date_id, @time_of_day_id, @station_id, @environ_sensor_id, @location_qualifier, @p1, @assigned_sample_time, @raw_value, @final_value, @units, @load_date, @source_filename);
SELECT flow_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, units, load_date, source_filename FROM dbo.FLOW_DATA WHERE (flow_data_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@units", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "units", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[FLOW_DATA] SET [calendar_date_id] = @calendar_date_id, [time_of_day_id] = @time_of_day_id, [station_id] = @station_id, [environ_sensor_id] = @environ_sensor_id, [location_qualifier] = @location_qualifier, [original_sample_time] = @p1, [assigned_sample_time] = @assigned_sample_time, [raw_value] = @raw_value, [final_value] = @final_value, [units] = @units, [load_date] = @load_date, [source_filename] = @source_filename WHERE (([flow_data_id] = @Original_flow_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([units] = @Original_units) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename));
SELECT flow_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, units, load_date, source_filename FROM dbo.FLOW_DATA WHERE (flow_data_id = @flow_data_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@units", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "units", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_flow_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "flow_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_units", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "units", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@flow_data_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "flow_data_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ViRT.Properties.Settings.Default.NEPTUNEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT flow_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor" +
                "_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, " +
                "final_value, units, load_date, source_filename FROM dbo.FLOW_DATA";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NEPTUNEinfoDataSet.FLOW_DATADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NEPTUNEinfoDataSet.FLOW_DATADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NEPTUNEinfoDataSet.FLOW_DATADataTable dataTable = new NEPTUNEinfoDataSet.FLOW_DATADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet.FLOW_DATADataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FLOW_DATA");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_flow_data_id, int Original_calendar_date_id, int Original_time_of_day_id, int Original_station_id, int Original_environ_sensor_id, string Original_location_qualifier, System.DateTime p2, System.DateTime Original_assigned_sample_time, int Original_raw_value, decimal Original_final_value, string Original_units, System.DateTime Original_load_date, string Original_source_filename) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_flow_data_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_calendar_date_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_time_of_day_id));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_station_id));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(p2));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_raw_value));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_final_value));
            if ((Original_units == null)) {
                throw new global::System.ArgumentNullException("Original_units");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_units));
            }
            this.Adapter.DeleteCommand.Parameters[11].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime p1, System.DateTime assigned_sample_time, int raw_value, decimal final_value, string units, System.DateTime load_date, string source_filename) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(final_value));
            if ((units == null)) {
                throw new global::System.ArgumentNullException("units");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(units));
            }
            this.Adapter.InsertCommand.Parameters[10].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    string units, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_flow_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    string Original_units, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename, 
                    int flow_data_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(final_value));
            if ((units == null)) {
                throw new global::System.ArgumentNullException("units");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(units));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_flow_data_id));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_station_id));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(p2));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_raw_value));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((decimal)(Original_final_value));
            if ((Original_units == null)) {
                throw new global::System.ArgumentNullException("Original_units");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_units));
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(flow_data_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    string units, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_flow_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    string Original_units, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename) {
            return this.Update(calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, p1, assigned_sample_time, raw_value, final_value, units, load_date, source_filename, Original_flow_data_id, Original_calendar_date_id, Original_time_of_day_id, Original_station_id, Original_environ_sensor_id, Original_location_qualifier, p2, Original_assigned_sample_time, Original_raw_value, Original_final_value, Original_units, Original_load_date, Original_source_filename, Original_flow_data_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GATEPOSITION_DATATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GATEPOSITION_DATATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GATEPOSITION_DATA";
            tableMapping.ColumnMappings.Add("gateposition_data_id", "gateposition_data_id");
            tableMapping.ColumnMappings.Add("calendar_date_id", "calendar_date_id");
            tableMapping.ColumnMappings.Add("time_of_day_id", "time_of_day_id");
            tableMapping.ColumnMappings.Add("station_id", "station_id");
            tableMapping.ColumnMappings.Add("environ_sensor_id", "environ_sensor_id");
            tableMapping.ColumnMappings.Add("location_qualifier", "location_qualifier");
            tableMapping.ColumnMappings.Add("original_sample_time", "original_sample_time");
            tableMapping.ColumnMappings.Add("assigned_sample_time", "assigned_sample_time");
            tableMapping.ColumnMappings.Add("raw_value", "raw_value");
            tableMapping.ColumnMappings.Add("final_value", "final_value");
            tableMapping.ColumnMappings.Add("load_date", "load_date");
            tableMapping.ColumnMappings.Add("source_filename", "source_filename");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[GATEPOSITION_DATA] WHERE (([gateposition_data_id] = @Original_gateposition_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_gateposition_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gateposition_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[GATEPOSITION_DATA] ([calendar_date_id], [time_of_day_id], [station_id], [environ_sensor_id], [location_qualifier], [original_sample_time], [assigned_sample_time], [raw_value], [final_value], [load_date], [source_filename]) VALUES (@calendar_date_id, @time_of_day_id, @station_id, @environ_sensor_id, @location_qualifier, @p1, @assigned_sample_time, @raw_value, @final_value, @load_date, @source_filename);
SELECT gateposition_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, load_date, source_filename FROM dbo.GATEPOSITION_DATA WHERE (gateposition_data_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[GATEPOSITION_DATA] SET [calendar_date_id] = @calendar_date_id, [time_of_day_id] = @time_of_day_id, [station_id] = @station_id, [environ_sensor_id] = @environ_sensor_id, [location_qualifier] = @location_qualifier, [original_sample_time] = @p1, [assigned_sample_time] = @assigned_sample_time, [raw_value] = @raw_value, [final_value] = @final_value, [load_date] = @load_date, [source_filename] = @source_filename WHERE (([gateposition_data_id] = @Original_gateposition_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename));
SELECT gateposition_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, load_date, source_filename FROM dbo.GATEPOSITION_DATA WHERE (gateposition_data_id = @gateposition_data_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_gateposition_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gateposition_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gateposition_data_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "gateposition_data_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ViRT.Properties.Settings.Default.NEPTUNEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT gateposition_data_id, calendar_date_id, time_of_day_id, station_id, enviro" +
                "n_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw" +
                "_value, final_value, load_date, source_filename FROM dbo.GATEPOSITION_DATA";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NEPTUNEinfoDataSet.GATEPOSITION_DATADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NEPTUNEinfoDataSet.GATEPOSITION_DATADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NEPTUNEinfoDataSet.GATEPOSITION_DATADataTable dataTable = new NEPTUNEinfoDataSet.GATEPOSITION_DATADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet.GATEPOSITION_DATADataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet dataSet) {
            return this.Adapter.Update(dataSet, "GATEPOSITION_DATA");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_gateposition_data_id, int Original_calendar_date_id, int Original_time_of_day_id, int Original_station_id, int Original_environ_sensor_id, string Original_location_qualifier, System.DateTime p2, System.DateTime Original_assigned_sample_time, int Original_raw_value, decimal Original_final_value, System.DateTime Original_load_date, string Original_source_filename) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_gateposition_data_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_calendar_date_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_time_of_day_id));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_station_id));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(p2));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_raw_value));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_final_value));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime p1, System.DateTime assigned_sample_time, int raw_value, decimal final_value, System.DateTime load_date, string source_filename) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(final_value));
            this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_gateposition_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename, 
                    int gateposition_data_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(final_value));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_gateposition_data_id));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_station_id));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(p2));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_raw_value));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_final_value));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(gateposition_data_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_gateposition_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename) {
            return this.Update(calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, p1, assigned_sample_time, raw_value, final_value, load_date, source_filename, Original_gateposition_data_id, Original_calendar_date_id, Original_time_of_day_id, Original_station_id, Original_environ_sensor_id, Original_location_qualifier, p2, Original_assigned_sample_time, Original_raw_value, Original_final_value, Original_load_date, Original_source_filename, Original_gateposition_data_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class H2S_DATATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public H2S_DATATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "H2S_DATA";
            tableMapping.ColumnMappings.Add("h2s_data_id", "h2s_data_id");
            tableMapping.ColumnMappings.Add("calendar_date_id", "calendar_date_id");
            tableMapping.ColumnMappings.Add("time_of_day_id", "time_of_day_id");
            tableMapping.ColumnMappings.Add("station_id", "station_id");
            tableMapping.ColumnMappings.Add("environ_sensor_id", "environ_sensor_id");
            tableMapping.ColumnMappings.Add("location_qualifier", "location_qualifier");
            tableMapping.ColumnMappings.Add("original_sample_time", "original_sample_time");
            tableMapping.ColumnMappings.Add("assigned_sample_time", "assigned_sample_time");
            tableMapping.ColumnMappings.Add("raw_value", "raw_value");
            tableMapping.ColumnMappings.Add("final_value", "final_value");
            tableMapping.ColumnMappings.Add("load_date", "load_date");
            tableMapping.ColumnMappings.Add("source_filename", "source_filename");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[H2S_DATA] WHERE (([h2s_data_id] = @Original_h2s_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_h2s_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "h2s_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[H2S_DATA] ([calendar_date_id], [time_of_day_id], [station_id], [environ_sensor_id], [location_qualifier], [original_sample_time], [assigned_sample_time], [raw_value], [final_value], [load_date], [source_filename]) VALUES (@calendar_date_id, @time_of_day_id, @station_id, @environ_sensor_id, @location_qualifier, @p1, @assigned_sample_time, @raw_value, @final_value, @load_date, @source_filename);
SELECT h2s_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, load_date, source_filename FROM dbo.H2S_DATA WHERE (h2s_data_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[H2S_DATA] SET [calendar_date_id] = @calendar_date_id, [time_of_day_id] = @time_of_day_id, [station_id] = @station_id, [environ_sensor_id] = @environ_sensor_id, [location_qualifier] = @location_qualifier, [original_sample_time] = @p1, [assigned_sample_time] = @assigned_sample_time, [raw_value] = @raw_value, [final_value] = @final_value, [load_date] = @load_date, [source_filename] = @source_filename WHERE (([h2s_data_id] = @Original_h2s_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename));
SELECT h2s_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, load_date, source_filename FROM dbo.H2S_DATA WHERE (h2s_data_id = @h2s_data_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_h2s_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "h2s_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@h2s_data_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "h2s_data_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ViRT.Properties.Settings.Default.NEPTUNEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT h2s_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_" +
                "id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, f" +
                "inal_value, load_date, source_filename FROM dbo.H2S_DATA";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NEPTUNEinfoDataSet.H2S_DATADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NEPTUNEinfoDataSet.H2S_DATADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NEPTUNEinfoDataSet.H2S_DATADataTable dataTable = new NEPTUNEinfoDataSet.H2S_DATADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet.H2S_DATADataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet dataSet) {
            return this.Adapter.Update(dataSet, "H2S_DATA");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_h2s_data_id, int Original_calendar_date_id, int Original_time_of_day_id, int Original_station_id, int Original_environ_sensor_id, string Original_location_qualifier, System.DateTime p2, System.DateTime Original_assigned_sample_time, int Original_raw_value, decimal Original_final_value, System.DateTime Original_load_date, string Original_source_filename) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_h2s_data_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_calendar_date_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_time_of_day_id));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_station_id));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(p2));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_raw_value));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_final_value));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime p1, System.DateTime assigned_sample_time, int raw_value, decimal final_value, System.DateTime load_date, string source_filename) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(final_value));
            this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_h2s_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename, 
                    int h2s_data_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(final_value));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_h2s_data_id));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_station_id));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(p2));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_raw_value));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_final_value));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(h2s_data_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_h2s_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename) {
            return this.Update(calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, p1, assigned_sample_time, raw_value, final_value, load_date, source_filename, Original_h2s_data_id, Original_calendar_date_id, Original_time_of_day_id, Original_station_id, Original_environ_sensor_id, Original_location_qualifier, p2, Original_assigned_sample_time, Original_raw_value, Original_final_value, Original_load_date, Original_source_filename, Original_h2s_data_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class HUMIDITY_DATATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HUMIDITY_DATATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "HUMIDITY_DATA";
            tableMapping.ColumnMappings.Add("humidity_data_id", "humidity_data_id");
            tableMapping.ColumnMappings.Add("calendar_date_id", "calendar_date_id");
            tableMapping.ColumnMappings.Add("time_of_day_id", "time_of_day_id");
            tableMapping.ColumnMappings.Add("station_id", "station_id");
            tableMapping.ColumnMappings.Add("environ_sensor_id", "environ_sensor_id");
            tableMapping.ColumnMappings.Add("location_qualifier", "location_qualifier");
            tableMapping.ColumnMappings.Add("original_sample_time", "original_sample_time");
            tableMapping.ColumnMappings.Add("assigned_sample_time", "assigned_sample_time");
            tableMapping.ColumnMappings.Add("raw_value", "raw_value");
            tableMapping.ColumnMappings.Add("final_value", "final_value");
            tableMapping.ColumnMappings.Add("load_date", "load_date");
            tableMapping.ColumnMappings.Add("source_filename", "source_filename");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[HUMIDITY_DATA] WHERE (([humidity_data_id] = @Original_humidity_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_humidity_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "humidity_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[HUMIDITY_DATA] ([calendar_date_id], [time_of_day_id], [station_id], [environ_sensor_id], [location_qualifier], [original_sample_time], [assigned_sample_time], [raw_value], [final_value], [load_date], [source_filename]) VALUES (@calendar_date_id, @time_of_day_id, @station_id, @environ_sensor_id, @location_qualifier, @p1, @assigned_sample_time, @raw_value, @final_value, @load_date, @source_filename);
SELECT humidity_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, load_date, source_filename FROM dbo.HUMIDITY_DATA WHERE (humidity_data_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[HUMIDITY_DATA] SET [calendar_date_id] = @calendar_date_id, [time_of_day_id] = @time_of_day_id, [station_id] = @station_id, [environ_sensor_id] = @environ_sensor_id, [location_qualifier] = @location_qualifier, [original_sample_time] = @p1, [assigned_sample_time] = @assigned_sample_time, [raw_value] = @raw_value, [final_value] = @final_value, [load_date] = @load_date, [source_filename] = @source_filename WHERE (([humidity_data_id] = @Original_humidity_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename));
SELECT humidity_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, load_date, source_filename FROM dbo.HUMIDITY_DATA WHERE (humidity_data_id = @humidity_data_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_humidity_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "humidity_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@humidity_data_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "humidity_data_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ViRT.Properties.Settings.Default.NEPTUNEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT humidity_data_id, calendar_date_id, time_of_day_id, station_id, environ_se" +
                "nsor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_val" +
                "ue, final_value, load_date, source_filename FROM dbo.HUMIDITY_DATA";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NEPTUNEinfoDataSet.HUMIDITY_DATADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NEPTUNEinfoDataSet.HUMIDITY_DATADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NEPTUNEinfoDataSet.HUMIDITY_DATADataTable dataTable = new NEPTUNEinfoDataSet.HUMIDITY_DATADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet.HUMIDITY_DATADataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet dataSet) {
            return this.Adapter.Update(dataSet, "HUMIDITY_DATA");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_humidity_data_id, int Original_calendar_date_id, int Original_time_of_day_id, int Original_station_id, int Original_environ_sensor_id, string Original_location_qualifier, System.DateTime p2, System.DateTime Original_assigned_sample_time, int Original_raw_value, decimal Original_final_value, System.DateTime Original_load_date, string Original_source_filename) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_humidity_data_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_calendar_date_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_time_of_day_id));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_station_id));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(p2));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_raw_value));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_final_value));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime p1, System.DateTime assigned_sample_time, int raw_value, decimal final_value, System.DateTime load_date, string source_filename) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(final_value));
            this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_humidity_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename, 
                    int humidity_data_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(final_value));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_humidity_data_id));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_station_id));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(p2));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_raw_value));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_final_value));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(humidity_data_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_humidity_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename) {
            return this.Update(calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, p1, assigned_sample_time, raw_value, final_value, load_date, source_filename, Original_humidity_data_id, Original_calendar_date_id, Original_time_of_day_id, Original_station_id, Original_environ_sensor_id, Original_location_qualifier, p2, Original_assigned_sample_time, Original_raw_value, Original_final_value, Original_load_date, Original_source_filename, Original_humidity_data_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PH_DATATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PH_DATATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PH_DATA";
            tableMapping.ColumnMappings.Add("ph_data_id", "ph_data_id");
            tableMapping.ColumnMappings.Add("calendar_date_id", "calendar_date_id");
            tableMapping.ColumnMappings.Add("time_of_day_id", "time_of_day_id");
            tableMapping.ColumnMappings.Add("station_id", "station_id");
            tableMapping.ColumnMappings.Add("environ_sensor_id", "environ_sensor_id");
            tableMapping.ColumnMappings.Add("location_qualifier", "location_qualifier");
            tableMapping.ColumnMappings.Add("original_sample_time", "original_sample_time");
            tableMapping.ColumnMappings.Add("assigned_sample_time", "assigned_sample_time");
            tableMapping.ColumnMappings.Add("raw_value", "raw_value");
            tableMapping.ColumnMappings.Add("final_value", "final_value");
            tableMapping.ColumnMappings.Add("load_date", "load_date");
            tableMapping.ColumnMappings.Add("source_filename", "source_filename");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[PH_DATA] WHERE (([ph_data_id] = @Original_ph_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ph_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ph_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[PH_DATA] ([calendar_date_id], [time_of_day_id], [station_id], [environ_sensor_id], [location_qualifier], [original_sample_time], [assigned_sample_time], [raw_value], [final_value], [load_date], [source_filename]) VALUES (@calendar_date_id, @time_of_day_id, @station_id, @environ_sensor_id, @location_qualifier, @p1, @assigned_sample_time, @raw_value, @final_value, @load_date, @source_filename);
SELECT ph_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, load_date, source_filename FROM dbo.PH_DATA WHERE (ph_data_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[PH_DATA] SET [calendar_date_id] = @calendar_date_id, [time_of_day_id] = @time_of_day_id, [station_id] = @station_id, [environ_sensor_id] = @environ_sensor_id, [location_qualifier] = @location_qualifier, [original_sample_time] = @p1, [assigned_sample_time] = @assigned_sample_time, [raw_value] = @raw_value, [final_value] = @final_value, [load_date] = @load_date, [source_filename] = @source_filename WHERE (([ph_data_id] = @Original_ph_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename));
SELECT ph_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, load_date, source_filename FROM dbo.PH_DATA WHERE (ph_data_id = @ph_data_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ph_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ph_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ph_data_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ph_data_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ViRT.Properties.Settings.Default.NEPTUNEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ph_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_i" +
                "d, location_qualifier, original_sample_time, assigned_sample_time, raw_value, fi" +
                "nal_value, load_date, source_filename FROM dbo.PH_DATA";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NEPTUNEinfoDataSet.PH_DATADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NEPTUNEinfoDataSet.PH_DATADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NEPTUNEinfoDataSet.PH_DATADataTable dataTable = new NEPTUNEinfoDataSet.PH_DATADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet.PH_DATADataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PH_DATA");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ph_data_id, int Original_calendar_date_id, int Original_time_of_day_id, int Original_station_id, int Original_environ_sensor_id, string Original_location_qualifier, System.DateTime p2, System.DateTime Original_assigned_sample_time, int Original_raw_value, decimal Original_final_value, System.DateTime Original_load_date, string Original_source_filename) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ph_data_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_calendar_date_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_time_of_day_id));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_station_id));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(p2));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_raw_value));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_final_value));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime p1, System.DateTime assigned_sample_time, int raw_value, decimal final_value, System.DateTime load_date, string source_filename) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(final_value));
            this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_ph_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename, 
                    int ph_data_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(final_value));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_ph_data_id));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_station_id));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(p2));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_raw_value));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_final_value));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(ph_data_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_ph_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename) {
            return this.Update(calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, p1, assigned_sample_time, raw_value, final_value, load_date, source_filename, Original_ph_data_id, Original_calendar_date_id, Original_time_of_day_id, Original_station_id, Original_environ_sensor_id, Original_location_qualifier, p2, Original_assigned_sample_time, Original_raw_value, Original_final_value, Original_load_date, Original_source_filename, Original_ph_data_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PRESSURE_DATATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PRESSURE_DATATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PRESSURE_DATA";
            tableMapping.ColumnMappings.Add("pressure_data_id", "pressure_data_id");
            tableMapping.ColumnMappings.Add("calendar_date_id", "calendar_date_id");
            tableMapping.ColumnMappings.Add("time_of_day_id", "time_of_day_id");
            tableMapping.ColumnMappings.Add("station_id", "station_id");
            tableMapping.ColumnMappings.Add("environ_sensor_id", "environ_sensor_id");
            tableMapping.ColumnMappings.Add("location_qualifier", "location_qualifier");
            tableMapping.ColumnMappings.Add("original_sample_time", "original_sample_time");
            tableMapping.ColumnMappings.Add("assigned_sample_time", "assigned_sample_time");
            tableMapping.ColumnMappings.Add("raw_value", "raw_value");
            tableMapping.ColumnMappings.Add("final_value", "final_value");
            tableMapping.ColumnMappings.Add("load_date", "load_date");
            tableMapping.ColumnMappings.Add("source_filename", "source_filename");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[PRESSURE_DATA] WHERE (([pressure_data_id] = @Original_pressure_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pressure_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pressure_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[PRESSURE_DATA] ([calendar_date_id], [time_of_day_id], [station_id], [environ_sensor_id], [location_qualifier], [original_sample_time], [assigned_sample_time], [raw_value], [final_value], [load_date], [source_filename]) VALUES (@calendar_date_id, @time_of_day_id, @station_id, @environ_sensor_id, @location_qualifier, @p1, @assigned_sample_time, @raw_value, @final_value, @load_date, @source_filename);
SELECT pressure_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, load_date, source_filename FROM dbo.PRESSURE_DATA WHERE (pressure_data_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[PRESSURE_DATA] SET [calendar_date_id] = @calendar_date_id, [time_of_day_id] = @time_of_day_id, [station_id] = @station_id, [environ_sensor_id] = @environ_sensor_id, [location_qualifier] = @location_qualifier, [original_sample_time] = @p1, [assigned_sample_time] = @assigned_sample_time, [raw_value] = @raw_value, [final_value] = @final_value, [load_date] = @load_date, [source_filename] = @source_filename WHERE (([pressure_data_id] = @Original_pressure_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename));
SELECT pressure_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, load_date, source_filename FROM dbo.PRESSURE_DATA WHERE (pressure_data_id = @pressure_data_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pressure_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pressure_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pressure_data_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "pressure_data_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ViRT.Properties.Settings.Default.NEPTUNEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT pressure_data_id, calendar_date_id, time_of_day_id, station_id, environ_se" +
                "nsor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_val" +
                "ue, final_value, load_date, source_filename FROM dbo.PRESSURE_DATA";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NEPTUNEinfoDataSet.PRESSURE_DATADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NEPTUNEinfoDataSet.PRESSURE_DATADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NEPTUNEinfoDataSet.PRESSURE_DATADataTable dataTable = new NEPTUNEinfoDataSet.PRESSURE_DATADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet.PRESSURE_DATADataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PRESSURE_DATA");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_pressure_data_id, int Original_calendar_date_id, int Original_time_of_day_id, int Original_station_id, int Original_environ_sensor_id, string Original_location_qualifier, System.DateTime p2, System.DateTime Original_assigned_sample_time, int Original_raw_value, decimal Original_final_value, System.DateTime Original_load_date, string Original_source_filename) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_pressure_data_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_calendar_date_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_time_of_day_id));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_station_id));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(p2));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_raw_value));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_final_value));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime p1, System.DateTime assigned_sample_time, int raw_value, decimal final_value, System.DateTime load_date, string source_filename) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(final_value));
            this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_pressure_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename, 
                    int pressure_data_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(final_value));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_pressure_data_id));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_station_id));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(p2));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_raw_value));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_final_value));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(pressure_data_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_pressure_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename) {
            return this.Update(calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, p1, assigned_sample_time, raw_value, final_value, load_date, source_filename, Original_pressure_data_id, Original_calendar_date_id, Original_time_of_day_id, Original_station_id, Original_environ_sensor_id, Original_location_qualifier, p2, Original_assigned_sample_time, Original_raw_value, Original_final_value, Original_load_date, Original_source_filename, Original_pressure_data_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SHAFTSPEED_DATATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SHAFTSPEED_DATATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SHAFTSPEED_DATA";
            tableMapping.ColumnMappings.Add("shaftspeed_data_id", "shaftspeed_data_id");
            tableMapping.ColumnMappings.Add("calendar_date_id", "calendar_date_id");
            tableMapping.ColumnMappings.Add("time_of_day_id", "time_of_day_id");
            tableMapping.ColumnMappings.Add("station_id", "station_id");
            tableMapping.ColumnMappings.Add("environ_sensor_id", "environ_sensor_id");
            tableMapping.ColumnMappings.Add("location_qualifier", "location_qualifier");
            tableMapping.ColumnMappings.Add("original_sample_time", "original_sample_time");
            tableMapping.ColumnMappings.Add("assigned_sample_time", "assigned_sample_time");
            tableMapping.ColumnMappings.Add("raw_value", "raw_value");
            tableMapping.ColumnMappings.Add("final_value", "final_value");
            tableMapping.ColumnMappings.Add("load_date", "load_date");
            tableMapping.ColumnMappings.Add("source_filename", "source_filename");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[SHAFTSPEED_DATA] WHERE (([shaftspeed_data_id] = @Original_shaftspeed_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_shaftspeed_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "shaftspeed_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[SHAFTSPEED_DATA] ([calendar_date_id], [time_of_day_id], [station_id], [environ_sensor_id], [location_qualifier], [original_sample_time], [assigned_sample_time], [raw_value], [final_value], [load_date], [source_filename]) VALUES (@calendar_date_id, @time_of_day_id, @station_id, @environ_sensor_id, @location_qualifier, @p1, @assigned_sample_time, @raw_value, @final_value, @load_date, @source_filename);
SELECT shaftspeed_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, load_date, source_filename FROM dbo.SHAFTSPEED_DATA WHERE (shaftspeed_data_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[SHAFTSPEED_DATA] SET [calendar_date_id] = @calendar_date_id, [time_of_day_id] = @time_of_day_id, [station_id] = @station_id, [environ_sensor_id] = @environ_sensor_id, [location_qualifier] = @location_qualifier, [original_sample_time] = @p1, [assigned_sample_time] = @assigned_sample_time, [raw_value] = @raw_value, [final_value] = @final_value, [load_date] = @load_date, [source_filename] = @source_filename WHERE (([shaftspeed_data_id] = @Original_shaftspeed_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename));
SELECT shaftspeed_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, load_date, source_filename FROM dbo.SHAFTSPEED_DATA WHERE (shaftspeed_data_id = @shaftspeed_data_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_shaftspeed_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "shaftspeed_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@shaftspeed_data_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "shaftspeed_data_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ViRT.Properties.Settings.Default.NEPTUNEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT shaftspeed_data_id, calendar_date_id, time_of_day_id, station_id, environ_" +
                "sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_v" +
                "alue, final_value, load_date, source_filename FROM dbo.SHAFTSPEED_DATA";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NEPTUNEinfoDataSet.SHAFTSPEED_DATADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NEPTUNEinfoDataSet.SHAFTSPEED_DATADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NEPTUNEinfoDataSet.SHAFTSPEED_DATADataTable dataTable = new NEPTUNEinfoDataSet.SHAFTSPEED_DATADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet.SHAFTSPEED_DATADataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SHAFTSPEED_DATA");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_shaftspeed_data_id, int Original_calendar_date_id, int Original_time_of_day_id, int Original_station_id, int Original_environ_sensor_id, string Original_location_qualifier, System.DateTime p2, System.DateTime Original_assigned_sample_time, int Original_raw_value, decimal Original_final_value, System.DateTime Original_load_date, string Original_source_filename) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_shaftspeed_data_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_calendar_date_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_time_of_day_id));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_station_id));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(p2));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_raw_value));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_final_value));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime p1, System.DateTime assigned_sample_time, int raw_value, decimal final_value, System.DateTime load_date, string source_filename) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(final_value));
            this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_shaftspeed_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename, 
                    int shaftspeed_data_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(final_value));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_shaftspeed_data_id));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_station_id));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(p2));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_raw_value));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_final_value));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(shaftspeed_data_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_shaftspeed_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename) {
            return this.Update(calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, p1, assigned_sample_time, raw_value, final_value, load_date, source_filename, Original_shaftspeed_data_id, Original_calendar_date_id, Original_time_of_day_id, Original_station_id, Original_environ_sensor_id, Original_location_qualifier, p2, Original_assigned_sample_time, Original_raw_value, Original_final_value, Original_load_date, Original_source_filename, Original_shaftspeed_data_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TEMPERATURE_DATATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TEMPERATURE_DATATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TEMPERATURE_DATA";
            tableMapping.ColumnMappings.Add("temperature_data_id", "temperature_data_id");
            tableMapping.ColumnMappings.Add("calendar_date_id", "calendar_date_id");
            tableMapping.ColumnMappings.Add("time_of_day_id", "time_of_day_id");
            tableMapping.ColumnMappings.Add("station_id", "station_id");
            tableMapping.ColumnMappings.Add("environ_sensor_id", "environ_sensor_id");
            tableMapping.ColumnMappings.Add("location_qualifier", "location_qualifier");
            tableMapping.ColumnMappings.Add("original_sample_time", "original_sample_time");
            tableMapping.ColumnMappings.Add("assigned_sample_time", "assigned_sample_time");
            tableMapping.ColumnMappings.Add("raw_value", "raw_value");
            tableMapping.ColumnMappings.Add("final_value", "final_value");
            tableMapping.ColumnMappings.Add("load_date", "load_date");
            tableMapping.ColumnMappings.Add("source_filename", "source_filename");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TEMPERATURE_DATA] WHERE (([temperature_data_id] = @Original_temperature_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temperature_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temperature_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TEMPERATURE_DATA] ([calendar_date_id], [time_of_day_id], [station_id], [environ_sensor_id], [location_qualifier], [original_sample_time], [assigned_sample_time], [raw_value], [final_value], [load_date], [source_filename]) VALUES (@calendar_date_id, @time_of_day_id, @station_id, @environ_sensor_id, @location_qualifier, @p1, @assigned_sample_time, @raw_value, @final_value, @load_date, @source_filename);
SELECT temperature_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, load_date, source_filename FROM dbo.TEMPERATURE_DATA WHERE (temperature_data_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TEMPERATURE_DATA] SET [calendar_date_id] = @calendar_date_id, [time_of_day_id] = @time_of_day_id, [station_id] = @station_id, [environ_sensor_id] = @environ_sensor_id, [location_qualifier] = @location_qualifier, [original_sample_time] = @p1, [assigned_sample_time] = @assigned_sample_time, [raw_value] = @raw_value, [final_value] = @final_value, [load_date] = @load_date, [source_filename] = @source_filename WHERE (([temperature_data_id] = @Original_temperature_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename));
SELECT temperature_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, load_date, source_filename FROM dbo.TEMPERATURE_DATA WHERE (temperature_data_id = @temperature_data_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_temperature_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "temperature_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@temperature_data_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "temperature_data_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ViRT.Properties.Settings.Default.NEPTUNEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT temperature_data_id, calendar_date_id, time_of_day_id, station_id, environ" +
                "_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_" +
                "value, final_value, load_date, source_filename FROM dbo.TEMPERATURE_DATA";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NEPTUNEinfoDataSet.TEMPERATURE_DATADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NEPTUNEinfoDataSet.TEMPERATURE_DATADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NEPTUNEinfoDataSet.TEMPERATURE_DATADataTable dataTable = new NEPTUNEinfoDataSet.TEMPERATURE_DATADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet.TEMPERATURE_DATADataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TEMPERATURE_DATA");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_temperature_data_id, int Original_calendar_date_id, int Original_time_of_day_id, int Original_station_id, int Original_environ_sensor_id, string Original_location_qualifier, System.DateTime p2, System.DateTime Original_assigned_sample_time, int Original_raw_value, decimal Original_final_value, System.DateTime Original_load_date, string Original_source_filename) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_temperature_data_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_calendar_date_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_time_of_day_id));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_station_id));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(p2));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_raw_value));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_final_value));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime p1, System.DateTime assigned_sample_time, int raw_value, decimal final_value, System.DateTime load_date, string source_filename) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(final_value));
            this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_temperature_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename, 
                    int temperature_data_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(final_value));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_temperature_data_id));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_station_id));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(p2));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_raw_value));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_final_value));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(temperature_data_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_temperature_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename) {
            return this.Update(calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, p1, assigned_sample_time, raw_value, final_value, load_date, source_filename, Original_temperature_data_id, Original_calendar_date_id, Original_time_of_day_id, Original_station_id, Original_environ_sensor_id, Original_location_qualifier, p2, Original_assigned_sample_time, Original_raw_value, Original_final_value, Original_load_date, Original_source_filename, Original_temperature_data_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class VELOCITY_DATATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public VELOCITY_DATATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "VELOCITY_DATA";
            tableMapping.ColumnMappings.Add("velocity_data_id", "velocity_data_id");
            tableMapping.ColumnMappings.Add("calendar_date_id", "calendar_date_id");
            tableMapping.ColumnMappings.Add("time_of_day_id", "time_of_day_id");
            tableMapping.ColumnMappings.Add("station_id", "station_id");
            tableMapping.ColumnMappings.Add("environ_sensor_id", "environ_sensor_id");
            tableMapping.ColumnMappings.Add("location_qualifier", "location_qualifier");
            tableMapping.ColumnMappings.Add("original_sample_time", "original_sample_time");
            tableMapping.ColumnMappings.Add("assigned_sample_time", "assigned_sample_time");
            tableMapping.ColumnMappings.Add("raw_value", "raw_value");
            tableMapping.ColumnMappings.Add("final_value", "final_value");
            tableMapping.ColumnMappings.Add("load_date", "load_date");
            tableMapping.ColumnMappings.Add("source_filename", "source_filename");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[VELOCITY_DATA] WHERE (([velocity_data_id] = @Original_velocity_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_velocity_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "velocity_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[VELOCITY_DATA] ([calendar_date_id], [time_of_day_id], [station_id], [environ_sensor_id], [location_qualifier], [original_sample_time], [assigned_sample_time], [raw_value], [final_value], [load_date], [source_filename]) VALUES (@calendar_date_id, @time_of_day_id, @station_id, @environ_sensor_id, @location_qualifier, @p1, @assigned_sample_time, @raw_value, @final_value, @load_date, @source_filename);
SELECT velocity_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, load_date, source_filename FROM dbo.VELOCITY_DATA WHERE (velocity_data_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[VELOCITY_DATA] SET [calendar_date_id] = @calendar_date_id, [time_of_day_id] = @time_of_day_id, [station_id] = @station_id, [environ_sensor_id] = @environ_sensor_id, [location_qualifier] = @location_qualifier, [original_sample_time] = @p1, [assigned_sample_time] = @assigned_sample_time, [raw_value] = @raw_value, [final_value] = @final_value, [load_date] = @load_date, [source_filename] = @source_filename WHERE (([velocity_data_id] = @Original_velocity_data_id) AND ([calendar_date_id] = @Original_calendar_date_id) AND ([time_of_day_id] = @Original_time_of_day_id) AND ([station_id] = @Original_station_id) AND ([environ_sensor_id] = @Original_environ_sensor_id) AND ([location_qualifier] = @Original_location_qualifier) AND ([original_sample_time] = @p2) AND ([assigned_sample_time] = @Original_assigned_sample_time) AND ([raw_value] = @Original_raw_value) AND ([final_value] = @Original_final_value) AND ([load_date] = @Original_load_date) AND ([source_filename] = @Original_source_filename));
SELECT velocity_data_id, calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_value, final_value, load_date, source_filename FROM dbo.VELOCITY_DATA WHERE (velocity_data_id = @velocity_data_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_velocity_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "velocity_data_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_calendar_date_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "calendar_date_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_of_day_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_of_day_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_station_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "station_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_environ_sensor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "environ_sensor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_location_qualifier", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location_qualifier", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "original_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assigned_sample_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assigned_sample_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_final_value", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "final_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_load_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "load_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_source_filename", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source_filename", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@velocity_data_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "velocity_data_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ViRT.Properties.Settings.Default.NEPTUNEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT velocity_data_id, calendar_date_id, time_of_day_id, station_id, environ_se" +
                "nsor_id, location_qualifier, original_sample_time, assigned_sample_time, raw_val" +
                "ue, final_value, load_date, source_filename FROM dbo.VELOCITY_DATA";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NEPTUNEinfoDataSet.VELOCITY_DATADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NEPTUNEinfoDataSet.VELOCITY_DATADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            NEPTUNEinfoDataSet.VELOCITY_DATADataTable dataTable = new NEPTUNEinfoDataSet.VELOCITY_DATADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet.VELOCITY_DATADataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(NEPTUNEinfoDataSet dataSet) {
            return this.Adapter.Update(dataSet, "VELOCITY_DATA");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_velocity_data_id, int Original_calendar_date_id, int Original_time_of_day_id, int Original_station_id, int Original_environ_sensor_id, string Original_location_qualifier, System.DateTime p2, System.DateTime Original_assigned_sample_time, int Original_raw_value, decimal Original_final_value, System.DateTime Original_load_date, string Original_source_filename) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_velocity_data_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_calendar_date_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_time_of_day_id));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_station_id));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(p2));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_raw_value));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_final_value));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int calendar_date_id, int time_of_day_id, int station_id, int environ_sensor_id, string location_qualifier, System.DateTime p1, System.DateTime assigned_sample_time, int raw_value, decimal final_value, System.DateTime load_date, string source_filename) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(final_value));
            this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(source_filename));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_velocity_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename, 
                    int velocity_data_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(station_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(environ_sensor_id));
            if ((location_qualifier == null)) {
                throw new global::System.ArgumentNullException("location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(p1));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(raw_value));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(final_value));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(load_date));
            if ((source_filename == null)) {
                throw new global::System.ArgumentNullException("source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_velocity_data_id));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_calendar_date_id));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_time_of_day_id));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_station_id));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_environ_sensor_id));
            if ((Original_location_qualifier == null)) {
                throw new global::System.ArgumentNullException("Original_location_qualifier");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_location_qualifier));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(p2));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(Original_assigned_sample_time));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_raw_value));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_final_value));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(Original_load_date));
            if ((Original_source_filename == null)) {
                throw new global::System.ArgumentNullException("Original_source_filename");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_source_filename));
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(velocity_data_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int calendar_date_id, 
                    int time_of_day_id, 
                    int station_id, 
                    int environ_sensor_id, 
                    string location_qualifier, 
                    System.DateTime p1, 
                    System.DateTime assigned_sample_time, 
                    int raw_value, 
                    decimal final_value, 
                    System.DateTime load_date, 
                    string source_filename, 
                    int Original_velocity_data_id, 
                    int Original_calendar_date_id, 
                    int Original_time_of_day_id, 
                    int Original_station_id, 
                    int Original_environ_sensor_id, 
                    string Original_location_qualifier, 
                    System.DateTime p2, 
                    System.DateTime Original_assigned_sample_time, 
                    int Original_raw_value, 
                    decimal Original_final_value, 
                    System.DateTime Original_load_date, 
                    string Original_source_filename) {
            return this.Update(calendar_date_id, time_of_day_id, station_id, environ_sensor_id, location_qualifier, p1, assigned_sample_time, raw_value, final_value, load_date, source_filename, Original_velocity_data_id, Original_calendar_date_id, Original_time_of_day_id, Original_station_id, Original_environ_sensor_id, Original_location_qualifier, p2, Original_assigned_sample_time, Original_raw_value, Original_final_value, Original_load_date, Original_source_filename, Original_velocity_data_id);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private CONDUCTANCE_DATATableAdapter _cONDUCTANCE_DATATableAdapter;
        
        private CURRENT_DATATableAdapter _cURRENT_DATATableAdapter;
        
        private EXPLOSIVITY_DATATableAdapter _eXPLOSIVITY_DATATableAdapter;
        
        private FLOW_DATATableAdapter _fLOW_DATATableAdapter;
        
        private GATEPOSITION_DATATableAdapter _gATEPOSITION_DATATableAdapter;
        
        private H2S_DATATableAdapter _h2S_DATATableAdapter;
        
        private HUMIDITY_DATATableAdapter _hUMIDITY_DATATableAdapter;
        
        private PH_DATATableAdapter _pH_DATATableAdapter;
        
        private PRESSURE_DATATableAdapter _pRESSURE_DATATableAdapter;
        
        private SHAFTSPEED_DATATableAdapter _sHAFTSPEED_DATATableAdapter;
        
        private TEMPERATURE_DATATableAdapter _tEMPERATURE_DATATableAdapter;
        
        private VELOCITY_DATATableAdapter _vELOCITY_DATATableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public CONDUCTANCE_DATATableAdapter CONDUCTANCE_DATATableAdapter {
            get {
                return this._cONDUCTANCE_DATATableAdapter;
            }
            set {
                this._cONDUCTANCE_DATATableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public CURRENT_DATATableAdapter CURRENT_DATATableAdapter {
            get {
                return this._cURRENT_DATATableAdapter;
            }
            set {
                this._cURRENT_DATATableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public EXPLOSIVITY_DATATableAdapter EXPLOSIVITY_DATATableAdapter {
            get {
                return this._eXPLOSIVITY_DATATableAdapter;
            }
            set {
                this._eXPLOSIVITY_DATATableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public FLOW_DATATableAdapter FLOW_DATATableAdapter {
            get {
                return this._fLOW_DATATableAdapter;
            }
            set {
                this._fLOW_DATATableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public GATEPOSITION_DATATableAdapter GATEPOSITION_DATATableAdapter {
            get {
                return this._gATEPOSITION_DATATableAdapter;
            }
            set {
                this._gATEPOSITION_DATATableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public H2S_DATATableAdapter H2S_DATATableAdapter {
            get {
                return this._h2S_DATATableAdapter;
            }
            set {
                this._h2S_DATATableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public HUMIDITY_DATATableAdapter HUMIDITY_DATATableAdapter {
            get {
                return this._hUMIDITY_DATATableAdapter;
            }
            set {
                this._hUMIDITY_DATATableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public PH_DATATableAdapter PH_DATATableAdapter {
            get {
                return this._pH_DATATableAdapter;
            }
            set {
                this._pH_DATATableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public PRESSURE_DATATableAdapter PRESSURE_DATATableAdapter {
            get {
                return this._pRESSURE_DATATableAdapter;
            }
            set {
                this._pRESSURE_DATATableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SHAFTSPEED_DATATableAdapter SHAFTSPEED_DATATableAdapter {
            get {
                return this._sHAFTSPEED_DATATableAdapter;
            }
            set {
                this._sHAFTSPEED_DATATableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TEMPERATURE_DATATableAdapter TEMPERATURE_DATATableAdapter {
            get {
                return this._tEMPERATURE_DATATableAdapter;
            }
            set {
                this._tEMPERATURE_DATATableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public VELOCITY_DATATableAdapter VELOCITY_DATATableAdapter {
            get {
                return this._vELOCITY_DATATableAdapter;
            }
            set {
                this._vELOCITY_DATATableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._cONDUCTANCE_DATATableAdapter != null) 
                            && (this._cONDUCTANCE_DATATableAdapter.Connection != null))) {
                    return this._cONDUCTANCE_DATATableAdapter.Connection;
                }
                if (((this._cURRENT_DATATableAdapter != null) 
                            && (this._cURRENT_DATATableAdapter.Connection != null))) {
                    return this._cURRENT_DATATableAdapter.Connection;
                }
                if (((this._eXPLOSIVITY_DATATableAdapter != null) 
                            && (this._eXPLOSIVITY_DATATableAdapter.Connection != null))) {
                    return this._eXPLOSIVITY_DATATableAdapter.Connection;
                }
                if (((this._fLOW_DATATableAdapter != null) 
                            && (this._fLOW_DATATableAdapter.Connection != null))) {
                    return this._fLOW_DATATableAdapter.Connection;
                }
                if (((this._gATEPOSITION_DATATableAdapter != null) 
                            && (this._gATEPOSITION_DATATableAdapter.Connection != null))) {
                    return this._gATEPOSITION_DATATableAdapter.Connection;
                }
                if (((this._h2S_DATATableAdapter != null) 
                            && (this._h2S_DATATableAdapter.Connection != null))) {
                    return this._h2S_DATATableAdapter.Connection;
                }
                if (((this._hUMIDITY_DATATableAdapter != null) 
                            && (this._hUMIDITY_DATATableAdapter.Connection != null))) {
                    return this._hUMIDITY_DATATableAdapter.Connection;
                }
                if (((this._pH_DATATableAdapter != null) 
                            && (this._pH_DATATableAdapter.Connection != null))) {
                    return this._pH_DATATableAdapter.Connection;
                }
                if (((this._pRESSURE_DATATableAdapter != null) 
                            && (this._pRESSURE_DATATableAdapter.Connection != null))) {
                    return this._pRESSURE_DATATableAdapter.Connection;
                }
                if (((this._sHAFTSPEED_DATATableAdapter != null) 
                            && (this._sHAFTSPEED_DATATableAdapter.Connection != null))) {
                    return this._sHAFTSPEED_DATATableAdapter.Connection;
                }
                if (((this._tEMPERATURE_DATATableAdapter != null) 
                            && (this._tEMPERATURE_DATATableAdapter.Connection != null))) {
                    return this._tEMPERATURE_DATATableAdapter.Connection;
                }
                if (((this._vELOCITY_DATATableAdapter != null) 
                            && (this._vELOCITY_DATATableAdapter.Connection != null))) {
                    return this._vELOCITY_DATATableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._cONDUCTANCE_DATATableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._cURRENT_DATATableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._eXPLOSIVITY_DATATableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._fLOW_DATATableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._gATEPOSITION_DATATableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._h2S_DATATableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._hUMIDITY_DATATableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._pH_DATATableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._pRESSURE_DATATableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sHAFTSPEED_DATATableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tEMPERATURE_DATATableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._vELOCITY_DATATableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(NEPTUNEinfoDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._pRESSURE_DATATableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PRESSURE_DATA.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._pRESSURE_DATATableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._pH_DATATableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PH_DATA.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._pH_DATATableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._hUMIDITY_DATATableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.HUMIDITY_DATA.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._hUMIDITY_DATATableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._vELOCITY_DATATableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.VELOCITY_DATA.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._vELOCITY_DATATableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tEMPERATURE_DATATableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TEMPERATURE_DATA.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tEMPERATURE_DATATableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sHAFTSPEED_DATATableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SHAFTSPEED_DATA.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sHAFTSPEED_DATATableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._h2S_DATATableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.H2S_DATA.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._h2S_DATATableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._cURRENT_DATATableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CURRENT_DATA.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._cURRENT_DATATableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._cONDUCTANCE_DATATableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CONDUCTANCE_DATA.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._cONDUCTANCE_DATATableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._gATEPOSITION_DATATableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.GATEPOSITION_DATA.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._gATEPOSITION_DATATableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._fLOW_DATATableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.FLOW_DATA.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._fLOW_DATATableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._eXPLOSIVITY_DATATableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.EXPLOSIVITY_DATA.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._eXPLOSIVITY_DATATableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(NEPTUNEinfoDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._pRESSURE_DATATableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PRESSURE_DATA.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._pRESSURE_DATATableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._pH_DATATableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PH_DATA.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._pH_DATATableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._hUMIDITY_DATATableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.HUMIDITY_DATA.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._hUMIDITY_DATATableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._vELOCITY_DATATableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.VELOCITY_DATA.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._vELOCITY_DATATableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tEMPERATURE_DATATableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TEMPERATURE_DATA.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tEMPERATURE_DATATableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sHAFTSPEED_DATATableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SHAFTSPEED_DATA.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sHAFTSPEED_DATATableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._h2S_DATATableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.H2S_DATA.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._h2S_DATATableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._cURRENT_DATATableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CURRENT_DATA.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._cURRENT_DATATableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._cONDUCTANCE_DATATableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CONDUCTANCE_DATA.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._cONDUCTANCE_DATATableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._gATEPOSITION_DATATableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.GATEPOSITION_DATA.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._gATEPOSITION_DATATableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._fLOW_DATATableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.FLOW_DATA.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._fLOW_DATATableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._eXPLOSIVITY_DATATableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.EXPLOSIVITY_DATA.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._eXPLOSIVITY_DATATableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(NEPTUNEinfoDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._eXPLOSIVITY_DATATableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.EXPLOSIVITY_DATA.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._eXPLOSIVITY_DATATableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._fLOW_DATATableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.FLOW_DATA.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._fLOW_DATATableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._gATEPOSITION_DATATableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.GATEPOSITION_DATA.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._gATEPOSITION_DATATableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._cONDUCTANCE_DATATableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CONDUCTANCE_DATA.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._cONDUCTANCE_DATATableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._cURRENT_DATATableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CURRENT_DATA.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._cURRENT_DATATableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._h2S_DATATableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.H2S_DATA.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._h2S_DATATableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sHAFTSPEED_DATATableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SHAFTSPEED_DATA.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sHAFTSPEED_DATATableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tEMPERATURE_DATATableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TEMPERATURE_DATA.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tEMPERATURE_DATATableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._vELOCITY_DATATableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.VELOCITY_DATA.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._vELOCITY_DATATableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._hUMIDITY_DATATableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.HUMIDITY_DATA.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._hUMIDITY_DATATableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._pH_DATATableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PH_DATA.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._pH_DATATableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._pRESSURE_DATATableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PRESSURE_DATA.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._pRESSURE_DATATableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(NEPTUNEinfoDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._cONDUCTANCE_DATATableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._cONDUCTANCE_DATATableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._cURRENT_DATATableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._cURRENT_DATATableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._eXPLOSIVITY_DATATableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._eXPLOSIVITY_DATATableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._fLOW_DATATableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._fLOW_DATATableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._gATEPOSITION_DATATableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._gATEPOSITION_DATATableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._h2S_DATATableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._h2S_DATATableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._hUMIDITY_DATATableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._hUMIDITY_DATATableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._pH_DATATableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._pH_DATATableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._pRESSURE_DATATableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._pRESSURE_DATATableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sHAFTSPEED_DATATableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sHAFTSPEED_DATATableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tEMPERATURE_DATATableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tEMPERATURE_DATATableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._vELOCITY_DATATableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._vELOCITY_DATATableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._cONDUCTANCE_DATATableAdapter != null)) {
                    revertConnections.Add(this._cONDUCTANCE_DATATableAdapter, this._cONDUCTANCE_DATATableAdapter.Connection);
                    this._cONDUCTANCE_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._cONDUCTANCE_DATATableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._cONDUCTANCE_DATATableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._cONDUCTANCE_DATATableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._cONDUCTANCE_DATATableAdapter.Adapter);
                    }
                }
                if ((this._cURRENT_DATATableAdapter != null)) {
                    revertConnections.Add(this._cURRENT_DATATableAdapter, this._cURRENT_DATATableAdapter.Connection);
                    this._cURRENT_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._cURRENT_DATATableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._cURRENT_DATATableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._cURRENT_DATATableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._cURRENT_DATATableAdapter.Adapter);
                    }
                }
                if ((this._eXPLOSIVITY_DATATableAdapter != null)) {
                    revertConnections.Add(this._eXPLOSIVITY_DATATableAdapter, this._eXPLOSIVITY_DATATableAdapter.Connection);
                    this._eXPLOSIVITY_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._eXPLOSIVITY_DATATableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._eXPLOSIVITY_DATATableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._eXPLOSIVITY_DATATableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._eXPLOSIVITY_DATATableAdapter.Adapter);
                    }
                }
                if ((this._fLOW_DATATableAdapter != null)) {
                    revertConnections.Add(this._fLOW_DATATableAdapter, this._fLOW_DATATableAdapter.Connection);
                    this._fLOW_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._fLOW_DATATableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._fLOW_DATATableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._fLOW_DATATableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._fLOW_DATATableAdapter.Adapter);
                    }
                }
                if ((this._gATEPOSITION_DATATableAdapter != null)) {
                    revertConnections.Add(this._gATEPOSITION_DATATableAdapter, this._gATEPOSITION_DATATableAdapter.Connection);
                    this._gATEPOSITION_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._gATEPOSITION_DATATableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._gATEPOSITION_DATATableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._gATEPOSITION_DATATableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._gATEPOSITION_DATATableAdapter.Adapter);
                    }
                }
                if ((this._h2S_DATATableAdapter != null)) {
                    revertConnections.Add(this._h2S_DATATableAdapter, this._h2S_DATATableAdapter.Connection);
                    this._h2S_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._h2S_DATATableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._h2S_DATATableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._h2S_DATATableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._h2S_DATATableAdapter.Adapter);
                    }
                }
                if ((this._hUMIDITY_DATATableAdapter != null)) {
                    revertConnections.Add(this._hUMIDITY_DATATableAdapter, this._hUMIDITY_DATATableAdapter.Connection);
                    this._hUMIDITY_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._hUMIDITY_DATATableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._hUMIDITY_DATATableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._hUMIDITY_DATATableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._hUMIDITY_DATATableAdapter.Adapter);
                    }
                }
                if ((this._pH_DATATableAdapter != null)) {
                    revertConnections.Add(this._pH_DATATableAdapter, this._pH_DATATableAdapter.Connection);
                    this._pH_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._pH_DATATableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._pH_DATATableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._pH_DATATableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._pH_DATATableAdapter.Adapter);
                    }
                }
                if ((this._pRESSURE_DATATableAdapter != null)) {
                    revertConnections.Add(this._pRESSURE_DATATableAdapter, this._pRESSURE_DATATableAdapter.Connection);
                    this._pRESSURE_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._pRESSURE_DATATableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._pRESSURE_DATATableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._pRESSURE_DATATableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._pRESSURE_DATATableAdapter.Adapter);
                    }
                }
                if ((this._sHAFTSPEED_DATATableAdapter != null)) {
                    revertConnections.Add(this._sHAFTSPEED_DATATableAdapter, this._sHAFTSPEED_DATATableAdapter.Connection);
                    this._sHAFTSPEED_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sHAFTSPEED_DATATableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sHAFTSPEED_DATATableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sHAFTSPEED_DATATableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sHAFTSPEED_DATATableAdapter.Adapter);
                    }
                }
                if ((this._tEMPERATURE_DATATableAdapter != null)) {
                    revertConnections.Add(this._tEMPERATURE_DATATableAdapter, this._tEMPERATURE_DATATableAdapter.Connection);
                    this._tEMPERATURE_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tEMPERATURE_DATATableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tEMPERATURE_DATATableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tEMPERATURE_DATATableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tEMPERATURE_DATATableAdapter.Adapter);
                    }
                }
                if ((this._vELOCITY_DATATableAdapter != null)) {
                    revertConnections.Add(this._vELOCITY_DATATableAdapter, this._vELOCITY_DATATableAdapter.Connection);
                    this._vELOCITY_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._vELOCITY_DATATableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._vELOCITY_DATATableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._vELOCITY_DATATableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._vELOCITY_DATATableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._cONDUCTANCE_DATATableAdapter != null)) {
                    this._cONDUCTANCE_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._cONDUCTANCE_DATATableAdapter]));
                    this._cONDUCTANCE_DATATableAdapter.Transaction = null;
                }
                if ((this._cURRENT_DATATableAdapter != null)) {
                    this._cURRENT_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._cURRENT_DATATableAdapter]));
                    this._cURRENT_DATATableAdapter.Transaction = null;
                }
                if ((this._eXPLOSIVITY_DATATableAdapter != null)) {
                    this._eXPLOSIVITY_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._eXPLOSIVITY_DATATableAdapter]));
                    this._eXPLOSIVITY_DATATableAdapter.Transaction = null;
                }
                if ((this._fLOW_DATATableAdapter != null)) {
                    this._fLOW_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._fLOW_DATATableAdapter]));
                    this._fLOW_DATATableAdapter.Transaction = null;
                }
                if ((this._gATEPOSITION_DATATableAdapter != null)) {
                    this._gATEPOSITION_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._gATEPOSITION_DATATableAdapter]));
                    this._gATEPOSITION_DATATableAdapter.Transaction = null;
                }
                if ((this._h2S_DATATableAdapter != null)) {
                    this._h2S_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._h2S_DATATableAdapter]));
                    this._h2S_DATATableAdapter.Transaction = null;
                }
                if ((this._hUMIDITY_DATATableAdapter != null)) {
                    this._hUMIDITY_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._hUMIDITY_DATATableAdapter]));
                    this._hUMIDITY_DATATableAdapter.Transaction = null;
                }
                if ((this._pH_DATATableAdapter != null)) {
                    this._pH_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._pH_DATATableAdapter]));
                    this._pH_DATATableAdapter.Transaction = null;
                }
                if ((this._pRESSURE_DATATableAdapter != null)) {
                    this._pRESSURE_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._pRESSURE_DATATableAdapter]));
                    this._pRESSURE_DATATableAdapter.Transaction = null;
                }
                if ((this._sHAFTSPEED_DATATableAdapter != null)) {
                    this._sHAFTSPEED_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sHAFTSPEED_DATATableAdapter]));
                    this._sHAFTSPEED_DATATableAdapter.Transaction = null;
                }
                if ((this._tEMPERATURE_DATATableAdapter != null)) {
                    this._tEMPERATURE_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tEMPERATURE_DATATableAdapter]));
                    this._tEMPERATURE_DATATableAdapter.Transaction = null;
                }
                if ((this._vELOCITY_DATATableAdapter != null)) {
                    this._vELOCITY_DATATableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._vELOCITY_DATATableAdapter]));
                    this._vELOCITY_DATATableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DicretizeIF {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SegsOutputDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SegsOutputDataSet : global::System.Data.DataSet {
        
        private SegsOutputDataTable tableSegsOutput;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SegsOutputDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SegsOutputDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["SegsOutput"] != null)) {
                    base.Tables.Add(new SegsOutputDataTable(ds.Tables["SegsOutput"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SegsOutputDataTable SegsOutput {
            get {
                return this.tableSegsOutput;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            SegsOutputDataSet cln = ((SegsOutputDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SegsOutput"] != null)) {
                    base.Tables.Add(new SegsOutputDataTable(ds.Tables["SegsOutput"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSegsOutput = ((SegsOutputDataTable)(base.Tables["SegsOutput"]));
            if ((initTable == true)) {
                if ((this.tableSegsOutput != null)) {
                    this.tableSegsOutput.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SegsOutputDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SegsOutputDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSegsOutput = new SegsOutputDataTable();
            base.Tables.Add(this.tableSegsOutput);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSegsOutput() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SegsOutputDataSet ds = new SegsOutputDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SegsOutputRowChangeEventHandler(object sender, SegsOutputRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SegsOutputDataTable : global::System.Data.TypedTableBase<SegsOutputRow> {
            
            private global::System.Data.DataColumn columnLinkID;
            
            private global::System.Data.DataColumn columnUsNode;
            
            private global::System.Data.DataColumn columnDsNode;
            
            private global::System.Data.DataColumn columnLinkType;
            
            private global::System.Data.DataColumn columnMLinkID;
            
            private global::System.Data.DataColumn columnCompKey;
            
            private global::System.Data.DataColumn columnLength;
            
            private global::System.Data.DataColumn columnDiamWidth;
            
            private global::System.Data.DataColumn columnHeight;
            
            private global::System.Data.DataColumn columnPipeShape;
            
            private global::System.Data.DataColumn columnMaterial;
            
            private global::System.Data.DataColumn columnInstdate;
            
            private global::System.Data.DataColumn columnIsSpecLink;
            
            private global::System.Data.DataColumn columnHServStat;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnOLD_MLID;
            
            private global::System.Data.DataColumn columnOLD_Len;
            
            private global::System.Data.DataColumn columnSplitID;
            
            private global::System.Data.DataColumn columnSplitTyp;
            
            private global::System.Data.DataColumn columnCutNO;
            
            private global::System.Data.DataColumn columnFM;
            
            private global::System.Data.DataColumn columnTO;
            
            private global::System.Data.DataColumn columnSegLen;
            
            private global::System.Data.DataColumn columnPoint_Defect_Score;
            
            private global::System.Data.DataColumn columnLinear_Defect_Score;
            
            private global::System.Data.DataColumn columnTotal_Defect_Score;
            
            private global::System.Data.DataColumn columnTotal_Defect_Score_x15;
            
            private global::System.Data.DataColumn columnLast_TV_Inspection;
            
            private global::System.Data.DataColumn columnYears_Since_Inspection;
            
            private global::System.Data.DataColumn columnInsp_Curr;
            
            private global::System.Data.DataColumn columnFailure_Year;
            
            private global::System.Data.DataColumn columnStd_dev;
            
            private global::System.Data.DataColumn columnConsequence_Failure;
            
            private global::System.Data.DataColumn columnReplacement_Cost;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SegsOutputDataTable() {
                this.TableName = "SegsOutput";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SegsOutputDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SegsOutputDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkIDColumn {
                get {
                    return this.columnLinkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsNodeColumn {
                get {
                    return this.columnUsNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DsNodeColumn {
                get {
                    return this.columnDsNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkTypeColumn {
                get {
                    return this.columnLinkType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MLinkIDColumn {
                get {
                    return this.columnMLinkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompKeyColumn {
                get {
                    return this.columnCompKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiamWidthColumn {
                get {
                    return this.columnDiamWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeightColumn {
                get {
                    return this.columnHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeShapeColumn {
                get {
                    return this.columnPipeShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialColumn {
                get {
                    return this.columnMaterial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstdateColumn {
                get {
                    return this.columnInstdate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSpecLinkColumn {
                get {
                    return this.columnIsSpecLink;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HServStatColumn {
                get {
                    return this.columnHServStat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OLD_MLIDColumn {
                get {
                    return this.columnOLD_MLID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OLD_LenColumn {
                get {
                    return this.columnOLD_Len;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SplitIDColumn {
                get {
                    return this.columnSplitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SplitTypColumn {
                get {
                    return this.columnSplitTyp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CutNOColumn {
                get {
                    return this.columnCutNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FMColumn {
                get {
                    return this.columnFM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOColumn {
                get {
                    return this.columnTO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SegLenColumn {
                get {
                    return this.columnSegLen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Point_Defect_ScoreColumn {
                get {
                    return this.columnPoint_Defect_Score;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Linear_Defect_ScoreColumn {
                get {
                    return this.columnLinear_Defect_Score;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Total_Defect_ScoreColumn {
                get {
                    return this.columnTotal_Defect_Score;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Total_Defect_Score_x15Column {
                get {
                    return this.columnTotal_Defect_Score_x15;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Last_TV_InspectionColumn {
                get {
                    return this.columnLast_TV_Inspection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Years_Since_InspectionColumn {
                get {
                    return this.columnYears_Since_Inspection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Insp_CurrColumn {
                get {
                    return this.columnInsp_Curr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Failure_YearColumn {
                get {
                    return this.columnFailure_Year;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Std_devColumn {
                get {
                    return this.columnStd_dev;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Consequence_FailureColumn {
                get {
                    return this.columnConsequence_Failure;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Replacement_CostColumn {
                get {
                    return this.columnReplacement_Cost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SegsOutputRow this[int index] {
                get {
                    return ((SegsOutputRow)(this.Rows[index]));
                }
            }
            
            public event SegsOutputRowChangeEventHandler SegsOutputRowChanging;
            
            public event SegsOutputRowChangeEventHandler SegsOutputRowChanged;
            
            public event SegsOutputRowChangeEventHandler SegsOutputRowDeleting;
            
            public event SegsOutputRowChangeEventHandler SegsOutputRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSegsOutputRow(SegsOutputRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SegsOutputRow AddSegsOutputRow(
                        int LinkID, 
                        string UsNode, 
                        string DsNode, 
                        string LinkType, 
                        int MLinkID, 
                        int CompKey, 
                        double Length, 
                        double DiamWidth, 
                        double Height, 
                        string PipeShape, 
                        string Material, 
                        System.DateTime Instdate, 
                        bool IsSpecLink, 
                        string HServStat, 
                        bool IsActive, 
                        int OLD_MLID, 
                        double OLD_Len, 
                        int SplitID, 
                        int SplitTyp, 
                        int CutNO, 
                        double FM, 
                        double TO, 
                        double SegLen, 
                        double Point_Defect_Score, 
                        double Linear_Defect_Score, 
                        double Total_Defect_Score, 
                        double Total_Defect_Score_x15, 
                        System.DateTime Last_TV_Inspection, 
                        int Years_Since_Inspection, 
                        int Insp_Curr, 
                        int Failure_Year, 
                        int Std_dev, 
                        int Consequence_Failure, 
                        int Replacement_Cost) {
                SegsOutputRow rowSegsOutputRow = ((SegsOutputRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LinkID,
                        UsNode,
                        DsNode,
                        LinkType,
                        MLinkID,
                        CompKey,
                        Length,
                        DiamWidth,
                        Height,
                        PipeShape,
                        Material,
                        Instdate,
                        IsSpecLink,
                        HServStat,
                        IsActive,
                        OLD_MLID,
                        OLD_Len,
                        SplitID,
                        SplitTyp,
                        CutNO,
                        FM,
                        TO,
                        SegLen,
                        Point_Defect_Score,
                        Linear_Defect_Score,
                        Total_Defect_Score,
                        Total_Defect_Score_x15,
                        Last_TV_Inspection,
                        Years_Since_Inspection,
                        Insp_Curr,
                        Failure_Year,
                        Std_dev,
                        Consequence_Failure,
                        Replacement_Cost};
                rowSegsOutputRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSegsOutputRow);
                return rowSegsOutputRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SegsOutputDataTable cln = ((SegsOutputDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SegsOutputDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLinkID = base.Columns["LinkID"];
                this.columnUsNode = base.Columns["UsNode"];
                this.columnDsNode = base.Columns["DsNode"];
                this.columnLinkType = base.Columns["LinkType"];
                this.columnMLinkID = base.Columns["MLinkID"];
                this.columnCompKey = base.Columns["CompKey"];
                this.columnLength = base.Columns["Length"];
                this.columnDiamWidth = base.Columns["DiamWidth"];
                this.columnHeight = base.Columns["Height"];
                this.columnPipeShape = base.Columns["PipeShape"];
                this.columnMaterial = base.Columns["Material"];
                this.columnInstdate = base.Columns["Instdate"];
                this.columnIsSpecLink = base.Columns["IsSpecLink"];
                this.columnHServStat = base.Columns["HServStat"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnOLD_MLID = base.Columns["OLD_MLID"];
                this.columnOLD_Len = base.Columns["OLD_Len"];
                this.columnSplitID = base.Columns["SplitID"];
                this.columnSplitTyp = base.Columns["SplitTyp"];
                this.columnCutNO = base.Columns["CutNO"];
                this.columnFM = base.Columns["FM"];
                this.columnTO = base.Columns["TO"];
                this.columnSegLen = base.Columns["SegLen"];
                this.columnPoint_Defect_Score = base.Columns["Point_Defect_Score"];
                this.columnLinear_Defect_Score = base.Columns["Linear_Defect_Score"];
                this.columnTotal_Defect_Score = base.Columns["Total_Defect_Score"];
                this.columnTotal_Defect_Score_x15 = base.Columns["Total_Defect_Score_x15"];
                this.columnLast_TV_Inspection = base.Columns["Last_TV_Inspection"];
                this.columnYears_Since_Inspection = base.Columns["Years_Since_Inspection"];
                this.columnInsp_Curr = base.Columns["Insp_Curr"];
                this.columnFailure_Year = base.Columns["Failure_Year"];
                this.columnStd_dev = base.Columns["Std_dev"];
                this.columnConsequence_Failure = base.Columns["Consequence_Failure"];
                this.columnReplacement_Cost = base.Columns["Replacement_Cost"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLinkID = new global::System.Data.DataColumn("LinkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkID);
                this.columnUsNode = new global::System.Data.DataColumn("UsNode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsNode);
                this.columnDsNode = new global::System.Data.DataColumn("DsNode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDsNode);
                this.columnLinkType = new global::System.Data.DataColumn("LinkType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkType);
                this.columnMLinkID = new global::System.Data.DataColumn("MLinkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMLinkID);
                this.columnCompKey = new global::System.Data.DataColumn("CompKey", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompKey);
                this.columnLength = new global::System.Data.DataColumn("Length", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLength);
                this.columnDiamWidth = new global::System.Data.DataColumn("DiamWidth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiamWidth);
                this.columnHeight = new global::System.Data.DataColumn("Height", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeight);
                this.columnPipeShape = new global::System.Data.DataColumn("PipeShape", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeShape);
                this.columnMaterial = new global::System.Data.DataColumn("Material", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterial);
                this.columnInstdate = new global::System.Data.DataColumn("Instdate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstdate);
                this.columnIsSpecLink = new global::System.Data.DataColumn("IsSpecLink", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSpecLink);
                this.columnHServStat = new global::System.Data.DataColumn("HServStat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHServStat);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnOLD_MLID = new global::System.Data.DataColumn("OLD_MLID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOLD_MLID);
                this.columnOLD_Len = new global::System.Data.DataColumn("OLD_Len", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOLD_Len);
                this.columnSplitID = new global::System.Data.DataColumn("SplitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSplitID);
                this.columnSplitTyp = new global::System.Data.DataColumn("SplitTyp", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSplitTyp);
                this.columnCutNO = new global::System.Data.DataColumn("CutNO", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCutNO);
                this.columnFM = new global::System.Data.DataColumn("FM", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFM);
                this.columnTO = new global::System.Data.DataColumn("TO", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTO);
                this.columnSegLen = new global::System.Data.DataColumn("SegLen", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSegLen);
                this.columnPoint_Defect_Score = new global::System.Data.DataColumn("Point_Defect_Score", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPoint_Defect_Score);
                this.columnLinear_Defect_Score = new global::System.Data.DataColumn("Linear_Defect_Score", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinear_Defect_Score);
                this.columnTotal_Defect_Score = new global::System.Data.DataColumn("Total_Defect_Score", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal_Defect_Score);
                this.columnTotal_Defect_Score_x15 = new global::System.Data.DataColumn("Total_Defect_Score_x15", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal_Defect_Score_x15);
                this.columnLast_TV_Inspection = new global::System.Data.DataColumn("Last_TV_Inspection", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLast_TV_Inspection);
                this.columnYears_Since_Inspection = new global::System.Data.DataColumn("Years_Since_Inspection", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYears_Since_Inspection);
                this.columnInsp_Curr = new global::System.Data.DataColumn("Insp_Curr", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsp_Curr);
                this.columnFailure_Year = new global::System.Data.DataColumn("Failure_Year", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFailure_Year);
                this.columnStd_dev = new global::System.Data.DataColumn("Std_dev", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStd_dev);
                this.columnConsequence_Failure = new global::System.Data.DataColumn("Consequence_Failure", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsequence_Failure);
                this.columnReplacement_Cost = new global::System.Data.DataColumn("Replacement_Cost", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReplacement_Cost);
                this.columnUsNode.MaxLength = 10;
                this.columnDsNode.MaxLength = 10;
                this.columnLinkType.MaxLength = 2;
                this.columnPipeShape.MaxLength = 4;
                this.columnMaterial.MaxLength = 6;
                this.columnHServStat.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SegsOutputRow NewSegsOutputRow() {
                return ((SegsOutputRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SegsOutputRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SegsOutputRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SegsOutputRowChanged != null)) {
                    this.SegsOutputRowChanged(this, new SegsOutputRowChangeEvent(((SegsOutputRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SegsOutputRowChanging != null)) {
                    this.SegsOutputRowChanging(this, new SegsOutputRowChangeEvent(((SegsOutputRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SegsOutputRowDeleted != null)) {
                    this.SegsOutputRowDeleted(this, new SegsOutputRowChangeEvent(((SegsOutputRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SegsOutputRowDeleting != null)) {
                    this.SegsOutputRowDeleting(this, new SegsOutputRowChangeEvent(((SegsOutputRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSegsOutputRow(SegsOutputRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SegsOutputDataSet ds = new SegsOutputDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SegsOutputDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SegsOutputRow : global::System.Data.DataRow {
            
            private SegsOutputDataTable tableSegsOutput;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SegsOutputRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSegsOutput = ((SegsOutputDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkID {
                get {
                    try {
                        return ((int)(this[this.tableSegsOutput.LinkIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinkID\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.LinkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UsNode {
                get {
                    try {
                        return ((string)(this[this.tableSegsOutput.UsNodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UsNode\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.UsNodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DsNode {
                get {
                    try {
                        return ((string)(this[this.tableSegsOutput.DsNodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DsNode\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.DsNodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkType {
                get {
                    try {
                        return ((string)(this[this.tableSegsOutput.LinkTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinkType\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.LinkTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MLinkID {
                get {
                    try {
                        return ((int)(this[this.tableSegsOutput.MLinkIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MLinkID\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.MLinkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CompKey {
                get {
                    try {
                        return ((int)(this[this.tableSegsOutput.CompKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompKey\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.CompKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Length {
                get {
                    try {
                        return ((double)(this[this.tableSegsOutput.LengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Length\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.LengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DiamWidth {
                get {
                    try {
                        return ((double)(this[this.tableSegsOutput.DiamWidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DiamWidth\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.DiamWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Height {
                get {
                    try {
                        return ((double)(this[this.tableSegsOutput.HeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Height\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.HeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PipeShape {
                get {
                    try {
                        return ((string)(this[this.tableSegsOutput.PipeShapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeShape\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.PipeShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Material {
                get {
                    try {
                        return ((string)(this[this.tableSegsOutput.MaterialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Material\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.MaterialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Instdate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSegsOutput.InstdateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Instdate\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.InstdateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpecLink {
                get {
                    try {
                        return ((bool)(this[this.tableSegsOutput.IsSpecLinkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsSpecLink\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.IsSpecLinkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HServStat {
                get {
                    try {
                        return ((string)(this[this.tableSegsOutput.HServStatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HServStat\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.HServStatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableSegsOutput.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OLD_MLID {
                get {
                    try {
                        return ((int)(this[this.tableSegsOutput.OLD_MLIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OLD_MLID\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.OLD_MLIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double OLD_Len {
                get {
                    try {
                        return ((double)(this[this.tableSegsOutput.OLD_LenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OLD_Len\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.OLD_LenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SplitID {
                get {
                    try {
                        return ((int)(this[this.tableSegsOutput.SplitIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SplitID\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.SplitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SplitTyp {
                get {
                    try {
                        return ((int)(this[this.tableSegsOutput.SplitTypColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SplitTyp\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.SplitTypColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CutNO {
                get {
                    try {
                        return ((int)(this[this.tableSegsOutput.CutNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CutNO\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.CutNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FM {
                get {
                    try {
                        return ((double)(this[this.tableSegsOutput.FMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FM\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.FMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TO {
                get {
                    try {
                        return ((double)(this[this.tableSegsOutput.TOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TO\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.TOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SegLen {
                get {
                    try {
                        return ((double)(this[this.tableSegsOutput.SegLenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SegLen\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.SegLenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Point_Defect_Score {
                get {
                    try {
                        return ((double)(this[this.tableSegsOutput.Point_Defect_ScoreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Point_Defect_Score\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.Point_Defect_ScoreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Linear_Defect_Score {
                get {
                    try {
                        return ((double)(this[this.tableSegsOutput.Linear_Defect_ScoreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Linear_Defect_Score\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.Linear_Defect_ScoreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Total_Defect_Score {
                get {
                    try {
                        return ((double)(this[this.tableSegsOutput.Total_Defect_ScoreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total_Defect_Score\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.Total_Defect_ScoreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Total_Defect_Score_x15 {
                get {
                    try {
                        return ((double)(this[this.tableSegsOutput.Total_Defect_Score_x15Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total_Defect_Score_x15\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.Total_Defect_Score_x15Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Last_TV_Inspection {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSegsOutput.Last_TV_InspectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Last_TV_Inspection\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.Last_TV_InspectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Years_Since_Inspection {
                get {
                    try {
                        return ((int)(this[this.tableSegsOutput.Years_Since_InspectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Years_Since_Inspection\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.Years_Since_InspectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Insp_Curr {
                get {
                    try {
                        return ((int)(this[this.tableSegsOutput.Insp_CurrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Insp_Curr\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.Insp_CurrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Failure_Year {
                get {
                    try {
                        return ((int)(this[this.tableSegsOutput.Failure_YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Failure_Year\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.Failure_YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Std_dev {
                get {
                    try {
                        return ((int)(this[this.tableSegsOutput.Std_devColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Std_dev\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.Std_devColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Consequence_Failure {
                get {
                    try {
                        return ((int)(this[this.tableSegsOutput.Consequence_FailureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Consequence_Failure\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.Consequence_FailureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Replacement_Cost {
                get {
                    try {
                        return ((int)(this[this.tableSegsOutput.Replacement_CostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Replacement_Cost\' in table \'SegsOutput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSegsOutput.Replacement_CostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinkIDNull() {
                return this.IsNull(this.tableSegsOutput.LinkIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinkIDNull() {
                this[this.tableSegsOutput.LinkIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsNodeNull() {
                return this.IsNull(this.tableSegsOutput.UsNodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsNodeNull() {
                this[this.tableSegsOutput.UsNodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDsNodeNull() {
                return this.IsNull(this.tableSegsOutput.DsNodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDsNodeNull() {
                this[this.tableSegsOutput.DsNodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinkTypeNull() {
                return this.IsNull(this.tableSegsOutput.LinkTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinkTypeNull() {
                this[this.tableSegsOutput.LinkTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMLinkIDNull() {
                return this.IsNull(this.tableSegsOutput.MLinkIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMLinkIDNull() {
                this[this.tableSegsOutput.MLinkIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompKeyNull() {
                return this.IsNull(this.tableSegsOutput.CompKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompKeyNull() {
                this[this.tableSegsOutput.CompKeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthNull() {
                return this.IsNull(this.tableSegsOutput.LengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthNull() {
                this[this.tableSegsOutput.LengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiamWidthNull() {
                return this.IsNull(this.tableSegsOutput.DiamWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiamWidthNull() {
                this[this.tableSegsOutput.DiamWidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeightNull() {
                return this.IsNull(this.tableSegsOutput.HeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeightNull() {
                this[this.tableSegsOutput.HeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeShapeNull() {
                return this.IsNull(this.tableSegsOutput.PipeShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeShapeNull() {
                this[this.tableSegsOutput.PipeShapeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialNull() {
                return this.IsNull(this.tableSegsOutput.MaterialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialNull() {
                this[this.tableSegsOutput.MaterialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstdateNull() {
                return this.IsNull(this.tableSegsOutput.InstdateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstdateNull() {
                this[this.tableSegsOutput.InstdateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsSpecLinkNull() {
                return this.IsNull(this.tableSegsOutput.IsSpecLinkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsSpecLinkNull() {
                this[this.tableSegsOutput.IsSpecLinkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHServStatNull() {
                return this.IsNull(this.tableSegsOutput.HServStatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHServStatNull() {
                this[this.tableSegsOutput.HServStatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableSegsOutput.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tableSegsOutput.IsActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOLD_MLIDNull() {
                return this.IsNull(this.tableSegsOutput.OLD_MLIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOLD_MLIDNull() {
                this[this.tableSegsOutput.OLD_MLIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOLD_LenNull() {
                return this.IsNull(this.tableSegsOutput.OLD_LenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOLD_LenNull() {
                this[this.tableSegsOutput.OLD_LenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSplitIDNull() {
                return this.IsNull(this.tableSegsOutput.SplitIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSplitIDNull() {
                this[this.tableSegsOutput.SplitIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSplitTypNull() {
                return this.IsNull(this.tableSegsOutput.SplitTypColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSplitTypNull() {
                this[this.tableSegsOutput.SplitTypColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCutNONull() {
                return this.IsNull(this.tableSegsOutput.CutNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCutNONull() {
                this[this.tableSegsOutput.CutNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFMNull() {
                return this.IsNull(this.tableSegsOutput.FMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFMNull() {
                this[this.tableSegsOutput.FMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTONull() {
                return this.IsNull(this.tableSegsOutput.TOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTONull() {
                this[this.tableSegsOutput.TOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSegLenNull() {
                return this.IsNull(this.tableSegsOutput.SegLenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSegLenNull() {
                this[this.tableSegsOutput.SegLenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPoint_Defect_ScoreNull() {
                return this.IsNull(this.tableSegsOutput.Point_Defect_ScoreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPoint_Defect_ScoreNull() {
                this[this.tableSegsOutput.Point_Defect_ScoreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinear_Defect_ScoreNull() {
                return this.IsNull(this.tableSegsOutput.Linear_Defect_ScoreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinear_Defect_ScoreNull() {
                this[this.tableSegsOutput.Linear_Defect_ScoreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotal_Defect_ScoreNull() {
                return this.IsNull(this.tableSegsOutput.Total_Defect_ScoreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotal_Defect_ScoreNull() {
                this[this.tableSegsOutput.Total_Defect_ScoreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotal_Defect_Score_x15Null() {
                return this.IsNull(this.tableSegsOutput.Total_Defect_Score_x15Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotal_Defect_Score_x15Null() {
                this[this.tableSegsOutput.Total_Defect_Score_x15Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLast_TV_InspectionNull() {
                return this.IsNull(this.tableSegsOutput.Last_TV_InspectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLast_TV_InspectionNull() {
                this[this.tableSegsOutput.Last_TV_InspectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYears_Since_InspectionNull() {
                return this.IsNull(this.tableSegsOutput.Years_Since_InspectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYears_Since_InspectionNull() {
                this[this.tableSegsOutput.Years_Since_InspectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsp_CurrNull() {
                return this.IsNull(this.tableSegsOutput.Insp_CurrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsp_CurrNull() {
                this[this.tableSegsOutput.Insp_CurrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFailure_YearNull() {
                return this.IsNull(this.tableSegsOutput.Failure_YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFailure_YearNull() {
                this[this.tableSegsOutput.Failure_YearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStd_devNull() {
                return this.IsNull(this.tableSegsOutput.Std_devColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStd_devNull() {
                this[this.tableSegsOutput.Std_devColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsequence_FailureNull() {
                return this.IsNull(this.tableSegsOutput.Consequence_FailureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsequence_FailureNull() {
                this[this.tableSegsOutput.Consequence_FailureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReplacement_CostNull() {
                return this.IsNull(this.tableSegsOutput.Replacement_CostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReplacement_CostNull() {
                this[this.tableSegsOutput.Replacement_CostColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SegsOutputRowChangeEvent : global::System.EventArgs {
            
            private SegsOutputRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SegsOutputRowChangeEvent(SegsOutputRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SegsOutputRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace DicretizeIF.SegsOutputDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SegsOutputTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SegsOutputTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SegsOutput";
            tableMapping.ColumnMappings.Add("LinkID", "LinkID");
            tableMapping.ColumnMappings.Add("UsNode", "UsNode");
            tableMapping.ColumnMappings.Add("DsNode", "DsNode");
            tableMapping.ColumnMappings.Add("LinkType", "LinkType");
            tableMapping.ColumnMappings.Add("MLinkID", "MLinkID");
            tableMapping.ColumnMappings.Add("CompKey", "CompKey");
            tableMapping.ColumnMappings.Add("Length", "Length");
            tableMapping.ColumnMappings.Add("DiamWidth", "DiamWidth");
            tableMapping.ColumnMappings.Add("Height", "Height");
            tableMapping.ColumnMappings.Add("PipeShape", "PipeShape");
            tableMapping.ColumnMappings.Add("Material", "Material");
            tableMapping.ColumnMappings.Add("Instdate", "Instdate");
            tableMapping.ColumnMappings.Add("IsSpecLink", "IsSpecLink");
            tableMapping.ColumnMappings.Add("HServStat", "HServStat");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            tableMapping.ColumnMappings.Add("OLD_MLID", "OLD_MLID");
            tableMapping.ColumnMappings.Add("OLD_Len", "OLD_Len");
            tableMapping.ColumnMappings.Add("SplitID", "SplitID");
            tableMapping.ColumnMappings.Add("SplitTyp", "SplitTyp");
            tableMapping.ColumnMappings.Add("CutNO", "CutNO");
            tableMapping.ColumnMappings.Add("FM", "FM");
            tableMapping.ColumnMappings.Add("TO", "TO");
            tableMapping.ColumnMappings.Add("SegLen", "SegLen");
            tableMapping.ColumnMappings.Add("Point_Defect_Score", "Point_Defect_Score");
            tableMapping.ColumnMappings.Add("Linear_Defect_Score", "Linear_Defect_Score");
            tableMapping.ColumnMappings.Add("Total_Defect_Score", "Total_Defect_Score");
            tableMapping.ColumnMappings.Add("Total_Defect_Score_x15", "Total_Defect_Score_x15");
            tableMapping.ColumnMappings.Add("Last_TV_Inspection", "Last_TV_Inspection");
            tableMapping.ColumnMappings.Add("Years_Since_Inspection", "Years_Since_Inspection");
            tableMapping.ColumnMappings.Add("Insp_Curr", "Insp_Curr");
            tableMapping.ColumnMappings.Add("Failure_Year", "Failure_Year");
            tableMapping.ColumnMappings.Add("Std_dev", "Std_dev");
            tableMapping.ColumnMappings.Add("Consequence_Failure", "Consequence_Failure");
            tableMapping.ColumnMappings.Add("Replacement_Cost", "Replacement_Cost");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `SegsOutput` (`LinkID`, `UsNode`, `DsNode`, `LinkType`, `MLinkID`, `CompKey`, `Length`, `DiamWidth`, `Height`, `PipeShape`, `Material`, `Instdate`, `IsSpecLink`, `HServStat`, `IsActive`, `OLD_MLID`, `OLD_Len`, `SplitID`, `SplitTyp`, `CutNO`, `FM`, `TO`, `SegLen`, `Point_Defect_Score`, `Linear_Defect_Score`, `Total_Defect_Score`, `Total_Defect_Score_x15`, `Last_TV_Inspection`, `Years_Since_Inspection`, `Insp_Curr`, `Failure_Year`, `Std_dev`, `Consequence_Failure`, `Replacement_Cost`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("LinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LinkID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("UsNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UsNode", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DsNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DsNode", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("LinkType", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LinkType", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("MLinkID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MLinkID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CompKey", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompKey", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Length", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Length", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DiamWidth", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiamWidth", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Height", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Height", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PipeShape", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeShape", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Material", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Material", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Instdate", global::System.Data.OleDb.OleDbType.Date, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Instdate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsSpecLink", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsSpecLink", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("HServStat", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HServStat", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OLD_MLID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OLD_MLID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OLD_Len", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OLD_Len", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SplitID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SplitID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SplitTyp", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SplitTyp", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("CutNO", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CutNO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FM", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FM", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("TO", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SegLen", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SegLen", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Point_Defect_Score", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Point_Defect_Score", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Linear_Defect_Score", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Linear_Defect_Score", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Total_Defect_Score", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Total_Defect_Score", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Total_Defect_Score_x15", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Total_Defect_Score_x15", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Last_TV_Inspection", global::System.Data.OleDb.OleDbType.Date, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Last_TV_Inspection", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Years_Since_Inspection", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Years_Since_Inspection", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Insp_Curr", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Insp_Curr", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Failure_Year", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Failure_Year", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Std_dev", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Std_dev", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Consequence_Failure", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Consequence_Failure", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Replacement_Cost", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Replacement_Cost", global::System.Data.DataRowVersion.Current, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::DicretizeIF.Properties.Settings.Default.SegsOutputConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT LinkID, UsNode, DsNode, LinkType, MLinkID, CompKey, Length, DiamWidth, Height, PipeShape, Material, Instdate, IsSpecLink, HServStat, IsActive, OLD_MLID, OLD_Len, SplitID, SplitTyp, CutNO, FM, [TO], SegLen, Point_Defect_Score, Linear_Defect_Score, Total_Defect_Score, Total_Defect_Score_x15, Last_TV_Inspection, Years_Since_Inspection, Insp_Curr, Failure_Year, Std_dev, Consequence_Failure, Replacement_Cost FROM SegsOutput";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SegsOutputDataSet.SegsOutputDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SegsOutputDataSet.SegsOutputDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SegsOutputDataSet.SegsOutputDataTable dataTable = new SegsOutputDataSet.SegsOutputDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SegsOutputDataSet.SegsOutputDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SegsOutputDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SegsOutput");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<int> LinkID, 
                    string UsNode, 
                    string DsNode, 
                    string LinkType, 
                    global::System.Nullable<int> MLinkID, 
                    global::System.Nullable<int> CompKey, 
                    global::System.Nullable<double> Length, 
                    global::System.Nullable<double> DiamWidth, 
                    global::System.Nullable<double> Height, 
                    string PipeShape, 
                    string Material, 
                    global::System.Nullable<global::System.DateTime> Instdate, 
                    bool IsSpecLink, 
                    string HServStat, 
                    bool IsActive, 
                    global::System.Nullable<int> OLD_MLID, 
                    global::System.Nullable<double> OLD_Len, 
                    global::System.Nullable<int> SplitID, 
                    global::System.Nullable<int> SplitTyp, 
                    global::System.Nullable<int> CutNO, 
                    global::System.Nullable<double> FM, 
                    global::System.Nullable<double> TO, 
                    global::System.Nullable<double> SegLen, 
                    global::System.Nullable<double> Point_Defect_Score, 
                    global::System.Nullable<double> Linear_Defect_Score, 
                    global::System.Nullable<double> Total_Defect_Score, 
                    global::System.Nullable<double> Total_Defect_Score_x15, 
                    global::System.Nullable<global::System.DateTime> Last_TV_Inspection, 
                    global::System.Nullable<int> Years_Since_Inspection, 
                    global::System.Nullable<int> Insp_Curr, 
                    global::System.Nullable<int> Failure_Year, 
                    global::System.Nullable<int> Std_dev, 
                    global::System.Nullable<int> Consequence_Failure, 
                    global::System.Nullable<int> Replacement_Cost) {
            if ((LinkID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(LinkID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((UsNode == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(UsNode));
            }
            if ((DsNode == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(DsNode));
            }
            if ((LinkType == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(LinkType));
            }
            if ((MLinkID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(MLinkID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((CompKey.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(CompKey.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Length.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(Length.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((DiamWidth.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(DiamWidth.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Height.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(Height.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((PipeShape == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(PipeShape));
            }
            if ((Material == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(Material));
            }
            if ((Instdate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((System.DateTime)(Instdate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[12].Value = ((bool)(IsSpecLink));
            if ((HServStat == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(HServStat));
            }
            this.Adapter.InsertCommand.Parameters[14].Value = ((bool)(IsActive));
            if ((OLD_MLID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((int)(OLD_MLID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((OLD_Len.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((double)(OLD_Len.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((SplitID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((int)(SplitID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((SplitTyp.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((int)(SplitTyp.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((CutNO.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((int)(CutNO.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((FM.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((double)(FM.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((TO.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((double)(TO.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((SegLen.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((double)(SegLen.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Point_Defect_Score.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((double)(Point_Defect_Score.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Linear_Defect_Score.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((double)(Linear_Defect_Score.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Total_Defect_Score.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((double)(Total_Defect_Score.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((Total_Defect_Score_x15.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((double)(Total_Defect_Score_x15.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Last_TV_Inspection.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[27].Value = ((System.DateTime)(Last_TV_Inspection.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Years_Since_Inspection.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[28].Value = ((int)(Years_Since_Inspection.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Insp_Curr.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[29].Value = ((int)(Insp_Curr.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Failure_Year.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((int)(Failure_Year.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Std_dev.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((int)(Std_dev.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((Consequence_Failure.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[32].Value = ((int)(Consequence_Failure.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Replacement_Cost.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[33].Value = ((int)(Replacement_Cost.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private SegsOutputTableAdapter _segsOutputTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SegsOutputTableAdapter SegsOutputTableAdapter {
            get {
                return this._segsOutputTableAdapter;
            }
            set {
                this._segsOutputTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._segsOutputTableAdapter != null) 
                            && (this._segsOutputTableAdapter.Connection != null))) {
                    return this._segsOutputTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._segsOutputTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(SegsOutputDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._segsOutputTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SegsOutput.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._segsOutputTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(SegsOutputDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._segsOutputTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SegsOutput.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._segsOutputTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(SegsOutputDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._segsOutputTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SegsOutput.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._segsOutputTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(SegsOutputDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._segsOutputTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._segsOutputTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._segsOutputTableAdapter != null)) {
                    revertConnections.Add(this._segsOutputTableAdapter, this._segsOutputTableAdapter.Connection);
                    this._segsOutputTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(workConnection));
                    this._segsOutputTableAdapter.Transaction = ((global::System.Data.OleDb.OleDbTransaction)(workTransaction));
                    if (this._segsOutputTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._segsOutputTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._segsOutputTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._segsOutputTableAdapter != null)) {
                    this._segsOutputTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(revertConnections[this._segsOutputTableAdapter]));
                    this._segsOutputTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591
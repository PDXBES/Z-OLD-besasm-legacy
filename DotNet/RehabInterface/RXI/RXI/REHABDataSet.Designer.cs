//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3625
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RXI {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("REHABDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class REHABDataSet : global::System.Data.DataSet {
        
        private REHAB10FTSEGSDataTable tableREHAB10FTSEGS;
        
        private ConstantsDataTable tableConstants;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public REHABDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected REHABDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["REHAB10FTSEGS"] != null)) {
                    base.Tables.Add(new REHAB10FTSEGSDataTable(ds.Tables["REHAB10FTSEGS"]));
                }
                if ((ds.Tables["Constants"] != null)) {
                    base.Tables.Add(new ConstantsDataTable(ds.Tables["Constants"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public REHAB10FTSEGSDataTable REHAB10FTSEGS {
            get {
                return this.tableREHAB10FTSEGS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConstantsDataTable Constants {
            get {
                return this.tableConstants;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            REHABDataSet cln = ((REHABDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["REHAB10FTSEGS"] != null)) {
                    base.Tables.Add(new REHAB10FTSEGSDataTable(ds.Tables["REHAB10FTSEGS"]));
                }
                if ((ds.Tables["Constants"] != null)) {
                    base.Tables.Add(new ConstantsDataTable(ds.Tables["Constants"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableREHAB10FTSEGS = ((REHAB10FTSEGSDataTable)(base.Tables["REHAB10FTSEGS"]));
            if ((initTable == true)) {
                if ((this.tableREHAB10FTSEGS != null)) {
                    this.tableREHAB10FTSEGS.InitVars();
                }
            }
            this.tableConstants = ((ConstantsDataTable)(base.Tables["Constants"]));
            if ((initTable == true)) {
                if ((this.tableConstants != null)) {
                    this.tableConstants.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "REHABDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/REHABDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableREHAB10FTSEGS = new REHAB10FTSEGSDataTable();
            base.Tables.Add(this.tableREHAB10FTSEGS);
            this.tableConstants = new ConstantsDataTable();
            base.Tables.Add(this.tableConstants);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeREHAB10FTSEGS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConstants() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            REHABDataSet ds = new REHABDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void REHAB10FTSEGSRowChangeEventHandler(object sender, REHAB10FTSEGSRowChangeEvent e);
        
        public delegate void ConstantsRowChangeEventHandler(object sender, ConstantsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class REHAB10FTSEGSDataTable : global::System.Data.TypedTableBase<REHAB10FTSEGSRow> {
            
            private global::System.Data.DataColumn columnOBJECTID;
            
            private global::System.Data.DataColumn columnmlinkid;
            
            private global::System.Data.DataColumn columncompkey;
            
            private global::System.Data.DataColumn columnusnode;
            
            private global::System.Data.DataColumn columndsnode;
            
            private global::System.Data.DataColumn columnlinktype;
            
            private global::System.Data.DataColumn columnflowtype;
            
            private global::System.Data.DataColumn columnlength;
            
            private global::System.Data.DataColumn columndiamwidth;
            
            private global::System.Data.DataColumn columnheight;
            
            private global::System.Data.DataColumn columnpipeshape;
            
            private global::System.Data.DataColumn columnmaterial;
            
            private global::System.Data.DataColumn columninstdate;
            
            private global::System.Data.DataColumn columnhservstat;
            
            private global::System.Data.DataColumn columnbsnrun;
            
            private global::System.Data.DataColumn columnold_mlid;
            
            private global::System.Data.DataColumn columncutno;
            
            private global::System.Data.DataColumn columnfm;
            
            private global::System.Data.DataColumn columnto_;
            
            private global::System.Data.DataColumn columnseglen;
            
            private global::System.Data.DataColumn columngrade_h5;
            
            private global::System.Data.DataColumn columnmat_fmto;
            
            private global::System.Data.DataColumn columnseg_count;
            
            private global::System.Data.DataColumn columnfail_near;
            
            private global::System.Data.DataColumn columnfail_prev;
            
            private global::System.Data.DataColumn columnfail_tot;
            
            private global::System.Data.DataColumn columnfail_pct;
            
            private global::System.Data.DataColumn columndef_pts;
            
            private global::System.Data.DataColumn columndef_lin;
            
            private global::System.Data.DataColumn columndef_tot;
            
            private global::System.Data.DataColumn columnbpw;
            
            private global::System.Data.DataColumn columnapw;
            
            private global::System.Data.DataColumn columncbr;
            
            private global::System.Data.DataColumn columninsp_date;
            
            private global::System.Data.DataColumn columninsp_yrsago;
            
            private global::System.Data.DataColumn columninsp_curr;
            
            private global::System.Data.DataColumn columnfail_yr;
            
            private global::System.Data.DataColumn columnrulife;
            
            private global::System.Data.DataColumn columnrul_flag;
            
            private global::System.Data.DataColumn columnstd_dev;
            
            private global::System.Data.DataColumn columncof;
            
            private global::System.Data.DataColumn columnreplacecost;
            
            private global::System.Data.DataColumn columnaction;
            
            private global::System.Data.DataColumn columnremarks;
            
            private global::System.Data.DataColumn columnbpw_seg;
            
            private global::System.Data.DataColumn columnapw_seg;
            
            private global::System.Data.DataColumn columncbr_seg;
            
            private global::System.Data.DataColumn columnstd_dev_seg;
            
            private global::System.Data.DataColumn columnfail_yr_seg;
            
            private global::System.Data.DataColumn columnfail_yr_whole;
            
            private global::System.Data.DataColumn columnstd_dev_whole;
            
            private global::System.Data.DataColumn columnExceptions;
            
            private global::System.Data.DataColumn columnACCUM_RISK_REPLACE_YEAR;
            
            private global::System.Data.DataColumn columnACCUM_RISK_INSPECT_YEAR;
            
            private global::System.Data.DataColumn columnSHAPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REHAB10FTSEGSDataTable() {
                this.TableName = "REHAB10FTSEGS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal REHAB10FTSEGSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected REHAB10FTSEGSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OBJECTIDColumn {
                get {
                    return this.columnOBJECTID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mlinkidColumn {
                get {
                    return this.columnmlinkid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn compkeyColumn {
                get {
                    return this.columncompkey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn usnodeColumn {
                get {
                    return this.columnusnode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dsnodeColumn {
                get {
                    return this.columndsnode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn linktypeColumn {
                get {
                    return this.columnlinktype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn flowtypeColumn {
                get {
                    return this.columnflowtype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lengthColumn {
                get {
                    return this.columnlength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn diamwidthColumn {
                get {
                    return this.columndiamwidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn heightColumn {
                get {
                    return this.columnheight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pipeshapeColumn {
                get {
                    return this.columnpipeshape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn materialColumn {
                get {
                    return this.columnmaterial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn instdateColumn {
                get {
                    return this.columninstdate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hservstatColumn {
                get {
                    return this.columnhservstat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bsnrunColumn {
                get {
                    return this.columnbsnrun;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn old_mlidColumn {
                get {
                    return this.columnold_mlid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cutnoColumn {
                get {
                    return this.columncutno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fmColumn {
                get {
                    return this.columnfm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn to_Column {
                get {
                    return this.columnto_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn seglenColumn {
                get {
                    return this.columnseglen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn grade_h5Column {
                get {
                    return this.columngrade_h5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mat_fmtoColumn {
                get {
                    return this.columnmat_fmto;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn seg_countColumn {
                get {
                    return this.columnseg_count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fail_nearColumn {
                get {
                    return this.columnfail_near;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fail_prevColumn {
                get {
                    return this.columnfail_prev;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fail_totColumn {
                get {
                    return this.columnfail_tot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fail_pctColumn {
                get {
                    return this.columnfail_pct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn def_ptsColumn {
                get {
                    return this.columndef_pts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn def_linColumn {
                get {
                    return this.columndef_lin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn def_totColumn {
                get {
                    return this.columndef_tot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bpwColumn {
                get {
                    return this.columnbpw;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn apwColumn {
                get {
                    return this.columnapw;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cbrColumn {
                get {
                    return this.columncbr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn insp_dateColumn {
                get {
                    return this.columninsp_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn insp_yrsagoColumn {
                get {
                    return this.columninsp_yrsago;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn insp_currColumn {
                get {
                    return this.columninsp_curr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fail_yrColumn {
                get {
                    return this.columnfail_yr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rulifeColumn {
                get {
                    return this.columnrulife;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rul_flagColumn {
                get {
                    return this.columnrul_flag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn std_devColumn {
                get {
                    return this.columnstd_dev;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cofColumn {
                get {
                    return this.columncof;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn replacecostColumn {
                get {
                    return this.columnreplacecost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn actionColumn {
                get {
                    return this.columnaction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn remarksColumn {
                get {
                    return this.columnremarks;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bpw_segColumn {
                get {
                    return this.columnbpw_seg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn apw_segColumn {
                get {
                    return this.columnapw_seg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cbr_segColumn {
                get {
                    return this.columncbr_seg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn std_dev_segColumn {
                get {
                    return this.columnstd_dev_seg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fail_yr_segColumn {
                get {
                    return this.columnfail_yr_seg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fail_yr_wholeColumn {
                get {
                    return this.columnfail_yr_whole;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn std_dev_wholeColumn {
                get {
                    return this.columnstd_dev_whole;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExceptionsColumn {
                get {
                    return this.columnExceptions;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACCUM_RISK_REPLACE_YEARColumn {
                get {
                    return this.columnACCUM_RISK_REPLACE_YEAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACCUM_RISK_INSPECT_YEARColumn {
                get {
                    return this.columnACCUM_RISK_INSPECT_YEAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SHAPEColumn {
                get {
                    return this.columnSHAPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REHAB10FTSEGSRow this[int index] {
                get {
                    return ((REHAB10FTSEGSRow)(this.Rows[index]));
                }
            }
            
            public event REHAB10FTSEGSRowChangeEventHandler REHAB10FTSEGSRowChanging;
            
            public event REHAB10FTSEGSRowChangeEventHandler REHAB10FTSEGSRowChanged;
            
            public event REHAB10FTSEGSRowChangeEventHandler REHAB10FTSEGSRowDeleting;
            
            public event REHAB10FTSEGSRowChangeEventHandler REHAB10FTSEGSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddREHAB10FTSEGSRow(REHAB10FTSEGSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REHAB10FTSEGSRow AddREHAB10FTSEGSRow(
                        int OBJECTID, 
                        int mlinkid, 
                        int compkey, 
                        string usnode, 
                        string dsnode, 
                        string linktype, 
                        string flowtype, 
                        decimal length, 
                        decimal diamwidth, 
                        decimal height, 
                        string pipeshape, 
                        string material, 
                        System.DateTime instdate, 
                        string hservstat, 
                        string bsnrun, 
                        int old_mlid, 
                        int cutno, 
                        decimal fm, 
                        decimal to_, 
                        decimal seglen, 
                        short grade_h5, 
                        string mat_fmto, 
                        short seg_count, 
                        int fail_near, 
                        int fail_prev, 
                        int fail_tot, 
                        decimal fail_pct, 
                        int def_pts, 
                        int def_lin, 
                        int def_tot, 
                        int bpw, 
                        int apw, 
                        decimal cbr, 
                        System.DateTime insp_date, 
                        short insp_yrsago, 
                        short insp_curr, 
                        short fail_yr, 
                        short rulife, 
                        short rul_flag, 
                        int std_dev, 
                        int cof, 
                        int replacecost, 
                        short action, 
                        string remarks, 
                        int bpw_seg, 
                        int apw_seg, 
                        decimal cbr_seg, 
                        int std_dev_seg, 
                        short fail_yr_seg, 
                        short fail_yr_whole, 
                        short std_dev_whole, 
                        string Exceptions, 
                        short ACCUM_RISK_REPLACE_YEAR, 
                        short ACCUM_RISK_INSPECT_YEAR, 
                        int SHAPE) {
                REHAB10FTSEGSRow rowREHAB10FTSEGSRow = ((REHAB10FTSEGSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        OBJECTID,
                        mlinkid,
                        compkey,
                        usnode,
                        dsnode,
                        linktype,
                        flowtype,
                        length,
                        diamwidth,
                        height,
                        pipeshape,
                        material,
                        instdate,
                        hservstat,
                        bsnrun,
                        old_mlid,
                        cutno,
                        fm,
                        to_,
                        seglen,
                        grade_h5,
                        mat_fmto,
                        seg_count,
                        fail_near,
                        fail_prev,
                        fail_tot,
                        fail_pct,
                        def_pts,
                        def_lin,
                        def_tot,
                        bpw,
                        apw,
                        cbr,
                        insp_date,
                        insp_yrsago,
                        insp_curr,
                        fail_yr,
                        rulife,
                        rul_flag,
                        std_dev,
                        cof,
                        replacecost,
                        action,
                        remarks,
                        bpw_seg,
                        apw_seg,
                        cbr_seg,
                        std_dev_seg,
                        fail_yr_seg,
                        fail_yr_whole,
                        std_dev_whole,
                        Exceptions,
                        ACCUM_RISK_REPLACE_YEAR,
                        ACCUM_RISK_INSPECT_YEAR,
                        SHAPE};
                rowREHAB10FTSEGSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowREHAB10FTSEGSRow);
                return rowREHAB10FTSEGSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                REHAB10FTSEGSDataTable cln = ((REHAB10FTSEGSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new REHAB10FTSEGSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOBJECTID = base.Columns["OBJECTID"];
                this.columnmlinkid = base.Columns["mlinkid"];
                this.columncompkey = base.Columns["compkey"];
                this.columnusnode = base.Columns["usnode"];
                this.columndsnode = base.Columns["dsnode"];
                this.columnlinktype = base.Columns["linktype"];
                this.columnflowtype = base.Columns["flowtype"];
                this.columnlength = base.Columns["length"];
                this.columndiamwidth = base.Columns["diamwidth"];
                this.columnheight = base.Columns["height"];
                this.columnpipeshape = base.Columns["pipeshape"];
                this.columnmaterial = base.Columns["material"];
                this.columninstdate = base.Columns["instdate"];
                this.columnhservstat = base.Columns["hservstat"];
                this.columnbsnrun = base.Columns["bsnrun"];
                this.columnold_mlid = base.Columns["old_mlid"];
                this.columncutno = base.Columns["cutno"];
                this.columnfm = base.Columns["fm"];
                this.columnto_ = base.Columns["to_"];
                this.columnseglen = base.Columns["seglen"];
                this.columngrade_h5 = base.Columns["grade_h5"];
                this.columnmat_fmto = base.Columns["mat_fmto"];
                this.columnseg_count = base.Columns["seg_count"];
                this.columnfail_near = base.Columns["fail_near"];
                this.columnfail_prev = base.Columns["fail_prev"];
                this.columnfail_tot = base.Columns["fail_tot"];
                this.columnfail_pct = base.Columns["fail_pct"];
                this.columndef_pts = base.Columns["def_pts"];
                this.columndef_lin = base.Columns["def_lin"];
                this.columndef_tot = base.Columns["def_tot"];
                this.columnbpw = base.Columns["bpw"];
                this.columnapw = base.Columns["apw"];
                this.columncbr = base.Columns["cbr"];
                this.columninsp_date = base.Columns["insp_date"];
                this.columninsp_yrsago = base.Columns["insp_yrsago"];
                this.columninsp_curr = base.Columns["insp_curr"];
                this.columnfail_yr = base.Columns["fail_yr"];
                this.columnrulife = base.Columns["rulife"];
                this.columnrul_flag = base.Columns["rul_flag"];
                this.columnstd_dev = base.Columns["std_dev"];
                this.columncof = base.Columns["cof"];
                this.columnreplacecost = base.Columns["replacecost"];
                this.columnaction = base.Columns["action"];
                this.columnremarks = base.Columns["remarks"];
                this.columnbpw_seg = base.Columns["bpw_seg"];
                this.columnapw_seg = base.Columns["apw_seg"];
                this.columncbr_seg = base.Columns["cbr_seg"];
                this.columnstd_dev_seg = base.Columns["std_dev_seg"];
                this.columnfail_yr_seg = base.Columns["fail_yr_seg"];
                this.columnfail_yr_whole = base.Columns["fail_yr_whole"];
                this.columnstd_dev_whole = base.Columns["std_dev_whole"];
                this.columnExceptions = base.Columns["Exceptions"];
                this.columnACCUM_RISK_REPLACE_YEAR = base.Columns["ACCUM_RISK_REPLACE_YEAR"];
                this.columnACCUM_RISK_INSPECT_YEAR = base.Columns["ACCUM_RISK_INSPECT_YEAR"];
                this.columnSHAPE = base.Columns["SHAPE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOBJECTID = new global::System.Data.DataColumn("OBJECTID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOBJECTID);
                this.columnmlinkid = new global::System.Data.DataColumn("mlinkid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmlinkid);
                this.columncompkey = new global::System.Data.DataColumn("compkey", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncompkey);
                this.columnusnode = new global::System.Data.DataColumn("usnode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnusnode);
                this.columndsnode = new global::System.Data.DataColumn("dsnode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndsnode);
                this.columnlinktype = new global::System.Data.DataColumn("linktype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlinktype);
                this.columnflowtype = new global::System.Data.DataColumn("flowtype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnflowtype);
                this.columnlength = new global::System.Data.DataColumn("length", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlength);
                this.columndiamwidth = new global::System.Data.DataColumn("diamwidth", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndiamwidth);
                this.columnheight = new global::System.Data.DataColumn("height", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheight);
                this.columnpipeshape = new global::System.Data.DataColumn("pipeshape", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpipeshape);
                this.columnmaterial = new global::System.Data.DataColumn("material", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmaterial);
                this.columninstdate = new global::System.Data.DataColumn("instdate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninstdate);
                this.columnhservstat = new global::System.Data.DataColumn("hservstat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhservstat);
                this.columnbsnrun = new global::System.Data.DataColumn("bsnrun", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbsnrun);
                this.columnold_mlid = new global::System.Data.DataColumn("old_mlid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnold_mlid);
                this.columncutno = new global::System.Data.DataColumn("cutno", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncutno);
                this.columnfm = new global::System.Data.DataColumn("fm", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfm);
                this.columnto_ = new global::System.Data.DataColumn("to_", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnto_);
                this.columnseglen = new global::System.Data.DataColumn("seglen", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnseglen);
                this.columngrade_h5 = new global::System.Data.DataColumn("grade_h5", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngrade_h5);
                this.columnmat_fmto = new global::System.Data.DataColumn("mat_fmto", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmat_fmto);
                this.columnseg_count = new global::System.Data.DataColumn("seg_count", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnseg_count);
                this.columnfail_near = new global::System.Data.DataColumn("fail_near", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfail_near);
                this.columnfail_prev = new global::System.Data.DataColumn("fail_prev", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfail_prev);
                this.columnfail_tot = new global::System.Data.DataColumn("fail_tot", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfail_tot);
                this.columnfail_pct = new global::System.Data.DataColumn("fail_pct", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfail_pct);
                this.columndef_pts = new global::System.Data.DataColumn("def_pts", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndef_pts);
                this.columndef_lin = new global::System.Data.DataColumn("def_lin", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndef_lin);
                this.columndef_tot = new global::System.Data.DataColumn("def_tot", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndef_tot);
                this.columnbpw = new global::System.Data.DataColumn("bpw", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbpw);
                this.columnapw = new global::System.Data.DataColumn("apw", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnapw);
                this.columncbr = new global::System.Data.DataColumn("cbr", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncbr);
                this.columninsp_date = new global::System.Data.DataColumn("insp_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninsp_date);
                this.columninsp_yrsago = new global::System.Data.DataColumn("insp_yrsago", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninsp_yrsago);
                this.columninsp_curr = new global::System.Data.DataColumn("insp_curr", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninsp_curr);
                this.columnfail_yr = new global::System.Data.DataColumn("fail_yr", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfail_yr);
                this.columnrulife = new global::System.Data.DataColumn("rulife", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrulife);
                this.columnrul_flag = new global::System.Data.DataColumn("rul_flag", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrul_flag);
                this.columnstd_dev = new global::System.Data.DataColumn("std_dev", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstd_dev);
                this.columncof = new global::System.Data.DataColumn("cof", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncof);
                this.columnreplacecost = new global::System.Data.DataColumn("replacecost", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreplacecost);
                this.columnaction = new global::System.Data.DataColumn("action", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaction);
                this.columnremarks = new global::System.Data.DataColumn("remarks", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnremarks);
                this.columnbpw_seg = new global::System.Data.DataColumn("bpw_seg", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbpw_seg);
                this.columnapw_seg = new global::System.Data.DataColumn("apw_seg", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnapw_seg);
                this.columncbr_seg = new global::System.Data.DataColumn("cbr_seg", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncbr_seg);
                this.columnstd_dev_seg = new global::System.Data.DataColumn("std_dev_seg", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstd_dev_seg);
                this.columnfail_yr_seg = new global::System.Data.DataColumn("fail_yr_seg", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfail_yr_seg);
                this.columnfail_yr_whole = new global::System.Data.DataColumn("fail_yr_whole", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfail_yr_whole);
                this.columnstd_dev_whole = new global::System.Data.DataColumn("std_dev_whole", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstd_dev_whole);
                this.columnExceptions = new global::System.Data.DataColumn("Exceptions", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExceptions);
                this.columnACCUM_RISK_REPLACE_YEAR = new global::System.Data.DataColumn("ACCUM_RISK_REPLACE_YEAR", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACCUM_RISK_REPLACE_YEAR);
                this.columnACCUM_RISK_INSPECT_YEAR = new global::System.Data.DataColumn("ACCUM_RISK_INSPECT_YEAR", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACCUM_RISK_INSPECT_YEAR);
                this.columnSHAPE = new global::System.Data.DataColumn("SHAPE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHAPE);
                this.columnOBJECTID.AllowDBNull = false;
                this.columnusnode.MaxLength = 6;
                this.columndsnode.MaxLength = 6;
                this.columnlinktype.MaxLength = 2;
                this.columnflowtype.MaxLength = 2;
                this.columnpipeshape.MaxLength = 255;
                this.columnmaterial.MaxLength = 10;
                this.columnhservstat.MaxLength = 255;
                this.columnbsnrun.MaxLength = 5;
                this.columnmat_fmto.MaxLength = 21;
                this.columnremarks.MaxLength = 100;
                this.columnExceptions.MaxLength = 1000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REHAB10FTSEGSRow NewREHAB10FTSEGSRow() {
                return ((REHAB10FTSEGSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new REHAB10FTSEGSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(REHAB10FTSEGSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.REHAB10FTSEGSRowChanged != null)) {
                    this.REHAB10FTSEGSRowChanged(this, new REHAB10FTSEGSRowChangeEvent(((REHAB10FTSEGSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.REHAB10FTSEGSRowChanging != null)) {
                    this.REHAB10FTSEGSRowChanging(this, new REHAB10FTSEGSRowChangeEvent(((REHAB10FTSEGSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.REHAB10FTSEGSRowDeleted != null)) {
                    this.REHAB10FTSEGSRowDeleted(this, new REHAB10FTSEGSRowChangeEvent(((REHAB10FTSEGSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.REHAB10FTSEGSRowDeleting != null)) {
                    this.REHAB10FTSEGSRowDeleting(this, new REHAB10FTSEGSRowChangeEvent(((REHAB10FTSEGSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveREHAB10FTSEGSRow(REHAB10FTSEGSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                REHABDataSet ds = new REHABDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "REHAB10FTSEGSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConstantsDataTable : global::System.Data.TypedTableBase<ConstantsRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnEMLateralRepairCost;
            
            private global::System.Data.DataColumn columnUtilityCrossingCost;
            
            private global::System.Data.DataColumn columnEnvMitigationWidth;
            
            private global::System.Data.DataColumn columnHazMatWidth;
            
            private global::System.Data.DataColumn columnDifficultSlopeMultiplier;
            
            private global::System.Data.DataColumn columnRegulatoryFine;
            
            private global::System.Data.DataColumn columnBasementFloodingCost;
            
            private global::System.Data.DataColumn columnPublicInconvenienceBsmtEvents;
            
            private global::System.Data.DataColumn columnSinkholeResidentialCost;
            
            private global::System.Data.DataColumn columnSinkholeMajorArterialCost;
            
            private global::System.Data.DataColumn columnSinkholeFreewayCost;
            
            private global::System.Data.DataColumn columnPublicBldgProximityCost;
            
            private global::System.Data.DataColumn columnIllicitSpillNearSchool;
            
            private global::System.Data.DataColumn columnIllicitSpillFarSchool;
            
            private global::System.Data.DataColumn columnMHFloodNearSchoolCost;
            
            private global::System.Data.DataColumn columnMHFloodFarSchoolCost;
            
            private global::System.Data.DataColumn columnMHFloodCleanupStreet;
            
            private global::System.Data.DataColumn columnMHFloodCleanupMajArt;
            
            private global::System.Data.DataColumn columnMHFloodCleanupFrwy;
            
            private global::System.Data.DataColumn columnEMRepairFactor;
            
            private global::System.Data.DataColumn columnRawCostENR;
            
            private global::System.Data.DataColumn columnEstimateENR;
            
            private global::System.Data.DataColumn columnTrafficImpactCostPerVehiclePerDay;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConstantsDataTable() {
                this.TableName = "Constants";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConstantsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConstantsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMLateralRepairCostColumn {
                get {
                    return this.columnEMLateralRepairCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UtilityCrossingCostColumn {
                get {
                    return this.columnUtilityCrossingCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnvMitigationWidthColumn {
                get {
                    return this.columnEnvMitigationWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HazMatWidthColumn {
                get {
                    return this.columnHazMatWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DifficultSlopeMultiplierColumn {
                get {
                    return this.columnDifficultSlopeMultiplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegulatoryFineColumn {
                get {
                    return this.columnRegulatoryFine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BasementFloodingCostColumn {
                get {
                    return this.columnBasementFloodingCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PublicInconvenienceBsmtEventsColumn {
                get {
                    return this.columnPublicInconvenienceBsmtEvents;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SinkholeResidentialCostColumn {
                get {
                    return this.columnSinkholeResidentialCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SinkholeMajorArterialCostColumn {
                get {
                    return this.columnSinkholeMajorArterialCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SinkholeFreewayCostColumn {
                get {
                    return this.columnSinkholeFreewayCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PublicBldgProximityCostColumn {
                get {
                    return this.columnPublicBldgProximityCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IllicitSpillNearSchoolColumn {
                get {
                    return this.columnIllicitSpillNearSchool;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IllicitSpillFarSchoolColumn {
                get {
                    return this.columnIllicitSpillFarSchool;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MHFloodNearSchoolCostColumn {
                get {
                    return this.columnMHFloodNearSchoolCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MHFloodFarSchoolCostColumn {
                get {
                    return this.columnMHFloodFarSchoolCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MHFloodCleanupStreetColumn {
                get {
                    return this.columnMHFloodCleanupStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MHFloodCleanupMajArtColumn {
                get {
                    return this.columnMHFloodCleanupMajArt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MHFloodCleanupFrwyColumn {
                get {
                    return this.columnMHFloodCleanupFrwy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMRepairFactorColumn {
                get {
                    return this.columnEMRepairFactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RawCostENRColumn {
                get {
                    return this.columnRawCostENR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EstimateENRColumn {
                get {
                    return this.columnEstimateENR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrafficImpactCostPerVehiclePerDayColumn {
                get {
                    return this.columnTrafficImpactCostPerVehiclePerDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConstantsRow this[int index] {
                get {
                    return ((ConstantsRow)(this.Rows[index]));
                }
            }
            
            public event ConstantsRowChangeEventHandler ConstantsRowChanging;
            
            public event ConstantsRowChangeEventHandler ConstantsRowChanged;
            
            public event ConstantsRowChangeEventHandler ConstantsRowDeleting;
            
            public event ConstantsRowChangeEventHandler ConstantsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConstantsRow(ConstantsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConstantsRow AddConstantsRow(
                        int EMLateralRepairCost, 
                        int UtilityCrossingCost, 
                        int EnvMitigationWidth, 
                        int HazMatWidth, 
                        double DifficultSlopeMultiplier, 
                        int RegulatoryFine, 
                        int BasementFloodingCost, 
                        int PublicInconvenienceBsmtEvents, 
                        int SinkholeResidentialCost, 
                        int SinkholeMajorArterialCost, 
                        int SinkholeFreewayCost, 
                        int PublicBldgProximityCost, 
                        int IllicitSpillNearSchool, 
                        int IllicitSpillFarSchool, 
                        int MHFloodNearSchoolCost, 
                        int MHFloodFarSchoolCost, 
                        int MHFloodCleanupStreet, 
                        int MHFloodCleanupMajArt, 
                        int MHFloodCleanupFrwy, 
                        double EMRepairFactor, 
                        int RawCostENR, 
                        int EstimateENR, 
                        double TrafficImpactCostPerVehiclePerDay) {
                ConstantsRow rowConstantsRow = ((ConstantsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        EMLateralRepairCost,
                        UtilityCrossingCost,
                        EnvMitigationWidth,
                        HazMatWidth,
                        DifficultSlopeMultiplier,
                        RegulatoryFine,
                        BasementFloodingCost,
                        PublicInconvenienceBsmtEvents,
                        SinkholeResidentialCost,
                        SinkholeMajorArterialCost,
                        SinkholeFreewayCost,
                        PublicBldgProximityCost,
                        IllicitSpillNearSchool,
                        IllicitSpillFarSchool,
                        MHFloodNearSchoolCost,
                        MHFloodFarSchoolCost,
                        MHFloodCleanupStreet,
                        MHFloodCleanupMajArt,
                        MHFloodCleanupFrwy,
                        EMRepairFactor,
                        RawCostENR,
                        EstimateENR,
                        TrafficImpactCostPerVehiclePerDay};
                rowConstantsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConstantsRow);
                return rowConstantsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConstantsRow FindByID(int ID) {
                return ((ConstantsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConstantsDataTable cln = ((ConstantsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConstantsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnEMLateralRepairCost = base.Columns["EMLateralRepairCost"];
                this.columnUtilityCrossingCost = base.Columns["UtilityCrossingCost"];
                this.columnEnvMitigationWidth = base.Columns["EnvMitigationWidth"];
                this.columnHazMatWidth = base.Columns["HazMatWidth"];
                this.columnDifficultSlopeMultiplier = base.Columns["DifficultSlopeMultiplier"];
                this.columnRegulatoryFine = base.Columns["RegulatoryFine"];
                this.columnBasementFloodingCost = base.Columns["BasementFloodingCost"];
                this.columnPublicInconvenienceBsmtEvents = base.Columns["PublicInconvenienceBsmtEvents"];
                this.columnSinkholeResidentialCost = base.Columns["SinkholeResidentialCost"];
                this.columnSinkholeMajorArterialCost = base.Columns["SinkholeMajorArterialCost"];
                this.columnSinkholeFreewayCost = base.Columns["SinkholeFreewayCost"];
                this.columnPublicBldgProximityCost = base.Columns["PublicBldgProximityCost"];
                this.columnIllicitSpillNearSchool = base.Columns["IllicitSpillNearSchool"];
                this.columnIllicitSpillFarSchool = base.Columns["IllicitSpillFarSchool"];
                this.columnMHFloodNearSchoolCost = base.Columns["MHFloodNearSchoolCost"];
                this.columnMHFloodFarSchoolCost = base.Columns["MHFloodFarSchoolCost"];
                this.columnMHFloodCleanupStreet = base.Columns["MHFloodCleanupStreet"];
                this.columnMHFloodCleanupMajArt = base.Columns["MHFloodCleanupMajArt"];
                this.columnMHFloodCleanupFrwy = base.Columns["MHFloodCleanupFrwy"];
                this.columnEMRepairFactor = base.Columns["EMRepairFactor"];
                this.columnRawCostENR = base.Columns["RawCostENR"];
                this.columnEstimateENR = base.Columns["EstimateENR"];
                this.columnTrafficImpactCostPerVehiclePerDay = base.Columns["TrafficImpactCostPerVehiclePerDay"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnEMLateralRepairCost = new global::System.Data.DataColumn("EMLateralRepairCost", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMLateralRepairCost);
                this.columnUtilityCrossingCost = new global::System.Data.DataColumn("UtilityCrossingCost", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUtilityCrossingCost);
                this.columnEnvMitigationWidth = new global::System.Data.DataColumn("EnvMitigationWidth", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnvMitigationWidth);
                this.columnHazMatWidth = new global::System.Data.DataColumn("HazMatWidth", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHazMatWidth);
                this.columnDifficultSlopeMultiplier = new global::System.Data.DataColumn("DifficultSlopeMultiplier", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDifficultSlopeMultiplier);
                this.columnRegulatoryFine = new global::System.Data.DataColumn("RegulatoryFine", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegulatoryFine);
                this.columnBasementFloodingCost = new global::System.Data.DataColumn("BasementFloodingCost", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBasementFloodingCost);
                this.columnPublicInconvenienceBsmtEvents = new global::System.Data.DataColumn("PublicInconvenienceBsmtEvents", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPublicInconvenienceBsmtEvents);
                this.columnSinkholeResidentialCost = new global::System.Data.DataColumn("SinkholeResidentialCost", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSinkholeResidentialCost);
                this.columnSinkholeMajorArterialCost = new global::System.Data.DataColumn("SinkholeMajorArterialCost", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSinkholeMajorArterialCost);
                this.columnSinkholeFreewayCost = new global::System.Data.DataColumn("SinkholeFreewayCost", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSinkholeFreewayCost);
                this.columnPublicBldgProximityCost = new global::System.Data.DataColumn("PublicBldgProximityCost", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPublicBldgProximityCost);
                this.columnIllicitSpillNearSchool = new global::System.Data.DataColumn("IllicitSpillNearSchool", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIllicitSpillNearSchool);
                this.columnIllicitSpillFarSchool = new global::System.Data.DataColumn("IllicitSpillFarSchool", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIllicitSpillFarSchool);
                this.columnMHFloodNearSchoolCost = new global::System.Data.DataColumn("MHFloodNearSchoolCost", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMHFloodNearSchoolCost);
                this.columnMHFloodFarSchoolCost = new global::System.Data.DataColumn("MHFloodFarSchoolCost", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMHFloodFarSchoolCost);
                this.columnMHFloodCleanupStreet = new global::System.Data.DataColumn("MHFloodCleanupStreet", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMHFloodCleanupStreet);
                this.columnMHFloodCleanupMajArt = new global::System.Data.DataColumn("MHFloodCleanupMajArt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMHFloodCleanupMajArt);
                this.columnMHFloodCleanupFrwy = new global::System.Data.DataColumn("MHFloodCleanupFrwy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMHFloodCleanupFrwy);
                this.columnEMRepairFactor = new global::System.Data.DataColumn("EMRepairFactor", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMRepairFactor);
                this.columnRawCostENR = new global::System.Data.DataColumn("RawCostENR", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRawCostENR);
                this.columnEstimateENR = new global::System.Data.DataColumn("EstimateENR", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEstimateENR);
                this.columnTrafficImpactCostPerVehiclePerDay = new global::System.Data.DataColumn("TrafficImpactCostPerVehiclePerDay", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrafficImpactCostPerVehiclePerDay);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConstantsRow NewConstantsRow() {
                return ((ConstantsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConstantsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConstantsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConstantsRowChanged != null)) {
                    this.ConstantsRowChanged(this, new ConstantsRowChangeEvent(((ConstantsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConstantsRowChanging != null)) {
                    this.ConstantsRowChanging(this, new ConstantsRowChangeEvent(((ConstantsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConstantsRowDeleted != null)) {
                    this.ConstantsRowDeleted(this, new ConstantsRowChangeEvent(((ConstantsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConstantsRowDeleting != null)) {
                    this.ConstantsRowDeleting(this, new ConstantsRowChangeEvent(((ConstantsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConstantsRow(ConstantsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                REHABDataSet ds = new REHABDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConstantsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class REHAB10FTSEGSRow : global::System.Data.DataRow {
            
            private REHAB10FTSEGSDataTable tableREHAB10FTSEGS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal REHAB10FTSEGSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableREHAB10FTSEGS = ((REHAB10FTSEGSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OBJECTID {
                get {
                    return ((int)(this[this.tableREHAB10FTSEGS.OBJECTIDColumn]));
                }
                set {
                    this[this.tableREHAB10FTSEGS.OBJECTIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int mlinkid {
                get {
                    try {
                        return ((int)(this[this.tableREHAB10FTSEGS.mlinkidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mlinkid\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.mlinkidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int compkey {
                get {
                    try {
                        return ((int)(this[this.tableREHAB10FTSEGS.compkeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'compkey\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.compkeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string usnode {
                get {
                    try {
                        return ((string)(this[this.tableREHAB10FTSEGS.usnodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'usnode\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.usnodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dsnode {
                get {
                    try {
                        return ((string)(this[this.tableREHAB10FTSEGS.dsnodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dsnode\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.dsnodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string linktype {
                get {
                    try {
                        return ((string)(this[this.tableREHAB10FTSEGS.linktypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'linktype\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.linktypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string flowtype {
                get {
                    try {
                        return ((string)(this[this.tableREHAB10FTSEGS.flowtypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'flowtype\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.flowtypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal length {
                get {
                    try {
                        return ((decimal)(this[this.tableREHAB10FTSEGS.lengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'length\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.lengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal diamwidth {
                get {
                    try {
                        return ((decimal)(this[this.tableREHAB10FTSEGS.diamwidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'diamwidth\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.diamwidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal height {
                get {
                    try {
                        return ((decimal)(this[this.tableREHAB10FTSEGS.heightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'height\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.heightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pipeshape {
                get {
                    try {
                        return ((string)(this[this.tableREHAB10FTSEGS.pipeshapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pipeshape\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.pipeshapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string material {
                get {
                    try {
                        return ((string)(this[this.tableREHAB10FTSEGS.materialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'material\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.materialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime instdate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableREHAB10FTSEGS.instdateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'instdate\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.instdateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string hservstat {
                get {
                    try {
                        return ((string)(this[this.tableREHAB10FTSEGS.hservstatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'hservstat\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.hservstatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bsnrun {
                get {
                    try {
                        return ((string)(this[this.tableREHAB10FTSEGS.bsnrunColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'bsnrun\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.bsnrunColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int old_mlid {
                get {
                    try {
                        return ((int)(this[this.tableREHAB10FTSEGS.old_mlidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'old_mlid\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.old_mlidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cutno {
                get {
                    try {
                        return ((int)(this[this.tableREHAB10FTSEGS.cutnoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cutno\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.cutnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal fm {
                get {
                    try {
                        return ((decimal)(this[this.tableREHAB10FTSEGS.fmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fm\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.fmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal to_ {
                get {
                    try {
                        return ((decimal)(this[this.tableREHAB10FTSEGS.to_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'to_\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.to_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal seglen {
                get {
                    try {
                        return ((decimal)(this[this.tableREHAB10FTSEGS.seglenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'seglen\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.seglenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short grade_h5 {
                get {
                    try {
                        return ((short)(this[this.tableREHAB10FTSEGS.grade_h5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'grade_h5\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.grade_h5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mat_fmto {
                get {
                    try {
                        return ((string)(this[this.tableREHAB10FTSEGS.mat_fmtoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mat_fmto\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.mat_fmtoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short seg_count {
                get {
                    try {
                        return ((short)(this[this.tableREHAB10FTSEGS.seg_countColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'seg_count\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.seg_countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fail_near {
                get {
                    try {
                        return ((int)(this[this.tableREHAB10FTSEGS.fail_nearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fail_near\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.fail_nearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fail_prev {
                get {
                    try {
                        return ((int)(this[this.tableREHAB10FTSEGS.fail_prevColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fail_prev\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.fail_prevColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fail_tot {
                get {
                    try {
                        return ((int)(this[this.tableREHAB10FTSEGS.fail_totColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fail_tot\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.fail_totColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal fail_pct {
                get {
                    try {
                        return ((decimal)(this[this.tableREHAB10FTSEGS.fail_pctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fail_pct\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.fail_pctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int def_pts {
                get {
                    try {
                        return ((int)(this[this.tableREHAB10FTSEGS.def_ptsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'def_pts\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.def_ptsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int def_lin {
                get {
                    try {
                        return ((int)(this[this.tableREHAB10FTSEGS.def_linColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'def_lin\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.def_linColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int def_tot {
                get {
                    try {
                        return ((int)(this[this.tableREHAB10FTSEGS.def_totColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'def_tot\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.def_totColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int bpw {
                get {
                    try {
                        return ((int)(this[this.tableREHAB10FTSEGS.bpwColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'bpw\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.bpwColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int apw {
                get {
                    try {
                        return ((int)(this[this.tableREHAB10FTSEGS.apwColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'apw\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.apwColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal cbr {
                get {
                    try {
                        return ((decimal)(this[this.tableREHAB10FTSEGS.cbrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cbr\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.cbrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime insp_date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableREHAB10FTSEGS.insp_dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'insp_date\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.insp_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short insp_yrsago {
                get {
                    try {
                        return ((short)(this[this.tableREHAB10FTSEGS.insp_yrsagoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'insp_yrsago\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.insp_yrsagoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short insp_curr {
                get {
                    try {
                        return ((short)(this[this.tableREHAB10FTSEGS.insp_currColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'insp_curr\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.insp_currColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short fail_yr {
                get {
                    try {
                        return ((short)(this[this.tableREHAB10FTSEGS.fail_yrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fail_yr\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.fail_yrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short rulife {
                get {
                    try {
                        return ((short)(this[this.tableREHAB10FTSEGS.rulifeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rulife\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.rulifeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short rul_flag {
                get {
                    try {
                        return ((short)(this[this.tableREHAB10FTSEGS.rul_flagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rul_flag\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.rul_flagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int std_dev {
                get {
                    try {
                        return ((int)(this[this.tableREHAB10FTSEGS.std_devColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'std_dev\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.std_devColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cof {
                get {
                    try {
                        return ((int)(this[this.tableREHAB10FTSEGS.cofColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cof\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.cofColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int replacecost {
                get {
                    try {
                        return ((int)(this[this.tableREHAB10FTSEGS.replacecostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'replacecost\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.replacecostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short action {
                get {
                    try {
                        return ((short)(this[this.tableREHAB10FTSEGS.actionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'action\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.actionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string remarks {
                get {
                    try {
                        return ((string)(this[this.tableREHAB10FTSEGS.remarksColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'remarks\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.remarksColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int bpw_seg {
                get {
                    try {
                        return ((int)(this[this.tableREHAB10FTSEGS.bpw_segColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'bpw_seg\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.bpw_segColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int apw_seg {
                get {
                    try {
                        return ((int)(this[this.tableREHAB10FTSEGS.apw_segColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'apw_seg\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.apw_segColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal cbr_seg {
                get {
                    try {
                        return ((decimal)(this[this.tableREHAB10FTSEGS.cbr_segColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cbr_seg\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.cbr_segColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int std_dev_seg {
                get {
                    try {
                        return ((int)(this[this.tableREHAB10FTSEGS.std_dev_segColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'std_dev_seg\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.std_dev_segColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short fail_yr_seg {
                get {
                    try {
                        return ((short)(this[this.tableREHAB10FTSEGS.fail_yr_segColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fail_yr_seg\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.fail_yr_segColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short fail_yr_whole {
                get {
                    try {
                        return ((short)(this[this.tableREHAB10FTSEGS.fail_yr_wholeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fail_yr_whole\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.fail_yr_wholeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short std_dev_whole {
                get {
                    try {
                        return ((short)(this[this.tableREHAB10FTSEGS.std_dev_wholeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'std_dev_whole\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.std_dev_wholeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Exceptions {
                get {
                    try {
                        return ((string)(this[this.tableREHAB10FTSEGS.ExceptionsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Exceptions\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.ExceptionsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ACCUM_RISK_REPLACE_YEAR {
                get {
                    try {
                        return ((short)(this[this.tableREHAB10FTSEGS.ACCUM_RISK_REPLACE_YEARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ACCUM_RISK_REPLACE_YEAR\' in table \'REHAB10FTSEGS\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.ACCUM_RISK_REPLACE_YEARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ACCUM_RISK_INSPECT_YEAR {
                get {
                    try {
                        return ((short)(this[this.tableREHAB10FTSEGS.ACCUM_RISK_INSPECT_YEARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ACCUM_RISK_INSPECT_YEAR\' in table \'REHAB10FTSEGS\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.ACCUM_RISK_INSPECT_YEARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SHAPE {
                get {
                    try {
                        return ((int)(this[this.tableREHAB10FTSEGS.SHAPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SHAPE\' in table \'REHAB10FTSEGS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREHAB10FTSEGS.SHAPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmlinkidNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.mlinkidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmlinkidNull() {
                this[this.tableREHAB10FTSEGS.mlinkidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscompkeyNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.compkeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcompkeyNull() {
                this[this.tableREHAB10FTSEGS.compkeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsusnodeNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.usnodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetusnodeNull() {
                this[this.tableREHAB10FTSEGS.usnodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdsnodeNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.dsnodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdsnodeNull() {
                this[this.tableREHAB10FTSEGS.dsnodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslinktypeNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.linktypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlinktypeNull() {
                this[this.tableREHAB10FTSEGS.linktypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsflowtypeNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.flowtypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetflowtypeNull() {
                this[this.tableREHAB10FTSEGS.flowtypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslengthNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.lengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlengthNull() {
                this[this.tableREHAB10FTSEGS.lengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdiamwidthNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.diamwidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdiamwidthNull() {
                this[this.tableREHAB10FTSEGS.diamwidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheightNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.heightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheightNull() {
                this[this.tableREHAB10FTSEGS.heightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspipeshapeNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.pipeshapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpipeshapeNull() {
                this[this.tableREHAB10FTSEGS.pipeshapeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaterialNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.materialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaterialNull() {
                this[this.tableREHAB10FTSEGS.materialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinstdateNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.instdateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinstdateNull() {
                this[this.tableREHAB10FTSEGS.instdateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshservstatNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.hservstatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethservstatNull() {
                this[this.tableREHAB10FTSEGS.hservstatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbsnrunNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.bsnrunColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbsnrunNull() {
                this[this.tableREHAB10FTSEGS.bsnrunColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isold_mlidNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.old_mlidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setold_mlidNull() {
                this[this.tableREHAB10FTSEGS.old_mlidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscutnoNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.cutnoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcutnoNull() {
                this[this.tableREHAB10FTSEGS.cutnoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfmNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.fmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfmNull() {
                this[this.tableREHAB10FTSEGS.fmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isto_Null() {
                return this.IsNull(this.tableREHAB10FTSEGS.to_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setto_Null() {
                this[this.tableREHAB10FTSEGS.to_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsseglenNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.seglenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetseglenNull() {
                this[this.tableREHAB10FTSEGS.seglenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isgrade_h5Null() {
                return this.IsNull(this.tableREHAB10FTSEGS.grade_h5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setgrade_h5Null() {
                this[this.tableREHAB10FTSEGS.grade_h5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismat_fmtoNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.mat_fmtoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmat_fmtoNull() {
                this[this.tableREHAB10FTSEGS.mat_fmtoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isseg_countNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.seg_countColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setseg_countNull() {
                this[this.tableREHAB10FTSEGS.seg_countColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfail_nearNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.fail_nearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfail_nearNull() {
                this[this.tableREHAB10FTSEGS.fail_nearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfail_prevNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.fail_prevColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfail_prevNull() {
                this[this.tableREHAB10FTSEGS.fail_prevColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfail_totNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.fail_totColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfail_totNull() {
                this[this.tableREHAB10FTSEGS.fail_totColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfail_pctNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.fail_pctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfail_pctNull() {
                this[this.tableREHAB10FTSEGS.fail_pctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdef_ptsNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.def_ptsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdef_ptsNull() {
                this[this.tableREHAB10FTSEGS.def_ptsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdef_linNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.def_linColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdef_linNull() {
                this[this.tableREHAB10FTSEGS.def_linColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdef_totNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.def_totColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdef_totNull() {
                this[this.tableREHAB10FTSEGS.def_totColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbpwNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.bpwColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbpwNull() {
                this[this.tableREHAB10FTSEGS.bpwColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsapwNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.apwColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetapwNull() {
                this[this.tableREHAB10FTSEGS.apwColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscbrNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.cbrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcbrNull() {
                this[this.tableREHAB10FTSEGS.cbrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinsp_dateNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.insp_dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinsp_dateNull() {
                this[this.tableREHAB10FTSEGS.insp_dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinsp_yrsagoNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.insp_yrsagoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinsp_yrsagoNull() {
                this[this.tableREHAB10FTSEGS.insp_yrsagoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinsp_currNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.insp_currColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinsp_currNull() {
                this[this.tableREHAB10FTSEGS.insp_currColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfail_yrNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.fail_yrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfail_yrNull() {
                this[this.tableREHAB10FTSEGS.fail_yrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrulifeNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.rulifeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrulifeNull() {
                this[this.tableREHAB10FTSEGS.rulifeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrul_flagNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.rul_flagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrul_flagNull() {
                this[this.tableREHAB10FTSEGS.rul_flagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstd_devNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.std_devColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstd_devNull() {
                this[this.tableREHAB10FTSEGS.std_devColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscofNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.cofColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcofNull() {
                this[this.tableREHAB10FTSEGS.cofColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreplacecostNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.replacecostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreplacecostNull() {
                this[this.tableREHAB10FTSEGS.replacecostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsactionNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.actionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetactionNull() {
                this[this.tableREHAB10FTSEGS.actionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsremarksNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.remarksColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetremarksNull() {
                this[this.tableREHAB10FTSEGS.remarksColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isbpw_segNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.bpw_segColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setbpw_segNull() {
                this[this.tableREHAB10FTSEGS.bpw_segColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isapw_segNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.apw_segColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setapw_segNull() {
                this[this.tableREHAB10FTSEGS.apw_segColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscbr_segNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.cbr_segColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcbr_segNull() {
                this[this.tableREHAB10FTSEGS.cbr_segColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstd_dev_segNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.std_dev_segColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstd_dev_segNull() {
                this[this.tableREHAB10FTSEGS.std_dev_segColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfail_yr_segNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.fail_yr_segColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfail_yr_segNull() {
                this[this.tableREHAB10FTSEGS.fail_yr_segColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfail_yr_wholeNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.fail_yr_wholeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfail_yr_wholeNull() {
                this[this.tableREHAB10FTSEGS.fail_yr_wholeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstd_dev_wholeNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.std_dev_wholeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstd_dev_wholeNull() {
                this[this.tableREHAB10FTSEGS.std_dev_wholeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExceptionsNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.ExceptionsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExceptionsNull() {
                this[this.tableREHAB10FTSEGS.ExceptionsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACCUM_RISK_REPLACE_YEARNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.ACCUM_RISK_REPLACE_YEARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACCUM_RISK_REPLACE_YEARNull() {
                this[this.tableREHAB10FTSEGS.ACCUM_RISK_REPLACE_YEARColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACCUM_RISK_INSPECT_YEARNull() {
                return this.IsNull(this.tableREHAB10FTSEGS.ACCUM_RISK_INSPECT_YEARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACCUM_RISK_INSPECT_YEARNull() {
                this[this.tableREHAB10FTSEGS.ACCUM_RISK_INSPECT_YEARColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSHAPENull() {
                return this.IsNull(this.tableREHAB10FTSEGS.SHAPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSHAPENull() {
                this[this.tableREHAB10FTSEGS.SHAPEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConstantsRow : global::System.Data.DataRow {
            
            private ConstantsDataTable tableConstants;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConstantsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConstants = ((ConstantsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableConstants.IDColumn]));
                }
                set {
                    this[this.tableConstants.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EMLateralRepairCost {
                get {
                    try {
                        return ((int)(this[this.tableConstants.EMLateralRepairCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EMLateralRepairCost\' in table \'Constants\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstants.EMLateralRepairCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UtilityCrossingCost {
                get {
                    try {
                        return ((int)(this[this.tableConstants.UtilityCrossingCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UtilityCrossingCost\' in table \'Constants\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstants.UtilityCrossingCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EnvMitigationWidth {
                get {
                    try {
                        return ((int)(this[this.tableConstants.EnvMitigationWidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EnvMitigationWidth\' in table \'Constants\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstants.EnvMitigationWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HazMatWidth {
                get {
                    try {
                        return ((int)(this[this.tableConstants.HazMatWidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HazMatWidth\' in table \'Constants\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstants.HazMatWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DifficultSlopeMultiplier {
                get {
                    try {
                        return ((double)(this[this.tableConstants.DifficultSlopeMultiplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DifficultSlopeMultiplier\' in table \'Constants\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstants.DifficultSlopeMultiplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RegulatoryFine {
                get {
                    try {
                        return ((int)(this[this.tableConstants.RegulatoryFineColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RegulatoryFine\' in table \'Constants\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstants.RegulatoryFineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BasementFloodingCost {
                get {
                    try {
                        return ((int)(this[this.tableConstants.BasementFloodingCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BasementFloodingCost\' in table \'Constants\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstants.BasementFloodingCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PublicInconvenienceBsmtEvents {
                get {
                    try {
                        return ((int)(this[this.tableConstants.PublicInconvenienceBsmtEventsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PublicInconvenienceBsmtEvents\' in table \'Constants\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableConstants.PublicInconvenienceBsmtEventsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SinkholeResidentialCost {
                get {
                    try {
                        return ((int)(this[this.tableConstants.SinkholeResidentialCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SinkholeResidentialCost\' in table \'Constants\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstants.SinkholeResidentialCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SinkholeMajorArterialCost {
                get {
                    try {
                        return ((int)(this[this.tableConstants.SinkholeMajorArterialCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SinkholeMajorArterialCost\' in table \'Constants\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstants.SinkholeMajorArterialCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SinkholeFreewayCost {
                get {
                    try {
                        return ((int)(this[this.tableConstants.SinkholeFreewayCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SinkholeFreewayCost\' in table \'Constants\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstants.SinkholeFreewayCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PublicBldgProximityCost {
                get {
                    try {
                        return ((int)(this[this.tableConstants.PublicBldgProximityCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PublicBldgProximityCost\' in table \'Constants\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstants.PublicBldgProximityCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IllicitSpillNearSchool {
                get {
                    try {
                        return ((int)(this[this.tableConstants.IllicitSpillNearSchoolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IllicitSpillNearSchool\' in table \'Constants\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstants.IllicitSpillNearSchoolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IllicitSpillFarSchool {
                get {
                    try {
                        return ((int)(this[this.tableConstants.IllicitSpillFarSchoolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IllicitSpillFarSchool\' in table \'Constants\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstants.IllicitSpillFarSchoolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MHFloodNearSchoolCost {
                get {
                    try {
                        return ((int)(this[this.tableConstants.MHFloodNearSchoolCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MHFloodNearSchoolCost\' in table \'Constants\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstants.MHFloodNearSchoolCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MHFloodFarSchoolCost {
                get {
                    try {
                        return ((int)(this[this.tableConstants.MHFloodFarSchoolCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MHFloodFarSchoolCost\' in table \'Constants\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstants.MHFloodFarSchoolCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MHFloodCleanupStreet {
                get {
                    try {
                        return ((int)(this[this.tableConstants.MHFloodCleanupStreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MHFloodCleanupStreet\' in table \'Constants\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstants.MHFloodCleanupStreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MHFloodCleanupMajArt {
                get {
                    try {
                        return ((int)(this[this.tableConstants.MHFloodCleanupMajArtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MHFloodCleanupMajArt\' in table \'Constants\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstants.MHFloodCleanupMajArtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MHFloodCleanupFrwy {
                get {
                    try {
                        return ((int)(this[this.tableConstants.MHFloodCleanupFrwyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MHFloodCleanupFrwy\' in table \'Constants\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstants.MHFloodCleanupFrwyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double EMRepairFactor {
                get {
                    try {
                        return ((double)(this[this.tableConstants.EMRepairFactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EMRepairFactor\' in table \'Constants\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstants.EMRepairFactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RawCostENR {
                get {
                    try {
                        return ((int)(this[this.tableConstants.RawCostENRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RawCostENR\' in table \'Constants\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstants.RawCostENRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EstimateENR {
                get {
                    try {
                        return ((int)(this[this.tableConstants.EstimateENRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EstimateENR\' in table \'Constants\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstants.EstimateENRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TrafficImpactCostPerVehiclePerDay {
                get {
                    try {
                        return ((double)(this[this.tableConstants.TrafficImpactCostPerVehiclePerDayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrafficImpactCostPerVehiclePerDay\' in table \'Constants\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstants.TrafficImpactCostPerVehiclePerDayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMLateralRepairCostNull() {
                return this.IsNull(this.tableConstants.EMLateralRepairCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMLateralRepairCostNull() {
                this[this.tableConstants.EMLateralRepairCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUtilityCrossingCostNull() {
                return this.IsNull(this.tableConstants.UtilityCrossingCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUtilityCrossingCostNull() {
                this[this.tableConstants.UtilityCrossingCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnvMitigationWidthNull() {
                return this.IsNull(this.tableConstants.EnvMitigationWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnvMitigationWidthNull() {
                this[this.tableConstants.EnvMitigationWidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHazMatWidthNull() {
                return this.IsNull(this.tableConstants.HazMatWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHazMatWidthNull() {
                this[this.tableConstants.HazMatWidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDifficultSlopeMultiplierNull() {
                return this.IsNull(this.tableConstants.DifficultSlopeMultiplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDifficultSlopeMultiplierNull() {
                this[this.tableConstants.DifficultSlopeMultiplierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegulatoryFineNull() {
                return this.IsNull(this.tableConstants.RegulatoryFineColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegulatoryFineNull() {
                this[this.tableConstants.RegulatoryFineColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBasementFloodingCostNull() {
                return this.IsNull(this.tableConstants.BasementFloodingCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBasementFloodingCostNull() {
                this[this.tableConstants.BasementFloodingCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPublicInconvenienceBsmtEventsNull() {
                return this.IsNull(this.tableConstants.PublicInconvenienceBsmtEventsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPublicInconvenienceBsmtEventsNull() {
                this[this.tableConstants.PublicInconvenienceBsmtEventsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSinkholeResidentialCostNull() {
                return this.IsNull(this.tableConstants.SinkholeResidentialCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSinkholeResidentialCostNull() {
                this[this.tableConstants.SinkholeResidentialCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSinkholeMajorArterialCostNull() {
                return this.IsNull(this.tableConstants.SinkholeMajorArterialCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSinkholeMajorArterialCostNull() {
                this[this.tableConstants.SinkholeMajorArterialCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSinkholeFreewayCostNull() {
                return this.IsNull(this.tableConstants.SinkholeFreewayCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSinkholeFreewayCostNull() {
                this[this.tableConstants.SinkholeFreewayCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPublicBldgProximityCostNull() {
                return this.IsNull(this.tableConstants.PublicBldgProximityCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPublicBldgProximityCostNull() {
                this[this.tableConstants.PublicBldgProximityCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIllicitSpillNearSchoolNull() {
                return this.IsNull(this.tableConstants.IllicitSpillNearSchoolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIllicitSpillNearSchoolNull() {
                this[this.tableConstants.IllicitSpillNearSchoolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIllicitSpillFarSchoolNull() {
                return this.IsNull(this.tableConstants.IllicitSpillFarSchoolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIllicitSpillFarSchoolNull() {
                this[this.tableConstants.IllicitSpillFarSchoolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMHFloodNearSchoolCostNull() {
                return this.IsNull(this.tableConstants.MHFloodNearSchoolCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMHFloodNearSchoolCostNull() {
                this[this.tableConstants.MHFloodNearSchoolCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMHFloodFarSchoolCostNull() {
                return this.IsNull(this.tableConstants.MHFloodFarSchoolCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMHFloodFarSchoolCostNull() {
                this[this.tableConstants.MHFloodFarSchoolCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMHFloodCleanupStreetNull() {
                return this.IsNull(this.tableConstants.MHFloodCleanupStreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMHFloodCleanupStreetNull() {
                this[this.tableConstants.MHFloodCleanupStreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMHFloodCleanupMajArtNull() {
                return this.IsNull(this.tableConstants.MHFloodCleanupMajArtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMHFloodCleanupMajArtNull() {
                this[this.tableConstants.MHFloodCleanupMajArtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMHFloodCleanupFrwyNull() {
                return this.IsNull(this.tableConstants.MHFloodCleanupFrwyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMHFloodCleanupFrwyNull() {
                this[this.tableConstants.MHFloodCleanupFrwyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMRepairFactorNull() {
                return this.IsNull(this.tableConstants.EMRepairFactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMRepairFactorNull() {
                this[this.tableConstants.EMRepairFactorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRawCostENRNull() {
                return this.IsNull(this.tableConstants.RawCostENRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRawCostENRNull() {
                this[this.tableConstants.RawCostENRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEstimateENRNull() {
                return this.IsNull(this.tableConstants.EstimateENRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEstimateENRNull() {
                this[this.tableConstants.EstimateENRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrafficImpactCostPerVehiclePerDayNull() {
                return this.IsNull(this.tableConstants.TrafficImpactCostPerVehiclePerDayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrafficImpactCostPerVehiclePerDayNull() {
                this[this.tableConstants.TrafficImpactCostPerVehiclePerDayColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class REHAB10FTSEGSRowChangeEvent : global::System.EventArgs {
            
            private REHAB10FTSEGSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REHAB10FTSEGSRowChangeEvent(REHAB10FTSEGSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REHAB10FTSEGSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConstantsRowChangeEvent : global::System.EventArgs {
            
            private ConstantsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConstantsRowChangeEvent(ConstantsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConstantsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace RXI.REHABDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class REHAB10FTSEGSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public REHAB10FTSEGSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "REHAB10FTSEGS";
            tableMapping.ColumnMappings.Add("OBJECTID", "OBJECTID");
            tableMapping.ColumnMappings.Add("mlinkid", "mlinkid");
            tableMapping.ColumnMappings.Add("compkey", "compkey");
            tableMapping.ColumnMappings.Add("usnode", "usnode");
            tableMapping.ColumnMappings.Add("dsnode", "dsnode");
            tableMapping.ColumnMappings.Add("linktype", "linktype");
            tableMapping.ColumnMappings.Add("flowtype", "flowtype");
            tableMapping.ColumnMappings.Add("length", "length");
            tableMapping.ColumnMappings.Add("diamwidth", "diamwidth");
            tableMapping.ColumnMappings.Add("height", "height");
            tableMapping.ColumnMappings.Add("pipeshape", "pipeshape");
            tableMapping.ColumnMappings.Add("material", "material");
            tableMapping.ColumnMappings.Add("instdate", "instdate");
            tableMapping.ColumnMappings.Add("hservstat", "hservstat");
            tableMapping.ColumnMappings.Add("bsnrun", "bsnrun");
            tableMapping.ColumnMappings.Add("old_mlid", "old_mlid");
            tableMapping.ColumnMappings.Add("cutno", "cutno");
            tableMapping.ColumnMappings.Add("fm", "fm");
            tableMapping.ColumnMappings.Add("to_", "to_");
            tableMapping.ColumnMappings.Add("seglen", "seglen");
            tableMapping.ColumnMappings.Add("grade_h5", "grade_h5");
            tableMapping.ColumnMappings.Add("mat_fmto", "mat_fmto");
            tableMapping.ColumnMappings.Add("seg_count", "seg_count");
            tableMapping.ColumnMappings.Add("fail_near", "fail_near");
            tableMapping.ColumnMappings.Add("fail_prev", "fail_prev");
            tableMapping.ColumnMappings.Add("fail_tot", "fail_tot");
            tableMapping.ColumnMappings.Add("fail_pct", "fail_pct");
            tableMapping.ColumnMappings.Add("def_pts", "def_pts");
            tableMapping.ColumnMappings.Add("def_lin", "def_lin");
            tableMapping.ColumnMappings.Add("def_tot", "def_tot");
            tableMapping.ColumnMappings.Add("bpw", "bpw");
            tableMapping.ColumnMappings.Add("apw", "apw");
            tableMapping.ColumnMappings.Add("cbr", "cbr");
            tableMapping.ColumnMappings.Add("insp_date", "insp_date");
            tableMapping.ColumnMappings.Add("insp_yrsago", "insp_yrsago");
            tableMapping.ColumnMappings.Add("insp_curr", "insp_curr");
            tableMapping.ColumnMappings.Add("fail_yr", "fail_yr");
            tableMapping.ColumnMappings.Add("rulife", "rulife");
            tableMapping.ColumnMappings.Add("rul_flag", "rul_flag");
            tableMapping.ColumnMappings.Add("std_dev", "std_dev");
            tableMapping.ColumnMappings.Add("cof", "cof");
            tableMapping.ColumnMappings.Add("replacecost", "replacecost");
            tableMapping.ColumnMappings.Add("action", "action");
            tableMapping.ColumnMappings.Add("remarks", "remarks");
            tableMapping.ColumnMappings.Add("bpw_seg", "bpw_seg");
            tableMapping.ColumnMappings.Add("apw_seg", "apw_seg");
            tableMapping.ColumnMappings.Add("cbr_seg", "cbr_seg");
            tableMapping.ColumnMappings.Add("std_dev_seg", "std_dev_seg");
            tableMapping.ColumnMappings.Add("fail_yr_seg", "fail_yr_seg");
            tableMapping.ColumnMappings.Add("fail_yr_whole", "fail_yr_whole");
            tableMapping.ColumnMappings.Add("std_dev_whole", "std_dev_whole");
            tableMapping.ColumnMappings.Add("Exceptions", "Exceptions");
            tableMapping.ColumnMappings.Add("ACCUM_RISK_REPLACE_YEAR", "ACCUM_RISK_REPLACE_YEAR");
            tableMapping.ColumnMappings.Add("ACCUM_RISK_INSPECT_YEAR", "ACCUM_RISK_INSPECT_YEAR");
            tableMapping.ColumnMappings.Add("SHAPE", "SHAPE");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RXI.Properties.Settings.Default.REHABConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[12];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"DELETE FROM GIS.REHAB10FTSEGS_SINGLE;

INSERT INTO GIS.REHAB10FTSEGS_SINGLE SELECT * FROM GIS.REHAB10FTSEGS WHERE COMPKEY = @COMPKEY;

SELECT OBJECTID, mlinkid, compkey, usnode, dsnode, linktype, flowtype, length, diamwidth, height, pipeshape, material, instdate, hservstat, bsnrun, old_mlid, cutno, fm, to_, seglen, grade_h5, mat_fmto, seg_count, fail_near, fail_prev, fail_tot, fail_pct, def_pts, def_lin, def_tot, bpw, apw, cbr, insp_date, insp_yrsago, insp_curr, fail_yr, rulife, rul_flag, std_dev, cof, replacecost, action, remarks, bpw_seg, apw_seg, cbr_seg, std_dev_seg, fail_yr_seg, fail_yr_whole, std_dev_whole, Exceptions, ACCUM_RISK_REPLACE_YEAR, ACCUM_RISK_INSPECT_YEAR, SHAPE FROM GIS.REHAB10FTSEGS_SINGLE;";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPKEY", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "compkey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM GIS.[CMOM2Pipes_SINGLE];\r\nDELETE FROM GIS.[CMOM-Trace-SewerSystem_SIN" +
                "GLE];\r\nDELETE FROM GIS.mdl_Links_ac_SINGLE;\r\nDELETE FROM GIS.mdl_pipxp_ac_SINGLE" +
                ";\r\nDELETE FROM GIS.[Street Type_SINGLE];\r\n\r\nINSERT INTO [REHAB].[GIS].[CMOM2Pipe" +
                "s_SINGLE] ([MLinkID]\r\n      ,[DSNode]\r\n      ,[USNode]\r\n      ,[DirectConstructi" +
                "onCost]\r\n      ,[TotalConstructionCost]\r\n      ,[PipelineBuildDuration])SELECT [" +
                "MLinkID]\r\n      ,[DSNode]\r\n      ,[USNode]\r\n      ,[DirectConstructionCost]\r\n   " +
                "   ,[TotalConstructionCost]\r\n      ,[PipelineBuildDuration] FROM [REHAB].[GIS].[" +
                "CMOM2Pipes]\r\n\r\nINSERT INTO [REHAB].[GIS].[CMOM-Trace-SewerSystem_SINGLE]( [LinkI" +
                "D]\r\n      ,[CompKey]\r\n      ,[MLinkID]\r\n      ,[Type])\r\n      SELECT [LinkID]\r\n " +
                "     ,[CompKey]\r\n      ,[MLinkID]\r\n      ,[Type]\r\n      FROM [REHAB].[GIS].[CMOM" +
                "-Trace-SewerSystem]\r\n\r\nINSERT INTO [REHAB].[GIS].[mdl_Links_ac_SINGLE]( [LinkID]" +
                "\r\n      ,[USNode]\r\n      ,[DSNode]\r\n      ,[LinkType]\r\n      ,[PipeFlowType]\r\n  " +
                "    ,[MLinkID]\r\n      ,[SimLinkID]\r\n      ,[CompKey]\r\n      ,[Length]\r\n      ,[D" +
                "iamWidth]\r\n      ,[Height]\r\n      ,[PipeShape]\r\n      ,[Material]\r\n      ,[upsdp" +
                "th]\r\n      ,[dwndpth]\r\n      ,[USIE]\r\n      ,[DSIE]\r\n      ,[AsBuilt]\r\n      ,[I" +
                "nstdate]\r\n      ,[FromX]\r\n      ,[FromY]\r\n      ,[ToX]\r\n      ,[ToY]\r\n      ,[Ro" +
                "ughness]\r\n      ,[LinkReach]\r\n      ,[ReachElement]\r\n      ,[DataFlagSynth]\r\n   " +
                "   ,[DataQual]\r\n      ,[IsSpecLink]\r\n      ,[HServStat]\r\n      ,[TraceVisit]\r\n  " +
                "    ,[DataSource]\r\n      ,[Source]\r\n      ,[IsActive]\r\n      ,[Qdes])\r\n      SEL" +
                "ECT [LinkID]\r\n      ,[USNode]\r\n      ,[DSNode]\r\n      ,[LinkType]\r\n      ,[PipeF" +
                "lowType]\r\n      ,[MLinkID]\r\n      ,[SimLinkID]\r\n      ,[CompKey]\r\n      ,[Length" +
                "]\r\n      ,[DiamWidth]\r\n      ,[Height]\r\n      ,[PipeShape]\r\n      ,[Material]\r\n " +
                "     ,[upsdpth]\r\n      ,[dwndpth]\r\n      ,[USIE]\r\n      ,[DSIE]\r\n      ,[AsBuilt" +
                "]\r\n      ,[Instdate]\r\n      ,[FromX]\r\n      ,[FromY]\r\n      ,[ToX]\r\n      ,[ToY]" +
                "\r\n      ,[Roughness]\r\n      ,[LinkReach]\r\n      ,[ReachElement]\r\n      ,[DataFla" +
                "gSynth]\r\n      ,[DataQual]\r\n      ,[IsSpecLink]\r\n      ,[HServStat]\r\n      ,[Tra" +
                "ceVisit]\r\n      ,[DataSource]\r\n      ,[Source]\r\n      ,[IsActive]\r\n      ,[Qdes]" +
                "\r\n      FROM [REHAB].[GIS].[mdl_Links_ac]\r\n\r\n\r\nINSERT INTO [REHAB].[GIS].[mdl_pi" +
                "pxp_ac_SINGLE]([MLinkID]\r\n      ,[USNode]\r\n      ,[DSNode]\r\n      ,[MLinkID_2]\r\n" +
                "      ,[COMPKEY]\r\n      ,[xWtr]\r\n      ,[xWMinD]\r\n      ,[xWMaxD]\r\n      ,[pWtr]" +
                "\r\n      ,[pWtrMaxD]\r\n      ,[pFt2Wtr]\r\n      ,[xSewer]\r\n      ,[xSwrMinD]\r\n     " +
                " ,[xSwrMaxD]\r\n      ,[pSewer]\r\n      ,[pSwrMaxD]\r\n      ,[pFt2Swr]\r\n      ,[xStr" +
                "t]\r\n      ,[xArt]\r\n      ,[xMJArt]\r\n      ,[xFrwy]\r\n      ,[pStrt]\r\n      ,[pStr" +
                "tTyp]\r\n      ,[pFt2Strt]\r\n      ,[pTraffic]\r\n      ,[uxCLx]\r\n      ,[uxFt2CLx]\r\n" +
                "      ,[dxCLx]\r\n      ,[dxFt2CLx]\r\n      ,[xFiber]\r\n      ,[pFiber]\r\n      ,[pFt" +
                "2Fiber]\r\n      ,[xGas]\r\n      ,[pGas]\r\n      ,[pFt2Gas]\r\n      ,[xRail]\r\n      ," +
                "[pRail]\r\n      ,[pFt2Rail]\r\n      ,[xLRT]\r\n      ,[pLRT]\r\n      ,[pFt2LRT]\r\n    " +
                "  ,[xEmt]\r\n      ,[pEmt]\r\n      ,[pFt2Emt]\r\n      ,[xEzonC]\r\n      ,[xEzonP]\r\n  " +
                "    ,[xFtEzonC]\r\n      ,[xFtEzonP]\r\n      ,[xEzAreaC]\r\n      ,[xEzAreaP]\r\n      " +
                ",[uxMS4]\r\n      ,[uxUIC]\r\n      ,[uDepth]\r\n      ,[dDepth]\r\n      ,[xPipSlope]\r\n" +
                "      ,[gSlope]\r\n      ,[xEcsi]\r\n      ,[xFt2Ecsi]\r\n      ,[xEcsiLen]\r\n      ,[x" +
                "EcsiVol]\r\n      ,[xSchl]\r\n      ,[xFt2Schl]\r\n      ,[xHosp]\r\n      ,[xFt2Hosp]\r\n" +
                "      ,[xPol]\r\n      ,[xFt2Pol]\r\n      ,[xFire]\r\n      ,[xFt2Fire]\r\n      ,[xBld" +
                "g]\r\n      ,[xFt2Bldg]\r\n      ,[xHyd]\r\n      ,[xFt2Hyd]\r\n      ,[HardArea])\r\n    " +
                "  SELECT [MLinkID]\r\n      ,[USNode]\r\n      ,[DSNode]\r\n      ,[MLinkID_2]\r\n      " +
                ",[COMPKEY]\r\n      ,[xWtr]\r\n      ,[xWMinD]\r\n      ,[xWMaxD]\r\n      ,[pWtr]\r\n    " +
                "  ,[pWtrMaxD]\r\n      ,[pFt2Wtr]\r\n      ,[xSewer]\r\n      ,[xSwrMinD]\r\n      ,[xSw" +
                "rMaxD]\r\n      ,[pSewer]\r\n      ,[pSwrMaxD]\r\n      ,[pFt2Swr]\r\n      ,[xStrt]\r\n  " +
                "    ,[xArt]\r\n      ,[xMJArt]\r\n      ,[xFrwy]\r\n      ,[pStrt]\r\n      ,[pStrtTyp]\r" +
                "\n      ,[pFt2Strt]\r\n      ,[pTraffic]\r\n      ,[uxCLx]\r\n      ,[uxFt2CLx]\r\n      " +
                ",[dxCLx]\r\n      ,[dxFt2CLx]\r\n      ,[xFiber]\r\n      ,[pFiber]\r\n      ,[pFt2Fiber" +
                "]\r\n      ,[xGas]\r\n      ,[pGas]\r\n      ,[pFt2Gas]\r\n      ,[xRail]\r\n      ,[pRail" +
                "]\r\n      ,[pFt2Rail]\r\n      ,[xLRT]\r\n      ,[pLRT]\r\n      ,[pFt2LRT]\r\n      ,[xE" +
                "mt]\r\n      ,[pEmt]\r\n      ,[pFt2Emt]\r\n      ,[xEzonC]\r\n      ,[xEzonP]\r\n      ,[" +
                "xFtEzonC]\r\n      ,[xFtEzonP]\r\n      ,[xEzAreaC]\r\n      ,[xEzAreaP]\r\n      ,[uxMS" +
                "4]\r\n      ,[uxUIC]\r\n      ,[uDepth]\r\n      ,[dDepth]\r\n      ,[xPipSlope]\r\n      " +
                ",[gSlope]\r\n      ,[xEcsi]\r\n      ,[xFt2Ecsi]\r\n      ,[xEcsiLen]\r\n      ,[xEcsiVo" +
                "l]\r\n      ,[xSchl]\r\n      ,[xFt2Schl]\r\n      ,[xHosp]\r\n      ,[xFt2Hosp]\r\n      " +
                ",[xPol]\r\n      ,[xFt2Pol]\r\n      ,[xFire]\r\n      ,[xFt2Fire]\r\n      ,[xBldg]\r\n  " +
                "    ,[xFt2Bldg]\r\n      ,[xHyd]\r\n      ,[xFt2Hyd]\r\n      ,[HardArea]\r\n      FROM " +
                "[REHAB].[GIS].[mdl_pipxp_ac]\r\n\r\nINSERT INTO [REHAB].[GIS].[Street Type_SINGLE]( " +
                "[Street_Number]\r\n      ,[Street_Grp])\r\n      SELECT [Street_Number]\r\n      ,[Str" +
                "eet_Grp]\r\n      FROM [REHAB].[GIS].[Street Type]\r\n\r\nDELETE FROM GIS.REHAB10FTSEG" +
                "S_SINGLE;\r\n\r\nINSERT INTO GIS.REHAB10FTSEGS_SINGLE SELECT * FROM GIS.REHAB10FTSEG" +
                "S WHERE COMPKEY = @COMPKEY;\r\n\r\nSELECT OBJECTID, mlinkid, compkey, usnode, dsnode" +
                ", linktype, flowtype, length, diamwidth, height, pipeshape, material, instdate, " +
                "hservstat, bsnrun, old_mlid, cutno, fm, to_, seglen, grade_h5, mat_fmto, seg_cou" +
                "nt, fail_near, fail_prev, fail_tot, fail_pct, def_pts, def_lin, def_tot, bpw, ap" +
                "w, cbr, insp_date, insp_yrsago, insp_curr, fail_yr, rulife, rul_flag, std_dev, c" +
                "of, replacecost, action, remarks, bpw_seg, apw_seg, cbr_seg, std_dev_seg, fail_y" +
                "r_seg, fail_yr_whole, std_dev_whole, Exceptions, ACCUM_RISK_REPLACE_YEAR, ACCUM_" +
                "RISK_INSPECT_YEAR, SHAPE FROM GIS.REHAB10FTSEGS_SINGLE;";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPKEY", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "compkey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT OBJECTID, mlinkid, compkey, usnode, dsnode, linktype, flowtype, length, diamwidth, height, pipeshape, material, instdate, hservstat, bsnrun, old_mlid, cutno, fm, to_, seglen, grade_h5, mat_fmto, seg_count, fail_near, fail_prev, fail_tot, fail_pct, def_pts, def_lin, def_tot, bpw, apw, cbr, insp_date, insp_yrsago, insp_curr, fail_yr, rulife, rul_flag, std_dev, cof, replacecost, action, remarks, bpw_seg, apw_seg, cbr_seg, std_dev_seg, fail_yr_seg, fail_yr_whole, std_dev_whole, Exceptions, ACCUM_RISK_REPLACE_YEAR, ACCUM_RISK_INSPECT_YEAR, SHAPE FROM GIS.REHAB10FTSEGS_SINGLE;";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "GIS.USP_REHAB_1CREATECONVERSIONGIS_SINGLE";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "GIS.USP_REHAB_2IDENTIFYSPOTREPAIRSFASTER_SINGLE";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "GIS.USP_REHAB_3PREPARETRANSFERTABLEGIS_SINGLE";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "GIS.USP_REHAB_4PREPARETRANSFERTABLEWHOLE_SINGLE";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = "GIS.USP_REHAB_5UPDATEFROMTRANSFERTABLE_1_SINGLE";
            this._commandCollection[7].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[8].Connection = this.Connection;
            this._commandCollection[8].CommandText = "GIS.USP_REHAB_6UPDATEFROMTRANSFERTABLE_2_SINGLE";
            this._commandCollection[8].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[8].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[9].Connection = this.Connection;
            this._commandCollection[9].CommandText = "GIS.USP_REHAB_7UPDATEEXCEPTIONS_SINGLE";
            this._commandCollection[9].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[10].Connection = this.Connection;
            this._commandCollection[10].CommandText = "GIS.USP_REHAB_8SegFuture_SINGLE";
            this._commandCollection[10].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[10].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[11].Connection = this.Connection;
            this._commandCollection[11].CommandText = "GIS.USP_REHAB_9HIDEDATATHATGETSUSEDINCORRECTLY_SINGLE";
            this._commandCollection[11].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillByCompkey(REHABDataSet.REHAB10FTSEGSDataTable dataTable, global::System.Nullable<int> COMPKEY) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((COMPKEY.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(COMPKEY.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual REHABDataSet.REHAB10FTSEGSDataTable GetDataByCompkey(global::System.Nullable<int> COMPKEY) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((COMPKEY.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(COMPKEY.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            REHABDataSet.REHAB10FTSEGSDataTable dataTable = new REHABDataSet.REHAB10FTSEGSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByCK(REHABDataSet.REHAB10FTSEGSDataTable dataTable, global::System.Nullable<int> COMPKEY) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((COMPKEY.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(COMPKEY.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual REHABDataSet.REHAB10FTSEGSDataTable GetDataByCK(global::System.Nullable<int> COMPKEY) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((COMPKEY.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(COMPKEY.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            REHABDataSet.REHAB10FTSEGSDataTable dataTable = new REHABDataSet.REHAB10FTSEGSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillRefresh(REHABDataSet.REHAB10FTSEGSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual REHABDataSet.REHAB10FTSEGSDataTable GetRefresh() {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            REHABDataSet.REHAB10FTSEGSDataTable dataTable = new REHABDataSet.REHAB10FTSEGSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int USP_REHAB_1CREATECONVERSIONGIS_SINGLE() {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int USP_REHAB_2IDENTIFYSPOTREPAIRSFASTER_SINGLE() {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int USP_REHAB_3PREPARETRANSFERTABLEGIS_SINGLE() {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[5];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int USP_REHAB_4PREPARETRANSFERTABLEWHOLE_SINGLE() {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[6];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int USP_REHAB_5UPDATEFROMTRANSFERTABLE_1_SINGLE() {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[7];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int USP_REHAB_6UPDATEFROMTRANSFERTABLE_2_SINGLE() {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[8];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int USP_REHAB_7UPDATEEXCEPTIONS_SINGLE() {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[9];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int USP_REHAB_8SegFuture_SINGLE() {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[10];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int USP_REHAB_9HIDEDATATHATGETSUSEDINCORRECTLY_SINGLE() {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[11];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ConstantsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ConstantsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Constants";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("EMLateralRepairCost", "EMLateralRepairCost");
            tableMapping.ColumnMappings.Add("UtilityCrossingCost", "UtilityCrossingCost");
            tableMapping.ColumnMappings.Add("EnvMitigationWidth", "EnvMitigationWidth");
            tableMapping.ColumnMappings.Add("HazMatWidth", "HazMatWidth");
            tableMapping.ColumnMappings.Add("DifficultSlopeMultiplier", "DifficultSlopeMultiplier");
            tableMapping.ColumnMappings.Add("RegulatoryFine", "RegulatoryFine");
            tableMapping.ColumnMappings.Add("BasementFloodingCost", "BasementFloodingCost");
            tableMapping.ColumnMappings.Add("PublicInconvenienceBsmtEvents", "PublicInconvenienceBsmtEvents");
            tableMapping.ColumnMappings.Add("SinkholeResidentialCost", "SinkholeResidentialCost");
            tableMapping.ColumnMappings.Add("SinkholeMajorArterialCost", "SinkholeMajorArterialCost");
            tableMapping.ColumnMappings.Add("SinkholeFreewayCost", "SinkholeFreewayCost");
            tableMapping.ColumnMappings.Add("PublicBldgProximityCost", "PublicBldgProximityCost");
            tableMapping.ColumnMappings.Add("IllicitSpillNearSchool", "IllicitSpillNearSchool");
            tableMapping.ColumnMappings.Add("IllicitSpillFarSchool", "IllicitSpillFarSchool");
            tableMapping.ColumnMappings.Add("MHFloodNearSchoolCost", "MHFloodNearSchoolCost");
            tableMapping.ColumnMappings.Add("MHFloodFarSchoolCost", "MHFloodFarSchoolCost");
            tableMapping.ColumnMappings.Add("MHFloodCleanupStreet", "MHFloodCleanupStreet");
            tableMapping.ColumnMappings.Add("MHFloodCleanupMajArt", "MHFloodCleanupMajArt");
            tableMapping.ColumnMappings.Add("MHFloodCleanupFrwy", "MHFloodCleanupFrwy");
            tableMapping.ColumnMappings.Add("EMRepairFactor", "EMRepairFactor");
            tableMapping.ColumnMappings.Add("RawCostENR", "RawCostENR");
            tableMapping.ColumnMappings.Add("EstimateENR", "EstimateENR");
            tableMapping.ColumnMappings.Add("TrafficImpactCostPerVehiclePerDay", "TrafficImpactCostPerVehiclePerDay");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RXI.Properties.Settings.Default.REHABConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "DELETE FROM GIS.Constants_SINGLE;\r\n\r\nINSERT        \r\nINTO               GIS.Const" +
                "ants_SINGLE(EMLateralRepairCost, UtilityCrossingCost, EnvMitigationWidth, HazMat" +
                "Width, DifficultSlopeMultiplier, RegulatoryFine, BasementFloodingCost, \r\nPublicI" +
                "nconvenienceBsmtEvents, SinkholeResidentialCost, SinkholeMajorArterialCost, Sink" +
                "holeFreewayCost, PublicBldgProximityCost, IllicitSpillNearSchool, IllicitSpillFa" +
                "rSchool, \r\nMHFloodNearSchoolCost, MHFloodFarSchoolCost, MHFloodCleanupStreet, MH" +
                "FloodCleanupMajArt, MHFloodCleanupFrwy, EMRepairFactor, RawCostENR, EstimateENR," +
                " \r\nTrafficImpactCostPerVehiclePerDay)\r\nSELECT        EMLateralRepairCost, Utilit" +
                "yCrossingCost, EnvMitigationWidth, HazMatWidth, DifficultSlopeMultiplier, Regula" +
                "toryFine, BasementFloodingCost, PublicInconvenienceBsmtEvents, \r\n               " +
                "      SinkholeResidentialCost, SinkholeMajorArterialCost, SinkholeFreewayCost, P" +
                "ublicBldgProximityCost, IllicitSpillNearSchool, IllicitSpillFarSchool, MHFloodNe" +
                "arSchoolCost, \r\n                     MHFloodFarSchoolCost, MHFloodCleanupStreet," +
                " MHFloodCleanupMajArt, MHFloodCleanupFrwy, EMRepairFactor, RawCostENR, EstimateE" +
                "NR, TrafficImpactCostPerVehiclePerDay\r\nFROM            GIS.Constants;\r\n         " +
                "                                                                                " +
                "SELECT        ID, EMLateralRepairCost, UtilityCrossingCost, EnvMitigationWidth, " +
                "HazMatWidth, DifficultSlopeMultiplier, RegulatoryFine, BasementFloodingCost, \r\n " +
                "                                                                                " +
                "                                  PublicInconvenienceBsmtEvents, SinkholeResiden" +
                "tialCost, SinkholeMajorArterialCost, SinkholeFreewayCost, PublicBldgProximityCos" +
                "t, IllicitSpillNearSchool, \r\n                                                   " +
                "                                                                IllicitSpillFarS" +
                "chool, MHFloodNearSchoolCost, MHFloodFarSchoolCost, MHFloodCleanupStreet, MHFloo" +
                "dCleanupMajArt, MHFloodCleanupFrwy, EMRepairFactor, \r\n                          " +
                "                                                                                " +
                "         RawCostENR, EstimateENR, TrafficImpactCostPerVehiclePerDay\r\n           " +
                "                                                                               F" +
                "ROM            GIS.Constants_SINGLE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int PrepFill(REHABDataSet.ConstantsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual REHABDataSet.ConstantsDataTable PrepGetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            REHABDataSet.ConstantsDataTable dataTable = new REHABDataSet.ConstantsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(REHABDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(REHABDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(REHABDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(REHABDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591
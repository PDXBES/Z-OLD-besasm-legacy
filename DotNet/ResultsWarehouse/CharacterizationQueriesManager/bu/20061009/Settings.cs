//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace SystemsAnalysis.Characterization {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Settings : DataSet {
        
        private FilesDataTable tableFiles;
        
        private FeatureClassesDataTable tableFeatureClasses;
        
        public Settings() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Settings(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Files"] != null)) {
                    this.Tables.Add(new FilesDataTable(ds.Tables["Files"]));
                }
                if ((ds.Tables["FeatureClasses"] != null)) {
                    this.Tables.Add(new FeatureClassesDataTable(ds.Tables["FeatureClasses"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FilesDataTable Files {
            get {
                return this.tableFiles;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FeatureClassesDataTable FeatureClasses {
            get {
                return this.tableFeatureClasses;
            }
        }
        
        public override DataSet Clone() {
            Settings cln = ((Settings)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Files"] != null)) {
                this.Tables.Add(new FilesDataTable(ds.Tables["Files"]));
            }
            if ((ds.Tables["FeatureClasses"] != null)) {
                this.Tables.Add(new FeatureClassesDataTable(ds.Tables["FeatureClasses"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableFiles = ((FilesDataTable)(this.Tables["Files"]));
            if ((this.tableFiles != null)) {
                this.tableFiles.InitVars();
            }
            this.tableFeatureClasses = ((FeatureClassesDataTable)(this.Tables["FeatureClasses"]));
            if ((this.tableFeatureClasses != null)) {
                this.tableFeatureClasses.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "Settings";
            this.Prefix = "";
            this.Namespace = "SystemsAnalysis.Characterization.Settings.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableFiles = new FilesDataTable();
            this.Tables.Add(this.tableFiles);
            this.tableFeatureClasses = new FeatureClassesDataTable();
            this.Tables.Add(this.tableFeatureClasses);
        }
        
        private bool ShouldSerializeFiles() {
            return false;
        }
        
        private bool ShouldSerializeFeatureClasses() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void FilesRowChangeEventHandler(object sender, FilesRowChangeEvent e);
        
        public delegate void FeatureClassesRowChangeEventHandler(object sender, FeatureClassesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FilesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCharTemplate;
            
            private DataColumn columnOutputDir;
            
            private DataColumn columnPumpStationDB;
            
            private DataColumn columnAGMasterDB;
            
            private DataColumn columnResultsWarehouseDB;
            
            internal FilesDataTable() : 
                    base("Files") {
                this.InitClass();
            }
            
            internal FilesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CharTemplateColumn {
                get {
                    return this.columnCharTemplate;
                }
            }
            
            internal DataColumn OutputDirColumn {
                get {
                    return this.columnOutputDir;
                }
            }
            
            internal DataColumn PumpStationDBColumn {
                get {
                    return this.columnPumpStationDB;
                }
            }
            
            internal DataColumn AGMasterDBColumn {
                get {
                    return this.columnAGMasterDB;
                }
            }
            
            internal DataColumn ResultsWarehouseDBColumn {
                get {
                    return this.columnResultsWarehouseDB;
                }
            }
            
            public FilesRow this[int index] {
                get {
                    return ((FilesRow)(this.Rows[index]));
                }
            }
            
            public event FilesRowChangeEventHandler FilesRowChanged;
            
            public event FilesRowChangeEventHandler FilesRowChanging;
            
            public event FilesRowChangeEventHandler FilesRowDeleted;
            
            public event FilesRowChangeEventHandler FilesRowDeleting;
            
            public void AddFilesRow(FilesRow row) {
                this.Rows.Add(row);
            }
            
            public FilesRow AddFilesRow(string CharTemplate, string OutputDir, string PumpStationDB, string AGMasterDB, string ResultsWarehouseDB) {
                FilesRow rowFilesRow = ((FilesRow)(this.NewRow()));
                rowFilesRow.ItemArray = new object[] {
                        CharTemplate,
                        OutputDir,
                        PumpStationDB,
                        AGMasterDB,
                        ResultsWarehouseDB};
                this.Rows.Add(rowFilesRow);
                return rowFilesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FilesDataTable cln = ((FilesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FilesDataTable();
            }
            
            internal void InitVars() {
                this.columnCharTemplate = this.Columns["CharTemplate"];
                this.columnOutputDir = this.Columns["OutputDir"];
                this.columnPumpStationDB = this.Columns["PumpStationDB"];
                this.columnAGMasterDB = this.Columns["AGMasterDB"];
                this.columnResultsWarehouseDB = this.Columns["ResultsWarehouseDB"];
            }
            
            private void InitClass() {
                this.columnCharTemplate = new DataColumn("CharTemplate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCharTemplate);
                this.columnOutputDir = new DataColumn("OutputDir", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOutputDir);
                this.columnPumpStationDB = new DataColumn("PumpStationDB", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPumpStationDB);
                this.columnAGMasterDB = new DataColumn("AGMasterDB", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAGMasterDB);
                this.columnResultsWarehouseDB = new DataColumn("ResultsWarehouseDB", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnResultsWarehouseDB);
                this.columnCharTemplate.AllowDBNull = false;
                this.columnCharTemplate.DefaultValue = "\\\\Cassio\\Modeling\\Model_Programs\\ResultsWarehouse\\CharacterizationQueriesManager\\" +
"xml\\CharacterizationTable.xml";
                this.columnOutputDir.AllowDBNull = false;
                this.columnOutputDir.DefaultValue = "\\\\Cassio\\Modeling\\Model_Programs\\ResultsWarehouse\\CharacterizationQueriesManager\\" +
"xml\\";
                this.columnPumpStationDB.AllowDBNull = false;
                this.columnPumpStationDB.DefaultValue = "\\\\cassio\\modeling\\AGMaster21\\Pumps\\PumpStationDB.mdb";
                this.columnAGMasterDB.AllowDBNull = false;
                this.columnAGMasterDB.DefaultValue = "\\\\CASSIO\\Modeling\\AGMaster21\\AgMaster21.mdb";
                this.columnResultsWarehouseDB.AllowDBNull = false;
                this.columnResultsWarehouseDB.DefaultValue = "\\\\Cassio\\systems_planning\\SPCommon\\Char\\Hydraulics\\ModelResultsWarehouse.mdb";
            }
            
            public FilesRow NewFilesRow() {
                return ((FilesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FilesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FilesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FilesRowChanged != null)) {
                    this.FilesRowChanged(this, new FilesRowChangeEvent(((FilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FilesRowChanging != null)) {
                    this.FilesRowChanging(this, new FilesRowChangeEvent(((FilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FilesRowDeleted != null)) {
                    this.FilesRowDeleted(this, new FilesRowChangeEvent(((FilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FilesRowDeleting != null)) {
                    this.FilesRowDeleting(this, new FilesRowChangeEvent(((FilesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFilesRow(FilesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FilesRow : DataRow {
            
            private FilesDataTable tableFiles;
            
            internal FilesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFiles = ((FilesDataTable)(this.Table));
            }
            
            public string CharTemplate {
                get {
                    return ((string)(this[this.tableFiles.CharTemplateColumn]));
                }
                set {
                    this[this.tableFiles.CharTemplateColumn] = value;
                }
            }
            
            public string OutputDir {
                get {
                    return ((string)(this[this.tableFiles.OutputDirColumn]));
                }
                set {
                    this[this.tableFiles.OutputDirColumn] = value;
                }
            }
            
            public string PumpStationDB {
                get {
                    return ((string)(this[this.tableFiles.PumpStationDBColumn]));
                }
                set {
                    this[this.tableFiles.PumpStationDBColumn] = value;
                }
            }
            
            public string AGMasterDB {
                get {
                    return ((string)(this[this.tableFiles.AGMasterDBColumn]));
                }
                set {
                    this[this.tableFiles.AGMasterDBColumn] = value;
                }
            }
            
            public string ResultsWarehouseDB {
                get {
                    return ((string)(this[this.tableFiles.ResultsWarehouseDBColumn]));
                }
                set {
                    this[this.tableFiles.ResultsWarehouseDBColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FilesRowChangeEvent : EventArgs {
            
            private FilesRow eventRow;
            
            private DataRowAction eventAction;
            
            public FilesRowChangeEvent(FilesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FilesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FeatureClassesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnMstLinks;
            
            private DataColumn columnMstSSC;
            
            private DataColumn columnUICDB;
            
            internal FeatureClassesDataTable() : 
                    base("FeatureClasses") {
                this.InitClass();
            }
            
            internal FeatureClassesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn MstLinksColumn {
                get {
                    return this.columnMstLinks;
                }
            }
            
            internal DataColumn MstSSCColumn {
                get {
                    return this.columnMstSSC;
                }
            }
            
            internal DataColumn UICDBColumn {
                get {
                    return this.columnUICDB;
                }
            }
            
            public FeatureClassesRow this[int index] {
                get {
                    return ((FeatureClassesRow)(this.Rows[index]));
                }
            }
            
            public event FeatureClassesRowChangeEventHandler FeatureClassesRowChanged;
            
            public event FeatureClassesRowChangeEventHandler FeatureClassesRowChanging;
            
            public event FeatureClassesRowChangeEventHandler FeatureClassesRowDeleted;
            
            public event FeatureClassesRowChangeEventHandler FeatureClassesRowDeleting;
            
            public void AddFeatureClassesRow(FeatureClassesRow row) {
                this.Rows.Add(row);
            }
            
            public FeatureClassesRow AddFeatureClassesRow(string MstLinks, string MstSSC, string UICDB) {
                FeatureClassesRow rowFeatureClassesRow = ((FeatureClassesRow)(this.NewRow()));
                rowFeatureClassesRow.ItemArray = new object[] {
                        MstLinks,
                        MstSSC,
                        UICDB};
                this.Rows.Add(rowFeatureClassesRow);
                return rowFeatureClassesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FeatureClassesDataTable cln = ((FeatureClassesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FeatureClassesDataTable();
            }
            
            internal void InitVars() {
                this.columnMstLinks = this.Columns["MstLinks"];
                this.columnMstSSC = this.Columns["MstSSC"];
                this.columnUICDB = this.Columns["UICDB"];
            }
            
            private void InitClass() {
                this.columnMstLinks = new DataColumn("MstLinks", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMstLinks);
                this.columnMstSSC = new DataColumn("MstSSC", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMstSSC);
                this.columnUICDB = new DataColumn("UICDB", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUICDB);
            }
            
            public FeatureClassesRow NewFeatureClassesRow() {
                return ((FeatureClassesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FeatureClassesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FeatureClassesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FeatureClassesRowChanged != null)) {
                    this.FeatureClassesRowChanged(this, new FeatureClassesRowChangeEvent(((FeatureClassesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FeatureClassesRowChanging != null)) {
                    this.FeatureClassesRowChanging(this, new FeatureClassesRowChangeEvent(((FeatureClassesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FeatureClassesRowDeleted != null)) {
                    this.FeatureClassesRowDeleted(this, new FeatureClassesRowChangeEvent(((FeatureClassesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FeatureClassesRowDeleting != null)) {
                    this.FeatureClassesRowDeleting(this, new FeatureClassesRowChangeEvent(((FeatureClassesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFeatureClassesRow(FeatureClassesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FeatureClassesRow : DataRow {
            
            private FeatureClassesDataTable tableFeatureClasses;
            
            internal FeatureClassesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFeatureClasses = ((FeatureClassesDataTable)(this.Table));
            }
            
            public string MstLinks {
                get {
                    try {
                        return ((string)(this[this.tableFeatureClasses.MstLinksColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeatureClasses.MstLinksColumn] = value;
                }
            }
            
            public string MstSSC {
                get {
                    try {
                        return ((string)(this[this.tableFeatureClasses.MstSSCColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeatureClasses.MstSSCColumn] = value;
                }
            }
            
            public string UICDB {
                get {
                    try {
                        return ((string)(this[this.tableFeatureClasses.UICDBColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeatureClasses.UICDBColumn] = value;
                }
            }
            
            public bool IsMstLinksNull() {
                return this.IsNull(this.tableFeatureClasses.MstLinksColumn);
            }
            
            public void SetMstLinksNull() {
                this[this.tableFeatureClasses.MstLinksColumn] = System.Convert.DBNull;
            }
            
            public bool IsMstSSCNull() {
                return this.IsNull(this.tableFeatureClasses.MstSSCColumn);
            }
            
            public void SetMstSSCNull() {
                this[this.tableFeatureClasses.MstSSCColumn] = System.Convert.DBNull;
            }
            
            public bool IsUICDBNull() {
                return this.IsNull(this.tableFeatureClasses.UICDBColumn);
            }
            
            public void SetUICDBNull() {
                this[this.tableFeatureClasses.UICDBColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FeatureClassesRowChangeEvent : EventArgs {
            
            private FeatureClassesRow eventRow;
            
            private DataRowAction eventAction;
            
            public FeatureClassesRowChangeEvent(FeatureClassesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FeatureClassesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

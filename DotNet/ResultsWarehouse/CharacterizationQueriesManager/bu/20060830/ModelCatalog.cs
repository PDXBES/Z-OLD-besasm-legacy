//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace CharacterizationQueriesManager {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ModelCatalog : DataSet {
        
        private DSCHydraulicsDataTable tableDSCHydraulics;
        
        private StormCatalogDataTable tableStormCatalog;
        
        private LinkHydraulicsDataTable tableLinkHydraulics;
        
        private ModelCatalogDataTable tableModelCatalog;
        
        private ModelScenarioDataTable tableModelScenario;
        
        private NodeHydraulicsDataTable tableNodeHydraulics;
        
        private DataRelation relationStormCatalogModelScenario;
        
        private DataRelation relationModelScenarioModelCatalog;
        
        private DataRelation relationModelCatalogDSCHydraulics;
        
        private DataRelation relationModelCatalogNodeHydraulics;
        
        private DataRelation relationModelCatalogLinkHydraulics;
        
        private DataRelation relationModelScenarioDSCHydraulics;
        
        private DataRelation relationModelScenarioNodeHydraulics;
        
        private DataRelation relationModelScenarioLinkHydraulics;
        
        public ModelCatalog() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ModelCatalog(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DSCHydraulics"] != null)) {
                    this.Tables.Add(new DSCHydraulicsDataTable(ds.Tables["DSCHydraulics"]));
                }
                if ((ds.Tables["StormCatalog"] != null)) {
                    this.Tables.Add(new StormCatalogDataTable(ds.Tables["StormCatalog"]));
                }
                if ((ds.Tables["LinkHydraulics"] != null)) {
                    this.Tables.Add(new LinkHydraulicsDataTable(ds.Tables["LinkHydraulics"]));
                }
                if ((ds.Tables["ModelCatalog"] != null)) {
                    this.Tables.Add(new ModelCatalogDataTable(ds.Tables["ModelCatalog"]));
                }
                if ((ds.Tables["ModelScenario"] != null)) {
                    this.Tables.Add(new ModelScenarioDataTable(ds.Tables["ModelScenario"]));
                }
                if ((ds.Tables["NodeHydraulics"] != null)) {
                    this.Tables.Add(new NodeHydraulicsDataTable(ds.Tables["NodeHydraulics"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DSCHydraulicsDataTable DSCHydraulics {
            get {
                return this.tableDSCHydraulics;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StormCatalogDataTable StormCatalog {
            get {
                return this.tableStormCatalog;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LinkHydraulicsDataTable LinkHydraulics {
            get {
                return this.tableLinkHydraulics;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ModelCatalogDataTable ModelCatalog {
            get {
                return this.tableModelCatalog;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ModelScenarioDataTable ModelScenario {
            get {
                return this.tableModelScenario;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NodeHydraulicsDataTable NodeHydraulics {
            get {
                return this.tableNodeHydraulics;
            }
        }
        
        public override DataSet Clone() {
            ModelCatalog cln = ((ModelCatalog)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["DSCHydraulics"] != null)) {
                this.Tables.Add(new DSCHydraulicsDataTable(ds.Tables["DSCHydraulics"]));
            }
            if ((ds.Tables["StormCatalog"] != null)) {
                this.Tables.Add(new StormCatalogDataTable(ds.Tables["StormCatalog"]));
            }
            if ((ds.Tables["LinkHydraulics"] != null)) {
                this.Tables.Add(new LinkHydraulicsDataTable(ds.Tables["LinkHydraulics"]));
            }
            if ((ds.Tables["ModelCatalog"] != null)) {
                this.Tables.Add(new ModelCatalogDataTable(ds.Tables["ModelCatalog"]));
            }
            if ((ds.Tables["ModelScenario"] != null)) {
                this.Tables.Add(new ModelScenarioDataTable(ds.Tables["ModelScenario"]));
            }
            if ((ds.Tables["NodeHydraulics"] != null)) {
                this.Tables.Add(new NodeHydraulicsDataTable(ds.Tables["NodeHydraulics"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableDSCHydraulics = ((DSCHydraulicsDataTable)(this.Tables["DSCHydraulics"]));
            if ((this.tableDSCHydraulics != null)) {
                this.tableDSCHydraulics.InitVars();
            }
            this.tableStormCatalog = ((StormCatalogDataTable)(this.Tables["StormCatalog"]));
            if ((this.tableStormCatalog != null)) {
                this.tableStormCatalog.InitVars();
            }
            this.tableLinkHydraulics = ((LinkHydraulicsDataTable)(this.Tables["LinkHydraulics"]));
            if ((this.tableLinkHydraulics != null)) {
                this.tableLinkHydraulics.InitVars();
            }
            this.tableModelCatalog = ((ModelCatalogDataTable)(this.Tables["ModelCatalog"]));
            if ((this.tableModelCatalog != null)) {
                this.tableModelCatalog.InitVars();
            }
            this.tableModelScenario = ((ModelScenarioDataTable)(this.Tables["ModelScenario"]));
            if ((this.tableModelScenario != null)) {
                this.tableModelScenario.InitVars();
            }
            this.tableNodeHydraulics = ((NodeHydraulicsDataTable)(this.Tables["NodeHydraulics"]));
            if ((this.tableNodeHydraulics != null)) {
                this.tableNodeHydraulics.InitVars();
            }
            this.relationStormCatalogModelScenario = this.Relations["StormCatalogModelScenario"];
            this.relationModelScenarioModelCatalog = this.Relations["ModelScenarioModelCatalog"];
            this.relationModelCatalogDSCHydraulics = this.Relations["ModelCatalogDSCHydraulics"];
            this.relationModelCatalogNodeHydraulics = this.Relations["ModelCatalogNodeHydraulics"];
            this.relationModelCatalogLinkHydraulics = this.Relations["ModelCatalogLinkHydraulics"];
            this.relationModelScenarioDSCHydraulics = this.Relations["ModelScenarioDSCHydraulics"];
            this.relationModelScenarioNodeHydraulics = this.Relations["ModelScenarioNodeHydraulics"];
            this.relationModelScenarioLinkHydraulics = this.Relations["ModelScenarioLinkHydraulics"];
        }
        
        private void InitClass() {
            this.DataSetName = "ModelCatalog";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ModelCatalog.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableDSCHydraulics = new DSCHydraulicsDataTable();
            this.Tables.Add(this.tableDSCHydraulics);
            this.tableStormCatalog = new StormCatalogDataTable();
            this.Tables.Add(this.tableStormCatalog);
            this.tableLinkHydraulics = new LinkHydraulicsDataTable();
            this.Tables.Add(this.tableLinkHydraulics);
            this.tableModelCatalog = new ModelCatalogDataTable();
            this.Tables.Add(this.tableModelCatalog);
            this.tableModelScenario = new ModelScenarioDataTable();
            this.Tables.Add(this.tableModelScenario);
            this.tableNodeHydraulics = new NodeHydraulicsDataTable();
            this.Tables.Add(this.tableNodeHydraulics);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("ModelCatalogDSCHydraulics", new DataColumn[] {
                        this.tableModelCatalog.modelIDColumn}, new DataColumn[] {
                        this.tableDSCHydraulics.modelIDColumn});
            this.tableDSCHydraulics.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ModelScenarioDSCHydraulics", new DataColumn[] {
                        this.tableModelScenario.scenarioIDColumn}, new DataColumn[] {
                        this.tableDSCHydraulics.scenarioIDColumn});
            this.tableDSCHydraulics.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ModelCatalogLinkHydraulics", new DataColumn[] {
                        this.tableModelCatalog.modelIDColumn}, new DataColumn[] {
                        this.tableLinkHydraulics.modelIDColumn});
            this.tableLinkHydraulics.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ModelScenarioLinkHydraulics", new DataColumn[] {
                        this.tableModelScenario.scenarioIDColumn}, new DataColumn[] {
                        this.tableLinkHydraulics.scenarioIDColumn});
            this.tableLinkHydraulics.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ModelScenarioModelCatalog", new DataColumn[] {
                        this.tableModelScenario.scenarioIDColumn}, new DataColumn[] {
                        this.tableModelCatalog.scenarioIDColumn});
            this.tableModelCatalog.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StormCatalogModelScenario", new DataColumn[] {
                        this.tableStormCatalog.stormIDColumn}, new DataColumn[] {
                        this.tableModelScenario.stormIDColumn});
            this.tableModelScenario.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ModelCatalogNodeHydraulics", new DataColumn[] {
                        this.tableModelCatalog.modelIDColumn}, new DataColumn[] {
                        this.tableNodeHydraulics.modelIDColumn});
            this.tableNodeHydraulics.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ModelScenarioNodeHydraulics", new DataColumn[] {
                        this.tableModelScenario.scenarioIDColumn}, new DataColumn[] {
                        this.tableNodeHydraulics.scenarioIDColumn});
            this.tableNodeHydraulics.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationStormCatalogModelScenario = new DataRelation("StormCatalogModelScenario", new DataColumn[] {
                        this.tableStormCatalog.stormIDColumn}, new DataColumn[] {
                        this.tableModelScenario.stormIDColumn}, false);
            this.Relations.Add(this.relationStormCatalogModelScenario);
            this.relationModelScenarioModelCatalog = new DataRelation("ModelScenarioModelCatalog", new DataColumn[] {
                        this.tableModelScenario.scenarioIDColumn}, new DataColumn[] {
                        this.tableModelCatalog.scenarioIDColumn}, false);
            this.Relations.Add(this.relationModelScenarioModelCatalog);
            this.relationModelCatalogDSCHydraulics = new DataRelation("ModelCatalogDSCHydraulics", new DataColumn[] {
                        this.tableModelCatalog.modelIDColumn}, new DataColumn[] {
                        this.tableDSCHydraulics.modelIDColumn}, false);
            this.Relations.Add(this.relationModelCatalogDSCHydraulics);
            this.relationModelCatalogNodeHydraulics = new DataRelation("ModelCatalogNodeHydraulics", new DataColumn[] {
                        this.tableModelCatalog.modelIDColumn}, new DataColumn[] {
                        this.tableNodeHydraulics.modelIDColumn}, false);
            this.Relations.Add(this.relationModelCatalogNodeHydraulics);
            this.relationModelCatalogLinkHydraulics = new DataRelation("ModelCatalogLinkHydraulics", new DataColumn[] {
                        this.tableModelCatalog.modelIDColumn}, new DataColumn[] {
                        this.tableLinkHydraulics.modelIDColumn}, false);
            this.Relations.Add(this.relationModelCatalogLinkHydraulics);
            this.relationModelScenarioDSCHydraulics = new DataRelation("ModelScenarioDSCHydraulics", new DataColumn[] {
                        this.tableModelScenario.scenarioIDColumn}, new DataColumn[] {
                        this.tableDSCHydraulics.scenarioIDColumn}, false);
            this.Relations.Add(this.relationModelScenarioDSCHydraulics);
            this.relationModelScenarioNodeHydraulics = new DataRelation("ModelScenarioNodeHydraulics", new DataColumn[] {
                        this.tableModelScenario.scenarioIDColumn}, new DataColumn[] {
                        this.tableNodeHydraulics.scenarioIDColumn}, false);
            this.Relations.Add(this.relationModelScenarioNodeHydraulics);
            this.relationModelScenarioLinkHydraulics = new DataRelation("ModelScenarioLinkHydraulics", new DataColumn[] {
                        this.tableModelScenario.scenarioIDColumn}, new DataColumn[] {
                        this.tableLinkHydraulics.scenarioIDColumn}, false);
            this.Relations.Add(this.relationModelScenarioLinkHydraulics);
        }
        
        private bool ShouldSerializeDSCHydraulics() {
            return false;
        }
        
        private bool ShouldSerializeStormCatalog() {
            return false;
        }
        
        private bool ShouldSerializeLinkHydraulics() {
            return false;
        }
        
        private bool ShouldSerializeModelCatalog() {
            return false;
        }
        
        private bool ShouldSerializeModelScenario() {
            return false;
        }
        
        private bool ShouldSerializeNodeHydraulics() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void DSCHydraulicsRowChangeEventHandler(object sender, DSCHydraulicsRowChangeEvent e);
        
        public delegate void StormCatalogRowChangeEventHandler(object sender, StormCatalogRowChangeEvent e);
        
        public delegate void LinkHydraulicsRowChangeEventHandler(object sender, LinkHydraulicsRowChangeEvent e);
        
        public delegate void ModelCatalogRowChangeEventHandler(object sender, ModelCatalogRowChangeEvent e);
        
        public delegate void ModelScenarioRowChangeEventHandler(object sender, ModelScenarioRowChangeEvent e);
        
        public delegate void NodeHydraulicsRowChangeEventHandler(object sender, NodeHydraulicsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DSCHydraulicsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDSCHydraulicsID;
            
            private DataColumn columnscenarioID;
            
            private DataColumn columnDSCID;
            
            private DataColumn columnmodelID;
            
            private DataColumn columnHGL;
            
            private DataColumn columndeltaHGL;
            
            private DataColumn columnsurcharge;
            
            internal DSCHydraulicsDataTable() : 
                    base("DSCHydraulics") {
                this.InitClass();
            }
            
            internal DSCHydraulicsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DSCHydraulicsIDColumn {
                get {
                    return this.columnDSCHydraulicsID;
                }
            }
            
            internal DataColumn scenarioIDColumn {
                get {
                    return this.columnscenarioID;
                }
            }
            
            internal DataColumn DSCIDColumn {
                get {
                    return this.columnDSCID;
                }
            }
            
            internal DataColumn modelIDColumn {
                get {
                    return this.columnmodelID;
                }
            }
            
            internal DataColumn HGLColumn {
                get {
                    return this.columnHGL;
                }
            }
            
            internal DataColumn deltaHGLColumn {
                get {
                    return this.columndeltaHGL;
                }
            }
            
            internal DataColumn surchargeColumn {
                get {
                    return this.columnsurcharge;
                }
            }
            
            public DSCHydraulicsRow this[int index] {
                get {
                    return ((DSCHydraulicsRow)(this.Rows[index]));
                }
            }
            
            public event DSCHydraulicsRowChangeEventHandler DSCHydraulicsRowChanged;
            
            public event DSCHydraulicsRowChangeEventHandler DSCHydraulicsRowChanging;
            
            public event DSCHydraulicsRowChangeEventHandler DSCHydraulicsRowDeleted;
            
            public event DSCHydraulicsRowChangeEventHandler DSCHydraulicsRowDeleting;
            
            public void AddDSCHydraulicsRow(DSCHydraulicsRow row) {
                this.Rows.Add(row);
            }
            
            public DSCHydraulicsRow AddDSCHydraulicsRow(ModelScenarioRow parentModelScenarioRowByModelScenarioDSCHydraulics, int DSCID, ModelCatalogRow parentModelCatalogRowByModelCatalogDSCHydraulics, System.Double HGL, System.Double deltaHGL, System.Double surcharge) {
                DSCHydraulicsRow rowDSCHydraulicsRow = ((DSCHydraulicsRow)(this.NewRow()));
                rowDSCHydraulicsRow.ItemArray = new object[] {
                        null,
                        parentModelScenarioRowByModelScenarioDSCHydraulics[0],
                        DSCID,
                        parentModelCatalogRowByModelCatalogDSCHydraulics[0],
                        HGL,
                        deltaHGL,
                        surcharge};
                this.Rows.Add(rowDSCHydraulicsRow);
                return rowDSCHydraulicsRow;
            }
            
            public DSCHydraulicsRow FindByDSCHydraulicsID(int DSCHydraulicsID) {
                return ((DSCHydraulicsRow)(this.Rows.Find(new object[] {
                            DSCHydraulicsID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DSCHydraulicsDataTable cln = ((DSCHydraulicsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DSCHydraulicsDataTable();
            }
            
            internal void InitVars() {
                this.columnDSCHydraulicsID = this.Columns["DSCHydraulicsID"];
                this.columnscenarioID = this.Columns["scenarioID"];
                this.columnDSCID = this.Columns["DSCID"];
                this.columnmodelID = this.Columns["modelID"];
                this.columnHGL = this.Columns["HGL"];
                this.columndeltaHGL = this.Columns["deltaHGL"];
                this.columnsurcharge = this.Columns["surcharge"];
            }
            
            private void InitClass() {
                this.columnDSCHydraulicsID = new DataColumn("DSCHydraulicsID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDSCHydraulicsID);
                this.columnscenarioID = new DataColumn("scenarioID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnscenarioID);
                this.columnDSCID = new DataColumn("DSCID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDSCID);
                this.columnmodelID = new DataColumn("modelID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmodelID);
                this.columnHGL = new DataColumn("HGL", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHGL);
                this.columndeltaHGL = new DataColumn("deltaHGL", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndeltaHGL);
                this.columnsurcharge = new DataColumn("surcharge", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsurcharge);
                this.Constraints.Add(new UniqueConstraint("ModelCatalogKey1", new DataColumn[] {
                                this.columnDSCHydraulicsID}, true));
                this.columnDSCHydraulicsID.AutoIncrement = true;
                this.columnDSCHydraulicsID.AllowDBNull = false;
                this.columnDSCHydraulicsID.Unique = true;
            }
            
            public DSCHydraulicsRow NewDSCHydraulicsRow() {
                return ((DSCHydraulicsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DSCHydraulicsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DSCHydraulicsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DSCHydraulicsRowChanged != null)) {
                    this.DSCHydraulicsRowChanged(this, new DSCHydraulicsRowChangeEvent(((DSCHydraulicsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DSCHydraulicsRowChanging != null)) {
                    this.DSCHydraulicsRowChanging(this, new DSCHydraulicsRowChangeEvent(((DSCHydraulicsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DSCHydraulicsRowDeleted != null)) {
                    this.DSCHydraulicsRowDeleted(this, new DSCHydraulicsRowChangeEvent(((DSCHydraulicsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DSCHydraulicsRowDeleting != null)) {
                    this.DSCHydraulicsRowDeleting(this, new DSCHydraulicsRowChangeEvent(((DSCHydraulicsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDSCHydraulicsRow(DSCHydraulicsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DSCHydraulicsRow : DataRow {
            
            private DSCHydraulicsDataTable tableDSCHydraulics;
            
            internal DSCHydraulicsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDSCHydraulics = ((DSCHydraulicsDataTable)(this.Table));
            }
            
            public int DSCHydraulicsID {
                get {
                    return ((int)(this[this.tableDSCHydraulics.DSCHydraulicsIDColumn]));
                }
                set {
                    this[this.tableDSCHydraulics.DSCHydraulicsIDColumn] = value;
                }
            }
            
            public int scenarioID {
                get {
                    try {
                        return ((int)(this[this.tableDSCHydraulics.scenarioIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCHydraulics.scenarioIDColumn] = value;
                }
            }
            
            public int DSCID {
                get {
                    try {
                        return ((int)(this[this.tableDSCHydraulics.DSCIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCHydraulics.DSCIDColumn] = value;
                }
            }
            
            public int modelID {
                get {
                    try {
                        return ((int)(this[this.tableDSCHydraulics.modelIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCHydraulics.modelIDColumn] = value;
                }
            }
            
            public System.Double HGL {
                get {
                    try {
                        return ((System.Double)(this[this.tableDSCHydraulics.HGLColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCHydraulics.HGLColumn] = value;
                }
            }
            
            public System.Double deltaHGL {
                get {
                    try {
                        return ((System.Double)(this[this.tableDSCHydraulics.deltaHGLColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCHydraulics.deltaHGLColumn] = value;
                }
            }
            
            public System.Double surcharge {
                get {
                    try {
                        return ((System.Double)(this[this.tableDSCHydraulics.surchargeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCHydraulics.surchargeColumn] = value;
                }
            }
            
            public ModelCatalogRow ModelCatalogRow {
                get {
                    return ((ModelCatalogRow)(this.GetParentRow(this.Table.ParentRelations["ModelCatalogDSCHydraulics"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ModelCatalogDSCHydraulics"]);
                }
            }
            
            public ModelScenarioRow ModelScenarioRow {
                get {
                    return ((ModelScenarioRow)(this.GetParentRow(this.Table.ParentRelations["ModelScenarioDSCHydraulics"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ModelScenarioDSCHydraulics"]);
                }
            }
            
            public bool IsscenarioIDNull() {
                return this.IsNull(this.tableDSCHydraulics.scenarioIDColumn);
            }
            
            public void SetscenarioIDNull() {
                this[this.tableDSCHydraulics.scenarioIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsDSCIDNull() {
                return this.IsNull(this.tableDSCHydraulics.DSCIDColumn);
            }
            
            public void SetDSCIDNull() {
                this[this.tableDSCHydraulics.DSCIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsmodelIDNull() {
                return this.IsNull(this.tableDSCHydraulics.modelIDColumn);
            }
            
            public void SetmodelIDNull() {
                this[this.tableDSCHydraulics.modelIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsHGLNull() {
                return this.IsNull(this.tableDSCHydraulics.HGLColumn);
            }
            
            public void SetHGLNull() {
                this[this.tableDSCHydraulics.HGLColumn] = System.Convert.DBNull;
            }
            
            public bool IsdeltaHGLNull() {
                return this.IsNull(this.tableDSCHydraulics.deltaHGLColumn);
            }
            
            public void SetdeltaHGLNull() {
                this[this.tableDSCHydraulics.deltaHGLColumn] = System.Convert.DBNull;
            }
            
            public bool IssurchargeNull() {
                return this.IsNull(this.tableDSCHydraulics.surchargeColumn);
            }
            
            public void SetsurchargeNull() {
                this[this.tableDSCHydraulics.surchargeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DSCHydraulicsRowChangeEvent : EventArgs {
            
            private DSCHydraulicsRow eventRow;
            
            private DataRowAction eventAction;
            
            public DSCHydraulicsRowChangeEvent(DSCHydraulicsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DSCHydraulicsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StormCatalogDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnstormID;
            
            private DataColumn columnstormName;
            
            private DataColumn columnrecurrenceInterval;
            
            private DataColumn columnduration;
            
            private DataColumn columninterfaceFile;
            
            private DataColumn columnstartDate;
            
            private DataColumn columndescription;
            
            private DataColumn columntimeStep;
            
            internal StormCatalogDataTable() : 
                    base("StormCatalog") {
                this.InitClass();
            }
            
            internal StormCatalogDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn stormIDColumn {
                get {
                    return this.columnstormID;
                }
            }
            
            internal DataColumn stormNameColumn {
                get {
                    return this.columnstormName;
                }
            }
            
            internal DataColumn recurrenceIntervalColumn {
                get {
                    return this.columnrecurrenceInterval;
                }
            }
            
            internal DataColumn durationColumn {
                get {
                    return this.columnduration;
                }
            }
            
            internal DataColumn interfaceFileColumn {
                get {
                    return this.columninterfaceFile;
                }
            }
            
            internal DataColumn startDateColumn {
                get {
                    return this.columnstartDate;
                }
            }
            
            internal DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            internal DataColumn timeStepColumn {
                get {
                    return this.columntimeStep;
                }
            }
            
            public StormCatalogRow this[int index] {
                get {
                    return ((StormCatalogRow)(this.Rows[index]));
                }
            }
            
            public event StormCatalogRowChangeEventHandler StormCatalogRowChanged;
            
            public event StormCatalogRowChangeEventHandler StormCatalogRowChanging;
            
            public event StormCatalogRowChangeEventHandler StormCatalogRowDeleted;
            
            public event StormCatalogRowChangeEventHandler StormCatalogRowDeleting;
            
            public void AddStormCatalogRow(StormCatalogRow row) {
                this.Rows.Add(row);
            }
            
            public StormCatalogRow AddStormCatalogRow(string stormName, int recurrenceInterval, int duration, string interfaceFile, System.DateTime startDate, string description, int timeStep) {
                StormCatalogRow rowStormCatalogRow = ((StormCatalogRow)(this.NewRow()));
                rowStormCatalogRow.ItemArray = new object[] {
                        null,
                        stormName,
                        recurrenceInterval,
                        duration,
                        interfaceFile,
                        startDate,
                        description,
                        timeStep};
                this.Rows.Add(rowStormCatalogRow);
                return rowStormCatalogRow;
            }
            
            public StormCatalogRow FindBystormID(int stormID) {
                return ((StormCatalogRow)(this.Rows.Find(new object[] {
                            stormID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                StormCatalogDataTable cln = ((StormCatalogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new StormCatalogDataTable();
            }
            
            internal void InitVars() {
                this.columnstormID = this.Columns["stormID"];
                this.columnstormName = this.Columns["stormName"];
                this.columnrecurrenceInterval = this.Columns["recurrenceInterval"];
                this.columnduration = this.Columns["duration"];
                this.columninterfaceFile = this.Columns["interfaceFile"];
                this.columnstartDate = this.Columns["startDate"];
                this.columndescription = this.Columns["description"];
                this.columntimeStep = this.Columns["timeStep"];
            }
            
            private void InitClass() {
                this.columnstormID = new DataColumn("stormID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstormID);
                this.columnstormName = new DataColumn("stormName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstormName);
                this.columnrecurrenceInterval = new DataColumn("recurrenceInterval", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrecurrenceInterval);
                this.columnduration = new DataColumn("duration", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnduration);
                this.columninterfaceFile = new DataColumn("interfaceFile", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columninterfaceFile);
                this.columnstartDate = new DataColumn("startDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstartDate);
                this.columndescription = new DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescription);
                this.columntimeStep = new DataColumn("timeStep", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntimeStep);
                this.Constraints.Add(new UniqueConstraint("ModelCatalogKey2", new DataColumn[] {
                                this.columnstormID}, true));
                this.columnstormID.AutoIncrement = true;
                this.columnstormID.AllowDBNull = false;
                this.columnstormID.Unique = true;
            }
            
            public StormCatalogRow NewStormCatalogRow() {
                return ((StormCatalogRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new StormCatalogRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(StormCatalogRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StormCatalogRowChanged != null)) {
                    this.StormCatalogRowChanged(this, new StormCatalogRowChangeEvent(((StormCatalogRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StormCatalogRowChanging != null)) {
                    this.StormCatalogRowChanging(this, new StormCatalogRowChangeEvent(((StormCatalogRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StormCatalogRowDeleted != null)) {
                    this.StormCatalogRowDeleted(this, new StormCatalogRowChangeEvent(((StormCatalogRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StormCatalogRowDeleting != null)) {
                    this.StormCatalogRowDeleting(this, new StormCatalogRowChangeEvent(((StormCatalogRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveStormCatalogRow(StormCatalogRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StormCatalogRow : DataRow {
            
            private StormCatalogDataTable tableStormCatalog;
            
            internal StormCatalogRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableStormCatalog = ((StormCatalogDataTable)(this.Table));
            }
            
            public int stormID {
                get {
                    return ((int)(this[this.tableStormCatalog.stormIDColumn]));
                }
                set {
                    this[this.tableStormCatalog.stormIDColumn] = value;
                }
            }
            
            public string stormName {
                get {
                    try {
                        return ((string)(this[this.tableStormCatalog.stormNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStormCatalog.stormNameColumn] = value;
                }
            }
            
            public int recurrenceInterval {
                get {
                    try {
                        return ((int)(this[this.tableStormCatalog.recurrenceIntervalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStormCatalog.recurrenceIntervalColumn] = value;
                }
            }
            
            public int duration {
                get {
                    try {
                        return ((int)(this[this.tableStormCatalog.durationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStormCatalog.durationColumn] = value;
                }
            }
            
            public string interfaceFile {
                get {
                    try {
                        return ((string)(this[this.tableStormCatalog.interfaceFileColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStormCatalog.interfaceFileColumn] = value;
                }
            }
            
            public System.DateTime startDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableStormCatalog.startDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStormCatalog.startDateColumn] = value;
                }
            }
            
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableStormCatalog.descriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStormCatalog.descriptionColumn] = value;
                }
            }
            
            public int timeStep {
                get {
                    try {
                        return ((int)(this[this.tableStormCatalog.timeStepColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStormCatalog.timeStepColumn] = value;
                }
            }
            
            public bool IsstormNameNull() {
                return this.IsNull(this.tableStormCatalog.stormNameColumn);
            }
            
            public void SetstormNameNull() {
                this[this.tableStormCatalog.stormNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsrecurrenceIntervalNull() {
                return this.IsNull(this.tableStormCatalog.recurrenceIntervalColumn);
            }
            
            public void SetrecurrenceIntervalNull() {
                this[this.tableStormCatalog.recurrenceIntervalColumn] = System.Convert.DBNull;
            }
            
            public bool IsdurationNull() {
                return this.IsNull(this.tableStormCatalog.durationColumn);
            }
            
            public void SetdurationNull() {
                this[this.tableStormCatalog.durationColumn] = System.Convert.DBNull;
            }
            
            public bool IsinterfaceFileNull() {
                return this.IsNull(this.tableStormCatalog.interfaceFileColumn);
            }
            
            public void SetinterfaceFileNull() {
                this[this.tableStormCatalog.interfaceFileColumn] = System.Convert.DBNull;
            }
            
            public bool IsstartDateNull() {
                return this.IsNull(this.tableStormCatalog.startDateColumn);
            }
            
            public void SetstartDateNull() {
                this[this.tableStormCatalog.startDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableStormCatalog.descriptionColumn);
            }
            
            public void SetdescriptionNull() {
                this[this.tableStormCatalog.descriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IstimeStepNull() {
                return this.IsNull(this.tableStormCatalog.timeStepColumn);
            }
            
            public void SettimeStepNull() {
                this[this.tableStormCatalog.timeStepColumn] = System.Convert.DBNull;
            }
            
            public ModelScenarioRow[] GetModelScenarioRows() {
                return ((ModelScenarioRow[])(this.GetChildRows(this.Table.ChildRelations["StormCatalogModelScenario"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StormCatalogRowChangeEvent : EventArgs {
            
            private StormCatalogRow eventRow;
            
            private DataRowAction eventAction;
            
            public StormCatalogRowChangeEvent(StormCatalogRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public StormCatalogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LinkHydraulicsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnlinkHydraulicsID;
            
            private DataColumn columnscenarioID;
            
            private DataColumn columnMLinkID;
            
            private DataColumn columnmodelID;
            
            private DataColumn columnmaxQ;
            
            private DataColumn columntimeOfMaxQ;
            
            private DataColumn columnmaxV;
            
            private DataColumn columntimeOfMaxV;
            
            private DataColumn columnQqRatio;
            
            private DataColumn columnmaxUSElev;
            
            private DataColumn columnmaxDSElev;
            
            internal LinkHydraulicsDataTable() : 
                    base("LinkHydraulics") {
                this.InitClass();
            }
            
            internal LinkHydraulicsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn linkHydraulicsIDColumn {
                get {
                    return this.columnlinkHydraulicsID;
                }
            }
            
            internal DataColumn scenarioIDColumn {
                get {
                    return this.columnscenarioID;
                }
            }
            
            internal DataColumn MLinkIDColumn {
                get {
                    return this.columnMLinkID;
                }
            }
            
            internal DataColumn modelIDColumn {
                get {
                    return this.columnmodelID;
                }
            }
            
            internal DataColumn maxQColumn {
                get {
                    return this.columnmaxQ;
                }
            }
            
            internal DataColumn timeOfMaxQColumn {
                get {
                    return this.columntimeOfMaxQ;
                }
            }
            
            internal DataColumn maxVColumn {
                get {
                    return this.columnmaxV;
                }
            }
            
            internal DataColumn timeOfMaxVColumn {
                get {
                    return this.columntimeOfMaxV;
                }
            }
            
            internal DataColumn QqRatioColumn {
                get {
                    return this.columnQqRatio;
                }
            }
            
            internal DataColumn maxUSElevColumn {
                get {
                    return this.columnmaxUSElev;
                }
            }
            
            internal DataColumn maxDSElevColumn {
                get {
                    return this.columnmaxDSElev;
                }
            }
            
            public LinkHydraulicsRow this[int index] {
                get {
                    return ((LinkHydraulicsRow)(this.Rows[index]));
                }
            }
            
            public event LinkHydraulicsRowChangeEventHandler LinkHydraulicsRowChanged;
            
            public event LinkHydraulicsRowChangeEventHandler LinkHydraulicsRowChanging;
            
            public event LinkHydraulicsRowChangeEventHandler LinkHydraulicsRowDeleted;
            
            public event LinkHydraulicsRowChangeEventHandler LinkHydraulicsRowDeleting;
            
            public void AddLinkHydraulicsRow(LinkHydraulicsRow row) {
                this.Rows.Add(row);
            }
            
            public LinkHydraulicsRow AddLinkHydraulicsRow(ModelScenarioRow parentModelScenarioRowByModelScenarioLinkHydraulics, int MLinkID, ModelCatalogRow parentModelCatalogRowByModelCatalogLinkHydraulics, System.Double maxQ, System.DateTime timeOfMaxQ, System.Double maxV, System.DateTime timeOfMaxV, System.Double QqRatio, System.Double maxUSElev, System.Double maxDSElev) {
                LinkHydraulicsRow rowLinkHydraulicsRow = ((LinkHydraulicsRow)(this.NewRow()));
                rowLinkHydraulicsRow.ItemArray = new object[] {
                        null,
                        parentModelScenarioRowByModelScenarioLinkHydraulics[0],
                        MLinkID,
                        parentModelCatalogRowByModelCatalogLinkHydraulics[0],
                        maxQ,
                        timeOfMaxQ,
                        maxV,
                        timeOfMaxV,
                        QqRatio,
                        maxUSElev,
                        maxDSElev};
                this.Rows.Add(rowLinkHydraulicsRow);
                return rowLinkHydraulicsRow;
            }
            
            public LinkHydraulicsRow FindBylinkHydraulicsID(int linkHydraulicsID) {
                return ((LinkHydraulicsRow)(this.Rows.Find(new object[] {
                            linkHydraulicsID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                LinkHydraulicsDataTable cln = ((LinkHydraulicsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new LinkHydraulicsDataTable();
            }
            
            internal void InitVars() {
                this.columnlinkHydraulicsID = this.Columns["linkHydraulicsID"];
                this.columnscenarioID = this.Columns["scenarioID"];
                this.columnMLinkID = this.Columns["MLinkID"];
                this.columnmodelID = this.Columns["modelID"];
                this.columnmaxQ = this.Columns["maxQ"];
                this.columntimeOfMaxQ = this.Columns["timeOfMaxQ"];
                this.columnmaxV = this.Columns["maxV"];
                this.columntimeOfMaxV = this.Columns["timeOfMaxV"];
                this.columnQqRatio = this.Columns["QqRatio"];
                this.columnmaxUSElev = this.Columns["maxUSElev"];
                this.columnmaxDSElev = this.Columns["maxDSElev"];
            }
            
            private void InitClass() {
                this.columnlinkHydraulicsID = new DataColumn("linkHydraulicsID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlinkHydraulicsID);
                this.columnscenarioID = new DataColumn("scenarioID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnscenarioID);
                this.columnMLinkID = new DataColumn("MLinkID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMLinkID);
                this.columnmodelID = new DataColumn("modelID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmodelID);
                this.columnmaxQ = new DataColumn("maxQ", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmaxQ);
                this.columntimeOfMaxQ = new DataColumn("timeOfMaxQ", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntimeOfMaxQ);
                this.columnmaxV = new DataColumn("maxV", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmaxV);
                this.columntimeOfMaxV = new DataColumn("timeOfMaxV", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntimeOfMaxV);
                this.columnQqRatio = new DataColumn("QqRatio", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQqRatio);
                this.columnmaxUSElev = new DataColumn("maxUSElev", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmaxUSElev);
                this.columnmaxDSElev = new DataColumn("maxDSElev", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmaxDSElev);
                this.Constraints.Add(new UniqueConstraint("ModelCatalogKey3", new DataColumn[] {
                                this.columnlinkHydraulicsID}, true));
                this.columnlinkHydraulicsID.AutoIncrement = true;
                this.columnlinkHydraulicsID.AllowDBNull = false;
                this.columnlinkHydraulicsID.Unique = true;
            }
            
            public LinkHydraulicsRow NewLinkHydraulicsRow() {
                return ((LinkHydraulicsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new LinkHydraulicsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(LinkHydraulicsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LinkHydraulicsRowChanged != null)) {
                    this.LinkHydraulicsRowChanged(this, new LinkHydraulicsRowChangeEvent(((LinkHydraulicsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LinkHydraulicsRowChanging != null)) {
                    this.LinkHydraulicsRowChanging(this, new LinkHydraulicsRowChangeEvent(((LinkHydraulicsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LinkHydraulicsRowDeleted != null)) {
                    this.LinkHydraulicsRowDeleted(this, new LinkHydraulicsRowChangeEvent(((LinkHydraulicsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LinkHydraulicsRowDeleting != null)) {
                    this.LinkHydraulicsRowDeleting(this, new LinkHydraulicsRowChangeEvent(((LinkHydraulicsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveLinkHydraulicsRow(LinkHydraulicsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LinkHydraulicsRow : DataRow {
            
            private LinkHydraulicsDataTable tableLinkHydraulics;
            
            internal LinkHydraulicsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableLinkHydraulics = ((LinkHydraulicsDataTable)(this.Table));
            }
            
            public int linkHydraulicsID {
                get {
                    return ((int)(this[this.tableLinkHydraulics.linkHydraulicsIDColumn]));
                }
                set {
                    this[this.tableLinkHydraulics.linkHydraulicsIDColumn] = value;
                }
            }
            
            public int scenarioID {
                get {
                    try {
                        return ((int)(this[this.tableLinkHydraulics.scenarioIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkHydraulics.scenarioIDColumn] = value;
                }
            }
            
            public int MLinkID {
                get {
                    try {
                        return ((int)(this[this.tableLinkHydraulics.MLinkIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkHydraulics.MLinkIDColumn] = value;
                }
            }
            
            public int modelID {
                get {
                    try {
                        return ((int)(this[this.tableLinkHydraulics.modelIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkHydraulics.modelIDColumn] = value;
                }
            }
            
            public System.Double maxQ {
                get {
                    try {
                        return ((System.Double)(this[this.tableLinkHydraulics.maxQColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkHydraulics.maxQColumn] = value;
                }
            }
            
            public System.DateTime timeOfMaxQ {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableLinkHydraulics.timeOfMaxQColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkHydraulics.timeOfMaxQColumn] = value;
                }
            }
            
            public System.Double maxV {
                get {
                    try {
                        return ((System.Double)(this[this.tableLinkHydraulics.maxVColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkHydraulics.maxVColumn] = value;
                }
            }
            
            public System.DateTime timeOfMaxV {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableLinkHydraulics.timeOfMaxVColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkHydraulics.timeOfMaxVColumn] = value;
                }
            }
            
            public System.Double QqRatio {
                get {
                    try {
                        return ((System.Double)(this[this.tableLinkHydraulics.QqRatioColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkHydraulics.QqRatioColumn] = value;
                }
            }
            
            public System.Double maxUSElev {
                get {
                    try {
                        return ((System.Double)(this[this.tableLinkHydraulics.maxUSElevColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkHydraulics.maxUSElevColumn] = value;
                }
            }
            
            public System.Double maxDSElev {
                get {
                    try {
                        return ((System.Double)(this[this.tableLinkHydraulics.maxDSElevColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkHydraulics.maxDSElevColumn] = value;
                }
            }
            
            public ModelCatalogRow ModelCatalogRow {
                get {
                    return ((ModelCatalogRow)(this.GetParentRow(this.Table.ParentRelations["ModelCatalogLinkHydraulics"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ModelCatalogLinkHydraulics"]);
                }
            }
            
            public ModelScenarioRow ModelScenarioRow {
                get {
                    return ((ModelScenarioRow)(this.GetParentRow(this.Table.ParentRelations["ModelScenarioLinkHydraulics"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ModelScenarioLinkHydraulics"]);
                }
            }
            
            public bool IsscenarioIDNull() {
                return this.IsNull(this.tableLinkHydraulics.scenarioIDColumn);
            }
            
            public void SetscenarioIDNull() {
                this[this.tableLinkHydraulics.scenarioIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsMLinkIDNull() {
                return this.IsNull(this.tableLinkHydraulics.MLinkIDColumn);
            }
            
            public void SetMLinkIDNull() {
                this[this.tableLinkHydraulics.MLinkIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsmodelIDNull() {
                return this.IsNull(this.tableLinkHydraulics.modelIDColumn);
            }
            
            public void SetmodelIDNull() {
                this[this.tableLinkHydraulics.modelIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsmaxQNull() {
                return this.IsNull(this.tableLinkHydraulics.maxQColumn);
            }
            
            public void SetmaxQNull() {
                this[this.tableLinkHydraulics.maxQColumn] = System.Convert.DBNull;
            }
            
            public bool IstimeOfMaxQNull() {
                return this.IsNull(this.tableLinkHydraulics.timeOfMaxQColumn);
            }
            
            public void SettimeOfMaxQNull() {
                this[this.tableLinkHydraulics.timeOfMaxQColumn] = System.Convert.DBNull;
            }
            
            public bool IsmaxVNull() {
                return this.IsNull(this.tableLinkHydraulics.maxVColumn);
            }
            
            public void SetmaxVNull() {
                this[this.tableLinkHydraulics.maxVColumn] = System.Convert.DBNull;
            }
            
            public bool IstimeOfMaxVNull() {
                return this.IsNull(this.tableLinkHydraulics.timeOfMaxVColumn);
            }
            
            public void SettimeOfMaxVNull() {
                this[this.tableLinkHydraulics.timeOfMaxVColumn] = System.Convert.DBNull;
            }
            
            public bool IsQqRatioNull() {
                return this.IsNull(this.tableLinkHydraulics.QqRatioColumn);
            }
            
            public void SetQqRatioNull() {
                this[this.tableLinkHydraulics.QqRatioColumn] = System.Convert.DBNull;
            }
            
            public bool IsmaxUSElevNull() {
                return this.IsNull(this.tableLinkHydraulics.maxUSElevColumn);
            }
            
            public void SetmaxUSElevNull() {
                this[this.tableLinkHydraulics.maxUSElevColumn] = System.Convert.DBNull;
            }
            
            public bool IsmaxDSElevNull() {
                return this.IsNull(this.tableLinkHydraulics.maxDSElevColumn);
            }
            
            public void SetmaxDSElevNull() {
                this[this.tableLinkHydraulics.maxDSElevColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LinkHydraulicsRowChangeEvent : EventArgs {
            
            private LinkHydraulicsRow eventRow;
            
            private DataRowAction eventAction;
            
            public LinkHydraulicsRowChangeEvent(LinkHydraulicsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public LinkHydraulicsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ModelCatalogDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnmodelID;
            
            private DataColumn columnscenarioID;
            
            private DataColumn columnmodelName;
            
            private DataColumn columnmodelDescription;
            
            private DataColumn columnmodelType;
            
            private DataColumn columntimeFrame;
            
            private DataColumn columnmodelPath;
            
            private DataColumn columnmodelOutputFile;
            
            private DataColumn columnuserName;
            
            private DataColumn columnisUploaded;
            
            private DataColumn columnuploadDate;
            
            internal ModelCatalogDataTable() : 
                    base("ModelCatalog") {
                this.InitClass();
            }
            
            internal ModelCatalogDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn modelIDColumn {
                get {
                    return this.columnmodelID;
                }
            }
            
            internal DataColumn scenarioIDColumn {
                get {
                    return this.columnscenarioID;
                }
            }
            
            internal DataColumn modelNameColumn {
                get {
                    return this.columnmodelName;
                }
            }
            
            internal DataColumn modelDescriptionColumn {
                get {
                    return this.columnmodelDescription;
                }
            }
            
            internal DataColumn modelTypeColumn {
                get {
                    return this.columnmodelType;
                }
            }
            
            internal DataColumn timeFrameColumn {
                get {
                    return this.columntimeFrame;
                }
            }
            
            internal DataColumn modelPathColumn {
                get {
                    return this.columnmodelPath;
                }
            }
            
            internal DataColumn modelOutputFileColumn {
                get {
                    return this.columnmodelOutputFile;
                }
            }
            
            internal DataColumn userNameColumn {
                get {
                    return this.columnuserName;
                }
            }
            
            internal DataColumn isUploadedColumn {
                get {
                    return this.columnisUploaded;
                }
            }
            
            internal DataColumn uploadDateColumn {
                get {
                    return this.columnuploadDate;
                }
            }
            
            public ModelCatalogRow this[int index] {
                get {
                    return ((ModelCatalogRow)(this.Rows[index]));
                }
            }
            
            public event ModelCatalogRowChangeEventHandler ModelCatalogRowChanged;
            
            public event ModelCatalogRowChangeEventHandler ModelCatalogRowChanging;
            
            public event ModelCatalogRowChangeEventHandler ModelCatalogRowDeleted;
            
            public event ModelCatalogRowChangeEventHandler ModelCatalogRowDeleting;
            
            public void AddModelCatalogRow(ModelCatalogRow row) {
                this.Rows.Add(row);
            }
            
            public ModelCatalogRow AddModelCatalogRow(ModelScenarioRow parentModelScenarioRowByModelScenarioModelCatalog, string modelName, string modelDescription, string modelType, string timeFrame, string modelPath, string modelOutputFile, string userName, bool isUploaded, System.DateTime uploadDate) {
                ModelCatalogRow rowModelCatalogRow = ((ModelCatalogRow)(this.NewRow()));
                rowModelCatalogRow.ItemArray = new object[] {
                        null,
                        parentModelScenarioRowByModelScenarioModelCatalog[0],
                        modelName,
                        modelDescription,
                        modelType,
                        timeFrame,
                        modelPath,
                        modelOutputFile,
                        userName,
                        isUploaded,
                        uploadDate};
                this.Rows.Add(rowModelCatalogRow);
                return rowModelCatalogRow;
            }
            
            public ModelCatalogRow FindBymodelID(int modelID) {
                return ((ModelCatalogRow)(this.Rows.Find(new object[] {
                            modelID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ModelCatalogDataTable cln = ((ModelCatalogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ModelCatalogDataTable();
            }
            
            internal void InitVars() {
                this.columnmodelID = this.Columns["modelID"];
                this.columnscenarioID = this.Columns["scenarioID"];
                this.columnmodelName = this.Columns["modelName"];
                this.columnmodelDescription = this.Columns["modelDescription"];
                this.columnmodelType = this.Columns["modelType"];
                this.columntimeFrame = this.Columns["timeFrame"];
                this.columnmodelPath = this.Columns["modelPath"];
                this.columnmodelOutputFile = this.Columns["modelOutputFile"];
                this.columnuserName = this.Columns["userName"];
                this.columnisUploaded = this.Columns["isUploaded"];
                this.columnuploadDate = this.Columns["uploadDate"];
            }
            
            private void InitClass() {
                this.columnmodelID = new DataColumn("modelID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmodelID);
                this.columnscenarioID = new DataColumn("scenarioID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnscenarioID);
                this.columnmodelName = new DataColumn("modelName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmodelName);
                this.columnmodelDescription = new DataColumn("modelDescription", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmodelDescription);
                this.columnmodelType = new DataColumn("modelType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmodelType);
                this.columntimeFrame = new DataColumn("timeFrame", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntimeFrame);
                this.columnmodelPath = new DataColumn("modelPath", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmodelPath);
                this.columnmodelOutputFile = new DataColumn("modelOutputFile", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmodelOutputFile);
                this.columnuserName = new DataColumn("userName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuserName);
                this.columnisUploaded = new DataColumn("isUploaded", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisUploaded);
                this.columnuploadDate = new DataColumn("uploadDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuploadDate);
                this.Constraints.Add(new UniqueConstraint("ModelCatalogKey4", new DataColumn[] {
                                this.columnmodelID}, true));
                this.columnmodelID.AutoIncrement = true;
                this.columnmodelID.AllowDBNull = false;
                this.columnmodelID.Unique = true;
            }
            
            public ModelCatalogRow NewModelCatalogRow() {
                return ((ModelCatalogRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ModelCatalogRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ModelCatalogRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ModelCatalogRowChanged != null)) {
                    this.ModelCatalogRowChanged(this, new ModelCatalogRowChangeEvent(((ModelCatalogRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ModelCatalogRowChanging != null)) {
                    this.ModelCatalogRowChanging(this, new ModelCatalogRowChangeEvent(((ModelCatalogRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ModelCatalogRowDeleted != null)) {
                    this.ModelCatalogRowDeleted(this, new ModelCatalogRowChangeEvent(((ModelCatalogRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ModelCatalogRowDeleting != null)) {
                    this.ModelCatalogRowDeleting(this, new ModelCatalogRowChangeEvent(((ModelCatalogRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveModelCatalogRow(ModelCatalogRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ModelCatalogRow : DataRow {
            
            private ModelCatalogDataTable tableModelCatalog;
            
            internal ModelCatalogRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableModelCatalog = ((ModelCatalogDataTable)(this.Table));
            }
            
            public int modelID {
                get {
                    return ((int)(this[this.tableModelCatalog.modelIDColumn]));
                }
                set {
                    this[this.tableModelCatalog.modelIDColumn] = value;
                }
            }
            
            public int scenarioID {
                get {
                    try {
                        return ((int)(this[this.tableModelCatalog.scenarioIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModelCatalog.scenarioIDColumn] = value;
                }
            }
            
            public string modelName {
                get {
                    try {
                        return ((string)(this[this.tableModelCatalog.modelNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModelCatalog.modelNameColumn] = value;
                }
            }
            
            public string modelDescription {
                get {
                    try {
                        return ((string)(this[this.tableModelCatalog.modelDescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModelCatalog.modelDescriptionColumn] = value;
                }
            }
            
            public string modelType {
                get {
                    try {
                        return ((string)(this[this.tableModelCatalog.modelTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModelCatalog.modelTypeColumn] = value;
                }
            }
            
            public string timeFrame {
                get {
                    try {
                        return ((string)(this[this.tableModelCatalog.timeFrameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModelCatalog.timeFrameColumn] = value;
                }
            }
            
            public string modelPath {
                get {
                    try {
                        return ((string)(this[this.tableModelCatalog.modelPathColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModelCatalog.modelPathColumn] = value;
                }
            }
            
            public string modelOutputFile {
                get {
                    try {
                        return ((string)(this[this.tableModelCatalog.modelOutputFileColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModelCatalog.modelOutputFileColumn] = value;
                }
            }
            
            public string userName {
                get {
                    try {
                        return ((string)(this[this.tableModelCatalog.userNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModelCatalog.userNameColumn] = value;
                }
            }
            
            public bool isUploaded {
                get {
                    try {
                        return ((bool)(this[this.tableModelCatalog.isUploadedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModelCatalog.isUploadedColumn] = value;
                }
            }
            
            public System.DateTime uploadDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableModelCatalog.uploadDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModelCatalog.uploadDateColumn] = value;
                }
            }
            
            public ModelScenarioRow ModelScenarioRow {
                get {
                    return ((ModelScenarioRow)(this.GetParentRow(this.Table.ParentRelations["ModelScenarioModelCatalog"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ModelScenarioModelCatalog"]);
                }
            }
            
            public bool IsscenarioIDNull() {
                return this.IsNull(this.tableModelCatalog.scenarioIDColumn);
            }
            
            public void SetscenarioIDNull() {
                this[this.tableModelCatalog.scenarioIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsmodelNameNull() {
                return this.IsNull(this.tableModelCatalog.modelNameColumn);
            }
            
            public void SetmodelNameNull() {
                this[this.tableModelCatalog.modelNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsmodelDescriptionNull() {
                return this.IsNull(this.tableModelCatalog.modelDescriptionColumn);
            }
            
            public void SetmodelDescriptionNull() {
                this[this.tableModelCatalog.modelDescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsmodelTypeNull() {
                return this.IsNull(this.tableModelCatalog.modelTypeColumn);
            }
            
            public void SetmodelTypeNull() {
                this[this.tableModelCatalog.modelTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IstimeFrameNull() {
                return this.IsNull(this.tableModelCatalog.timeFrameColumn);
            }
            
            public void SettimeFrameNull() {
                this[this.tableModelCatalog.timeFrameColumn] = System.Convert.DBNull;
            }
            
            public bool IsmodelPathNull() {
                return this.IsNull(this.tableModelCatalog.modelPathColumn);
            }
            
            public void SetmodelPathNull() {
                this[this.tableModelCatalog.modelPathColumn] = System.Convert.DBNull;
            }
            
            public bool IsmodelOutputFileNull() {
                return this.IsNull(this.tableModelCatalog.modelOutputFileColumn);
            }
            
            public void SetmodelOutputFileNull() {
                this[this.tableModelCatalog.modelOutputFileColumn] = System.Convert.DBNull;
            }
            
            public bool IsuserNameNull() {
                return this.IsNull(this.tableModelCatalog.userNameColumn);
            }
            
            public void SetuserNameNull() {
                this[this.tableModelCatalog.userNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsisUploadedNull() {
                return this.IsNull(this.tableModelCatalog.isUploadedColumn);
            }
            
            public void SetisUploadedNull() {
                this[this.tableModelCatalog.isUploadedColumn] = System.Convert.DBNull;
            }
            
            public bool IsuploadDateNull() {
                return this.IsNull(this.tableModelCatalog.uploadDateColumn);
            }
            
            public void SetuploadDateNull() {
                this[this.tableModelCatalog.uploadDateColumn] = System.Convert.DBNull;
            }
            
            public DSCHydraulicsRow[] GetDSCHydraulicsRows() {
                return ((DSCHydraulicsRow[])(this.GetChildRows(this.Table.ChildRelations["ModelCatalogDSCHydraulics"])));
            }
            
            public NodeHydraulicsRow[] GetNodeHydraulicsRows() {
                return ((NodeHydraulicsRow[])(this.GetChildRows(this.Table.ChildRelations["ModelCatalogNodeHydraulics"])));
            }
            
            public LinkHydraulicsRow[] GetLinkHydraulicsRows() {
                return ((LinkHydraulicsRow[])(this.GetChildRows(this.Table.ChildRelations["ModelCatalogLinkHydraulics"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ModelCatalogRowChangeEvent : EventArgs {
            
            private ModelCatalogRow eventRow;
            
            private DataRowAction eventAction;
            
            public ModelCatalogRowChangeEvent(ModelCatalogRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ModelCatalogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ModelScenarioDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnscenarioID;
            
            private DataColumn columnstormID;
            
            private DataColumn columndescription;
            
            internal ModelScenarioDataTable() : 
                    base("ModelScenario") {
                this.InitClass();
            }
            
            internal ModelScenarioDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn scenarioIDColumn {
                get {
                    return this.columnscenarioID;
                }
            }
            
            internal DataColumn stormIDColumn {
                get {
                    return this.columnstormID;
                }
            }
            
            internal DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            public ModelScenarioRow this[int index] {
                get {
                    return ((ModelScenarioRow)(this.Rows[index]));
                }
            }
            
            public event ModelScenarioRowChangeEventHandler ModelScenarioRowChanged;
            
            public event ModelScenarioRowChangeEventHandler ModelScenarioRowChanging;
            
            public event ModelScenarioRowChangeEventHandler ModelScenarioRowDeleted;
            
            public event ModelScenarioRowChangeEventHandler ModelScenarioRowDeleting;
            
            public void AddModelScenarioRow(ModelScenarioRow row) {
                this.Rows.Add(row);
            }
            
            public ModelScenarioRow AddModelScenarioRow(StormCatalogRow parentStormCatalogRowByStormCatalogModelScenario, string description) {
                ModelScenarioRow rowModelScenarioRow = ((ModelScenarioRow)(this.NewRow()));
                rowModelScenarioRow.ItemArray = new object[] {
                        null,
                        parentStormCatalogRowByStormCatalogModelScenario[0],
                        description};
                this.Rows.Add(rowModelScenarioRow);
                return rowModelScenarioRow;
            }
            
            public ModelScenarioRow FindByscenarioID(int scenarioID) {
                return ((ModelScenarioRow)(this.Rows.Find(new object[] {
                            scenarioID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ModelScenarioDataTable cln = ((ModelScenarioDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ModelScenarioDataTable();
            }
            
            internal void InitVars() {
                this.columnscenarioID = this.Columns["scenarioID"];
                this.columnstormID = this.Columns["stormID"];
                this.columndescription = this.Columns["description"];
            }
            
            private void InitClass() {
                this.columnscenarioID = new DataColumn("scenarioID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnscenarioID);
                this.columnstormID = new DataColumn("stormID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstormID);
                this.columndescription = new DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescription);
                this.Constraints.Add(new UniqueConstraint("ModelCatalogKey5", new DataColumn[] {
                                this.columnscenarioID}, true));
                this.columnscenarioID.AutoIncrement = true;
                this.columnscenarioID.AllowDBNull = false;
                this.columnscenarioID.Unique = true;
            }
            
            public ModelScenarioRow NewModelScenarioRow() {
                return ((ModelScenarioRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ModelScenarioRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ModelScenarioRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ModelScenarioRowChanged != null)) {
                    this.ModelScenarioRowChanged(this, new ModelScenarioRowChangeEvent(((ModelScenarioRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ModelScenarioRowChanging != null)) {
                    this.ModelScenarioRowChanging(this, new ModelScenarioRowChangeEvent(((ModelScenarioRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ModelScenarioRowDeleted != null)) {
                    this.ModelScenarioRowDeleted(this, new ModelScenarioRowChangeEvent(((ModelScenarioRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ModelScenarioRowDeleting != null)) {
                    this.ModelScenarioRowDeleting(this, new ModelScenarioRowChangeEvent(((ModelScenarioRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveModelScenarioRow(ModelScenarioRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ModelScenarioRow : DataRow {
            
            private ModelScenarioDataTable tableModelScenario;
            
            internal ModelScenarioRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableModelScenario = ((ModelScenarioDataTable)(this.Table));
            }
            
            public int scenarioID {
                get {
                    return ((int)(this[this.tableModelScenario.scenarioIDColumn]));
                }
                set {
                    this[this.tableModelScenario.scenarioIDColumn] = value;
                }
            }
            
            public int stormID {
                get {
                    try {
                        return ((int)(this[this.tableModelScenario.stormIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModelScenario.stormIDColumn] = value;
                }
            }
            
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableModelScenario.descriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModelScenario.descriptionColumn] = value;
                }
            }
            
            public StormCatalogRow StormCatalogRow {
                get {
                    return ((StormCatalogRow)(this.GetParentRow(this.Table.ParentRelations["StormCatalogModelScenario"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["StormCatalogModelScenario"]);
                }
            }
            
            public bool IsstormIDNull() {
                return this.IsNull(this.tableModelScenario.stormIDColumn);
            }
            
            public void SetstormIDNull() {
                this[this.tableModelScenario.stormIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableModelScenario.descriptionColumn);
            }
            
            public void SetdescriptionNull() {
                this[this.tableModelScenario.descriptionColumn] = System.Convert.DBNull;
            }
            
            public ModelCatalogRow[] GetModelCatalogRows() {
                return ((ModelCatalogRow[])(this.GetChildRows(this.Table.ChildRelations["ModelScenarioModelCatalog"])));
            }
            
            public DSCHydraulicsRow[] GetDSCHydraulicsRows() {
                return ((DSCHydraulicsRow[])(this.GetChildRows(this.Table.ChildRelations["ModelScenarioDSCHydraulics"])));
            }
            
            public NodeHydraulicsRow[] GetNodeHydraulicsRows() {
                return ((NodeHydraulicsRow[])(this.GetChildRows(this.Table.ChildRelations["ModelScenarioNodeHydraulics"])));
            }
            
            public LinkHydraulicsRow[] GetLinkHydraulicsRows() {
                return ((LinkHydraulicsRow[])(this.GetChildRows(this.Table.ChildRelations["ModelScenarioLinkHydraulics"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ModelScenarioRowChangeEvent : EventArgs {
            
            private ModelScenarioRow eventRow;
            
            private DataRowAction eventAction;
            
            public ModelScenarioRowChangeEvent(ModelScenarioRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ModelScenarioRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class NodeHydraulicsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnnodeHydraulicsID;
            
            private DataColumn columnscenarioID;
            
            private DataColumn columnmodelID;
            
            private DataColumn columnnodeName;
            
            private DataColumn columnmaxElevation;
            
            private DataColumn columntimeOfMaxElev;
            
            private DataColumn columnsurcharge;
            
            private DataColumn columnfreeboard;
            
            private DataColumn columnsurchargeTime;
            
            private DataColumn columnfloodedTime;
            
            internal NodeHydraulicsDataTable() : 
                    base("NodeHydraulics") {
                this.InitClass();
            }
            
            internal NodeHydraulicsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nodeHydraulicsIDColumn {
                get {
                    return this.columnnodeHydraulicsID;
                }
            }
            
            internal DataColumn scenarioIDColumn {
                get {
                    return this.columnscenarioID;
                }
            }
            
            internal DataColumn modelIDColumn {
                get {
                    return this.columnmodelID;
                }
            }
            
            internal DataColumn nodeNameColumn {
                get {
                    return this.columnnodeName;
                }
            }
            
            internal DataColumn maxElevationColumn {
                get {
                    return this.columnmaxElevation;
                }
            }
            
            internal DataColumn timeOfMaxElevColumn {
                get {
                    return this.columntimeOfMaxElev;
                }
            }
            
            internal DataColumn surchargeColumn {
                get {
                    return this.columnsurcharge;
                }
            }
            
            internal DataColumn freeboardColumn {
                get {
                    return this.columnfreeboard;
                }
            }
            
            internal DataColumn surchargeTimeColumn {
                get {
                    return this.columnsurchargeTime;
                }
            }
            
            internal DataColumn floodedTimeColumn {
                get {
                    return this.columnfloodedTime;
                }
            }
            
            public NodeHydraulicsRow this[int index] {
                get {
                    return ((NodeHydraulicsRow)(this.Rows[index]));
                }
            }
            
            public event NodeHydraulicsRowChangeEventHandler NodeHydraulicsRowChanged;
            
            public event NodeHydraulicsRowChangeEventHandler NodeHydraulicsRowChanging;
            
            public event NodeHydraulicsRowChangeEventHandler NodeHydraulicsRowDeleted;
            
            public event NodeHydraulicsRowChangeEventHandler NodeHydraulicsRowDeleting;
            
            public void AddNodeHydraulicsRow(NodeHydraulicsRow row) {
                this.Rows.Add(row);
            }
            
            public NodeHydraulicsRow AddNodeHydraulicsRow(ModelScenarioRow parentModelScenarioRowByModelScenarioNodeHydraulics, ModelCatalogRow parentModelCatalogRowByModelCatalogNodeHydraulics, string nodeName, System.Double maxElevation, System.DateTime timeOfMaxElev, System.Double surcharge, System.Double freeboard, System.Double surchargeTime, System.Double floodedTime) {
                NodeHydraulicsRow rowNodeHydraulicsRow = ((NodeHydraulicsRow)(this.NewRow()));
                rowNodeHydraulicsRow.ItemArray = new object[] {
                        null,
                        parentModelScenarioRowByModelScenarioNodeHydraulics[0],
                        parentModelCatalogRowByModelCatalogNodeHydraulics[0],
                        nodeName,
                        maxElevation,
                        timeOfMaxElev,
                        surcharge,
                        freeboard,
                        surchargeTime,
                        floodedTime};
                this.Rows.Add(rowNodeHydraulicsRow);
                return rowNodeHydraulicsRow;
            }
            
            public NodeHydraulicsRow FindBynodeHydraulicsID(int nodeHydraulicsID) {
                return ((NodeHydraulicsRow)(this.Rows.Find(new object[] {
                            nodeHydraulicsID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                NodeHydraulicsDataTable cln = ((NodeHydraulicsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new NodeHydraulicsDataTable();
            }
            
            internal void InitVars() {
                this.columnnodeHydraulicsID = this.Columns["nodeHydraulicsID"];
                this.columnscenarioID = this.Columns["scenarioID"];
                this.columnmodelID = this.Columns["modelID"];
                this.columnnodeName = this.Columns["nodeName"];
                this.columnmaxElevation = this.Columns["maxElevation"];
                this.columntimeOfMaxElev = this.Columns["timeOfMaxElev"];
                this.columnsurcharge = this.Columns["surcharge"];
                this.columnfreeboard = this.Columns["freeboard"];
                this.columnsurchargeTime = this.Columns["surchargeTime"];
                this.columnfloodedTime = this.Columns["floodedTime"];
            }
            
            private void InitClass() {
                this.columnnodeHydraulicsID = new DataColumn("nodeHydraulicsID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnodeHydraulicsID);
                this.columnscenarioID = new DataColumn("scenarioID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnscenarioID);
                this.columnmodelID = new DataColumn("modelID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmodelID);
                this.columnnodeName = new DataColumn("nodeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnodeName);
                this.columnmaxElevation = new DataColumn("maxElevation", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmaxElevation);
                this.columntimeOfMaxElev = new DataColumn("timeOfMaxElev", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntimeOfMaxElev);
                this.columnsurcharge = new DataColumn("surcharge", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsurcharge);
                this.columnfreeboard = new DataColumn("freeboard", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfreeboard);
                this.columnsurchargeTime = new DataColumn("surchargeTime", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsurchargeTime);
                this.columnfloodedTime = new DataColumn("floodedTime", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfloodedTime);
                this.Constraints.Add(new UniqueConstraint("ModelCatalogKey6", new DataColumn[] {
                                this.columnnodeHydraulicsID}, true));
                this.columnnodeHydraulicsID.AutoIncrement = true;
                this.columnnodeHydraulicsID.AllowDBNull = false;
                this.columnnodeHydraulicsID.Unique = true;
            }
            
            public NodeHydraulicsRow NewNodeHydraulicsRow() {
                return ((NodeHydraulicsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new NodeHydraulicsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(NodeHydraulicsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NodeHydraulicsRowChanged != null)) {
                    this.NodeHydraulicsRowChanged(this, new NodeHydraulicsRowChangeEvent(((NodeHydraulicsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NodeHydraulicsRowChanging != null)) {
                    this.NodeHydraulicsRowChanging(this, new NodeHydraulicsRowChangeEvent(((NodeHydraulicsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NodeHydraulicsRowDeleted != null)) {
                    this.NodeHydraulicsRowDeleted(this, new NodeHydraulicsRowChangeEvent(((NodeHydraulicsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NodeHydraulicsRowDeleting != null)) {
                    this.NodeHydraulicsRowDeleting(this, new NodeHydraulicsRowChangeEvent(((NodeHydraulicsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveNodeHydraulicsRow(NodeHydraulicsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class NodeHydraulicsRow : DataRow {
            
            private NodeHydraulicsDataTable tableNodeHydraulics;
            
            internal NodeHydraulicsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableNodeHydraulics = ((NodeHydraulicsDataTable)(this.Table));
            }
            
            public int nodeHydraulicsID {
                get {
                    return ((int)(this[this.tableNodeHydraulics.nodeHydraulicsIDColumn]));
                }
                set {
                    this[this.tableNodeHydraulics.nodeHydraulicsIDColumn] = value;
                }
            }
            
            public int scenarioID {
                get {
                    try {
                        return ((int)(this[this.tableNodeHydraulics.scenarioIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNodeHydraulics.scenarioIDColumn] = value;
                }
            }
            
            public int modelID {
                get {
                    try {
                        return ((int)(this[this.tableNodeHydraulics.modelIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNodeHydraulics.modelIDColumn] = value;
                }
            }
            
            public string nodeName {
                get {
                    try {
                        return ((string)(this[this.tableNodeHydraulics.nodeNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNodeHydraulics.nodeNameColumn] = value;
                }
            }
            
            public System.Double maxElevation {
                get {
                    try {
                        return ((System.Double)(this[this.tableNodeHydraulics.maxElevationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNodeHydraulics.maxElevationColumn] = value;
                }
            }
            
            public System.DateTime timeOfMaxElev {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableNodeHydraulics.timeOfMaxElevColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNodeHydraulics.timeOfMaxElevColumn] = value;
                }
            }
            
            public System.Double surcharge {
                get {
                    try {
                        return ((System.Double)(this[this.tableNodeHydraulics.surchargeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNodeHydraulics.surchargeColumn] = value;
                }
            }
            
            public System.Double freeboard {
                get {
                    try {
                        return ((System.Double)(this[this.tableNodeHydraulics.freeboardColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNodeHydraulics.freeboardColumn] = value;
                }
            }
            
            public System.Double surchargeTime {
                get {
                    try {
                        return ((System.Double)(this[this.tableNodeHydraulics.surchargeTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNodeHydraulics.surchargeTimeColumn] = value;
                }
            }
            
            public System.Double floodedTime {
                get {
                    try {
                        return ((System.Double)(this[this.tableNodeHydraulics.floodedTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNodeHydraulics.floodedTimeColumn] = value;
                }
            }
            
            public ModelCatalogRow ModelCatalogRow {
                get {
                    return ((ModelCatalogRow)(this.GetParentRow(this.Table.ParentRelations["ModelCatalogNodeHydraulics"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ModelCatalogNodeHydraulics"]);
                }
            }
            
            public ModelScenarioRow ModelScenarioRow {
                get {
                    return ((ModelScenarioRow)(this.GetParentRow(this.Table.ParentRelations["ModelScenarioNodeHydraulics"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ModelScenarioNodeHydraulics"]);
                }
            }
            
            public bool IsscenarioIDNull() {
                return this.IsNull(this.tableNodeHydraulics.scenarioIDColumn);
            }
            
            public void SetscenarioIDNull() {
                this[this.tableNodeHydraulics.scenarioIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsmodelIDNull() {
                return this.IsNull(this.tableNodeHydraulics.modelIDColumn);
            }
            
            public void SetmodelIDNull() {
                this[this.tableNodeHydraulics.modelIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsnodeNameNull() {
                return this.IsNull(this.tableNodeHydraulics.nodeNameColumn);
            }
            
            public void SetnodeNameNull() {
                this[this.tableNodeHydraulics.nodeNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsmaxElevationNull() {
                return this.IsNull(this.tableNodeHydraulics.maxElevationColumn);
            }
            
            public void SetmaxElevationNull() {
                this[this.tableNodeHydraulics.maxElevationColumn] = System.Convert.DBNull;
            }
            
            public bool IstimeOfMaxElevNull() {
                return this.IsNull(this.tableNodeHydraulics.timeOfMaxElevColumn);
            }
            
            public void SettimeOfMaxElevNull() {
                this[this.tableNodeHydraulics.timeOfMaxElevColumn] = System.Convert.DBNull;
            }
            
            public bool IssurchargeNull() {
                return this.IsNull(this.tableNodeHydraulics.surchargeColumn);
            }
            
            public void SetsurchargeNull() {
                this[this.tableNodeHydraulics.surchargeColumn] = System.Convert.DBNull;
            }
            
            public bool IsfreeboardNull() {
                return this.IsNull(this.tableNodeHydraulics.freeboardColumn);
            }
            
            public void SetfreeboardNull() {
                this[this.tableNodeHydraulics.freeboardColumn] = System.Convert.DBNull;
            }
            
            public bool IssurchargeTimeNull() {
                return this.IsNull(this.tableNodeHydraulics.surchargeTimeColumn);
            }
            
            public void SetsurchargeTimeNull() {
                this[this.tableNodeHydraulics.surchargeTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsfloodedTimeNull() {
                return this.IsNull(this.tableNodeHydraulics.floodedTimeColumn);
            }
            
            public void SetfloodedTimeNull() {
                this[this.tableNodeHydraulics.floodedTimeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class NodeHydraulicsRowChangeEvent : EventArgs {
            
            private NodeHydraulicsRow eventRow;
            
            private DataRowAction eventAction;
            
            public NodeHydraulicsRowChangeEvent(NodeHydraulicsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public NodeHydraulicsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace SystemsAnalysis.Characterization {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Settings : DataSet {
        
        private DataSourceDataTable tableDataSource;
        
        public Settings() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Settings(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DataSource"] != null)) {
                    this.Tables.Add(new DataSourceDataTable(ds.Tables["DataSource"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataSourceDataTable DataSource {
            get {
                return this.tableDataSource;
            }
        }
        
        public override DataSet Clone() {
            Settings cln = ((Settings)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["DataSource"] != null)) {
                this.Tables.Add(new DataSourceDataTable(ds.Tables["DataSource"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableDataSource = ((DataSourceDataTable)(this.Tables["DataSource"]));
            if ((this.tableDataSource != null)) {
                this.tableDataSource.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "Settings";
            this.Prefix = "";
            this.Namespace = "SystemsAnalysis.Characterization.ProgramSettings";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = false;
            this.tableDataSource = new DataSourceDataTable();
            this.Tables.Add(this.tableDataSource);
        }
        
        private bool ShouldSerializeDataSource() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void DataSourceRowChangeEventHandler(object sender, DataSourceRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DataSourceDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnType;
            
            private DataColumn columnDataSource_Text;
            
            internal DataSourceDataTable() : 
                    base("DataSource") {
                this.InitClass();
            }
            
            internal DataSourceDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            internal DataColumn DataSource_TextColumn {
                get {
                    return this.columnDataSource_Text;
                }
            }
            
            public DataSourceRow this[int index] {
                get {
                    return ((DataSourceRow)(this.Rows[index]));
                }
            }
            
            public event DataSourceRowChangeEventHandler DataSourceRowChanged;
            
            public event DataSourceRowChangeEventHandler DataSourceRowChanging;
            
            public event DataSourceRowChangeEventHandler DataSourceRowDeleted;
            
            public event DataSourceRowChangeEventHandler DataSourceRowDeleting;
            
            public void AddDataSourceRow(DataSourceRow row) {
                this.Rows.Add(row);
            }
            
            public DataSourceRow AddDataSourceRow(string Name, string Type, string DataSource_Text) {
                DataSourceRow rowDataSourceRow = ((DataSourceRow)(this.NewRow()));
                rowDataSourceRow.ItemArray = new object[] {
                        Name,
                        Type,
                        DataSource_Text};
                this.Rows.Add(rowDataSourceRow);
                return rowDataSourceRow;
            }
            
            public DataSourceRow FindByName(string Name) {
                return ((DataSourceRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DataSourceDataTable cln = ((DataSourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DataSourceDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnType = this.Columns["Type"];
                this.columnDataSource_Text = this.Columns["DataSource_Text"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnType = new DataColumn("Type", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnType);
                this.columnDataSource_Text = new DataColumn("DataSource_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
                this.Columns.Add(this.columnDataSource_Text);
                this.Constraints.Add(new UniqueConstraint("DataSourceNameKey", new DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.Namespace = "";
                this.columnType.Namespace = "";
            }
            
            public DataSourceRow NewDataSourceRow() {
                return ((DataSourceRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DataSourceRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DataSourceRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataSourceRowChanged != null)) {
                    this.DataSourceRowChanged(this, new DataSourceRowChangeEvent(((DataSourceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataSourceRowChanging != null)) {
                    this.DataSourceRowChanging(this, new DataSourceRowChangeEvent(((DataSourceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataSourceRowDeleted != null)) {
                    this.DataSourceRowDeleted(this, new DataSourceRowChangeEvent(((DataSourceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataSourceRowDeleting != null)) {
                    this.DataSourceRowDeleting(this, new DataSourceRowChangeEvent(((DataSourceRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDataSourceRow(DataSourceRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DataSourceRow : DataRow {
            
            private DataSourceDataTable tableDataSource;
            
            internal DataSourceRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataSource = ((DataSourceDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableDataSource.NameColumn]));
                }
                set {
                    this[this.tableDataSource.NameColumn] = value;
                }
            }
            
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableDataSource.TypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataSource.TypeColumn] = value;
                }
            }
            
            public string DataSource_Text {
                get {
                    try {
                        return ((string)(this[this.tableDataSource.DataSource_TextColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataSource.DataSource_TextColumn] = value;
                }
            }
            
            public bool IsTypeNull() {
                return this.IsNull(this.tableDataSource.TypeColumn);
            }
            
            public void SetTypeNull() {
                this[this.tableDataSource.TypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsDataSource_TextNull() {
                return this.IsNull(this.tableDataSource.DataSource_TextColumn);
            }
            
            public void SetDataSource_TextNull() {
                this[this.tableDataSource.DataSource_TextColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DataSourceRowChangeEvent : EventArgs {
            
            private DataSourceRow eventRow;
            
            private DataRowAction eventAction;
            
            public DataSourceRowChangeEvent(DataSourceRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DataSourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

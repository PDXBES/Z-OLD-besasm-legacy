'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class StormCatalogDataset
    Inherits DataSet
    
    Private tableStormCatalog As StormCatalogDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("StormCatalog")) Is Nothing) Then
                Me.Tables.Add(New StormCatalogDataTable(ds.Tables("StormCatalog")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property StormCatalog As StormCatalogDataTable
        Get
            Return Me.tableStormCatalog
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As StormCatalogDataset = CType(MyBase.Clone,StormCatalogDataset)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("StormCatalog")) Is Nothing) Then
            Me.Tables.Add(New StormCatalogDataTable(ds.Tables("StormCatalog")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableStormCatalog = CType(Me.Tables("StormCatalog"),StormCatalogDataTable)
        If (Not (Me.tableStormCatalog) Is Nothing) Then
            Me.tableStormCatalog.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "StormCatalogDataset"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/StormCatalogDataset.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableStormCatalog = New StormCatalogDataTable
        Me.Tables.Add(Me.tableStormCatalog)
    End Sub
    
    Private Function ShouldSerializeStormCatalog() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub StormCatalogRowChangeEventHandler(ByVal sender As Object, ByVal e As StormCatalogRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StormCatalogDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndescription As DataColumn
        
        Private columnduration As DataColumn
        
        Private columninterfaceFile As DataColumn
        
        Private columnrecurrenceInterval As DataColumn
        
        Private columnstartDate As DataColumn
        
        Private columnstormID As DataColumn
        
        Private columnstormName As DataColumn
        
        Private columntimeStep As DataColumn
        
        Friend Sub New()
            MyBase.New("StormCatalog")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property descriptionColumn As DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        Friend ReadOnly Property durationColumn As DataColumn
            Get
                Return Me.columnduration
            End Get
        End Property
        
        Friend ReadOnly Property interfaceFileColumn As DataColumn
            Get
                Return Me.columninterfaceFile
            End Get
        End Property
        
        Friend ReadOnly Property recurrenceIntervalColumn As DataColumn
            Get
                Return Me.columnrecurrenceInterval
            End Get
        End Property
        
        Friend ReadOnly Property startDateColumn As DataColumn
            Get
                Return Me.columnstartDate
            End Get
        End Property
        
        Friend ReadOnly Property stormIDColumn As DataColumn
            Get
                Return Me.columnstormID
            End Get
        End Property
        
        Friend ReadOnly Property stormNameColumn As DataColumn
            Get
                Return Me.columnstormName
            End Get
        End Property
        
        Friend ReadOnly Property timeStepColumn As DataColumn
            Get
                Return Me.columntimeStep
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As StormCatalogRow
            Get
                Return CType(Me.Rows(index),StormCatalogRow)
            End Get
        End Property
        
        Public Event StormCatalogRowChanged As StormCatalogRowChangeEventHandler
        
        Public Event StormCatalogRowChanging As StormCatalogRowChangeEventHandler
        
        Public Event StormCatalogRowDeleted As StormCatalogRowChangeEventHandler
        
        Public Event StormCatalogRowDeleting As StormCatalogRowChangeEventHandler
        
        Public Overloads Sub AddStormCatalogRow(ByVal row As StormCatalogRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddStormCatalogRow(ByVal description As String, ByVal duration As Integer, ByVal interfaceFile As String, ByVal recurrenceInterval As Integer, ByVal startDate As Date, ByVal stormID As Integer, ByVal stormName As String, ByVal timeStep As Integer) As StormCatalogRow
            Dim rowStormCatalogRow As StormCatalogRow = CType(Me.NewRow,StormCatalogRow)
            rowStormCatalogRow.ItemArray = New Object() {description, duration, interfaceFile, recurrenceInterval, startDate, stormID, stormName, timeStep}
            Me.Rows.Add(rowStormCatalogRow)
            Return rowStormCatalogRow
        End Function
        
        Public Function FindBystormID(ByVal stormID As Integer) As StormCatalogRow
            Return CType(Me.Rows.Find(New Object() {stormID}),StormCatalogRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As StormCatalogDataTable = CType(MyBase.Clone,StormCatalogDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New StormCatalogDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndescription = Me.Columns("description")
            Me.columnduration = Me.Columns("duration")
            Me.columninterfaceFile = Me.Columns("interfaceFile")
            Me.columnrecurrenceInterval = Me.Columns("recurrenceInterval")
            Me.columnstartDate = Me.Columns("startDate")
            Me.columnstormID = Me.Columns("stormID")
            Me.columnstormName = Me.Columns("stormName")
            Me.columntimeStep = Me.Columns("timeStep")
        End Sub
        
        Private Sub InitClass()
            Me.columndescription = New DataColumn("description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescription)
            Me.columnduration = New DataColumn("duration", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnduration)
            Me.columninterfaceFile = New DataColumn("interfaceFile", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninterfaceFile)
            Me.columnrecurrenceInterval = New DataColumn("recurrenceInterval", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrecurrenceInterval)
            Me.columnstartDate = New DataColumn("startDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstartDate)
            Me.columnstormID = New DataColumn("stormID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstormID)
            Me.columnstormName = New DataColumn("stormName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstormName)
            Me.columntimeStep = New DataColumn("timeStep", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntimeStep)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnstormID}, true))
            Me.columnstormID.AllowDBNull = false
            Me.columnstormID.Unique = true
        End Sub
        
        Public Function NewStormCatalogRow() As StormCatalogRow
            Return CType(Me.NewRow,StormCatalogRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New StormCatalogRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(StormCatalogRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StormCatalogRowChangedEvent) Is Nothing) Then
                RaiseEvent StormCatalogRowChanged(Me, New StormCatalogRowChangeEvent(CType(e.Row,StormCatalogRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StormCatalogRowChangingEvent) Is Nothing) Then
                RaiseEvent StormCatalogRowChanging(Me, New StormCatalogRowChangeEvent(CType(e.Row,StormCatalogRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StormCatalogRowDeletedEvent) Is Nothing) Then
                RaiseEvent StormCatalogRowDeleted(Me, New StormCatalogRowChangeEvent(CType(e.Row,StormCatalogRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StormCatalogRowDeletingEvent) Is Nothing) Then
                RaiseEvent StormCatalogRowDeleting(Me, New StormCatalogRowChangeEvent(CType(e.Row,StormCatalogRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveStormCatalogRow(ByVal row As StormCatalogRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StormCatalogRow
        Inherits DataRow
        
        Private tableStormCatalog As StormCatalogDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableStormCatalog = CType(Me.Table,StormCatalogDataTable)
        End Sub
        
        Public Property description As String
            Get
                Try 
                    Return CType(Me(Me.tableStormCatalog.descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStormCatalog.descriptionColumn) = value
            End Set
        End Property
        
        Public Property duration As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStormCatalog.durationColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStormCatalog.durationColumn) = value
            End Set
        End Property
        
        Public Property interfaceFile As String
            Get
                Try 
                    Return CType(Me(Me.tableStormCatalog.interfaceFileColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStormCatalog.interfaceFileColumn) = value
            End Set
        End Property
        
        Public Property recurrenceInterval As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStormCatalog.recurrenceIntervalColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStormCatalog.recurrenceIntervalColumn) = value
            End Set
        End Property
        
        Public Property startDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableStormCatalog.startDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStormCatalog.startDateColumn) = value
            End Set
        End Property
        
        Public Property stormID As Integer
            Get
                Return CType(Me(Me.tableStormCatalog.stormIDColumn),Integer)
            End Get
            Set
                Me(Me.tableStormCatalog.stormIDColumn) = value
            End Set
        End Property
        
        Public Property stormName As String
            Get
                Try 
                    Return CType(Me(Me.tableStormCatalog.stormNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStormCatalog.stormNameColumn) = value
            End Set
        End Property
        
        Public Property timeStep As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStormCatalog.timeStepColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStormCatalog.timeStepColumn) = value
            End Set
        End Property
        
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tableStormCatalog.descriptionColumn)
        End Function
        
        Public Sub SetdescriptionNull()
            Me(Me.tableStormCatalog.descriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdurationNull() As Boolean
            Return Me.IsNull(Me.tableStormCatalog.durationColumn)
        End Function
        
        Public Sub SetdurationNull()
            Me(Me.tableStormCatalog.durationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsinterfaceFileNull() As Boolean
            Return Me.IsNull(Me.tableStormCatalog.interfaceFileColumn)
        End Function
        
        Public Sub SetinterfaceFileNull()
            Me(Me.tableStormCatalog.interfaceFileColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrecurrenceIntervalNull() As Boolean
            Return Me.IsNull(Me.tableStormCatalog.recurrenceIntervalColumn)
        End Function
        
        Public Sub SetrecurrenceIntervalNull()
            Me(Me.tableStormCatalog.recurrenceIntervalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstartDateNull() As Boolean
            Return Me.IsNull(Me.tableStormCatalog.startDateColumn)
        End Function
        
        Public Sub SetstartDateNull()
            Me(Me.tableStormCatalog.startDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstormNameNull() As Boolean
            Return Me.IsNull(Me.tableStormCatalog.stormNameColumn)
        End Function
        
        Public Sub SetstormNameNull()
            Me(Me.tableStormCatalog.stormNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstimeStepNull() As Boolean
            Return Me.IsNull(Me.tableStormCatalog.timeStepColumn)
        End Function
        
        Public Sub SettimeStepNull()
            Me(Me.tableStormCatalog.timeStepColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StormCatalogRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As StormCatalogRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As StormCatalogRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As StormCatalogRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

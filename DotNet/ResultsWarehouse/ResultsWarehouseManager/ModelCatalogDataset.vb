'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ModelCatalogDataset
    Inherits DataSet
    
    Private tableDSCHydraulics As DSCHydraulicsDataTable
    
    Private tableLinkHydraulics As LinkHydraulicsDataTable
    
    Private tableModelCatalog As ModelCatalogDataTable
    
    Private tableModelScenario As ModelScenarioDataTable
    
    Private tableNodeHydraulics As NodeHydraulicsDataTable
    
    Private tableStormCatalog As StormCatalogDataTable
    
    Private relationModelCatalogNodeHydraulics As DataRelation
    
    Private relationStormCatalogModelScenario As DataRelation
    
    Private relationModelScenarioModelCatalog As DataRelation
    
    Private relationModelCatalogLinkHydraulics As DataRelation
    
    Private relationModelCatalogDSCHydraulics As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DSCHydraulics")) Is Nothing) Then
                Me.Tables.Add(New DSCHydraulicsDataTable(ds.Tables("DSCHydraulics")))
            End If
            If (Not (ds.Tables("LinkHydraulics")) Is Nothing) Then
                Me.Tables.Add(New LinkHydraulicsDataTable(ds.Tables("LinkHydraulics")))
            End If
            If (Not (ds.Tables("ModelCatalog")) Is Nothing) Then
                Me.Tables.Add(New ModelCatalogDataTable(ds.Tables("ModelCatalog")))
            End If
            If (Not (ds.Tables("ModelScenario")) Is Nothing) Then
                Me.Tables.Add(New ModelScenarioDataTable(ds.Tables("ModelScenario")))
            End If
            If (Not (ds.Tables("NodeHydraulics")) Is Nothing) Then
                Me.Tables.Add(New NodeHydraulicsDataTable(ds.Tables("NodeHydraulics")))
            End If
            If (Not (ds.Tables("StormCatalog")) Is Nothing) Then
                Me.Tables.Add(New StormCatalogDataTable(ds.Tables("StormCatalog")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DSCHydraulics As DSCHydraulicsDataTable
        Get
            Return Me.tableDSCHydraulics
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LinkHydraulics As LinkHydraulicsDataTable
        Get
            Return Me.tableLinkHydraulics
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ModelCatalog As ModelCatalogDataTable
        Get
            Return Me.tableModelCatalog
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ModelScenario As ModelScenarioDataTable
        Get
            Return Me.tableModelScenario
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NodeHydraulics As NodeHydraulicsDataTable
        Get
            Return Me.tableNodeHydraulics
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property StormCatalog As StormCatalogDataTable
        Get
            Return Me.tableStormCatalog
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ModelCatalogDataset = CType(MyBase.Clone,ModelCatalogDataset)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("DSCHydraulics")) Is Nothing) Then
            Me.Tables.Add(New DSCHydraulicsDataTable(ds.Tables("DSCHydraulics")))
        End If
        If (Not (ds.Tables("LinkHydraulics")) Is Nothing) Then
            Me.Tables.Add(New LinkHydraulicsDataTable(ds.Tables("LinkHydraulics")))
        End If
        If (Not (ds.Tables("ModelCatalog")) Is Nothing) Then
            Me.Tables.Add(New ModelCatalogDataTable(ds.Tables("ModelCatalog")))
        End If
        If (Not (ds.Tables("ModelScenario")) Is Nothing) Then
            Me.Tables.Add(New ModelScenarioDataTable(ds.Tables("ModelScenario")))
        End If
        If (Not (ds.Tables("NodeHydraulics")) Is Nothing) Then
            Me.Tables.Add(New NodeHydraulicsDataTable(ds.Tables("NodeHydraulics")))
        End If
        If (Not (ds.Tables("StormCatalog")) Is Nothing) Then
            Me.Tables.Add(New StormCatalogDataTable(ds.Tables("StormCatalog")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableDSCHydraulics = CType(Me.Tables("DSCHydraulics"),DSCHydraulicsDataTable)
        If (Not (Me.tableDSCHydraulics) Is Nothing) Then
            Me.tableDSCHydraulics.InitVars
        End If
        Me.tableLinkHydraulics = CType(Me.Tables("LinkHydraulics"),LinkHydraulicsDataTable)
        If (Not (Me.tableLinkHydraulics) Is Nothing) Then
            Me.tableLinkHydraulics.InitVars
        End If
        Me.tableModelCatalog = CType(Me.Tables("ModelCatalog"),ModelCatalogDataTable)
        If (Not (Me.tableModelCatalog) Is Nothing) Then
            Me.tableModelCatalog.InitVars
        End If
        Me.tableModelScenario = CType(Me.Tables("ModelScenario"),ModelScenarioDataTable)
        If (Not (Me.tableModelScenario) Is Nothing) Then
            Me.tableModelScenario.InitVars
        End If
        Me.tableNodeHydraulics = CType(Me.Tables("NodeHydraulics"),NodeHydraulicsDataTable)
        If (Not (Me.tableNodeHydraulics) Is Nothing) Then
            Me.tableNodeHydraulics.InitVars
        End If
        Me.tableStormCatalog = CType(Me.Tables("StormCatalog"),StormCatalogDataTable)
        If (Not (Me.tableStormCatalog) Is Nothing) Then
            Me.tableStormCatalog.InitVars
        End If
        Me.relationModelCatalogNodeHydraulics = Me.Relations("ModelCatalogNodeHydraulics")
        Me.relationStormCatalogModelScenario = Me.Relations("StormCatalogModelScenario")
        Me.relationModelScenarioModelCatalog = Me.Relations("ModelScenarioModelCatalog")
        Me.relationModelCatalogLinkHydraulics = Me.Relations("ModelCatalogLinkHydraulics")
        Me.relationModelCatalogDSCHydraulics = Me.Relations("ModelCatalogDSCHydraulics")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ModelCatalogDataset"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/ModelCatalogDataset.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableDSCHydraulics = New DSCHydraulicsDataTable
        Me.Tables.Add(Me.tableDSCHydraulics)
        Me.tableLinkHydraulics = New LinkHydraulicsDataTable
        Me.Tables.Add(Me.tableLinkHydraulics)
        Me.tableModelCatalog = New ModelCatalogDataTable
        Me.Tables.Add(Me.tableModelCatalog)
        Me.tableModelScenario = New ModelScenarioDataTable
        Me.Tables.Add(Me.tableModelScenario)
        Me.tableNodeHydraulics = New NodeHydraulicsDataTable
        Me.Tables.Add(Me.tableNodeHydraulics)
        Me.tableStormCatalog = New StormCatalogDataTable
        Me.Tables.Add(Me.tableStormCatalog)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("ModelCatalogDSCHydraulics", New DataColumn() {Me.tableModelCatalog.modelIDColumn}, New DataColumn() {Me.tableDSCHydraulics.modelIDColumn})
        Me.tableDSCHydraulics.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ModelCatalogLinkHydraulics", New DataColumn() {Me.tableModelCatalog.modelIDColumn}, New DataColumn() {Me.tableLinkHydraulics.modelIDColumn})
        Me.tableLinkHydraulics.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ModelScenarioModelCatalog", New DataColumn() {Me.tableModelScenario.scenarioIDColumn}, New DataColumn() {Me.tableModelCatalog.scenarioIDColumn})
        Me.tableModelCatalog.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("StormCatalogModelScenario", New DataColumn() {Me.tableStormCatalog.stormIDColumn}, New DataColumn() {Me.tableModelScenario.stormIDColumn})
        Me.tableModelScenario.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ModelCatalogNodeHydraulics", New DataColumn() {Me.tableModelCatalog.modelIDColumn}, New DataColumn() {Me.tableNodeHydraulics.modelIDColumn})
        Me.tableNodeHydraulics.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationModelCatalogNodeHydraulics = New DataRelation("ModelCatalogNodeHydraulics", New DataColumn() {Me.tableModelCatalog.modelIDColumn}, New DataColumn() {Me.tableNodeHydraulics.modelIDColumn}, false)
        Me.Relations.Add(Me.relationModelCatalogNodeHydraulics)
        Me.relationStormCatalogModelScenario = New DataRelation("StormCatalogModelScenario", New DataColumn() {Me.tableStormCatalog.stormIDColumn}, New DataColumn() {Me.tableModelScenario.stormIDColumn}, false)
        Me.Relations.Add(Me.relationStormCatalogModelScenario)
        Me.relationModelScenarioModelCatalog = New DataRelation("ModelScenarioModelCatalog", New DataColumn() {Me.tableModelScenario.scenarioIDColumn}, New DataColumn() {Me.tableModelCatalog.scenarioIDColumn}, false)
        Me.Relations.Add(Me.relationModelScenarioModelCatalog)
        Me.relationModelCatalogLinkHydraulics = New DataRelation("ModelCatalogLinkHydraulics", New DataColumn() {Me.tableModelCatalog.modelIDColumn}, New DataColumn() {Me.tableLinkHydraulics.modelIDColumn}, false)
        Me.Relations.Add(Me.relationModelCatalogLinkHydraulics)
        Me.relationModelCatalogDSCHydraulics = New DataRelation("ModelCatalogDSCHydraulics", New DataColumn() {Me.tableModelCatalog.modelIDColumn}, New DataColumn() {Me.tableDSCHydraulics.modelIDColumn}, false)
        Me.Relations.Add(Me.relationModelCatalogDSCHydraulics)
    End Sub
    
    Private Function ShouldSerializeDSCHydraulics() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLinkHydraulics() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeModelCatalog() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeModelScenario() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeNodeHydraulics() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeStormCatalog() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub DSCHydraulicsRowChangeEventHandler(ByVal sender As Object, ByVal e As DSCHydraulicsRowChangeEvent)
    
    Public Delegate Sub LinkHydraulicsRowChangeEventHandler(ByVal sender As Object, ByVal e As LinkHydraulicsRowChangeEvent)
    
    Public Delegate Sub ModelCatalogRowChangeEventHandler(ByVal sender As Object, ByVal e As ModelCatalogRowChangeEvent)
    
    Public Delegate Sub ModelScenarioRowChangeEventHandler(ByVal sender As Object, ByVal e As ModelScenarioRowChangeEvent)
    
    Public Delegate Sub NodeHydraulicsRowChangeEventHandler(ByVal sender As Object, ByVal e As NodeHydraulicsRowChangeEvent)
    
    Public Delegate Sub StormCatalogRowChangeEventHandler(ByVal sender As Object, ByVal e As StormCatalogRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DSCHydraulicsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndeltaHGL As DataColumn
        
        Private columnDSCHydraulicsID As DataColumn
        
        Private columnDSCID As DataColumn
        
        Private columnHGL As DataColumn
        
        Private columnmodelID As DataColumn
        
        Private columnscenarioID As DataColumn
        
        Private columnsurcharge As DataColumn
        
        Friend Sub New()
            MyBase.New("DSCHydraulics")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property deltaHGLColumn As DataColumn
            Get
                Return Me.columndeltaHGL
            End Get
        End Property
        
        Friend ReadOnly Property DSCHydraulicsIDColumn As DataColumn
            Get
                Return Me.columnDSCHydraulicsID
            End Get
        End Property
        
        Friend ReadOnly Property DSCIDColumn As DataColumn
            Get
                Return Me.columnDSCID
            End Get
        End Property
        
        Friend ReadOnly Property HGLColumn As DataColumn
            Get
                Return Me.columnHGL
            End Get
        End Property
        
        Friend ReadOnly Property modelIDColumn As DataColumn
            Get
                Return Me.columnmodelID
            End Get
        End Property
        
        Friend ReadOnly Property scenarioIDColumn As DataColumn
            Get
                Return Me.columnscenarioID
            End Get
        End Property
        
        Friend ReadOnly Property surchargeColumn As DataColumn
            Get
                Return Me.columnsurcharge
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DSCHydraulicsRow
            Get
                Return CType(Me.Rows(index),DSCHydraulicsRow)
            End Get
        End Property
        
        Public Event DSCHydraulicsRowChanged As DSCHydraulicsRowChangeEventHandler
        
        Public Event DSCHydraulicsRowChanging As DSCHydraulicsRowChangeEventHandler
        
        Public Event DSCHydraulicsRowDeleted As DSCHydraulicsRowChangeEventHandler
        
        Public Event DSCHydraulicsRowDeleting As DSCHydraulicsRowChangeEventHandler
        
        Public Overloads Sub AddDSCHydraulicsRow(ByVal row As DSCHydraulicsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDSCHydraulicsRow(ByVal deltaHGL As Double, ByVal DSCID As Integer, ByVal HGL As Double, ByVal parentModelCatalogRowByModelCatalogDSCHydraulics As ModelCatalogRow, ByVal scenarioID As Integer, ByVal surcharge As Double) As DSCHydraulicsRow
            Dim rowDSCHydraulicsRow As DSCHydraulicsRow = CType(Me.NewRow,DSCHydraulicsRow)
            rowDSCHydraulicsRow.ItemArray = New Object() {deltaHGL, Nothing, DSCID, HGL, parentModelCatalogRowByModelCatalogDSCHydraulics(2), scenarioID, surcharge}
            Me.Rows.Add(rowDSCHydraulicsRow)
            Return rowDSCHydraulicsRow
        End Function
        
        Public Function FindByDSCHydraulicsID(ByVal DSCHydraulicsID As Integer) As DSCHydraulicsRow
            Return CType(Me.Rows.Find(New Object() {DSCHydraulicsID}),DSCHydraulicsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DSCHydraulicsDataTable = CType(MyBase.Clone,DSCHydraulicsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DSCHydraulicsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndeltaHGL = Me.Columns("deltaHGL")
            Me.columnDSCHydraulicsID = Me.Columns("DSCHydraulicsID")
            Me.columnDSCID = Me.Columns("DSCID")
            Me.columnHGL = Me.Columns("HGL")
            Me.columnmodelID = Me.Columns("modelID")
            Me.columnscenarioID = Me.Columns("scenarioID")
            Me.columnsurcharge = Me.Columns("surcharge")
        End Sub
        
        Private Sub InitClass()
            Me.columndeltaHGL = New DataColumn("deltaHGL", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeltaHGL)
            Me.columnDSCHydraulicsID = New DataColumn("DSCHydraulicsID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDSCHydraulicsID)
            Me.columnDSCID = New DataColumn("DSCID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDSCID)
            Me.columnHGL = New DataColumn("HGL", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHGL)
            Me.columnmodelID = New DataColumn("modelID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmodelID)
            Me.columnscenarioID = New DataColumn("scenarioID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnscenarioID)
            Me.columnsurcharge = New DataColumn("surcharge", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsurcharge)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnDSCHydraulicsID}, true))
            Me.columnDSCHydraulicsID.AutoIncrement = true
            Me.columnDSCHydraulicsID.AllowDBNull = false
            Me.columnDSCHydraulicsID.Unique = true
        End Sub
        
        Public Function NewDSCHydraulicsRow() As DSCHydraulicsRow
            Return CType(Me.NewRow,DSCHydraulicsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DSCHydraulicsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DSCHydraulicsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DSCHydraulicsRowChangedEvent) Is Nothing) Then
                RaiseEvent DSCHydraulicsRowChanged(Me, New DSCHydraulicsRowChangeEvent(CType(e.Row,DSCHydraulicsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DSCHydraulicsRowChangingEvent) Is Nothing) Then
                RaiseEvent DSCHydraulicsRowChanging(Me, New DSCHydraulicsRowChangeEvent(CType(e.Row,DSCHydraulicsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DSCHydraulicsRowDeletedEvent) Is Nothing) Then
                RaiseEvent DSCHydraulicsRowDeleted(Me, New DSCHydraulicsRowChangeEvent(CType(e.Row,DSCHydraulicsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DSCHydraulicsRowDeletingEvent) Is Nothing) Then
                RaiseEvent DSCHydraulicsRowDeleting(Me, New DSCHydraulicsRowChangeEvent(CType(e.Row,DSCHydraulicsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDSCHydraulicsRow(ByVal row As DSCHydraulicsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DSCHydraulicsRow
        Inherits DataRow
        
        Private tableDSCHydraulics As DSCHydraulicsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDSCHydraulics = CType(Me.Table,DSCHydraulicsDataTable)
        End Sub
        
        Public Property deltaHGL As Double
            Get
                Try 
                    Return CType(Me(Me.tableDSCHydraulics.deltaHGLColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSCHydraulics.deltaHGLColumn) = value
            End Set
        End Property
        
        Public Property DSCHydraulicsID As Integer
            Get
                Return CType(Me(Me.tableDSCHydraulics.DSCHydraulicsIDColumn),Integer)
            End Get
            Set
                Me(Me.tableDSCHydraulics.DSCHydraulicsIDColumn) = value
            End Set
        End Property
        
        Public Property DSCID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDSCHydraulics.DSCIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSCHydraulics.DSCIDColumn) = value
            End Set
        End Property
        
        Public Property HGL As Double
            Get
                Try 
                    Return CType(Me(Me.tableDSCHydraulics.HGLColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSCHydraulics.HGLColumn) = value
            End Set
        End Property
        
        Public Property modelID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDSCHydraulics.modelIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSCHydraulics.modelIDColumn) = value
            End Set
        End Property
        
        Public Property scenarioID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDSCHydraulics.scenarioIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSCHydraulics.scenarioIDColumn) = value
            End Set
        End Property
        
        Public Property surcharge As Double
            Get
                Try 
                    Return CType(Me(Me.tableDSCHydraulics.surchargeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSCHydraulics.surchargeColumn) = value
            End Set
        End Property
        
        Public Property ModelCatalogRow As ModelCatalogRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ModelCatalogDSCHydraulics")),ModelCatalogRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ModelCatalogDSCHydraulics"))
            End Set
        End Property
        
        Public Function IsdeltaHGLNull() As Boolean
            Return Me.IsNull(Me.tableDSCHydraulics.deltaHGLColumn)
        End Function
        
        Public Sub SetdeltaHGLNull()
            Me(Me.tableDSCHydraulics.deltaHGLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDSCIDNull() As Boolean
            Return Me.IsNull(Me.tableDSCHydraulics.DSCIDColumn)
        End Function
        
        Public Sub SetDSCIDNull()
            Me(Me.tableDSCHydraulics.DSCIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHGLNull() As Boolean
            Return Me.IsNull(Me.tableDSCHydraulics.HGLColumn)
        End Function
        
        Public Sub SetHGLNull()
            Me(Me.tableDSCHydraulics.HGLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmodelIDNull() As Boolean
            Return Me.IsNull(Me.tableDSCHydraulics.modelIDColumn)
        End Function
        
        Public Sub SetmodelIDNull()
            Me(Me.tableDSCHydraulics.modelIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsscenarioIDNull() As Boolean
            Return Me.IsNull(Me.tableDSCHydraulics.scenarioIDColumn)
        End Function
        
        Public Sub SetscenarioIDNull()
            Me(Me.tableDSCHydraulics.scenarioIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssurchargeNull() As Boolean
            Return Me.IsNull(Me.tableDSCHydraulics.surchargeColumn)
        End Function
        
        Public Sub SetsurchargeNull()
            Me(Me.tableDSCHydraulics.surchargeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DSCHydraulicsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DSCHydraulicsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DSCHydraulicsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DSCHydraulicsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LinkHydraulicsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlinkHydraulicsID As DataColumn
        
        Private columnmaxDSElev As DataColumn
        
        Private columnmaxQ As DataColumn
        
        Private columnmaxUSElev As DataColumn
        
        Private columnmaxV As DataColumn
        
        Private columnMLinkID As DataColumn
        
        Private columnmodelID As DataColumn
        
        Private columnQqRatio As DataColumn
        
        Private columnscenarioID As DataColumn
        
        Private columntimeOfMaxQ As DataColumn
        
        Private columntimeOfMaxV As DataColumn
        
        Friend Sub New()
            MyBase.New("LinkHydraulics")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property linkHydraulicsIDColumn As DataColumn
            Get
                Return Me.columnlinkHydraulicsID
            End Get
        End Property
        
        Friend ReadOnly Property maxDSElevColumn As DataColumn
            Get
                Return Me.columnmaxDSElev
            End Get
        End Property
        
        Friend ReadOnly Property maxQColumn As DataColumn
            Get
                Return Me.columnmaxQ
            End Get
        End Property
        
        Friend ReadOnly Property maxUSElevColumn As DataColumn
            Get
                Return Me.columnmaxUSElev
            End Get
        End Property
        
        Friend ReadOnly Property maxVColumn As DataColumn
            Get
                Return Me.columnmaxV
            End Get
        End Property
        
        Friend ReadOnly Property MLinkIDColumn As DataColumn
            Get
                Return Me.columnMLinkID
            End Get
        End Property
        
        Friend ReadOnly Property modelIDColumn As DataColumn
            Get
                Return Me.columnmodelID
            End Get
        End Property
        
        Friend ReadOnly Property QqRatioColumn As DataColumn
            Get
                Return Me.columnQqRatio
            End Get
        End Property
        
        Friend ReadOnly Property scenarioIDColumn As DataColumn
            Get
                Return Me.columnscenarioID
            End Get
        End Property
        
        Friend ReadOnly Property timeOfMaxQColumn As DataColumn
            Get
                Return Me.columntimeOfMaxQ
            End Get
        End Property
        
        Friend ReadOnly Property timeOfMaxVColumn As DataColumn
            Get
                Return Me.columntimeOfMaxV
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LinkHydraulicsRow
            Get
                Return CType(Me.Rows(index),LinkHydraulicsRow)
            End Get
        End Property
        
        Public Event LinkHydraulicsRowChanged As LinkHydraulicsRowChangeEventHandler
        
        Public Event LinkHydraulicsRowChanging As LinkHydraulicsRowChangeEventHandler
        
        Public Event LinkHydraulicsRowDeleted As LinkHydraulicsRowChangeEventHandler
        
        Public Event LinkHydraulicsRowDeleting As LinkHydraulicsRowChangeEventHandler
        
        Public Overloads Sub AddLinkHydraulicsRow(ByVal row As LinkHydraulicsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLinkHydraulicsRow(ByVal maxDSElev As Double, ByVal maxQ As Double, ByVal maxUSElev As Double, ByVal maxV As Double, ByVal MLinkID As Integer, ByVal parentModelCatalogRowByModelCatalogLinkHydraulics As ModelCatalogRow, ByVal QqRatio As Double, ByVal scenarioID As Integer, ByVal timeOfMaxQ As Date, ByVal timeOfMaxV As Date) As LinkHydraulicsRow
            Dim rowLinkHydraulicsRow As LinkHydraulicsRow = CType(Me.NewRow,LinkHydraulicsRow)
            rowLinkHydraulicsRow.ItemArray = New Object() {Nothing, maxDSElev, maxQ, maxUSElev, maxV, MLinkID, parentModelCatalogRowByModelCatalogLinkHydraulics(2), QqRatio, scenarioID, timeOfMaxQ, timeOfMaxV}
            Me.Rows.Add(rowLinkHydraulicsRow)
            Return rowLinkHydraulicsRow
        End Function
        
        Public Function FindBylinkHydraulicsID(ByVal linkHydraulicsID As Integer) As LinkHydraulicsRow
            Return CType(Me.Rows.Find(New Object() {linkHydraulicsID}),LinkHydraulicsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LinkHydraulicsDataTable = CType(MyBase.Clone,LinkHydraulicsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LinkHydraulicsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlinkHydraulicsID = Me.Columns("linkHydraulicsID")
            Me.columnmaxDSElev = Me.Columns("maxDSElev")
            Me.columnmaxQ = Me.Columns("maxQ")
            Me.columnmaxUSElev = Me.Columns("maxUSElev")
            Me.columnmaxV = Me.Columns("maxV")
            Me.columnMLinkID = Me.Columns("MLinkID")
            Me.columnmodelID = Me.Columns("modelID")
            Me.columnQqRatio = Me.Columns("QqRatio")
            Me.columnscenarioID = Me.Columns("scenarioID")
            Me.columntimeOfMaxQ = Me.Columns("timeOfMaxQ")
            Me.columntimeOfMaxV = Me.Columns("timeOfMaxV")
        End Sub
        
        Private Sub InitClass()
            Me.columnlinkHydraulicsID = New DataColumn("linkHydraulicsID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlinkHydraulicsID)
            Me.columnmaxDSElev = New DataColumn("maxDSElev", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmaxDSElev)
            Me.columnmaxQ = New DataColumn("maxQ", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmaxQ)
            Me.columnmaxUSElev = New DataColumn("maxUSElev", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmaxUSElev)
            Me.columnmaxV = New DataColumn("maxV", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmaxV)
            Me.columnMLinkID = New DataColumn("MLinkID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMLinkID)
            Me.columnmodelID = New DataColumn("modelID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmodelID)
            Me.columnQqRatio = New DataColumn("QqRatio", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQqRatio)
            Me.columnscenarioID = New DataColumn("scenarioID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnscenarioID)
            Me.columntimeOfMaxQ = New DataColumn("timeOfMaxQ", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntimeOfMaxQ)
            Me.columntimeOfMaxV = New DataColumn("timeOfMaxV", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntimeOfMaxV)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnlinkHydraulicsID}, true))
            Me.columnlinkHydraulicsID.AutoIncrement = true
            Me.columnlinkHydraulicsID.AllowDBNull = false
            Me.columnlinkHydraulicsID.Unique = true
        End Sub
        
        Public Function NewLinkHydraulicsRow() As LinkHydraulicsRow
            Return CType(Me.NewRow,LinkHydraulicsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LinkHydraulicsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LinkHydraulicsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LinkHydraulicsRowChangedEvent) Is Nothing) Then
                RaiseEvent LinkHydraulicsRowChanged(Me, New LinkHydraulicsRowChangeEvent(CType(e.Row,LinkHydraulicsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LinkHydraulicsRowChangingEvent) Is Nothing) Then
                RaiseEvent LinkHydraulicsRowChanging(Me, New LinkHydraulicsRowChangeEvent(CType(e.Row,LinkHydraulicsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LinkHydraulicsRowDeletedEvent) Is Nothing) Then
                RaiseEvent LinkHydraulicsRowDeleted(Me, New LinkHydraulicsRowChangeEvent(CType(e.Row,LinkHydraulicsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LinkHydraulicsRowDeletingEvent) Is Nothing) Then
                RaiseEvent LinkHydraulicsRowDeleting(Me, New LinkHydraulicsRowChangeEvent(CType(e.Row,LinkHydraulicsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLinkHydraulicsRow(ByVal row As LinkHydraulicsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LinkHydraulicsRow
        Inherits DataRow
        
        Private tableLinkHydraulics As LinkHydraulicsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLinkHydraulics = CType(Me.Table,LinkHydraulicsDataTable)
        End Sub
        
        Public Property linkHydraulicsID As Integer
            Get
                Return CType(Me(Me.tableLinkHydraulics.linkHydraulicsIDColumn),Integer)
            End Get
            Set
                Me(Me.tableLinkHydraulics.linkHydraulicsIDColumn) = value
            End Set
        End Property
        
        Public Property maxDSElev As Double
            Get
                Try 
                    Return CType(Me(Me.tableLinkHydraulics.maxDSElevColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLinkHydraulics.maxDSElevColumn) = value
            End Set
        End Property
        
        Public Property maxQ As Double
            Get
                Try 
                    Return CType(Me(Me.tableLinkHydraulics.maxQColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLinkHydraulics.maxQColumn) = value
            End Set
        End Property
        
        Public Property maxUSElev As Double
            Get
                Try 
                    Return CType(Me(Me.tableLinkHydraulics.maxUSElevColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLinkHydraulics.maxUSElevColumn) = value
            End Set
        End Property
        
        Public Property maxV As Double
            Get
                Try 
                    Return CType(Me(Me.tableLinkHydraulics.maxVColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLinkHydraulics.maxVColumn) = value
            End Set
        End Property
        
        Public Property MLinkID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLinkHydraulics.MLinkIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLinkHydraulics.MLinkIDColumn) = value
            End Set
        End Property
        
        Public Property modelID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLinkHydraulics.modelIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLinkHydraulics.modelIDColumn) = value
            End Set
        End Property
        
        Public Property QqRatio As Double
            Get
                Try 
                    Return CType(Me(Me.tableLinkHydraulics.QqRatioColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLinkHydraulics.QqRatioColumn) = value
            End Set
        End Property
        
        Public Property scenarioID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLinkHydraulics.scenarioIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLinkHydraulics.scenarioIDColumn) = value
            End Set
        End Property
        
        Public Property timeOfMaxQ As Date
            Get
                Try 
                    Return CType(Me(Me.tableLinkHydraulics.timeOfMaxQColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLinkHydraulics.timeOfMaxQColumn) = value
            End Set
        End Property
        
        Public Property timeOfMaxV As Date
            Get
                Try 
                    Return CType(Me(Me.tableLinkHydraulics.timeOfMaxVColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLinkHydraulics.timeOfMaxVColumn) = value
            End Set
        End Property
        
        Public Property ModelCatalogRow As ModelCatalogRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ModelCatalogLinkHydraulics")),ModelCatalogRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ModelCatalogLinkHydraulics"))
            End Set
        End Property
        
        Public Function IsmaxDSElevNull() As Boolean
            Return Me.IsNull(Me.tableLinkHydraulics.maxDSElevColumn)
        End Function
        
        Public Sub SetmaxDSElevNull()
            Me(Me.tableLinkHydraulics.maxDSElevColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmaxQNull() As Boolean
            Return Me.IsNull(Me.tableLinkHydraulics.maxQColumn)
        End Function
        
        Public Sub SetmaxQNull()
            Me(Me.tableLinkHydraulics.maxQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmaxUSElevNull() As Boolean
            Return Me.IsNull(Me.tableLinkHydraulics.maxUSElevColumn)
        End Function
        
        Public Sub SetmaxUSElevNull()
            Me(Me.tableLinkHydraulics.maxUSElevColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmaxVNull() As Boolean
            Return Me.IsNull(Me.tableLinkHydraulics.maxVColumn)
        End Function
        
        Public Sub SetmaxVNull()
            Me(Me.tableLinkHydraulics.maxVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMLinkIDNull() As Boolean
            Return Me.IsNull(Me.tableLinkHydraulics.MLinkIDColumn)
        End Function
        
        Public Sub SetMLinkIDNull()
            Me(Me.tableLinkHydraulics.MLinkIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmodelIDNull() As Boolean
            Return Me.IsNull(Me.tableLinkHydraulics.modelIDColumn)
        End Function
        
        Public Sub SetmodelIDNull()
            Me(Me.tableLinkHydraulics.modelIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQqRatioNull() As Boolean
            Return Me.IsNull(Me.tableLinkHydraulics.QqRatioColumn)
        End Function
        
        Public Sub SetQqRatioNull()
            Me(Me.tableLinkHydraulics.QqRatioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsscenarioIDNull() As Boolean
            Return Me.IsNull(Me.tableLinkHydraulics.scenarioIDColumn)
        End Function
        
        Public Sub SetscenarioIDNull()
            Me(Me.tableLinkHydraulics.scenarioIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstimeOfMaxQNull() As Boolean
            Return Me.IsNull(Me.tableLinkHydraulics.timeOfMaxQColumn)
        End Function
        
        Public Sub SettimeOfMaxQNull()
            Me(Me.tableLinkHydraulics.timeOfMaxQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstimeOfMaxVNull() As Boolean
            Return Me.IsNull(Me.tableLinkHydraulics.timeOfMaxVColumn)
        End Function
        
        Public Sub SettimeOfMaxVNull()
            Me(Me.tableLinkHydraulics.timeOfMaxVColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LinkHydraulicsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LinkHydraulicsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LinkHydraulicsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LinkHydraulicsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ModelCatalogDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnisUploaded As DataColumn
        
        Private columnmodelDescription As DataColumn
        
        Private columnmodelID As DataColumn
        
        Private columnmodelName As DataColumn
        
        Private columnmodelOutputFile As DataColumn
        
        Private columnmodelPath As DataColumn
        
        Private columnmodelType As DataColumn
        
        Private columnscenarioID As DataColumn
        
        Private columnuploadDate As DataColumn
        
        Private columnuserName As DataColumn
        
        Friend Sub New()
            MyBase.New("ModelCatalog")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property isUploadedColumn As DataColumn
            Get
                Return Me.columnisUploaded
            End Get
        End Property
        
        Friend ReadOnly Property modelDescriptionColumn As DataColumn
            Get
                Return Me.columnmodelDescription
            End Get
        End Property
        
        Friend ReadOnly Property modelIDColumn As DataColumn
            Get
                Return Me.columnmodelID
            End Get
        End Property
        
        Friend ReadOnly Property modelNameColumn As DataColumn
            Get
                Return Me.columnmodelName
            End Get
        End Property
        
        Friend ReadOnly Property modelOutputFileColumn As DataColumn
            Get
                Return Me.columnmodelOutputFile
            End Get
        End Property
        
        Friend ReadOnly Property modelPathColumn As DataColumn
            Get
                Return Me.columnmodelPath
            End Get
        End Property
        
        Friend ReadOnly Property modelTypeColumn As DataColumn
            Get
                Return Me.columnmodelType
            End Get
        End Property
        
        Friend ReadOnly Property scenarioIDColumn As DataColumn
            Get
                Return Me.columnscenarioID
            End Get
        End Property
        
        Friend ReadOnly Property uploadDateColumn As DataColumn
            Get
                Return Me.columnuploadDate
            End Get
        End Property
        
        Friend ReadOnly Property userNameColumn As DataColumn
            Get
                Return Me.columnuserName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ModelCatalogRow
            Get
                Return CType(Me.Rows(index),ModelCatalogRow)
            End Get
        End Property
        
        Public Event ModelCatalogRowChanged As ModelCatalogRowChangeEventHandler
        
        Public Event ModelCatalogRowChanging As ModelCatalogRowChangeEventHandler
        
        Public Event ModelCatalogRowDeleted As ModelCatalogRowChangeEventHandler
        
        Public Event ModelCatalogRowDeleting As ModelCatalogRowChangeEventHandler
        
        Public Overloads Sub AddModelCatalogRow(ByVal row As ModelCatalogRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddModelCatalogRow(ByVal isUploaded As Boolean, ByVal modelDescription As String, ByVal modelName As String, ByVal modelOutputFile As String, ByVal modelPath As String, ByVal modelType As String, ByVal parentModelScenarioRowByModelScenarioModelCatalog As ModelScenarioRow, ByVal uploadDate As Date, ByVal userName As String) As ModelCatalogRow
            Dim rowModelCatalogRow As ModelCatalogRow = CType(Me.NewRow,ModelCatalogRow)
            rowModelCatalogRow.ItemArray = New Object() {isUploaded, modelDescription, Nothing, modelName, modelOutputFile, modelPath, modelType, parentModelScenarioRowByModelScenarioModelCatalog(1), uploadDate, userName}
            Me.Rows.Add(rowModelCatalogRow)
            Return rowModelCatalogRow
        End Function
        
        Public Function FindBymodelID(ByVal modelID As Integer) As ModelCatalogRow
            Return CType(Me.Rows.Find(New Object() {modelID}),ModelCatalogRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ModelCatalogDataTable = CType(MyBase.Clone,ModelCatalogDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ModelCatalogDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnisUploaded = Me.Columns("isUploaded")
            Me.columnmodelDescription = Me.Columns("modelDescription")
            Me.columnmodelID = Me.Columns("modelID")
            Me.columnmodelName = Me.Columns("modelName")
            Me.columnmodelOutputFile = Me.Columns("modelOutputFile")
            Me.columnmodelPath = Me.Columns("modelPath")
            Me.columnmodelType = Me.Columns("modelType")
            Me.columnscenarioID = Me.Columns("scenarioID")
            Me.columnuploadDate = Me.Columns("uploadDate")
            Me.columnuserName = Me.Columns("userName")
        End Sub
        
        Private Sub InitClass()
            Me.columnisUploaded = New DataColumn("isUploaded", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisUploaded)
            Me.columnmodelDescription = New DataColumn("modelDescription", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmodelDescription)
            Me.columnmodelID = New DataColumn("modelID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmodelID)
            Me.columnmodelName = New DataColumn("modelName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmodelName)
            Me.columnmodelOutputFile = New DataColumn("modelOutputFile", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmodelOutputFile)
            Me.columnmodelPath = New DataColumn("modelPath", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmodelPath)
            Me.columnmodelType = New DataColumn("modelType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmodelType)
            Me.columnscenarioID = New DataColumn("scenarioID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnscenarioID)
            Me.columnuploadDate = New DataColumn("uploadDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnuploadDate)
            Me.columnuserName = New DataColumn("userName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnuserName)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnmodelID}, true))
            Me.columnmodelID.AutoIncrement = true
            Me.columnmodelID.AllowDBNull = false
            Me.columnmodelID.Unique = true
        End Sub
        
        Public Function NewModelCatalogRow() As ModelCatalogRow
            Return CType(Me.NewRow,ModelCatalogRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ModelCatalogRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ModelCatalogRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ModelCatalogRowChangedEvent) Is Nothing) Then
                RaiseEvent ModelCatalogRowChanged(Me, New ModelCatalogRowChangeEvent(CType(e.Row,ModelCatalogRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ModelCatalogRowChangingEvent) Is Nothing) Then
                RaiseEvent ModelCatalogRowChanging(Me, New ModelCatalogRowChangeEvent(CType(e.Row,ModelCatalogRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ModelCatalogRowDeletedEvent) Is Nothing) Then
                RaiseEvent ModelCatalogRowDeleted(Me, New ModelCatalogRowChangeEvent(CType(e.Row,ModelCatalogRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ModelCatalogRowDeletingEvent) Is Nothing) Then
                RaiseEvent ModelCatalogRowDeleting(Me, New ModelCatalogRowChangeEvent(CType(e.Row,ModelCatalogRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveModelCatalogRow(ByVal row As ModelCatalogRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ModelCatalogRow
        Inherits DataRow
        
        Private tableModelCatalog As ModelCatalogDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableModelCatalog = CType(Me.Table,ModelCatalogDataTable)
        End Sub
        
        Public Property isUploaded As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableModelCatalog.isUploadedColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModelCatalog.isUploadedColumn) = value
            End Set
        End Property
        
        Public Property modelDescription As String
            Get
                Try 
                    Return CType(Me(Me.tableModelCatalog.modelDescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModelCatalog.modelDescriptionColumn) = value
            End Set
        End Property
        
        Public Property modelID As Integer
            Get
                Return CType(Me(Me.tableModelCatalog.modelIDColumn),Integer)
            End Get
            Set
                Me(Me.tableModelCatalog.modelIDColumn) = value
            End Set
        End Property
        
        Public Property modelName As String
            Get
                Try 
                    Return CType(Me(Me.tableModelCatalog.modelNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModelCatalog.modelNameColumn) = value
            End Set
        End Property
        
        Public Property modelOutputFile As String
            Get
                Try 
                    Return CType(Me(Me.tableModelCatalog.modelOutputFileColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModelCatalog.modelOutputFileColumn) = value
            End Set
        End Property
        
        Public Property modelPath As String
            Get
                Try 
                    Return CType(Me(Me.tableModelCatalog.modelPathColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModelCatalog.modelPathColumn) = value
            End Set
        End Property
        
        Public Property modelType As String
            Get
                Try 
                    Return CType(Me(Me.tableModelCatalog.modelTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModelCatalog.modelTypeColumn) = value
            End Set
        End Property
        
        Public Property scenarioID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableModelCatalog.scenarioIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModelCatalog.scenarioIDColumn) = value
            End Set
        End Property
        
        Public Property uploadDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableModelCatalog.uploadDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModelCatalog.uploadDateColumn) = value
            End Set
        End Property
        
        Public Property userName As String
            Get
                Try 
                    Return CType(Me(Me.tableModelCatalog.userNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModelCatalog.userNameColumn) = value
            End Set
        End Property
        
        Public Property ModelScenarioRow As ModelScenarioRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ModelScenarioModelCatalog")),ModelScenarioRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ModelScenarioModelCatalog"))
            End Set
        End Property
        
        Public Function IsisUploadedNull() As Boolean
            Return Me.IsNull(Me.tableModelCatalog.isUploadedColumn)
        End Function
        
        Public Sub SetisUploadedNull()
            Me(Me.tableModelCatalog.isUploadedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmodelDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableModelCatalog.modelDescriptionColumn)
        End Function
        
        Public Sub SetmodelDescriptionNull()
            Me(Me.tableModelCatalog.modelDescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmodelNameNull() As Boolean
            Return Me.IsNull(Me.tableModelCatalog.modelNameColumn)
        End Function
        
        Public Sub SetmodelNameNull()
            Me(Me.tableModelCatalog.modelNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmodelOutputFileNull() As Boolean
            Return Me.IsNull(Me.tableModelCatalog.modelOutputFileColumn)
        End Function
        
        Public Sub SetmodelOutputFileNull()
            Me(Me.tableModelCatalog.modelOutputFileColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmodelPathNull() As Boolean
            Return Me.IsNull(Me.tableModelCatalog.modelPathColumn)
        End Function
        
        Public Sub SetmodelPathNull()
            Me(Me.tableModelCatalog.modelPathColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmodelTypeNull() As Boolean
            Return Me.IsNull(Me.tableModelCatalog.modelTypeColumn)
        End Function
        
        Public Sub SetmodelTypeNull()
            Me(Me.tableModelCatalog.modelTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsscenarioIDNull() As Boolean
            Return Me.IsNull(Me.tableModelCatalog.scenarioIDColumn)
        End Function
        
        Public Sub SetscenarioIDNull()
            Me(Me.tableModelCatalog.scenarioIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsuploadDateNull() As Boolean
            Return Me.IsNull(Me.tableModelCatalog.uploadDateColumn)
        End Function
        
        Public Sub SetuploadDateNull()
            Me(Me.tableModelCatalog.uploadDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsuserNameNull() As Boolean
            Return Me.IsNull(Me.tableModelCatalog.userNameColumn)
        End Function
        
        Public Sub SetuserNameNull()
            Me(Me.tableModelCatalog.userNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetNodeHydraulicsRows() As NodeHydraulicsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ModelCatalogNodeHydraulics")),NodeHydraulicsRow())
        End Function
        
        Public Function GetLinkHydraulicsRows() As LinkHydraulicsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ModelCatalogLinkHydraulics")),LinkHydraulicsRow())
        End Function
        
        Public Function GetDSCHydraulicsRows() As DSCHydraulicsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ModelCatalogDSCHydraulics")),DSCHydraulicsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ModelCatalogRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ModelCatalogRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ModelCatalogRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ModelCatalogRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ModelScenarioDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndescription As DataColumn
        
        Private columnscenarioID As DataColumn
        
        Private columnstormID As DataColumn
        
        Friend Sub New()
            MyBase.New("ModelScenario")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property descriptionColumn As DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        Friend ReadOnly Property scenarioIDColumn As DataColumn
            Get
                Return Me.columnscenarioID
            End Get
        End Property
        
        Friend ReadOnly Property stormIDColumn As DataColumn
            Get
                Return Me.columnstormID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ModelScenarioRow
            Get
                Return CType(Me.Rows(index),ModelScenarioRow)
            End Get
        End Property
        
        Public Event ModelScenarioRowChanged As ModelScenarioRowChangeEventHandler
        
        Public Event ModelScenarioRowChanging As ModelScenarioRowChangeEventHandler
        
        Public Event ModelScenarioRowDeleted As ModelScenarioRowChangeEventHandler
        
        Public Event ModelScenarioRowDeleting As ModelScenarioRowChangeEventHandler
        
        Public Overloads Sub AddModelScenarioRow(ByVal row As ModelScenarioRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddModelScenarioRow(ByVal description As String, ByVal parentStormCatalogRowByStormCatalogModelScenario As StormCatalogRow) As ModelScenarioRow
            Dim rowModelScenarioRow As ModelScenarioRow = CType(Me.NewRow,ModelScenarioRow)
            rowModelScenarioRow.ItemArray = New Object() {description, Nothing, parentStormCatalogRowByStormCatalogModelScenario(5)}
            Me.Rows.Add(rowModelScenarioRow)
            Return rowModelScenarioRow
        End Function
        
        Public Function FindByscenarioID(ByVal scenarioID As Integer) As ModelScenarioRow
            Return CType(Me.Rows.Find(New Object() {scenarioID}),ModelScenarioRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ModelScenarioDataTable = CType(MyBase.Clone,ModelScenarioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ModelScenarioDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndescription = Me.Columns("description")
            Me.columnscenarioID = Me.Columns("scenarioID")
            Me.columnstormID = Me.Columns("stormID")
        End Sub
        
        Private Sub InitClass()
            Me.columndescription = New DataColumn("description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescription)
            Me.columnscenarioID = New DataColumn("scenarioID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnscenarioID)
            Me.columnstormID = New DataColumn("stormID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstormID)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnscenarioID}, true))
            Me.columnscenarioID.AutoIncrement = true
            Me.columnscenarioID.AllowDBNull = false
            Me.columnscenarioID.Unique = true
        End Sub
        
        Public Function NewModelScenarioRow() As ModelScenarioRow
            Return CType(Me.NewRow,ModelScenarioRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ModelScenarioRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ModelScenarioRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ModelScenarioRowChangedEvent) Is Nothing) Then
                RaiseEvent ModelScenarioRowChanged(Me, New ModelScenarioRowChangeEvent(CType(e.Row,ModelScenarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ModelScenarioRowChangingEvent) Is Nothing) Then
                RaiseEvent ModelScenarioRowChanging(Me, New ModelScenarioRowChangeEvent(CType(e.Row,ModelScenarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ModelScenarioRowDeletedEvent) Is Nothing) Then
                RaiseEvent ModelScenarioRowDeleted(Me, New ModelScenarioRowChangeEvent(CType(e.Row,ModelScenarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ModelScenarioRowDeletingEvent) Is Nothing) Then
                RaiseEvent ModelScenarioRowDeleting(Me, New ModelScenarioRowChangeEvent(CType(e.Row,ModelScenarioRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveModelScenarioRow(ByVal row As ModelScenarioRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ModelScenarioRow
        Inherits DataRow
        
        Private tableModelScenario As ModelScenarioDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableModelScenario = CType(Me.Table,ModelScenarioDataTable)
        End Sub
        
        Public Property description As String
            Get
                Try 
                    Return CType(Me(Me.tableModelScenario.descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModelScenario.descriptionColumn) = value
            End Set
        End Property
        
        Public Property scenarioID As Integer
            Get
                Return CType(Me(Me.tableModelScenario.scenarioIDColumn),Integer)
            End Get
            Set
                Me(Me.tableModelScenario.scenarioIDColumn) = value
            End Set
        End Property
        
        Public Property stormID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableModelScenario.stormIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModelScenario.stormIDColumn) = value
            End Set
        End Property
        
        Public Property StormCatalogRow As StormCatalogRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("StormCatalogModelScenario")),StormCatalogRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("StormCatalogModelScenario"))
            End Set
        End Property
        
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tableModelScenario.descriptionColumn)
        End Function
        
        Public Sub SetdescriptionNull()
            Me(Me.tableModelScenario.descriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstormIDNull() As Boolean
            Return Me.IsNull(Me.tableModelScenario.stormIDColumn)
        End Function
        
        Public Sub SetstormIDNull()
            Me(Me.tableModelScenario.stormIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetModelCatalogRows() As ModelCatalogRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ModelScenarioModelCatalog")),ModelCatalogRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ModelScenarioRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ModelScenarioRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ModelScenarioRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ModelScenarioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NodeHydraulicsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnfloodedTime As DataColumn
        
        Private columnfreeboard As DataColumn
        
        Private columnmaxElevation As DataColumn
        
        Private columnmodelID As DataColumn
        
        Private columnnodeHydraulicsID As DataColumn
        
        Private columnnodeName As DataColumn
        
        Private columnscenarioID As DataColumn
        
        Private columnsurcharge As DataColumn
        
        Private columnsurchargeTime As DataColumn
        
        Private columntimeOfMaxElev As DataColumn
        
        Friend Sub New()
            MyBase.New("NodeHydraulics")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property floodedTimeColumn As DataColumn
            Get
                Return Me.columnfloodedTime
            End Get
        End Property
        
        Friend ReadOnly Property freeboardColumn As DataColumn
            Get
                Return Me.columnfreeboard
            End Get
        End Property
        
        Friend ReadOnly Property maxElevationColumn As DataColumn
            Get
                Return Me.columnmaxElevation
            End Get
        End Property
        
        Friend ReadOnly Property modelIDColumn As DataColumn
            Get
                Return Me.columnmodelID
            End Get
        End Property
        
        Friend ReadOnly Property nodeHydraulicsIDColumn As DataColumn
            Get
                Return Me.columnnodeHydraulicsID
            End Get
        End Property
        
        Friend ReadOnly Property nodeNameColumn As DataColumn
            Get
                Return Me.columnnodeName
            End Get
        End Property
        
        Friend ReadOnly Property scenarioIDColumn As DataColumn
            Get
                Return Me.columnscenarioID
            End Get
        End Property
        
        Friend ReadOnly Property surchargeColumn As DataColumn
            Get
                Return Me.columnsurcharge
            End Get
        End Property
        
        Friend ReadOnly Property surchargeTimeColumn As DataColumn
            Get
                Return Me.columnsurchargeTime
            End Get
        End Property
        
        Friend ReadOnly Property timeOfMaxElevColumn As DataColumn
            Get
                Return Me.columntimeOfMaxElev
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As NodeHydraulicsRow
            Get
                Return CType(Me.Rows(index),NodeHydraulicsRow)
            End Get
        End Property
        
        Public Event NodeHydraulicsRowChanged As NodeHydraulicsRowChangeEventHandler
        
        Public Event NodeHydraulicsRowChanging As NodeHydraulicsRowChangeEventHandler
        
        Public Event NodeHydraulicsRowDeleted As NodeHydraulicsRowChangeEventHandler
        
        Public Event NodeHydraulicsRowDeleting As NodeHydraulicsRowChangeEventHandler
        
        Public Overloads Sub AddNodeHydraulicsRow(ByVal row As NodeHydraulicsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddNodeHydraulicsRow(ByVal floodedTime As Double, ByVal freeboard As Double, ByVal maxElevation As Double, ByVal parentModelCatalogRowByModelCatalogNodeHydraulics As ModelCatalogRow, ByVal nodeName As String, ByVal scenarioID As Integer, ByVal surcharge As Double, ByVal surchargeTime As Double, ByVal timeOfMaxElev As Date) As NodeHydraulicsRow
            Dim rowNodeHydraulicsRow As NodeHydraulicsRow = CType(Me.NewRow,NodeHydraulicsRow)
            rowNodeHydraulicsRow.ItemArray = New Object() {floodedTime, freeboard, maxElevation, parentModelCatalogRowByModelCatalogNodeHydraulics(2), Nothing, nodeName, scenarioID, surcharge, surchargeTime, timeOfMaxElev}
            Me.Rows.Add(rowNodeHydraulicsRow)
            Return rowNodeHydraulicsRow
        End Function
        
        Public Function FindBynodeHydraulicsID(ByVal nodeHydraulicsID As Integer) As NodeHydraulicsRow
            Return CType(Me.Rows.Find(New Object() {nodeHydraulicsID}),NodeHydraulicsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As NodeHydraulicsDataTable = CType(MyBase.Clone,NodeHydraulicsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New NodeHydraulicsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnfloodedTime = Me.Columns("floodedTime")
            Me.columnfreeboard = Me.Columns("freeboard")
            Me.columnmaxElevation = Me.Columns("maxElevation")
            Me.columnmodelID = Me.Columns("modelID")
            Me.columnnodeHydraulicsID = Me.Columns("nodeHydraulicsID")
            Me.columnnodeName = Me.Columns("nodeName")
            Me.columnscenarioID = Me.Columns("scenarioID")
            Me.columnsurcharge = Me.Columns("surcharge")
            Me.columnsurchargeTime = Me.Columns("surchargeTime")
            Me.columntimeOfMaxElev = Me.Columns("timeOfMaxElev")
        End Sub
        
        Private Sub InitClass()
            Me.columnfloodedTime = New DataColumn("floodedTime", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfloodedTime)
            Me.columnfreeboard = New DataColumn("freeboard", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfreeboard)
            Me.columnmaxElevation = New DataColumn("maxElevation", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmaxElevation)
            Me.columnmodelID = New DataColumn("modelID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmodelID)
            Me.columnnodeHydraulicsID = New DataColumn("nodeHydraulicsID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnodeHydraulicsID)
            Me.columnnodeName = New DataColumn("nodeName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnodeName)
            Me.columnscenarioID = New DataColumn("scenarioID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnscenarioID)
            Me.columnsurcharge = New DataColumn("surcharge", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsurcharge)
            Me.columnsurchargeTime = New DataColumn("surchargeTime", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsurchargeTime)
            Me.columntimeOfMaxElev = New DataColumn("timeOfMaxElev", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntimeOfMaxElev)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnnodeHydraulicsID}, true))
            Me.columnnodeHydraulicsID.AutoIncrement = true
            Me.columnnodeHydraulicsID.AllowDBNull = false
            Me.columnnodeHydraulicsID.Unique = true
        End Sub
        
        Public Function NewNodeHydraulicsRow() As NodeHydraulicsRow
            Return CType(Me.NewRow,NodeHydraulicsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New NodeHydraulicsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(NodeHydraulicsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NodeHydraulicsRowChangedEvent) Is Nothing) Then
                RaiseEvent NodeHydraulicsRowChanged(Me, New NodeHydraulicsRowChangeEvent(CType(e.Row,NodeHydraulicsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NodeHydraulicsRowChangingEvent) Is Nothing) Then
                RaiseEvent NodeHydraulicsRowChanging(Me, New NodeHydraulicsRowChangeEvent(CType(e.Row,NodeHydraulicsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NodeHydraulicsRowDeletedEvent) Is Nothing) Then
                RaiseEvent NodeHydraulicsRowDeleted(Me, New NodeHydraulicsRowChangeEvent(CType(e.Row,NodeHydraulicsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NodeHydraulicsRowDeletingEvent) Is Nothing) Then
                RaiseEvent NodeHydraulicsRowDeleting(Me, New NodeHydraulicsRowChangeEvent(CType(e.Row,NodeHydraulicsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveNodeHydraulicsRow(ByVal row As NodeHydraulicsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NodeHydraulicsRow
        Inherits DataRow
        
        Private tableNodeHydraulics As NodeHydraulicsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableNodeHydraulics = CType(Me.Table,NodeHydraulicsDataTable)
        End Sub
        
        Public Property floodedTime As Double
            Get
                Try 
                    Return CType(Me(Me.tableNodeHydraulics.floodedTimeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNodeHydraulics.floodedTimeColumn) = value
            End Set
        End Property
        
        Public Property freeboard As Double
            Get
                Try 
                    Return CType(Me(Me.tableNodeHydraulics.freeboardColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNodeHydraulics.freeboardColumn) = value
            End Set
        End Property
        
        Public Property maxElevation As Double
            Get
                Try 
                    Return CType(Me(Me.tableNodeHydraulics.maxElevationColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNodeHydraulics.maxElevationColumn) = value
            End Set
        End Property
        
        Public Property modelID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNodeHydraulics.modelIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNodeHydraulics.modelIDColumn) = value
            End Set
        End Property
        
        Public Property nodeHydraulicsID As Integer
            Get
                Return CType(Me(Me.tableNodeHydraulics.nodeHydraulicsIDColumn),Integer)
            End Get
            Set
                Me(Me.tableNodeHydraulics.nodeHydraulicsIDColumn) = value
            End Set
        End Property
        
        Public Property nodeName As String
            Get
                Try 
                    Return CType(Me(Me.tableNodeHydraulics.nodeNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNodeHydraulics.nodeNameColumn) = value
            End Set
        End Property
        
        Public Property scenarioID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNodeHydraulics.scenarioIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNodeHydraulics.scenarioIDColumn) = value
            End Set
        End Property
        
        Public Property surcharge As Double
            Get
                Try 
                    Return CType(Me(Me.tableNodeHydraulics.surchargeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNodeHydraulics.surchargeColumn) = value
            End Set
        End Property
        
        Public Property surchargeTime As Double
            Get
                Try 
                    Return CType(Me(Me.tableNodeHydraulics.surchargeTimeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNodeHydraulics.surchargeTimeColumn) = value
            End Set
        End Property
        
        Public Property timeOfMaxElev As Date
            Get
                Try 
                    Return CType(Me(Me.tableNodeHydraulics.timeOfMaxElevColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNodeHydraulics.timeOfMaxElevColumn) = value
            End Set
        End Property
        
        Public Property ModelCatalogRow As ModelCatalogRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ModelCatalogNodeHydraulics")),ModelCatalogRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ModelCatalogNodeHydraulics"))
            End Set
        End Property
        
        Public Function IsfloodedTimeNull() As Boolean
            Return Me.IsNull(Me.tableNodeHydraulics.floodedTimeColumn)
        End Function
        
        Public Sub SetfloodedTimeNull()
            Me(Me.tableNodeHydraulics.floodedTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfreeboardNull() As Boolean
            Return Me.IsNull(Me.tableNodeHydraulics.freeboardColumn)
        End Function
        
        Public Sub SetfreeboardNull()
            Me(Me.tableNodeHydraulics.freeboardColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmaxElevationNull() As Boolean
            Return Me.IsNull(Me.tableNodeHydraulics.maxElevationColumn)
        End Function
        
        Public Sub SetmaxElevationNull()
            Me(Me.tableNodeHydraulics.maxElevationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmodelIDNull() As Boolean
            Return Me.IsNull(Me.tableNodeHydraulics.modelIDColumn)
        End Function
        
        Public Sub SetmodelIDNull()
            Me(Me.tableNodeHydraulics.modelIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnodeNameNull() As Boolean
            Return Me.IsNull(Me.tableNodeHydraulics.nodeNameColumn)
        End Function
        
        Public Sub SetnodeNameNull()
            Me(Me.tableNodeHydraulics.nodeNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsscenarioIDNull() As Boolean
            Return Me.IsNull(Me.tableNodeHydraulics.scenarioIDColumn)
        End Function
        
        Public Sub SetscenarioIDNull()
            Me(Me.tableNodeHydraulics.scenarioIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssurchargeNull() As Boolean
            Return Me.IsNull(Me.tableNodeHydraulics.surchargeColumn)
        End Function
        
        Public Sub SetsurchargeNull()
            Me(Me.tableNodeHydraulics.surchargeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssurchargeTimeNull() As Boolean
            Return Me.IsNull(Me.tableNodeHydraulics.surchargeTimeColumn)
        End Function
        
        Public Sub SetsurchargeTimeNull()
            Me(Me.tableNodeHydraulics.surchargeTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstimeOfMaxElevNull() As Boolean
            Return Me.IsNull(Me.tableNodeHydraulics.timeOfMaxElevColumn)
        End Function
        
        Public Sub SettimeOfMaxElevNull()
            Me(Me.tableNodeHydraulics.timeOfMaxElevColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NodeHydraulicsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As NodeHydraulicsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As NodeHydraulicsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As NodeHydraulicsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StormCatalogDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndescription As DataColumn
        
        Private columnduration As DataColumn
        
        Private columninterfaceFile As DataColumn
        
        Private columnrecurrenceInterval As DataColumn
        
        Private columnstartDate As DataColumn
        
        Private columnstormID As DataColumn
        
        Private columnstormName As DataColumn
        
        Private columntimeStep As DataColumn
        
        Friend Sub New()
            MyBase.New("StormCatalog")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property descriptionColumn As DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        Friend ReadOnly Property durationColumn As DataColumn
            Get
                Return Me.columnduration
            End Get
        End Property
        
        Friend ReadOnly Property interfaceFileColumn As DataColumn
            Get
                Return Me.columninterfaceFile
            End Get
        End Property
        
        Friend ReadOnly Property recurrenceIntervalColumn As DataColumn
            Get
                Return Me.columnrecurrenceInterval
            End Get
        End Property
        
        Friend ReadOnly Property startDateColumn As DataColumn
            Get
                Return Me.columnstartDate
            End Get
        End Property
        
        Friend ReadOnly Property stormIDColumn As DataColumn
            Get
                Return Me.columnstormID
            End Get
        End Property
        
        Friend ReadOnly Property stormNameColumn As DataColumn
            Get
                Return Me.columnstormName
            End Get
        End Property
        
        Friend ReadOnly Property timeStepColumn As DataColumn
            Get
                Return Me.columntimeStep
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As StormCatalogRow
            Get
                Return CType(Me.Rows(index),StormCatalogRow)
            End Get
        End Property
        
        Public Event StormCatalogRowChanged As StormCatalogRowChangeEventHandler
        
        Public Event StormCatalogRowChanging As StormCatalogRowChangeEventHandler
        
        Public Event StormCatalogRowDeleted As StormCatalogRowChangeEventHandler
        
        Public Event StormCatalogRowDeleting As StormCatalogRowChangeEventHandler
        
        Public Overloads Sub AddStormCatalogRow(ByVal row As StormCatalogRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddStormCatalogRow(ByVal description As String, ByVal duration As Integer, ByVal interfaceFile As String, ByVal recurrenceInterval As Integer, ByVal startDate As Date, ByVal stormName As String, ByVal timeStep As Integer) As StormCatalogRow
            Dim rowStormCatalogRow As StormCatalogRow = CType(Me.NewRow,StormCatalogRow)
            rowStormCatalogRow.ItemArray = New Object() {description, duration, interfaceFile, recurrenceInterval, startDate, Nothing, stormName, timeStep}
            Me.Rows.Add(rowStormCatalogRow)
            Return rowStormCatalogRow
        End Function
        
        Public Function FindBystormID(ByVal stormID As Integer) As StormCatalogRow
            Return CType(Me.Rows.Find(New Object() {stormID}),StormCatalogRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As StormCatalogDataTable = CType(MyBase.Clone,StormCatalogDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New StormCatalogDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndescription = Me.Columns("description")
            Me.columnduration = Me.Columns("duration")
            Me.columninterfaceFile = Me.Columns("interfaceFile")
            Me.columnrecurrenceInterval = Me.Columns("recurrenceInterval")
            Me.columnstartDate = Me.Columns("startDate")
            Me.columnstormID = Me.Columns("stormID")
            Me.columnstormName = Me.Columns("stormName")
            Me.columntimeStep = Me.Columns("timeStep")
        End Sub
        
        Private Sub InitClass()
            Me.columndescription = New DataColumn("description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescription)
            Me.columnduration = New DataColumn("duration", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnduration)
            Me.columninterfaceFile = New DataColumn("interfaceFile", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninterfaceFile)
            Me.columnrecurrenceInterval = New DataColumn("recurrenceInterval", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrecurrenceInterval)
            Me.columnstartDate = New DataColumn("startDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstartDate)
            Me.columnstormID = New DataColumn("stormID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstormID)
            Me.columnstormName = New DataColumn("stormName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstormName)
            Me.columntimeStep = New DataColumn("timeStep", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntimeStep)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnstormID}, true))
            Me.columnstormID.AutoIncrement = true
            Me.columnstormID.AllowDBNull = false
            Me.columnstormID.Unique = true
        End Sub
        
        Public Function NewStormCatalogRow() As StormCatalogRow
            Return CType(Me.NewRow,StormCatalogRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New StormCatalogRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(StormCatalogRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StormCatalogRowChangedEvent) Is Nothing) Then
                RaiseEvent StormCatalogRowChanged(Me, New StormCatalogRowChangeEvent(CType(e.Row,StormCatalogRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StormCatalogRowChangingEvent) Is Nothing) Then
                RaiseEvent StormCatalogRowChanging(Me, New StormCatalogRowChangeEvent(CType(e.Row,StormCatalogRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StormCatalogRowDeletedEvent) Is Nothing) Then
                RaiseEvent StormCatalogRowDeleted(Me, New StormCatalogRowChangeEvent(CType(e.Row,StormCatalogRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StormCatalogRowDeletingEvent) Is Nothing) Then
                RaiseEvent StormCatalogRowDeleting(Me, New StormCatalogRowChangeEvent(CType(e.Row,StormCatalogRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveStormCatalogRow(ByVal row As StormCatalogRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StormCatalogRow
        Inherits DataRow
        
        Private tableStormCatalog As StormCatalogDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableStormCatalog = CType(Me.Table,StormCatalogDataTable)
        End Sub
        
        Public Property description As String
            Get
                Try 
                    Return CType(Me(Me.tableStormCatalog.descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStormCatalog.descriptionColumn) = value
            End Set
        End Property
        
        Public Property duration As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStormCatalog.durationColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStormCatalog.durationColumn) = value
            End Set
        End Property
        
        Public Property interfaceFile As String
            Get
                Try 
                    Return CType(Me(Me.tableStormCatalog.interfaceFileColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStormCatalog.interfaceFileColumn) = value
            End Set
        End Property
        
        Public Property recurrenceInterval As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStormCatalog.recurrenceIntervalColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStormCatalog.recurrenceIntervalColumn) = value
            End Set
        End Property
        
        Public Property startDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableStormCatalog.startDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStormCatalog.startDateColumn) = value
            End Set
        End Property
        
        Public Property stormID As Integer
            Get
                Return CType(Me(Me.tableStormCatalog.stormIDColumn),Integer)
            End Get
            Set
                Me(Me.tableStormCatalog.stormIDColumn) = value
            End Set
        End Property
        
        Public Property stormName As String
            Get
                Try 
                    Return CType(Me(Me.tableStormCatalog.stormNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStormCatalog.stormNameColumn) = value
            End Set
        End Property
        
        Public Property timeStep As Integer
            Get
                Try 
                    Return CType(Me(Me.tableStormCatalog.timeStepColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStormCatalog.timeStepColumn) = value
            End Set
        End Property
        
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tableStormCatalog.descriptionColumn)
        End Function
        
        Public Sub SetdescriptionNull()
            Me(Me.tableStormCatalog.descriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdurationNull() As Boolean
            Return Me.IsNull(Me.tableStormCatalog.durationColumn)
        End Function
        
        Public Sub SetdurationNull()
            Me(Me.tableStormCatalog.durationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsinterfaceFileNull() As Boolean
            Return Me.IsNull(Me.tableStormCatalog.interfaceFileColumn)
        End Function
        
        Public Sub SetinterfaceFileNull()
            Me(Me.tableStormCatalog.interfaceFileColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrecurrenceIntervalNull() As Boolean
            Return Me.IsNull(Me.tableStormCatalog.recurrenceIntervalColumn)
        End Function
        
        Public Sub SetrecurrenceIntervalNull()
            Me(Me.tableStormCatalog.recurrenceIntervalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstartDateNull() As Boolean
            Return Me.IsNull(Me.tableStormCatalog.startDateColumn)
        End Function
        
        Public Sub SetstartDateNull()
            Me(Me.tableStormCatalog.startDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstormNameNull() As Boolean
            Return Me.IsNull(Me.tableStormCatalog.stormNameColumn)
        End Function
        
        Public Sub SetstormNameNull()
            Me(Me.tableStormCatalog.stormNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstimeStepNull() As Boolean
            Return Me.IsNull(Me.tableStormCatalog.timeStepColumn)
        End Function
        
        Public Sub SettimeStepNull()
            Me(Me.tableStormCatalog.timeStepColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetModelScenarioRows() As ModelScenarioRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("StormCatalogModelScenario")),ModelScenarioRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StormCatalogRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As StormCatalogRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As StormCatalogRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As StormCatalogRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ModelResultsSchema
    Inherits DataSet
    
    Private tabletableE09 As tableE09DataTable
    
    Private tabletableE10 As tableE10DataTable
    
    Private tabletableE20 As tableE20DataTable
    
    Private table_ComputeHGL As _ComputeHGLDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tableE09")) Is Nothing) Then
                Me.Tables.Add(New tableE09DataTable(ds.Tables("tableE09")))
            End If
            If (Not (ds.Tables("tableE10")) Is Nothing) Then
                Me.Tables.Add(New tableE10DataTable(ds.Tables("tableE10")))
            End If
            If (Not (ds.Tables("tableE20")) Is Nothing) Then
                Me.Tables.Add(New tableE20DataTable(ds.Tables("tableE20")))
            End If
            If (Not (ds.Tables("_ComputeHGL")) Is Nothing) Then
                Me.Tables.Add(New _ComputeHGLDataTable(ds.Tables("_ComputeHGL")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tableE09 As tableE09DataTable
        Get
            Return Me.tabletableE09
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tableE10 As tableE10DataTable
        Get
            Return Me.tabletableE10
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tableE20 As tableE20DataTable
        Get
            Return Me.tabletableE20
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _ComputeHGL As _ComputeHGLDataTable
        Get
            Return Me.table_ComputeHGL
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ModelResultsSchema = CType(MyBase.Clone,ModelResultsSchema)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("tableE09")) Is Nothing) Then
            Me.Tables.Add(New tableE09DataTable(ds.Tables("tableE09")))
        End If
        If (Not (ds.Tables("tableE10")) Is Nothing) Then
            Me.Tables.Add(New tableE10DataTable(ds.Tables("tableE10")))
        End If
        If (Not (ds.Tables("tableE20")) Is Nothing) Then
            Me.Tables.Add(New tableE20DataTable(ds.Tables("tableE20")))
        End If
        If (Not (ds.Tables("_ComputeHGL")) Is Nothing) Then
            Me.Tables.Add(New _ComputeHGLDataTable(ds.Tables("_ComputeHGL")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tabletableE09 = CType(Me.Tables("tableE09"),tableE09DataTable)
        If (Not (Me.tabletableE09) Is Nothing) Then
            Me.tabletableE09.InitVars
        End If
        Me.tabletableE10 = CType(Me.Tables("tableE10"),tableE10DataTable)
        If (Not (Me.tabletableE10) Is Nothing) Then
            Me.tabletableE10.InitVars
        End If
        Me.tabletableE20 = CType(Me.Tables("tableE20"),tableE20DataTable)
        If (Not (Me.tabletableE20) Is Nothing) Then
            Me.tabletableE20.InitVars
        End If
        Me.table_ComputeHGL = CType(Me.Tables("_ComputeHGL"),_ComputeHGLDataTable)
        If (Not (Me.table_ComputeHGL) Is Nothing) Then
            Me.table_ComputeHGL.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ModelResultsSchema"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/XMLSchema1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tabletableE09 = New tableE09DataTable
        Me.Tables.Add(Me.tabletableE09)
        Me.tabletableE10 = New tableE10DataTable
        Me.Tables.Add(Me.tabletableE10)
        Me.tabletableE20 = New tableE20DataTable
        Me.Tables.Add(Me.tabletableE20)
        Me.table_ComputeHGL = New _ComputeHGLDataTable
        Me.Tables.Add(Me.table_ComputeHGL)
    End Sub
    
    Private Function ShouldSerializetableE09() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetableE10() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetableE20() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerialize_ComputeHGL() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub tableE09RowChangeEventHandler(ByVal sender As Object, ByVal e As tableE09RowChangeEvent)
    
    Public Delegate Sub tableE10RowChangeEventHandler(ByVal sender As Object, ByVal e As tableE10RowChangeEvent)
    
    Public Delegate Sub tableE20RowChangeEventHandler(ByVal sender As Object, ByVal e As tableE20RowChangeEvent)
    
    Public Delegate Sub _ComputeHGLRowChangeEventHandler(ByVal sender As Object, ByVal e As _ComputeHGLRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tableE09DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNodeName As DataColumn
        
        Private columnGrElev As DataColumn
        
        Private columnMaxCrown As DataColumn
        
        Private columnMaxJElev As DataColumn
        
        Private columnTimeOfMax As DataColumn
        
        Private columnSurcharge As DataColumn
        
        Private columnFreeboard As DataColumn
        
        Private columnMaxArea As DataColumn
        
        Private columnMAPINFO_ID As DataColumn
        
        Friend Sub New()
            MyBase.New("tableE09")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NodeNameColumn As DataColumn
            Get
                Return Me.columnNodeName
            End Get
        End Property
        
        Friend ReadOnly Property GrElevColumn As DataColumn
            Get
                Return Me.columnGrElev
            End Get
        End Property
        
        Friend ReadOnly Property MaxCrownColumn As DataColumn
            Get
                Return Me.columnMaxCrown
            End Get
        End Property
        
        Friend ReadOnly Property MaxJElevColumn As DataColumn
            Get
                Return Me.columnMaxJElev
            End Get
        End Property
        
        Friend ReadOnly Property TimeOfMaxColumn As DataColumn
            Get
                Return Me.columnTimeOfMax
            End Get
        End Property
        
        Friend ReadOnly Property SurchargeColumn As DataColumn
            Get
                Return Me.columnSurcharge
            End Get
        End Property
        
        Friend ReadOnly Property FreeboardColumn As DataColumn
            Get
                Return Me.columnFreeboard
            End Get
        End Property
        
        Friend ReadOnly Property MaxAreaColumn As DataColumn
            Get
                Return Me.columnMaxArea
            End Get
        End Property
        
        Friend ReadOnly Property MAPINFO_IDColumn As DataColumn
            Get
                Return Me.columnMAPINFO_ID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tableE09Row
            Get
                Return CType(Me.Rows(index),tableE09Row)
            End Get
        End Property
        
        Public Event tableE09RowChanged As tableE09RowChangeEventHandler
        
        Public Event tableE09RowChanging As tableE09RowChangeEventHandler
        
        Public Event tableE09RowDeleted As tableE09RowChangeEventHandler
        
        Public Event tableE09RowDeleting As tableE09RowChangeEventHandler
        
        Public Overloads Sub AddtableE09Row(ByVal row As tableE09Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtableE09Row(ByVal NodeName As String, ByVal GrElev As Double, ByVal MaxCrown As Double, ByVal MaxJElev As Double, ByVal TimeOfMax As Date, ByVal Surcharge As Double, ByVal Freeboard As Double, ByVal MaxArea As Double) As tableE09Row
            Dim rowtableE09Row As tableE09Row = CType(Me.NewRow,tableE09Row)
            rowtableE09Row.ItemArray = New Object() {NodeName, GrElev, MaxCrown, MaxJElev, TimeOfMax, Surcharge, Freeboard, MaxArea, Nothing}
            Me.Rows.Add(rowtableE09Row)
            Return rowtableE09Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tableE09DataTable = CType(MyBase.Clone,tableE09DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tableE09DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNodeName = Me.Columns("NodeName")
            Me.columnGrElev = Me.Columns("GrElev")
            Me.columnMaxCrown = Me.Columns("MaxCrown")
            Me.columnMaxJElev = Me.Columns("MaxJElev")
            Me.columnTimeOfMax = Me.Columns("TimeOfMax")
            Me.columnSurcharge = Me.Columns("Surcharge")
            Me.columnFreeboard = Me.Columns("Freeboard")
            Me.columnMaxArea = Me.Columns("MaxArea")
            Me.columnMAPINFO_ID = Me.Columns("MAPINFO_ID")
        End Sub
        
        Private Sub InitClass()
            Me.columnNodeName = New DataColumn("NodeName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNodeName)
            Me.columnGrElev = New DataColumn("GrElev", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGrElev)
            Me.columnMaxCrown = New DataColumn("MaxCrown", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaxCrown)
            Me.columnMaxJElev = New DataColumn("MaxJElev", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaxJElev)
            Me.columnTimeOfMax = New DataColumn("TimeOfMax", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTimeOfMax)
            Me.columnSurcharge = New DataColumn("Surcharge", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSurcharge)
            Me.columnFreeboard = New DataColumn("Freeboard", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFreeboard)
            Me.columnMaxArea = New DataColumn("MaxArea", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaxArea)
            Me.columnMAPINFO_ID = New DataColumn("MAPINFO_ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMAPINFO_ID)
            Me.columnNodeName.AllowDBNull = false
            Me.columnMAPINFO_ID.AutoIncrement = true
        End Sub
        
        Public Function NewtableE09Row() As tableE09Row
            Return CType(Me.NewRow,tableE09Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tableE09Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tableE09Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tableE09RowChangedEvent) Is Nothing) Then
                RaiseEvent tableE09RowChanged(Me, New tableE09RowChangeEvent(CType(e.Row,tableE09Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tableE09RowChangingEvent) Is Nothing) Then
                RaiseEvent tableE09RowChanging(Me, New tableE09RowChangeEvent(CType(e.Row,tableE09Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tableE09RowDeletedEvent) Is Nothing) Then
                RaiseEvent tableE09RowDeleted(Me, New tableE09RowChangeEvent(CType(e.Row,tableE09Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tableE09RowDeletingEvent) Is Nothing) Then
                RaiseEvent tableE09RowDeleting(Me, New tableE09RowChangeEvent(CType(e.Row,tableE09Row), e.Action))
            End If
        End Sub
        
        Public Sub RemovetableE09Row(ByVal row As tableE09Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tableE09Row
        Inherits DataRow
        
        Private tabletableE09 As tableE09DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletableE09 = CType(Me.Table,tableE09DataTable)
        End Sub
        
        Public Property NodeName As String
            Get
                Return CType(Me(Me.tabletableE09.NodeNameColumn),String)
            End Get
            Set
                Me(Me.tabletableE09.NodeNameColumn) = value
            End Set
        End Property
        
        Public Property GrElev As Double
            Get
                Try 
                    Return CType(Me(Me.tabletableE09.GrElevColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE09.GrElevColumn) = value
            End Set
        End Property
        
        Public Property MaxCrown As Double
            Get
                Try 
                    Return CType(Me(Me.tabletableE09.MaxCrownColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE09.MaxCrownColumn) = value
            End Set
        End Property
        
        Public Property MaxJElev As Double
            Get
                Try 
                    Return CType(Me(Me.tabletableE09.MaxJElevColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE09.MaxJElevColumn) = value
            End Set
        End Property
        
        Public Property TimeOfMax As Date
            Get
                Try 
                    Return CType(Me(Me.tabletableE09.TimeOfMaxColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE09.TimeOfMaxColumn) = value
            End Set
        End Property
        
        Public Property Surcharge As Double
            Get
                Try 
                    Return CType(Me(Me.tabletableE09.SurchargeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE09.SurchargeColumn) = value
            End Set
        End Property
        
        Public Property Freeboard As Double
            Get
                Try 
                    Return CType(Me(Me.tabletableE09.FreeboardColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE09.FreeboardColumn) = value
            End Set
        End Property
        
        Public Property MaxArea As Double
            Get
                Try 
                    Return CType(Me(Me.tabletableE09.MaxAreaColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE09.MaxAreaColumn) = value
            End Set
        End Property
        
        Public Property MAPINFO_ID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletableE09.MAPINFO_IDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE09.MAPINFO_IDColumn) = value
            End Set
        End Property
        
        Public Function IsGrElevNull() As Boolean
            Return Me.IsNull(Me.tabletableE09.GrElevColumn)
        End Function
        
        Public Sub SetGrElevNull()
            Me(Me.tabletableE09.GrElevColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaxCrownNull() As Boolean
            Return Me.IsNull(Me.tabletableE09.MaxCrownColumn)
        End Function
        
        Public Sub SetMaxCrownNull()
            Me(Me.tabletableE09.MaxCrownColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaxJElevNull() As Boolean
            Return Me.IsNull(Me.tabletableE09.MaxJElevColumn)
        End Function
        
        Public Sub SetMaxJElevNull()
            Me(Me.tabletableE09.MaxJElevColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTimeOfMaxNull() As Boolean
            Return Me.IsNull(Me.tabletableE09.TimeOfMaxColumn)
        End Function
        
        Public Sub SetTimeOfMaxNull()
            Me(Me.tabletableE09.TimeOfMaxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSurchargeNull() As Boolean
            Return Me.IsNull(Me.tabletableE09.SurchargeColumn)
        End Function
        
        Public Sub SetSurchargeNull()
            Me(Me.tabletableE09.SurchargeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFreeboardNull() As Boolean
            Return Me.IsNull(Me.tabletableE09.FreeboardColumn)
        End Function
        
        Public Sub SetFreeboardNull()
            Me(Me.tabletableE09.FreeboardColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaxAreaNull() As Boolean
            Return Me.IsNull(Me.tabletableE09.MaxAreaColumn)
        End Function
        
        Public Sub SetMaxAreaNull()
            Me(Me.tabletableE09.MaxAreaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMAPINFO_IDNull() As Boolean
            Return Me.IsNull(Me.tabletableE09.MAPINFO_IDColumn)
        End Function
        
        Public Sub SetMAPINFO_IDNull()
            Me(Me.tabletableE09.MAPINFO_IDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tableE09RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tableE09Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tableE09Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tableE09Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tableE10DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCondName As DataColumn
        
        Private columnDesignQ As DataColumn
        
        Private columnDesignV As DataColumn
        
        Private columnMaxD As DataColumn
        
        Private columnMaxQ As DataColumn
        
        Private columnTimeMaxQ As DataColumn
        
        Private columnMaxV As DataColumn
        
        Private columnTimeMaxV As DataColumn
        
        Private columnQqRatio As DataColumn
        
        Private columnMaxUsElev As DataColumn
        
        Private columnMaxDsElev As DataColumn
        
        Private columnMAPINFO_ID As DataColumn
        
        Friend Sub New()
            MyBase.New("tableE10")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CondNameColumn As DataColumn
            Get
                Return Me.columnCondName
            End Get
        End Property
        
        Friend ReadOnly Property DesignQColumn As DataColumn
            Get
                Return Me.columnDesignQ
            End Get
        End Property
        
        Friend ReadOnly Property DesignVColumn As DataColumn
            Get
                Return Me.columnDesignV
            End Get
        End Property
        
        Friend ReadOnly Property MaxDColumn As DataColumn
            Get
                Return Me.columnMaxD
            End Get
        End Property
        
        Friend ReadOnly Property MaxQColumn As DataColumn
            Get
                Return Me.columnMaxQ
            End Get
        End Property
        
        Friend ReadOnly Property TimeMaxQColumn As DataColumn
            Get
                Return Me.columnTimeMaxQ
            End Get
        End Property
        
        Friend ReadOnly Property MaxVColumn As DataColumn
            Get
                Return Me.columnMaxV
            End Get
        End Property
        
        Friend ReadOnly Property TimeMaxVColumn As DataColumn
            Get
                Return Me.columnTimeMaxV
            End Get
        End Property
        
        Friend ReadOnly Property QqRatioColumn As DataColumn
            Get
                Return Me.columnQqRatio
            End Get
        End Property
        
        Friend ReadOnly Property MaxUsElevColumn As DataColumn
            Get
                Return Me.columnMaxUsElev
            End Get
        End Property
        
        Friend ReadOnly Property MaxDsElevColumn As DataColumn
            Get
                Return Me.columnMaxDsElev
            End Get
        End Property
        
        Friend ReadOnly Property MAPINFO_IDColumn As DataColumn
            Get
                Return Me.columnMAPINFO_ID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tableE10Row
            Get
                Return CType(Me.Rows(index),tableE10Row)
            End Get
        End Property
        
        Public Event tableE10RowChanged As tableE10RowChangeEventHandler
        
        Public Event tableE10RowChanging As tableE10RowChangeEventHandler
        
        Public Event tableE10RowDeleted As tableE10RowChangeEventHandler
        
        Public Event tableE10RowDeleting As tableE10RowChangeEventHandler
        
        Public Overloads Sub AddtableE10Row(ByVal row As tableE10Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtableE10Row(ByVal CondName As String, ByVal DesignQ As Double, ByVal DesignV As Double, ByVal MaxD As Double, ByVal MaxQ As Double, ByVal TimeMaxQ As Date, ByVal MaxV As Double, ByVal TimeMaxV As Date, ByVal QqRatio As Double, ByVal MaxUsElev As Double, ByVal MaxDsElev As Double) As tableE10Row
            Dim rowtableE10Row As tableE10Row = CType(Me.NewRow,tableE10Row)
            rowtableE10Row.ItemArray = New Object() {CondName, DesignQ, DesignV, MaxD, MaxQ, TimeMaxQ, MaxV, TimeMaxV, QqRatio, MaxUsElev, MaxDsElev, Nothing}
            Me.Rows.Add(rowtableE10Row)
            Return rowtableE10Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tableE10DataTable = CType(MyBase.Clone,tableE10DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tableE10DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCondName = Me.Columns("CondName")
            Me.columnDesignQ = Me.Columns("DesignQ")
            Me.columnDesignV = Me.Columns("DesignV")
            Me.columnMaxD = Me.Columns("MaxD")
            Me.columnMaxQ = Me.Columns("MaxQ")
            Me.columnTimeMaxQ = Me.Columns("TimeMaxQ")
            Me.columnMaxV = Me.Columns("MaxV")
            Me.columnTimeMaxV = Me.Columns("TimeMaxV")
            Me.columnQqRatio = Me.Columns("QqRatio")
            Me.columnMaxUsElev = Me.Columns("MaxUsElev")
            Me.columnMaxDsElev = Me.Columns("MaxDsElev")
            Me.columnMAPINFO_ID = Me.Columns("MAPINFO_ID")
        End Sub
        
        Private Sub InitClass()
            Me.columnCondName = New DataColumn("CondName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCondName)
            Me.columnDesignQ = New DataColumn("DesignQ", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignQ)
            Me.columnDesignV = New DataColumn("DesignV", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignV)
            Me.columnMaxD = New DataColumn("MaxD", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaxD)
            Me.columnMaxQ = New DataColumn("MaxQ", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaxQ)
            Me.columnTimeMaxQ = New DataColumn("TimeMaxQ", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTimeMaxQ)
            Me.columnMaxV = New DataColumn("MaxV", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaxV)
            Me.columnTimeMaxV = New DataColumn("TimeMaxV", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTimeMaxV)
            Me.columnQqRatio = New DataColumn("QqRatio", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQqRatio)
            Me.columnMaxUsElev = New DataColumn("MaxUsElev", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaxUsElev)
            Me.columnMaxDsElev = New DataColumn("MaxDsElev", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaxDsElev)
            Me.columnMAPINFO_ID = New DataColumn("MAPINFO_ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMAPINFO_ID)
            Me.columnCondName.AllowDBNull = false
            Me.columnMAPINFO_ID.AutoIncrement = true
        End Sub
        
        Public Function NewtableE10Row() As tableE10Row
            Return CType(Me.NewRow,tableE10Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tableE10Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tableE10Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tableE10RowChangedEvent) Is Nothing) Then
                RaiseEvent tableE10RowChanged(Me, New tableE10RowChangeEvent(CType(e.Row,tableE10Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tableE10RowChangingEvent) Is Nothing) Then
                RaiseEvent tableE10RowChanging(Me, New tableE10RowChangeEvent(CType(e.Row,tableE10Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tableE10RowDeletedEvent) Is Nothing) Then
                RaiseEvent tableE10RowDeleted(Me, New tableE10RowChangeEvent(CType(e.Row,tableE10Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tableE10RowDeletingEvent) Is Nothing) Then
                RaiseEvent tableE10RowDeleting(Me, New tableE10RowChangeEvent(CType(e.Row,tableE10Row), e.Action))
            End If
        End Sub
        
        Public Sub RemovetableE10Row(ByVal row As tableE10Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tableE10Row
        Inherits DataRow
        
        Private tabletableE10 As tableE10DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletableE10 = CType(Me.Table,tableE10DataTable)
        End Sub
        
        Public Property CondName As String
            Get
                Return CType(Me(Me.tabletableE10.CondNameColumn),String)
            End Get
            Set
                Me(Me.tabletableE10.CondNameColumn) = value
            End Set
        End Property
        
        Public Property DesignQ As Double
            Get
                Try 
                    Return CType(Me(Me.tabletableE10.DesignQColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE10.DesignQColumn) = value
            End Set
        End Property
        
        Public Property DesignV As Double
            Get
                Try 
                    Return CType(Me(Me.tabletableE10.DesignVColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE10.DesignVColumn) = value
            End Set
        End Property
        
        Public Property MaxD As Double
            Get
                Try 
                    Return CType(Me(Me.tabletableE10.MaxDColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE10.MaxDColumn) = value
            End Set
        End Property
        
        Public Property MaxQ As Double
            Get
                Try 
                    Return CType(Me(Me.tabletableE10.MaxQColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE10.MaxQColumn) = value
            End Set
        End Property
        
        Public Property TimeMaxQ As Date
            Get
                Try 
                    Return CType(Me(Me.tabletableE10.TimeMaxQColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE10.TimeMaxQColumn) = value
            End Set
        End Property
        
        Public Property MaxV As Double
            Get
                Try 
                    Return CType(Me(Me.tabletableE10.MaxVColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE10.MaxVColumn) = value
            End Set
        End Property
        
        Public Property TimeMaxV As Date
            Get
                Try 
                    Return CType(Me(Me.tabletableE10.TimeMaxVColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE10.TimeMaxVColumn) = value
            End Set
        End Property
        
        Public Property QqRatio As Double
            Get
                Try 
                    Return CType(Me(Me.tabletableE10.QqRatioColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE10.QqRatioColumn) = value
            End Set
        End Property
        
        Public Property MaxUsElev As Double
            Get
                Try 
                    Return CType(Me(Me.tabletableE10.MaxUsElevColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE10.MaxUsElevColumn) = value
            End Set
        End Property
        
        Public Property MaxDsElev As Double
            Get
                Try 
                    Return CType(Me(Me.tabletableE10.MaxDsElevColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE10.MaxDsElevColumn) = value
            End Set
        End Property
        
        Public Property MAPINFO_ID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletableE10.MAPINFO_IDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE10.MAPINFO_IDColumn) = value
            End Set
        End Property
        
        Public Function IsDesignQNull() As Boolean
            Return Me.IsNull(Me.tabletableE10.DesignQColumn)
        End Function
        
        Public Sub SetDesignQNull()
            Me(Me.tabletableE10.DesignQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesignVNull() As Boolean
            Return Me.IsNull(Me.tabletableE10.DesignVColumn)
        End Function
        
        Public Sub SetDesignVNull()
            Me(Me.tabletableE10.DesignVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaxDNull() As Boolean
            Return Me.IsNull(Me.tabletableE10.MaxDColumn)
        End Function
        
        Public Sub SetMaxDNull()
            Me(Me.tabletableE10.MaxDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaxQNull() As Boolean
            Return Me.IsNull(Me.tabletableE10.MaxQColumn)
        End Function
        
        Public Sub SetMaxQNull()
            Me(Me.tabletableE10.MaxQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTimeMaxQNull() As Boolean
            Return Me.IsNull(Me.tabletableE10.TimeMaxQColumn)
        End Function
        
        Public Sub SetTimeMaxQNull()
            Me(Me.tabletableE10.TimeMaxQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaxVNull() As Boolean
            Return Me.IsNull(Me.tabletableE10.MaxVColumn)
        End Function
        
        Public Sub SetMaxVNull()
            Me(Me.tabletableE10.MaxVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTimeMaxVNull() As Boolean
            Return Me.IsNull(Me.tabletableE10.TimeMaxVColumn)
        End Function
        
        Public Sub SetTimeMaxVNull()
            Me(Me.tabletableE10.TimeMaxVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQqRatioNull() As Boolean
            Return Me.IsNull(Me.tabletableE10.QqRatioColumn)
        End Function
        
        Public Sub SetQqRatioNull()
            Me(Me.tabletableE10.QqRatioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaxUsElevNull() As Boolean
            Return Me.IsNull(Me.tabletableE10.MaxUsElevColumn)
        End Function
        
        Public Sub SetMaxUsElevNull()
            Me(Me.tabletableE10.MaxUsElevColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaxDsElevNull() As Boolean
            Return Me.IsNull(Me.tabletableE10.MaxDsElevColumn)
        End Function
        
        Public Sub SetMaxDsElevNull()
            Me(Me.tabletableE10.MaxDsElevColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMAPINFO_IDNull() As Boolean
            Return Me.IsNull(Me.tabletableE10.MAPINFO_IDColumn)
        End Function
        
        Public Sub SetMAPINFO_IDNull()
            Me(Me.tabletableE10.MAPINFO_IDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tableE10RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tableE10Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tableE10Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tableE10Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tableE20DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNodeName As DataColumn
        
        Private columnSurchargeTime As DataColumn
        
        Private columnFloodedTime As DataColumn
        
        Private columnFloodVol As DataColumn
        
        Private columnMaxStoredVol As DataColumn
        
        Private columnPondingVol As DataColumn
        
        Private columnMAPINFO_ID As DataColumn
        
        Friend Sub New()
            MyBase.New("tableE20")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NodeNameColumn As DataColumn
            Get
                Return Me.columnNodeName
            End Get
        End Property
        
        Friend ReadOnly Property SurchargeTimeColumn As DataColumn
            Get
                Return Me.columnSurchargeTime
            End Get
        End Property
        
        Friend ReadOnly Property FloodedTimeColumn As DataColumn
            Get
                Return Me.columnFloodedTime
            End Get
        End Property
        
        Friend ReadOnly Property FloodVolColumn As DataColumn
            Get
                Return Me.columnFloodVol
            End Get
        End Property
        
        Friend ReadOnly Property MaxStoredVolColumn As DataColumn
            Get
                Return Me.columnMaxStoredVol
            End Get
        End Property
        
        Friend ReadOnly Property PondingVolColumn As DataColumn
            Get
                Return Me.columnPondingVol
            End Get
        End Property
        
        Friend ReadOnly Property MAPINFO_IDColumn As DataColumn
            Get
                Return Me.columnMAPINFO_ID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tableE20Row
            Get
                Return CType(Me.Rows(index),tableE20Row)
            End Get
        End Property
        
        Public Event tableE20RowChanged As tableE20RowChangeEventHandler
        
        Public Event tableE20RowChanging As tableE20RowChangeEventHandler
        
        Public Event tableE20RowDeleted As tableE20RowChangeEventHandler
        
        Public Event tableE20RowDeleting As tableE20RowChangeEventHandler
        
        Public Overloads Sub AddtableE20Row(ByVal row As tableE20Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtableE20Row(ByVal NodeName As String, ByVal SurchargeTime As Double, ByVal FloodedTime As Double, ByVal FloodVol As Double, ByVal MaxStoredVol As Double, ByVal PondingVol As Double) As tableE20Row
            Dim rowtableE20Row As tableE20Row = CType(Me.NewRow,tableE20Row)
            rowtableE20Row.ItemArray = New Object() {NodeName, SurchargeTime, FloodedTime, FloodVol, MaxStoredVol, PondingVol, Nothing}
            Me.Rows.Add(rowtableE20Row)
            Return rowtableE20Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tableE20DataTable = CType(MyBase.Clone,tableE20DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tableE20DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNodeName = Me.Columns("NodeName")
            Me.columnSurchargeTime = Me.Columns("SurchargeTime")
            Me.columnFloodedTime = Me.Columns("FloodedTime")
            Me.columnFloodVol = Me.Columns("FloodVol")
            Me.columnMaxStoredVol = Me.Columns("MaxStoredVol")
            Me.columnPondingVol = Me.Columns("PondingVol")
            Me.columnMAPINFO_ID = Me.Columns("MAPINFO_ID")
        End Sub
        
        Private Sub InitClass()
            Me.columnNodeName = New DataColumn("NodeName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNodeName)
            Me.columnSurchargeTime = New DataColumn("SurchargeTime", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSurchargeTime)
            Me.columnFloodedTime = New DataColumn("FloodedTime", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFloodedTime)
            Me.columnFloodVol = New DataColumn("FloodVol", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFloodVol)
            Me.columnMaxStoredVol = New DataColumn("MaxStoredVol", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaxStoredVol)
            Me.columnPondingVol = New DataColumn("PondingVol", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPondingVol)
            Me.columnMAPINFO_ID = New DataColumn("MAPINFO_ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMAPINFO_ID)
            Me.columnNodeName.AllowDBNull = false
            Me.columnMAPINFO_ID.AutoIncrement = true
        End Sub
        
        Public Function NewtableE20Row() As tableE20Row
            Return CType(Me.NewRow,tableE20Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tableE20Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tableE20Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tableE20RowChangedEvent) Is Nothing) Then
                RaiseEvent tableE20RowChanged(Me, New tableE20RowChangeEvent(CType(e.Row,tableE20Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tableE20RowChangingEvent) Is Nothing) Then
                RaiseEvent tableE20RowChanging(Me, New tableE20RowChangeEvent(CType(e.Row,tableE20Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tableE20RowDeletedEvent) Is Nothing) Then
                RaiseEvent tableE20RowDeleted(Me, New tableE20RowChangeEvent(CType(e.Row,tableE20Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tableE20RowDeletingEvent) Is Nothing) Then
                RaiseEvent tableE20RowDeleting(Me, New tableE20RowChangeEvent(CType(e.Row,tableE20Row), e.Action))
            End If
        End Sub
        
        Public Sub RemovetableE20Row(ByVal row As tableE20Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tableE20Row
        Inherits DataRow
        
        Private tabletableE20 As tableE20DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletableE20 = CType(Me.Table,tableE20DataTable)
        End Sub
        
        Public Property NodeName As String
            Get
                Return CType(Me(Me.tabletableE20.NodeNameColumn),String)
            End Get
            Set
                Me(Me.tabletableE20.NodeNameColumn) = value
            End Set
        End Property
        
        Public Property SurchargeTime As Double
            Get
                Try 
                    Return CType(Me(Me.tabletableE20.SurchargeTimeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE20.SurchargeTimeColumn) = value
            End Set
        End Property
        
        Public Property FloodedTime As Double
            Get
                Try 
                    Return CType(Me(Me.tabletableE20.FloodedTimeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE20.FloodedTimeColumn) = value
            End Set
        End Property
        
        Public Property FloodVol As Double
            Get
                Try 
                    Return CType(Me(Me.tabletableE20.FloodVolColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE20.FloodVolColumn) = value
            End Set
        End Property
        
        Public Property MaxStoredVol As Double
            Get
                Try 
                    Return CType(Me(Me.tabletableE20.MaxStoredVolColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE20.MaxStoredVolColumn) = value
            End Set
        End Property
        
        Public Property PondingVol As Double
            Get
                Try 
                    Return CType(Me(Me.tabletableE20.PondingVolColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE20.PondingVolColumn) = value
            End Set
        End Property
        
        Public Property MAPINFO_ID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletableE20.MAPINFO_IDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletableE20.MAPINFO_IDColumn) = value
            End Set
        End Property
        
        Public Function IsSurchargeTimeNull() As Boolean
            Return Me.IsNull(Me.tabletableE20.SurchargeTimeColumn)
        End Function
        
        Public Sub SetSurchargeTimeNull()
            Me(Me.tabletableE20.SurchargeTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFloodedTimeNull() As Boolean
            Return Me.IsNull(Me.tabletableE20.FloodedTimeColumn)
        End Function
        
        Public Sub SetFloodedTimeNull()
            Me(Me.tabletableE20.FloodedTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFloodVolNull() As Boolean
            Return Me.IsNull(Me.tabletableE20.FloodVolColumn)
        End Function
        
        Public Sub SetFloodVolNull()
            Me(Me.tabletableE20.FloodVolColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaxStoredVolNull() As Boolean
            Return Me.IsNull(Me.tabletableE20.MaxStoredVolColumn)
        End Function
        
        Public Sub SetMaxStoredVolNull()
            Me(Me.tabletableE20.MaxStoredVolColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPondingVolNull() As Boolean
            Return Me.IsNull(Me.tabletableE20.PondingVolColumn)
        End Function
        
        Public Sub SetPondingVolNull()
            Me(Me.tabletableE20.PondingVolColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMAPINFO_IDNull() As Boolean
            Return Me.IsNull(Me.tabletableE20.MAPINFO_IDColumn)
        End Function
        
        Public Sub SetMAPINFO_IDNull()
            Me(Me.tabletableE20.MAPINFO_IDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tableE20RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tableE20Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tableE20Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tableE20Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _ComputeHGLDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnParcelID As DataColumn
        
        Private columnDivideID As DataColumn
        
        Private columnUSJelev As DataColumn
        
        Private columnDSJelev As DataColumn
        
        Private columnFrac2SwrBeg As DataColumn
        
        Private columnHGL As DataColumn
        
        Private columndHGL As DataColumn
        
        Private columnSurcharge As DataColumn
        
        Friend Sub New()
            MyBase.New("_ComputeHGL")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ParcelIDColumn As DataColumn
            Get
                Return Me.columnParcelID
            End Get
        End Property
        
        Friend ReadOnly Property DivideIDColumn As DataColumn
            Get
                Return Me.columnDivideID
            End Get
        End Property
        
        Friend ReadOnly Property USJelevColumn As DataColumn
            Get
                Return Me.columnUSJelev
            End Get
        End Property
        
        Friend ReadOnly Property DSJelevColumn As DataColumn
            Get
                Return Me.columnDSJelev
            End Get
        End Property
        
        Friend ReadOnly Property Frac2SwrBegColumn As DataColumn
            Get
                Return Me.columnFrac2SwrBeg
            End Get
        End Property
        
        Friend ReadOnly Property HGLColumn As DataColumn
            Get
                Return Me.columnHGL
            End Get
        End Property
        
        Friend ReadOnly Property dHGLColumn As DataColumn
            Get
                Return Me.columndHGL
            End Get
        End Property
        
        Friend ReadOnly Property SurchargeColumn As DataColumn
            Get
                Return Me.columnSurcharge
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As _ComputeHGLRow
            Get
                Return CType(Me.Rows(index),_ComputeHGLRow)
            End Get
        End Property
        
        Public Event _ComputeHGLRowChanged As _ComputeHGLRowChangeEventHandler
        
        Public Event _ComputeHGLRowChanging As _ComputeHGLRowChangeEventHandler
        
        Public Event _ComputeHGLRowDeleted As _ComputeHGLRowChangeEventHandler
        
        Public Event _ComputeHGLRowDeleting As _ComputeHGLRowChangeEventHandler
        
        Public Overloads Sub Add_ComputeHGLRow(ByVal row As _ComputeHGLRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Add_ComputeHGLRow(ByVal ParcelID As Integer, ByVal DivideID As Integer, ByVal USJelev As Double, ByVal DSJelev As Double, ByVal Frac2SwrBeg As Double, ByVal HGL As Double, ByVal dHGL As Double, ByVal Surcharge As Double) As _ComputeHGLRow
            Dim row_ComputeHGLRow As _ComputeHGLRow = CType(Me.NewRow,_ComputeHGLRow)
            row_ComputeHGLRow.ItemArray = New Object() {ParcelID, DivideID, USJelev, DSJelev, Frac2SwrBeg, HGL, dHGL, Surcharge}
            Me.Rows.Add(row_ComputeHGLRow)
            Return row_ComputeHGLRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As _ComputeHGLDataTable = CType(MyBase.Clone,_ComputeHGLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New _ComputeHGLDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnParcelID = Me.Columns("ParcelID")
            Me.columnDivideID = Me.Columns("DivideID")
            Me.columnUSJelev = Me.Columns("USJelev")
            Me.columnDSJelev = Me.Columns("DSJelev")
            Me.columnFrac2SwrBeg = Me.Columns("Frac2SwrBeg")
            Me.columnHGL = Me.Columns("HGL")
            Me.columndHGL = Me.Columns("dHGL")
            Me.columnSurcharge = Me.Columns("Surcharge")
        End Sub
        
        Private Sub InitClass()
            Me.columnParcelID = New DataColumn("ParcelID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnParcelID)
            Me.columnDivideID = New DataColumn("DivideID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivideID)
            Me.columnUSJelev = New DataColumn("USJelev", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUSJelev)
            Me.columnDSJelev = New DataColumn("DSJelev", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDSJelev)
            Me.columnFrac2SwrBeg = New DataColumn("Frac2SwrBeg", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFrac2SwrBeg)
            Me.columnHGL = New DataColumn("HGL", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHGL)
            Me.columndHGL = New DataColumn("dHGL", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndHGL)
            Me.columnSurcharge = New DataColumn("Surcharge", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSurcharge)
            Me.columnHGL.ReadOnly = true
            Me.columndHGL.ReadOnly = true
            Me.columnSurcharge.ReadOnly = true
        End Sub
        
        Public Function New_ComputeHGLRow() As _ComputeHGLRow
            Return CType(Me.NewRow,_ComputeHGLRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New _ComputeHGLRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(_ComputeHGLRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._ComputeHGLRowChangedEvent) Is Nothing) Then
                RaiseEvent _ComputeHGLRowChanged(Me, New _ComputeHGLRowChangeEvent(CType(e.Row,_ComputeHGLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._ComputeHGLRowChangingEvent) Is Nothing) Then
                RaiseEvent _ComputeHGLRowChanging(Me, New _ComputeHGLRowChangeEvent(CType(e.Row,_ComputeHGLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._ComputeHGLRowDeletedEvent) Is Nothing) Then
                RaiseEvent _ComputeHGLRowDeleted(Me, New _ComputeHGLRowChangeEvent(CType(e.Row,_ComputeHGLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._ComputeHGLRowDeletingEvent) Is Nothing) Then
                RaiseEvent _ComputeHGLRowDeleting(Me, New _ComputeHGLRowChangeEvent(CType(e.Row,_ComputeHGLRow), e.Action))
            End If
        End Sub
        
        Public Sub Remove_ComputeHGLRow(ByVal row As _ComputeHGLRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _ComputeHGLRow
        Inherits DataRow
        
        Private table_ComputeHGL As _ComputeHGLDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.table_ComputeHGL = CType(Me.Table,_ComputeHGLDataTable)
        End Sub
        
        Public Property ParcelID As Integer
            Get
                Try 
                    Return CType(Me(Me.table_ComputeHGL.ParcelIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ComputeHGL.ParcelIDColumn) = value
            End Set
        End Property
        
        Public Property DivideID As Integer
            Get
                Try 
                    Return CType(Me(Me.table_ComputeHGL.DivideIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ComputeHGL.DivideIDColumn) = value
            End Set
        End Property
        
        Public Property USJelev As Double
            Get
                Try 
                    Return CType(Me(Me.table_ComputeHGL.USJelevColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ComputeHGL.USJelevColumn) = value
            End Set
        End Property
        
        Public Property DSJelev As Double
            Get
                Try 
                    Return CType(Me(Me.table_ComputeHGL.DSJelevColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ComputeHGL.DSJelevColumn) = value
            End Set
        End Property
        
        Public Property Frac2SwrBeg As Double
            Get
                Try 
                    Return CType(Me(Me.table_ComputeHGL.Frac2SwrBegColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ComputeHGL.Frac2SwrBegColumn) = value
            End Set
        End Property
        
        Public Property HGL As Double
            Get
                Try 
                    Return CType(Me(Me.table_ComputeHGL.HGLColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ComputeHGL.HGLColumn) = value
            End Set
        End Property
        
        Public Property dHGL As Double
            Get
                Try 
                    Return CType(Me(Me.table_ComputeHGL.dHGLColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ComputeHGL.dHGLColumn) = value
            End Set
        End Property
        
        Public Property Surcharge As Double
            Get
                Try 
                    Return CType(Me(Me.table_ComputeHGL.SurchargeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_ComputeHGL.SurchargeColumn) = value
            End Set
        End Property
        
        Public Function IsParcelIDNull() As Boolean
            Return Me.IsNull(Me.table_ComputeHGL.ParcelIDColumn)
        End Function
        
        Public Sub SetParcelIDNull()
            Me(Me.table_ComputeHGL.ParcelIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivideIDNull() As Boolean
            Return Me.IsNull(Me.table_ComputeHGL.DivideIDColumn)
        End Function
        
        Public Sub SetDivideIDNull()
            Me(Me.table_ComputeHGL.DivideIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUSJelevNull() As Boolean
            Return Me.IsNull(Me.table_ComputeHGL.USJelevColumn)
        End Function
        
        Public Sub SetUSJelevNull()
            Me(Me.table_ComputeHGL.USJelevColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDSJelevNull() As Boolean
            Return Me.IsNull(Me.table_ComputeHGL.DSJelevColumn)
        End Function
        
        Public Sub SetDSJelevNull()
            Me(Me.table_ComputeHGL.DSJelevColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFrac2SwrBegNull() As Boolean
            Return Me.IsNull(Me.table_ComputeHGL.Frac2SwrBegColumn)
        End Function
        
        Public Sub SetFrac2SwrBegNull()
            Me(Me.table_ComputeHGL.Frac2SwrBegColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHGLNull() As Boolean
            Return Me.IsNull(Me.table_ComputeHGL.HGLColumn)
        End Function
        
        Public Sub SetHGLNull()
            Me(Me.table_ComputeHGL.HGLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdHGLNull() As Boolean
            Return Me.IsNull(Me.table_ComputeHGL.dHGLColumn)
        End Function
        
        Public Sub SetdHGLNull()
            Me(Me.table_ComputeHGL.dHGLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSurchargeNull() As Boolean
            Return Me.IsNull(Me.table_ComputeHGL.SurchargeColumn)
        End Function
        
        Public Sub SetSurchargeNull()
            Me(Me.table_ComputeHGL.SurchargeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _ComputeHGLRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As _ComputeHGLRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As _ComputeHGLRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As _ComputeHGLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

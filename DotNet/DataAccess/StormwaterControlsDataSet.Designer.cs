//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SystemsAnalysis.DataAccess {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("StormwaterControlsDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class StormwaterControlsDataSet : global::System.Data.DataSet {
        
        private ICNodeDataTable tableICNode;
        
        private mdl_SurfSC_acDataTable tablemdl_SurfSC_ac;
        
        private ic_StreetTargetsDataTable tableic_StreetTargets;
        
        private ic_RoofTargetsDataTable tableic_RoofTargets;
        
        private ic_ParkingTargetsDataTable tableic_ParkingTargets;
        
        private AltRoofTargetsDataTable tableAltRoofTargets;
        
        private AltParkingTargetsDataTable tableAltParkingTargets;
        
        private AltStreetTargetsDataTable tableAltStreetTargets;
        
        private mdl_dirsc_acDataTable tablemdl_dirsc_ac;
        
        private _mdl_roofTargetsDataTable table_mdl_roofTargets;
        
        private _mdl_ParkingTargetsDataTable table_mdl_ParkingTargets;
        
        private TableE18DataTable tableTableE18;
        
        private TableE19DataTable tableTableE19;
        
        private TableE03aDataTable tableTableE03a;
        
        private TableE03bDataTable tableTableE03b;
        
        private TableE22DataTable tableTableE22;
        
        private TableE21DataTable tableTableE21;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StormwaterControlsDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected StormwaterControlsDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ICNode"] != null)) {
                    base.Tables.Add(new ICNodeDataTable(ds.Tables["ICNode"]));
                }
                if ((ds.Tables["mdl_SurfSC_ac"] != null)) {
                    base.Tables.Add(new mdl_SurfSC_acDataTable(ds.Tables["mdl_SurfSC_ac"]));
                }
                if ((ds.Tables["ic_StreetTargets"] != null)) {
                    base.Tables.Add(new ic_StreetTargetsDataTable(ds.Tables["ic_StreetTargets"]));
                }
                if ((ds.Tables["ic_RoofTargets"] != null)) {
                    base.Tables.Add(new ic_RoofTargetsDataTable(ds.Tables["ic_RoofTargets"]));
                }
                if ((ds.Tables["ic_ParkingTargets"] != null)) {
                    base.Tables.Add(new ic_ParkingTargetsDataTable(ds.Tables["ic_ParkingTargets"]));
                }
                if ((ds.Tables["AltRoofTargets"] != null)) {
                    base.Tables.Add(new AltRoofTargetsDataTable(ds.Tables["AltRoofTargets"]));
                }
                if ((ds.Tables["AltParkingTargets"] != null)) {
                    base.Tables.Add(new AltParkingTargetsDataTable(ds.Tables["AltParkingTargets"]));
                }
                if ((ds.Tables["AltStreetTargets"] != null)) {
                    base.Tables.Add(new AltStreetTargetsDataTable(ds.Tables["AltStreetTargets"]));
                }
                if ((ds.Tables["mdl_dirsc_ac"] != null)) {
                    base.Tables.Add(new mdl_dirsc_acDataTable(ds.Tables["mdl_dirsc_ac"]));
                }
                if ((ds.Tables["_mdl_roofTargets"] != null)) {
                    base.Tables.Add(new _mdl_roofTargetsDataTable(ds.Tables["_mdl_roofTargets"]));
                }
                if ((ds.Tables["_mdl_ParkingTargets"] != null)) {
                    base.Tables.Add(new _mdl_ParkingTargetsDataTable(ds.Tables["_mdl_ParkingTargets"]));
                }
                if ((ds.Tables["TableE18"] != null)) {
                    base.Tables.Add(new TableE18DataTable(ds.Tables["TableE18"]));
                }
                if ((ds.Tables["TableE19"] != null)) {
                    base.Tables.Add(new TableE19DataTable(ds.Tables["TableE19"]));
                }
                if ((ds.Tables["TableE03a"] != null)) {
                    base.Tables.Add(new TableE03aDataTable(ds.Tables["TableE03a"]));
                }
                if ((ds.Tables["TableE03b"] != null)) {
                    base.Tables.Add(new TableE03bDataTable(ds.Tables["TableE03b"]));
                }
                if ((ds.Tables["TableE22"] != null)) {
                    base.Tables.Add(new TableE22DataTable(ds.Tables["TableE22"]));
                }
                if ((ds.Tables["TableE21"] != null)) {
                    base.Tables.Add(new TableE21DataTable(ds.Tables["TableE21"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ICNodeDataTable ICNode {
            get {
                return this.tableICNode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public mdl_SurfSC_acDataTable mdl_SurfSC_ac {
            get {
                return this.tablemdl_SurfSC_ac;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ic_StreetTargetsDataTable ic_StreetTargets {
            get {
                return this.tableic_StreetTargets;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ic_RoofTargetsDataTable ic_RoofTargets {
            get {
                return this.tableic_RoofTargets;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ic_ParkingTargetsDataTable ic_ParkingTargets {
            get {
                return this.tableic_ParkingTargets;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AltRoofTargetsDataTable AltRoofTargets {
            get {
                return this.tableAltRoofTargets;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AltParkingTargetsDataTable AltParkingTargets {
            get {
                return this.tableAltParkingTargets;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AltStreetTargetsDataTable AltStreetTargets {
            get {
                return this.tableAltStreetTargets;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public mdl_dirsc_acDataTable mdl_dirsc_ac {
            get {
                return this.tablemdl_dirsc_ac;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _mdl_roofTargetsDataTable _mdl_roofTargets {
            get {
                return this.table_mdl_roofTargets;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _mdl_ParkingTargetsDataTable _mdl_ParkingTargets {
            get {
                return this.table_mdl_ParkingTargets;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TableE18DataTable TableE18 {
            get {
                return this.tableTableE18;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TableE19DataTable TableE19 {
            get {
                return this.tableTableE19;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TableE03aDataTable TableE03a {
            get {
                return this.tableTableE03a;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TableE03bDataTable TableE03b {
            get {
                return this.tableTableE03b;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TableE22DataTable TableE22 {
            get {
                return this.tableTableE22;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TableE21DataTable TableE21 {
            get {
                return this.tableTableE21;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            StormwaterControlsDataSet cln = ((StormwaterControlsDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ICNode"] != null)) {
                    base.Tables.Add(new ICNodeDataTable(ds.Tables["ICNode"]));
                }
                if ((ds.Tables["mdl_SurfSC_ac"] != null)) {
                    base.Tables.Add(new mdl_SurfSC_acDataTable(ds.Tables["mdl_SurfSC_ac"]));
                }
                if ((ds.Tables["ic_StreetTargets"] != null)) {
                    base.Tables.Add(new ic_StreetTargetsDataTable(ds.Tables["ic_StreetTargets"]));
                }
                if ((ds.Tables["ic_RoofTargets"] != null)) {
                    base.Tables.Add(new ic_RoofTargetsDataTable(ds.Tables["ic_RoofTargets"]));
                }
                if ((ds.Tables["ic_ParkingTargets"] != null)) {
                    base.Tables.Add(new ic_ParkingTargetsDataTable(ds.Tables["ic_ParkingTargets"]));
                }
                if ((ds.Tables["AltRoofTargets"] != null)) {
                    base.Tables.Add(new AltRoofTargetsDataTable(ds.Tables["AltRoofTargets"]));
                }
                if ((ds.Tables["AltParkingTargets"] != null)) {
                    base.Tables.Add(new AltParkingTargetsDataTable(ds.Tables["AltParkingTargets"]));
                }
                if ((ds.Tables["AltStreetTargets"] != null)) {
                    base.Tables.Add(new AltStreetTargetsDataTable(ds.Tables["AltStreetTargets"]));
                }
                if ((ds.Tables["mdl_dirsc_ac"] != null)) {
                    base.Tables.Add(new mdl_dirsc_acDataTable(ds.Tables["mdl_dirsc_ac"]));
                }
                if ((ds.Tables["_mdl_roofTargets"] != null)) {
                    base.Tables.Add(new _mdl_roofTargetsDataTable(ds.Tables["_mdl_roofTargets"]));
                }
                if ((ds.Tables["_mdl_ParkingTargets"] != null)) {
                    base.Tables.Add(new _mdl_ParkingTargetsDataTable(ds.Tables["_mdl_ParkingTargets"]));
                }
                if ((ds.Tables["TableE18"] != null)) {
                    base.Tables.Add(new TableE18DataTable(ds.Tables["TableE18"]));
                }
                if ((ds.Tables["TableE19"] != null)) {
                    base.Tables.Add(new TableE19DataTable(ds.Tables["TableE19"]));
                }
                if ((ds.Tables["TableE03a"] != null)) {
                    base.Tables.Add(new TableE03aDataTable(ds.Tables["TableE03a"]));
                }
                if ((ds.Tables["TableE03b"] != null)) {
                    base.Tables.Add(new TableE03bDataTable(ds.Tables["TableE03b"]));
                }
                if ((ds.Tables["TableE22"] != null)) {
                    base.Tables.Add(new TableE22DataTable(ds.Tables["TableE22"]));
                }
                if ((ds.Tables["TableE21"] != null)) {
                    base.Tables.Add(new TableE21DataTable(ds.Tables["TableE21"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableICNode = ((ICNodeDataTable)(base.Tables["ICNode"]));
            if ((initTable == true)) {
                if ((this.tableICNode != null)) {
                    this.tableICNode.InitVars();
                }
            }
            this.tablemdl_SurfSC_ac = ((mdl_SurfSC_acDataTable)(base.Tables["mdl_SurfSC_ac"]));
            if ((initTable == true)) {
                if ((this.tablemdl_SurfSC_ac != null)) {
                    this.tablemdl_SurfSC_ac.InitVars();
                }
            }
            this.tableic_StreetTargets = ((ic_StreetTargetsDataTable)(base.Tables["ic_StreetTargets"]));
            if ((initTable == true)) {
                if ((this.tableic_StreetTargets != null)) {
                    this.tableic_StreetTargets.InitVars();
                }
            }
            this.tableic_RoofTargets = ((ic_RoofTargetsDataTable)(base.Tables["ic_RoofTargets"]));
            if ((initTable == true)) {
                if ((this.tableic_RoofTargets != null)) {
                    this.tableic_RoofTargets.InitVars();
                }
            }
            this.tableic_ParkingTargets = ((ic_ParkingTargetsDataTable)(base.Tables["ic_ParkingTargets"]));
            if ((initTable == true)) {
                if ((this.tableic_ParkingTargets != null)) {
                    this.tableic_ParkingTargets.InitVars();
                }
            }
            this.tableAltRoofTargets = ((AltRoofTargetsDataTable)(base.Tables["AltRoofTargets"]));
            if ((initTable == true)) {
                if ((this.tableAltRoofTargets != null)) {
                    this.tableAltRoofTargets.InitVars();
                }
            }
            this.tableAltParkingTargets = ((AltParkingTargetsDataTable)(base.Tables["AltParkingTargets"]));
            if ((initTable == true)) {
                if ((this.tableAltParkingTargets != null)) {
                    this.tableAltParkingTargets.InitVars();
                }
            }
            this.tableAltStreetTargets = ((AltStreetTargetsDataTable)(base.Tables["AltStreetTargets"]));
            if ((initTable == true)) {
                if ((this.tableAltStreetTargets != null)) {
                    this.tableAltStreetTargets.InitVars();
                }
            }
            this.tablemdl_dirsc_ac = ((mdl_dirsc_acDataTable)(base.Tables["mdl_dirsc_ac"]));
            if ((initTable == true)) {
                if ((this.tablemdl_dirsc_ac != null)) {
                    this.tablemdl_dirsc_ac.InitVars();
                }
            }
            this.table_mdl_roofTargets = ((_mdl_roofTargetsDataTable)(base.Tables["_mdl_roofTargets"]));
            if ((initTable == true)) {
                if ((this.table_mdl_roofTargets != null)) {
                    this.table_mdl_roofTargets.InitVars();
                }
            }
            this.table_mdl_ParkingTargets = ((_mdl_ParkingTargetsDataTable)(base.Tables["_mdl_ParkingTargets"]));
            if ((initTable == true)) {
                if ((this.table_mdl_ParkingTargets != null)) {
                    this.table_mdl_ParkingTargets.InitVars();
                }
            }
            this.tableTableE18 = ((TableE18DataTable)(base.Tables["TableE18"]));
            if ((initTable == true)) {
                if ((this.tableTableE18 != null)) {
                    this.tableTableE18.InitVars();
                }
            }
            this.tableTableE19 = ((TableE19DataTable)(base.Tables["TableE19"]));
            if ((initTable == true)) {
                if ((this.tableTableE19 != null)) {
                    this.tableTableE19.InitVars();
                }
            }
            this.tableTableE03a = ((TableE03aDataTable)(base.Tables["TableE03a"]));
            if ((initTable == true)) {
                if ((this.tableTableE03a != null)) {
                    this.tableTableE03a.InitVars();
                }
            }
            this.tableTableE03b = ((TableE03bDataTable)(base.Tables["TableE03b"]));
            if ((initTable == true)) {
                if ((this.tableTableE03b != null)) {
                    this.tableTableE03b.InitVars();
                }
            }
            this.tableTableE22 = ((TableE22DataTable)(base.Tables["TableE22"]));
            if ((initTable == true)) {
                if ((this.tableTableE22 != null)) {
                    this.tableTableE22.InitVars();
                }
            }
            this.tableTableE21 = ((TableE21DataTable)(base.Tables["TableE21"]));
            if ((initTable == true)) {
                if ((this.tableTableE21 != null)) {
                    this.tableTableE21.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "StormwaterControlsDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/StormwaterControls.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableICNode = new ICNodeDataTable();
            base.Tables.Add(this.tableICNode);
            this.tablemdl_SurfSC_ac = new mdl_SurfSC_acDataTable();
            base.Tables.Add(this.tablemdl_SurfSC_ac);
            this.tableic_StreetTargets = new ic_StreetTargetsDataTable();
            base.Tables.Add(this.tableic_StreetTargets);
            this.tableic_RoofTargets = new ic_RoofTargetsDataTable();
            base.Tables.Add(this.tableic_RoofTargets);
            this.tableic_ParkingTargets = new ic_ParkingTargetsDataTable();
            base.Tables.Add(this.tableic_ParkingTargets);
            this.tableAltRoofTargets = new AltRoofTargetsDataTable();
            base.Tables.Add(this.tableAltRoofTargets);
            this.tableAltParkingTargets = new AltParkingTargetsDataTable();
            base.Tables.Add(this.tableAltParkingTargets);
            this.tableAltStreetTargets = new AltStreetTargetsDataTable();
            base.Tables.Add(this.tableAltStreetTargets);
            this.tablemdl_dirsc_ac = new mdl_dirsc_acDataTable();
            base.Tables.Add(this.tablemdl_dirsc_ac);
            this.table_mdl_roofTargets = new _mdl_roofTargetsDataTable();
            base.Tables.Add(this.table_mdl_roofTargets);
            this.table_mdl_ParkingTargets = new _mdl_ParkingTargetsDataTable();
            base.Tables.Add(this.table_mdl_ParkingTargets);
            this.tableTableE18 = new TableE18DataTable();
            base.Tables.Add(this.tableTableE18);
            this.tableTableE19 = new TableE19DataTable();
            base.Tables.Add(this.tableTableE19);
            this.tableTableE03a = new TableE03aDataTable();
            base.Tables.Add(this.tableTableE03a);
            this.tableTableE03b = new TableE03bDataTable();
            base.Tables.Add(this.tableTableE03b);
            this.tableTableE22 = new TableE22DataTable();
            base.Tables.Add(this.tableTableE22);
            this.tableTableE21 = new TableE21DataTable();
            base.Tables.Add(this.tableTableE21);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeICNode() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializemdl_SurfSC_ac() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeic_StreetTargets() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeic_RoofTargets() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeic_ParkingTargets() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAltRoofTargets() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAltParkingTargets() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAltStreetTargets() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializemdl_dirsc_ac() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_mdl_roofTargets() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_mdl_ParkingTargets() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTableE18() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTableE19() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTableE03a() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTableE03b() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTableE22() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTableE21() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            StormwaterControlsDataSet ds = new StormwaterControlsDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ICNodeRowChangeEventHandler(object sender, ICNodeRowChangeEvent e);
        
        public delegate void mdl_SurfSC_acRowChangeEventHandler(object sender, mdl_SurfSC_acRowChangeEvent e);
        
        public delegate void ic_StreetTargetsRowChangeEventHandler(object sender, ic_StreetTargetsRowChangeEvent e);
        
        public delegate void ic_RoofTargetsRowChangeEventHandler(object sender, ic_RoofTargetsRowChangeEvent e);
        
        public delegate void ic_ParkingTargetsRowChangeEventHandler(object sender, ic_ParkingTargetsRowChangeEvent e);
        
        public delegate void AltRoofTargetsRowChangeEventHandler(object sender, AltRoofTargetsRowChangeEvent e);
        
        public delegate void AltParkingTargetsRowChangeEventHandler(object sender, AltParkingTargetsRowChangeEvent e);
        
        public delegate void AltStreetTargetsRowChangeEventHandler(object sender, AltStreetTargetsRowChangeEvent e);
        
        public delegate void mdl_dirsc_acRowChangeEventHandler(object sender, mdl_dirsc_acRowChangeEvent e);
        
        public delegate void _mdl_roofTargetsRowChangeEventHandler(object sender, _mdl_roofTargetsRowChangeEvent e);
        
        public delegate void _mdl_ParkingTargetsRowChangeEventHandler(object sender, _mdl_ParkingTargetsRowChangeEvent e);
        
        public delegate void TableE18RowChangeEventHandler(object sender, TableE18RowChangeEvent e);
        
        public delegate void TableE19RowChangeEventHandler(object sender, TableE19RowChangeEvent e);
        
        public delegate void TableE03aRowChangeEventHandler(object sender, TableE03aRowChangeEvent e);
        
        public delegate void TableE03bRowChangeEventHandler(object sender, TableE03bRowChangeEvent e);
        
        public delegate void TableE22RowChangeEventHandler(object sender, TableE22RowChangeEvent e);
        
        public delegate void TableE21RowChangeEventHandler(object sender, TableE21RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ICNodeDataTable : global::System.Data.TypedTableBase<ICNodeRow> {
            
            private global::System.Data.DataColumn columnRefNode;
            
            private global::System.Data.DataColumn columnRefX;
            
            private global::System.Data.DataColumn columnRefY;
            
            private global::System.Data.DataColumn columnRefGrelev;
            
            private global::System.Data.DataColumn columnFacVolCuFt;
            
            private global::System.Data.DataColumn columnPondingCuFt;
            
            private global::System.Data.DataColumn columnvFlowControl;
            
            private global::System.Data.DataColumn columnFactype;
            
            private global::System.Data.DataColumn columnFacNode;
            
            private global::System.Data.DataColumn columnFacX;
            
            private global::System.Data.DataColumn columnFacY;
            
            private global::System.Data.DataColumn columnOutfallNode;
            
            private global::System.Data.DataColumn columnOFX;
            
            private global::System.Data.DataColumn columnOFY;
            
            private global::System.Data.DataColumn columnInfilFactor;
            
            private global::System.Data.DataColumn columnInfilcfs;
            
            private global::System.Data.DataColumn columnRoughness;
            
            private global::System.Data.DataColumn columnInclude;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ICNodeDataTable() {
                this.TableName = "ICNode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ICNodeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ICNodeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefNodeColumn {
                get {
                    return this.columnRefNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefXColumn {
                get {
                    return this.columnRefX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefYColumn {
                get {
                    return this.columnRefY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefGrelevColumn {
                get {
                    return this.columnRefGrelev;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FacVolCuFtColumn {
                get {
                    return this.columnFacVolCuFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PondingCuFtColumn {
                get {
                    return this.columnPondingCuFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn vFlowControlColumn {
                get {
                    return this.columnvFlowControl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FactypeColumn {
                get {
                    return this.columnFactype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FacNodeColumn {
                get {
                    return this.columnFacNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FacXColumn {
                get {
                    return this.columnFacX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FacYColumn {
                get {
                    return this.columnFacY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OutfallNodeColumn {
                get {
                    return this.columnOutfallNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OFXColumn {
                get {
                    return this.columnOFX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OFYColumn {
                get {
                    return this.columnOFY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfilFactorColumn {
                get {
                    return this.columnInfilFactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfilcfsColumn {
                get {
                    return this.columnInfilcfs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RoughnessColumn {
                get {
                    return this.columnRoughness;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IncludeColumn {
                get {
                    return this.columnInclude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ICNodeRow this[int index] {
                get {
                    return ((ICNodeRow)(this.Rows[index]));
                }
            }
            
            public event ICNodeRowChangeEventHandler ICNodeRowChanging;
            
            public event ICNodeRowChangeEventHandler ICNodeRowChanged;
            
            public event ICNodeRowChangeEventHandler ICNodeRowDeleting;
            
            public event ICNodeRowChangeEventHandler ICNodeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddICNodeRow(ICNodeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ICNodeRow AddICNodeRow(
                        string RefNode, 
                        double RefX, 
                        double RefY, 
                        double RefGrelev, 
                        double FacVolCuFt, 
                        double PondingCuFt, 
                        double vFlowControl, 
                        string Factype, 
                        string FacNode, 
                        int FacX, 
                        int FacY, 
                        string OutfallNode, 
                        int OFX, 
                        int OFY, 
                        double InfilFactor, 
                        double Infilcfs, 
                        double Roughness, 
                        string Include) {
                ICNodeRow rowICNodeRow = ((ICNodeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RefNode,
                        RefX,
                        RefY,
                        RefGrelev,
                        FacVolCuFt,
                        PondingCuFt,
                        vFlowControl,
                        Factype,
                        FacNode,
                        FacX,
                        FacY,
                        OutfallNode,
                        OFX,
                        OFY,
                        InfilFactor,
                        Infilcfs,
                        Roughness,
                        Include};
                rowICNodeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowICNodeRow);
                return rowICNodeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ICNodeRow FindByFacNode(string FacNode) {
                return ((ICNodeRow)(this.Rows.Find(new object[] {
                            FacNode})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ICNodeDataTable cln = ((ICNodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ICNodeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRefNode = base.Columns["RefNode"];
                this.columnRefX = base.Columns["RefX"];
                this.columnRefY = base.Columns["RefY"];
                this.columnRefGrelev = base.Columns["RefGrelev"];
                this.columnFacVolCuFt = base.Columns["FacVolCuFt"];
                this.columnPondingCuFt = base.Columns["PondingCuFt"];
                this.columnvFlowControl = base.Columns["vFlowControl"];
                this.columnFactype = base.Columns["Factype"];
                this.columnFacNode = base.Columns["FacNode"];
                this.columnFacX = base.Columns["FacX"];
                this.columnFacY = base.Columns["FacY"];
                this.columnOutfallNode = base.Columns["OutfallNode"];
                this.columnOFX = base.Columns["OFX"];
                this.columnOFY = base.Columns["OFY"];
                this.columnInfilFactor = base.Columns["InfilFactor"];
                this.columnInfilcfs = base.Columns["Infilcfs"];
                this.columnRoughness = base.Columns["Roughness"];
                this.columnInclude = base.Columns["Include"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRefNode = new global::System.Data.DataColumn("RefNode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefNode);
                this.columnRefX = new global::System.Data.DataColumn("RefX", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefX);
                this.columnRefY = new global::System.Data.DataColumn("RefY", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefY);
                this.columnRefGrelev = new global::System.Data.DataColumn("RefGrelev", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefGrelev);
                this.columnFacVolCuFt = new global::System.Data.DataColumn("FacVolCuFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFacVolCuFt);
                this.columnPondingCuFt = new global::System.Data.DataColumn("PondingCuFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPondingCuFt);
                this.columnvFlowControl = new global::System.Data.DataColumn("vFlowControl", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvFlowControl);
                this.columnFactype = new global::System.Data.DataColumn("Factype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFactype);
                this.columnFacNode = new global::System.Data.DataColumn("FacNode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFacNode);
                this.columnFacX = new global::System.Data.DataColumn("FacX", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFacX);
                this.columnFacY = new global::System.Data.DataColumn("FacY", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFacY);
                this.columnOutfallNode = new global::System.Data.DataColumn("OutfallNode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutfallNode);
                this.columnOFX = new global::System.Data.DataColumn("OFX", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOFX);
                this.columnOFY = new global::System.Data.DataColumn("OFY", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOFY);
                this.columnInfilFactor = new global::System.Data.DataColumn("InfilFactor", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfilFactor);
                this.columnInfilcfs = new global::System.Data.DataColumn("Infilcfs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfilcfs);
                this.columnRoughness = new global::System.Data.DataColumn("Roughness", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoughness);
                this.columnInclude = new global::System.Data.DataColumn("Include", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInclude);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFacNode}, true));
                this.columnRefNode.MaxLength = 10;
                this.columnFactype.MaxLength = 1;
                this.columnFacNode.AllowDBNull = false;
                this.columnFacNode.Unique = true;
                this.columnFacNode.MaxLength = 10;
                this.columnOutfallNode.MaxLength = 10;
                this.columnInclude.MaxLength = 2;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ICNodeRow NewICNodeRow() {
                return ((ICNodeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ICNodeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ICNodeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ICNodeRowChanged != null)) {
                    this.ICNodeRowChanged(this, new ICNodeRowChangeEvent(((ICNodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ICNodeRowChanging != null)) {
                    this.ICNodeRowChanging(this, new ICNodeRowChangeEvent(((ICNodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ICNodeRowDeleted != null)) {
                    this.ICNodeRowDeleted(this, new ICNodeRowChangeEvent(((ICNodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ICNodeRowDeleting != null)) {
                    this.ICNodeRowDeleting(this, new ICNodeRowChangeEvent(((ICNodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveICNodeRow(ICNodeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StormwaterControlsDataSet ds = new StormwaterControlsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ICNodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class mdl_SurfSC_acDataTable : global::System.Data.TypedTableBase<mdl_SurfSC_acRow> {
            
            private global::System.Data.DataColumn columnMAPINFO_ID;
            
            private global::System.Data.DataColumn columnSurfSCID;
            
            private global::System.Data.DataColumn columnNGTO;
            
            private global::System.Data.DataColumn columnSlope;
            
            private global::System.Data.DataColumn columnFlowLengthFt;
            
            private global::System.Data.DataColumn columndH;
            
            private global::System.Data.DataColumn columnImp_n;
            
            private global::System.Data.DataColumn columnPer_n;
            
            private global::System.Data.DataColumn columnImp_sto;
            
            private global::System.Data.DataColumn columnPer_sto;
            
            private global::System.Data.DataColumn columnSuct;
            
            private global::System.Data.DataColumn columnHydcon;
            
            private global::System.Data.DataColumn columnSMDMax;
            
            private global::System.Data.DataColumn columnissumped;
            
            private global::System.Data.DataColumn columntotalgrossacres;
            
            private global::System.Data.DataColumn columnpaveacres;
            
            private global::System.Data.DataColumn columnSWacres;
            
            private global::System.Data.DataColumn columnSWAcresOther;
            
            private global::System.Data.DataColumn columnSWfactor;
            
            private global::System.Data.DataColumn columnPaveTreeAcres;
            
            private global::System.Data.DataColumn columnTraceVisit;
            
            private global::System.Data.DataColumn columnUpdateAtts;
            
            private global::System.Data.DataColumn columnDataSource;
            
            private global::System.Data.DataColumn columnROWAcres;
            
            private global::System.Data.DataColumn columnROWAcresOther;
            
            private global::System.Data.DataColumn columnc_RFgrossacres;
            
            private global::System.Data.DataColumn columnc_RFtosurfacres;
            
            private global::System.Data.DataColumn columnc_RFtosurfIMPacres;
            
            private global::System.Data.DataColumn columnc_PKgrossacres;
            
            private global::System.Data.DataColumn columnc_PKtosurfacres;
            
            private global::System.Data.DataColumn columnc_PKtosurfIMPacres;
            
            private global::System.Data.DataColumn columnc_netacres;
            
            private global::System.Data.DataColumn columnc_netIMPacres;
            
            private global::System.Data.DataColumn columnIsActive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mdl_SurfSC_acDataTable() {
                this.TableName = "mdl_SurfSC_ac";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal mdl_SurfSC_acDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected mdl_SurfSC_acDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAPINFO_IDColumn {
                get {
                    return this.columnMAPINFO_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurfSCIDColumn {
                get {
                    return this.columnSurfSCID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NGTOColumn {
                get {
                    return this.columnNGTO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SlopeColumn {
                get {
                    return this.columnSlope;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowLengthFtColumn {
                get {
                    return this.columnFlowLengthFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dHColumn {
                get {
                    return this.columndH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Imp_nColumn {
                get {
                    return this.columnImp_n;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Per_nColumn {
                get {
                    return this.columnPer_n;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Imp_stoColumn {
                get {
                    return this.columnImp_sto;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Per_stoColumn {
                get {
                    return this.columnPer_sto;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SuctColumn {
                get {
                    return this.columnSuct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HydconColumn {
                get {
                    return this.columnHydcon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SMDMaxColumn {
                get {
                    return this.columnSMDMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn issumpedColumn {
                get {
                    return this.columnissumped;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalgrossacresColumn {
                get {
                    return this.columntotalgrossacres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn paveacresColumn {
                get {
                    return this.columnpaveacres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SWacresColumn {
                get {
                    return this.columnSWacres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SWAcresOtherColumn {
                get {
                    return this.columnSWAcresOther;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SWfactorColumn {
                get {
                    return this.columnSWfactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaveTreeAcresColumn {
                get {
                    return this.columnPaveTreeAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TraceVisitColumn {
                get {
                    return this.columnTraceVisit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateAttsColumn {
                get {
                    return this.columnUpdateAtts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataSourceColumn {
                get {
                    return this.columnDataSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ROWAcresColumn {
                get {
                    return this.columnROWAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ROWAcresOtherColumn {
                get {
                    return this.columnROWAcresOther;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn c_RFgrossacresColumn {
                get {
                    return this.columnc_RFgrossacres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn c_RFtosurfacresColumn {
                get {
                    return this.columnc_RFtosurfacres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn c_RFtosurfIMPacresColumn {
                get {
                    return this.columnc_RFtosurfIMPacres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn c_PKgrossacresColumn {
                get {
                    return this.columnc_PKgrossacres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn c_PKtosurfacresColumn {
                get {
                    return this.columnc_PKtosurfacres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn c_PKtosurfIMPacresColumn {
                get {
                    return this.columnc_PKtosurfIMPacres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn c_netacresColumn {
                get {
                    return this.columnc_netacres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn c_netIMPacresColumn {
                get {
                    return this.columnc_netIMPacres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mdl_SurfSC_acRow this[int index] {
                get {
                    return ((mdl_SurfSC_acRow)(this.Rows[index]));
                }
            }
            
            public event mdl_SurfSC_acRowChangeEventHandler mdl_SurfSC_acRowChanging;
            
            public event mdl_SurfSC_acRowChangeEventHandler mdl_SurfSC_acRowChanged;
            
            public event mdl_SurfSC_acRowChangeEventHandler mdl_SurfSC_acRowDeleting;
            
            public event mdl_SurfSC_acRowChangeEventHandler mdl_SurfSC_acRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addmdl_SurfSC_acRow(mdl_SurfSC_acRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mdl_SurfSC_acRow Addmdl_SurfSC_acRow(
                        int SurfSCID, 
                        string NGTO, 
                        double Slope, 
                        double FlowLengthFt, 
                        double dH, 
                        double Imp_n, 
                        double Per_n, 
                        double Imp_sto, 
                        double Per_sto, 
                        double Suct, 
                        double Hydcon, 
                        double SMDMax, 
                        bool issumped, 
                        double totalgrossacres, 
                        double paveacres, 
                        double SWacres, 
                        double SWAcresOther, 
                        double SWfactor, 
                        double PaveTreeAcres, 
                        string TraceVisit, 
                        bool UpdateAtts, 
                        string DataSource, 
                        double ROWAcres, 
                        double ROWAcresOther, 
                        double c_RFgrossacres, 
                        double c_RFtosurfacres, 
                        double c_RFtosurfIMPacres, 
                        double c_PKgrossacres, 
                        double c_PKtosurfacres, 
                        double c_PKtosurfIMPacres, 
                        double c_netacres, 
                        double c_netIMPacres, 
                        bool IsActive) {
                mdl_SurfSC_acRow rowmdl_SurfSC_acRow = ((mdl_SurfSC_acRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SurfSCID,
                        NGTO,
                        Slope,
                        FlowLengthFt,
                        dH,
                        Imp_n,
                        Per_n,
                        Imp_sto,
                        Per_sto,
                        Suct,
                        Hydcon,
                        SMDMax,
                        issumped,
                        totalgrossacres,
                        paveacres,
                        SWacres,
                        SWAcresOther,
                        SWfactor,
                        PaveTreeAcres,
                        TraceVisit,
                        UpdateAtts,
                        DataSource,
                        ROWAcres,
                        ROWAcresOther,
                        c_RFgrossacres,
                        c_RFtosurfacres,
                        c_RFtosurfIMPacres,
                        c_PKgrossacres,
                        c_PKtosurfacres,
                        c_PKtosurfIMPacres,
                        c_netacres,
                        c_netIMPacres,
                        IsActive};
                rowmdl_SurfSC_acRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowmdl_SurfSC_acRow);
                return rowmdl_SurfSC_acRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mdl_SurfSC_acRow FindByMAPINFO_ID(int MAPINFO_ID) {
                return ((mdl_SurfSC_acRow)(this.Rows.Find(new object[] {
                            MAPINFO_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                mdl_SurfSC_acDataTable cln = ((mdl_SurfSC_acDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new mdl_SurfSC_acDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMAPINFO_ID = base.Columns["MAPINFO_ID"];
                this.columnSurfSCID = base.Columns["SurfSCID"];
                this.columnNGTO = base.Columns["NGTO"];
                this.columnSlope = base.Columns["Slope"];
                this.columnFlowLengthFt = base.Columns["FlowLengthFt"];
                this.columndH = base.Columns["dH"];
                this.columnImp_n = base.Columns["Imp_n"];
                this.columnPer_n = base.Columns["Per_n"];
                this.columnImp_sto = base.Columns["Imp_sto"];
                this.columnPer_sto = base.Columns["Per_sto"];
                this.columnSuct = base.Columns["Suct"];
                this.columnHydcon = base.Columns["Hydcon"];
                this.columnSMDMax = base.Columns["SMDMax"];
                this.columnissumped = base.Columns["issumped"];
                this.columntotalgrossacres = base.Columns["totalgrossacres"];
                this.columnpaveacres = base.Columns["paveacres"];
                this.columnSWacres = base.Columns["SWacres"];
                this.columnSWAcresOther = base.Columns["SWAcresOther"];
                this.columnSWfactor = base.Columns["SWfactor"];
                this.columnPaveTreeAcres = base.Columns["PaveTreeAcres"];
                this.columnTraceVisit = base.Columns["TraceVisit"];
                this.columnUpdateAtts = base.Columns["UpdateAtts"];
                this.columnDataSource = base.Columns["DataSource"];
                this.columnROWAcres = base.Columns["ROWAcres"];
                this.columnROWAcresOther = base.Columns["ROWAcresOther"];
                this.columnc_RFgrossacres = base.Columns["c_RFgrossacres"];
                this.columnc_RFtosurfacres = base.Columns["c_RFtosurfacres"];
                this.columnc_RFtosurfIMPacres = base.Columns["c_RFtosurfIMPacres"];
                this.columnc_PKgrossacres = base.Columns["c_PKgrossacres"];
                this.columnc_PKtosurfacres = base.Columns["c_PKtosurfacres"];
                this.columnc_PKtosurfIMPacres = base.Columns["c_PKtosurfIMPacres"];
                this.columnc_netacres = base.Columns["c_netacres"];
                this.columnc_netIMPacres = base.Columns["c_netIMPacres"];
                this.columnIsActive = base.Columns["IsActive"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMAPINFO_ID = new global::System.Data.DataColumn("MAPINFO_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAPINFO_ID);
                this.columnSurfSCID = new global::System.Data.DataColumn("SurfSCID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurfSCID);
                this.columnNGTO = new global::System.Data.DataColumn("NGTO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGTO);
                this.columnSlope = new global::System.Data.DataColumn("Slope", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSlope);
                this.columnFlowLengthFt = new global::System.Data.DataColumn("FlowLengthFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowLengthFt);
                this.columndH = new global::System.Data.DataColumn("dH", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndH);
                this.columnImp_n = new global::System.Data.DataColumn("Imp_n", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImp_n);
                this.columnPer_n = new global::System.Data.DataColumn("Per_n", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPer_n);
                this.columnImp_sto = new global::System.Data.DataColumn("Imp_sto", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImp_sto);
                this.columnPer_sto = new global::System.Data.DataColumn("Per_sto", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPer_sto);
                this.columnSuct = new global::System.Data.DataColumn("Suct", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSuct);
                this.columnHydcon = new global::System.Data.DataColumn("Hydcon", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHydcon);
                this.columnSMDMax = new global::System.Data.DataColumn("SMDMax", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSMDMax);
                this.columnissumped = new global::System.Data.DataColumn("issumped", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnissumped);
                this.columntotalgrossacres = new global::System.Data.DataColumn("totalgrossacres", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalgrossacres);
                this.columnpaveacres = new global::System.Data.DataColumn("paveacres", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpaveacres);
                this.columnSWacres = new global::System.Data.DataColumn("SWacres", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSWacres);
                this.columnSWAcresOther = new global::System.Data.DataColumn("SWAcresOther", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSWAcresOther);
                this.columnSWfactor = new global::System.Data.DataColumn("SWfactor", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSWfactor);
                this.columnPaveTreeAcres = new global::System.Data.DataColumn("PaveTreeAcres", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaveTreeAcres);
                this.columnTraceVisit = new global::System.Data.DataColumn("TraceVisit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTraceVisit);
                this.columnUpdateAtts = new global::System.Data.DataColumn("UpdateAtts", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateAtts);
                this.columnDataSource = new global::System.Data.DataColumn("DataSource", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataSource);
                this.columnROWAcres = new global::System.Data.DataColumn("ROWAcres", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnROWAcres);
                this.columnROWAcresOther = new global::System.Data.DataColumn("ROWAcresOther", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnROWAcresOther);
                this.columnc_RFgrossacres = new global::System.Data.DataColumn("c_RFgrossacres", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnc_RFgrossacres);
                this.columnc_RFtosurfacres = new global::System.Data.DataColumn("c_RFtosurfacres", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnc_RFtosurfacres);
                this.columnc_RFtosurfIMPacres = new global::System.Data.DataColumn("c_RFtosurfIMPacres", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnc_RFtosurfIMPacres);
                this.columnc_PKgrossacres = new global::System.Data.DataColumn("c_PKgrossacres", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnc_PKgrossacres);
                this.columnc_PKtosurfacres = new global::System.Data.DataColumn("c_PKtosurfacres", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnc_PKtosurfacres);
                this.columnc_PKtosurfIMPacres = new global::System.Data.DataColumn("c_PKtosurfIMPacres", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnc_PKtosurfIMPacres);
                this.columnc_netacres = new global::System.Data.DataColumn("c_netacres", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnc_netacres);
                this.columnc_netIMPacres = new global::System.Data.DataColumn("c_netIMPacres", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnc_netIMPacres);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMAPINFO_ID}, true));
                this.columnMAPINFO_ID.AutoIncrement = true;
                this.columnMAPINFO_ID.AutoIncrementSeed = -1;
                this.columnMAPINFO_ID.AutoIncrementStep = -1;
                this.columnMAPINFO_ID.AllowDBNull = false;
                this.columnMAPINFO_ID.Unique = true;
                this.columnNGTO.MaxLength = 6;
                this.columnTraceVisit.MaxLength = 1;
                this.columnDataSource.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mdl_SurfSC_acRow Newmdl_SurfSC_acRow() {
                return ((mdl_SurfSC_acRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new mdl_SurfSC_acRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(mdl_SurfSC_acRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.mdl_SurfSC_acRowChanged != null)) {
                    this.mdl_SurfSC_acRowChanged(this, new mdl_SurfSC_acRowChangeEvent(((mdl_SurfSC_acRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.mdl_SurfSC_acRowChanging != null)) {
                    this.mdl_SurfSC_acRowChanging(this, new mdl_SurfSC_acRowChangeEvent(((mdl_SurfSC_acRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.mdl_SurfSC_acRowDeleted != null)) {
                    this.mdl_SurfSC_acRowDeleted(this, new mdl_SurfSC_acRowChangeEvent(((mdl_SurfSC_acRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.mdl_SurfSC_acRowDeleting != null)) {
                    this.mdl_SurfSC_acRowDeleting(this, new mdl_SurfSC_acRowChangeEvent(((mdl_SurfSC_acRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removemdl_SurfSC_acRow(mdl_SurfSC_acRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StormwaterControlsDataSet ds = new StormwaterControlsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "mdl_SurfSC_acDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ic_StreetTargetsDataTable : global::System.Data.TypedTableBase<ic_StreetTargetsRow> {
            
            private global::System.Data.DataColumn columnMAPINFO_ID;
            
            private global::System.Data.DataColumn columnicID;
            
            private global::System.Data.DataColumn columnsICID;
            
            private global::System.Data.DataColumn columnnGTOStreet;
            
            private global::System.Data.DataColumn columnsurfSCID;
            
            private global::System.Data.DataColumn columnevaluation;
            
            private global::System.Data.DataColumn columncomments;
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn columnstreetArea;
            
            private global::System.Data.DataColumn columnflowControl;
            
            private global::System.Data.DataColumn columnintersection;
            
            private global::System.Data.DataColumn columncorner;
            
            private global::System.Data.DataColumn columnstreet1;
            
            private global::System.Data.DataColumn columnstreet1Area;
            
            private global::System.Data.DataColumn columnstreet1CExtVol;
            
            private global::System.Data.DataColumn columnstreet1CExtFlow;
            
            private global::System.Data.DataColumn columnstreet2;
            
            private global::System.Data.DataColumn columnstreet2Area;
            
            private global::System.Data.DataColumn columnstreet2CExtVol;
            
            private global::System.Data.DataColumn columnstreet2CExtFlow;
            
            private global::System.Data.DataColumn columnorificeArea;
            
            private global::System.Data.DataColumn columncurbExtensionArea;
            
            private global::System.Data.DataColumn columnpondingVol;
            
            private global::System.Data.DataColumn columncurbExtensionVol;
            
            private global::System.Data.DataColumn columncomments2;
            
            private global::System.Data.DataColumn columntypeCode;
            
            private global::System.Data.DataColumn columnXPSWMM_Name;
            
            private global::System.Data.DataColumn columnxCoord;
            
            private global::System.Data.DataColumn columnyCoord;
            
            private global::System.Data.DataColumn columnbuildModelIC;
            
            private global::System.Data.DataColumn columnsource;
            
            private global::System.Data.DataColumn columnappendDate;
            
            private global::System.Data.DataColumn columnconstructed;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ic_StreetTargetsDataTable() {
                this.TableName = "ic_StreetTargets";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ic_StreetTargetsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ic_StreetTargetsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAPINFO_IDColumn {
                get {
                    return this.columnMAPINFO_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn icIDColumn {
                get {
                    return this.columnicID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sICIDColumn {
                get {
                    return this.columnsICID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nGTOStreetColumn {
                get {
                    return this.columnnGTOStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn surfSCIDColumn {
                get {
                    return this.columnsurfSCID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn evaluationColumn {
                get {
                    return this.columnevaluation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn commentsColumn {
                get {
                    return this.columncomments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn streetAreaColumn {
                get {
                    return this.columnstreetArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn flowControlColumn {
                get {
                    return this.columnflowControl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn intersectionColumn {
                get {
                    return this.columnintersection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cornerColumn {
                get {
                    return this.columncorner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn street1Column {
                get {
                    return this.columnstreet1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn street1AreaColumn {
                get {
                    return this.columnstreet1Area;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn street1CExtVolColumn {
                get {
                    return this.columnstreet1CExtVol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn street1CExtFlowColumn {
                get {
                    return this.columnstreet1CExtFlow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn street2Column {
                get {
                    return this.columnstreet2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn street2AreaColumn {
                get {
                    return this.columnstreet2Area;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn street2CExtVolColumn {
                get {
                    return this.columnstreet2CExtVol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn street2CExtFlowColumn {
                get {
                    return this.columnstreet2CExtFlow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn orificeAreaColumn {
                get {
                    return this.columnorificeArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn curbExtensionAreaColumn {
                get {
                    return this.columncurbExtensionArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pondingVolColumn {
                get {
                    return this.columnpondingVol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn curbExtensionVolColumn {
                get {
                    return this.columncurbExtensionVol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn comments2Column {
                get {
                    return this.columncomments2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeCodeColumn {
                get {
                    return this.columntypeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XPSWMM_NameColumn {
                get {
                    return this.columnXPSWMM_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xCoordColumn {
                get {
                    return this.columnxCoord;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yCoordColumn {
                get {
                    return this.columnyCoord;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn buildModelICColumn {
                get {
                    return this.columnbuildModelIC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sourceColumn {
                get {
                    return this.columnsource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn appendDateColumn {
                get {
                    return this.columnappendDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn constructedColumn {
                get {
                    return this.columnconstructed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ic_StreetTargetsRow this[int index] {
                get {
                    return ((ic_StreetTargetsRow)(this.Rows[index]));
                }
            }
            
            public event ic_StreetTargetsRowChangeEventHandler ic_StreetTargetsRowChanging;
            
            public event ic_StreetTargetsRowChangeEventHandler ic_StreetTargetsRowChanged;
            
            public event ic_StreetTargetsRowChangeEventHandler ic_StreetTargetsRowDeleting;
            
            public event ic_StreetTargetsRowChangeEventHandler ic_StreetTargetsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addic_StreetTargetsRow(ic_StreetTargetsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ic_StreetTargetsRow Addic_StreetTargetsRow(
                        int icID, 
                        string sICID, 
                        string nGTOStreet, 
                        int surfSCID, 
                        string evaluation, 
                        string comments, 
                        string type, 
                        double streetArea, 
                        double flowControl, 
                        string intersection, 
                        string corner, 
                        string street1, 
                        int street1Area, 
                        short street1CExtVol, 
                        double street1CExtFlow, 
                        string street2, 
                        int street2Area, 
                        short street2CExtVol, 
                        double street2CExtFlow, 
                        int orificeArea, 
                        int curbExtensionArea, 
                        short pondingVol, 
                        short curbExtensionVol, 
                        string comments2, 
                        string typeCode, 
                        string XPSWMM_Name, 
                        int xCoord, 
                        int yCoord, 
                        bool buildModelIC, 
                        string source, 
                        string appendDate, 
                        int constructed) {
                ic_StreetTargetsRow rowic_StreetTargetsRow = ((ic_StreetTargetsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        icID,
                        sICID,
                        nGTOStreet,
                        surfSCID,
                        evaluation,
                        comments,
                        type,
                        streetArea,
                        flowControl,
                        intersection,
                        corner,
                        street1,
                        street1Area,
                        street1CExtVol,
                        street1CExtFlow,
                        street2,
                        street2Area,
                        street2CExtVol,
                        street2CExtFlow,
                        orificeArea,
                        curbExtensionArea,
                        pondingVol,
                        curbExtensionVol,
                        comments2,
                        typeCode,
                        XPSWMM_Name,
                        xCoord,
                        yCoord,
                        buildModelIC,
                        source,
                        appendDate,
                        constructed};
                rowic_StreetTargetsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowic_StreetTargetsRow);
                return rowic_StreetTargetsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ic_StreetTargetsRow FindByMAPINFO_ID(int MAPINFO_ID) {
                return ((ic_StreetTargetsRow)(this.Rows.Find(new object[] {
                            MAPINFO_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ic_StreetTargetsDataTable cln = ((ic_StreetTargetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ic_StreetTargetsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMAPINFO_ID = base.Columns["MAPINFO_ID"];
                this.columnicID = base.Columns["icID"];
                this.columnsICID = base.Columns["sICID"];
                this.columnnGTOStreet = base.Columns["nGTOStreet"];
                this.columnsurfSCID = base.Columns["surfSCID"];
                this.columnevaluation = base.Columns["evaluation"];
                this.columncomments = base.Columns["comments"];
                this.columntype = base.Columns["type"];
                this.columnstreetArea = base.Columns["streetArea"];
                this.columnflowControl = base.Columns["flowControl"];
                this.columnintersection = base.Columns["intersection"];
                this.columncorner = base.Columns["corner"];
                this.columnstreet1 = base.Columns["street1"];
                this.columnstreet1Area = base.Columns["street1Area"];
                this.columnstreet1CExtVol = base.Columns["street1CExtVol"];
                this.columnstreet1CExtFlow = base.Columns["street1CExtFlow"];
                this.columnstreet2 = base.Columns["street2"];
                this.columnstreet2Area = base.Columns["street2Area"];
                this.columnstreet2CExtVol = base.Columns["street2CExtVol"];
                this.columnstreet2CExtFlow = base.Columns["street2CExtFlow"];
                this.columnorificeArea = base.Columns["orificeArea"];
                this.columncurbExtensionArea = base.Columns["curbExtensionArea"];
                this.columnpondingVol = base.Columns["pondingVol"];
                this.columncurbExtensionVol = base.Columns["curbExtensionVol"];
                this.columncomments2 = base.Columns["comments2"];
                this.columntypeCode = base.Columns["typeCode"];
                this.columnXPSWMM_Name = base.Columns["XPSWMM_Name"];
                this.columnxCoord = base.Columns["xCoord"];
                this.columnyCoord = base.Columns["yCoord"];
                this.columnbuildModelIC = base.Columns["buildModelIC"];
                this.columnsource = base.Columns["source"];
                this.columnappendDate = base.Columns["appendDate"];
                this.columnconstructed = base.Columns["constructed"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMAPINFO_ID = new global::System.Data.DataColumn("MAPINFO_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAPINFO_ID);
                this.columnicID = new global::System.Data.DataColumn("icID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnicID);
                this.columnsICID = new global::System.Data.DataColumn("sICID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsICID);
                this.columnnGTOStreet = new global::System.Data.DataColumn("nGTOStreet", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnGTOStreet);
                this.columnsurfSCID = new global::System.Data.DataColumn("surfSCID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsurfSCID);
                this.columnevaluation = new global::System.Data.DataColumn("evaluation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnevaluation);
                this.columncomments = new global::System.Data.DataColumn("comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncomments);
                this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntype);
                this.columnstreetArea = new global::System.Data.DataColumn("streetArea", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstreetArea);
                this.columnflowControl = new global::System.Data.DataColumn("flowControl", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnflowControl);
                this.columnintersection = new global::System.Data.DataColumn("intersection", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnintersection);
                this.columncorner = new global::System.Data.DataColumn("corner", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncorner);
                this.columnstreet1 = new global::System.Data.DataColumn("street1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstreet1);
                this.columnstreet1Area = new global::System.Data.DataColumn("street1Area", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstreet1Area);
                this.columnstreet1CExtVol = new global::System.Data.DataColumn("street1CExtVol", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstreet1CExtVol);
                this.columnstreet1CExtFlow = new global::System.Data.DataColumn("street1CExtFlow", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstreet1CExtFlow);
                this.columnstreet2 = new global::System.Data.DataColumn("street2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstreet2);
                this.columnstreet2Area = new global::System.Data.DataColumn("street2Area", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstreet2Area);
                this.columnstreet2CExtVol = new global::System.Data.DataColumn("street2CExtVol", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstreet2CExtVol);
                this.columnstreet2CExtFlow = new global::System.Data.DataColumn("street2CExtFlow", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstreet2CExtFlow);
                this.columnorificeArea = new global::System.Data.DataColumn("orificeArea", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnorificeArea);
                this.columncurbExtensionArea = new global::System.Data.DataColumn("curbExtensionArea", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncurbExtensionArea);
                this.columnpondingVol = new global::System.Data.DataColumn("pondingVol", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpondingVol);
                this.columncurbExtensionVol = new global::System.Data.DataColumn("curbExtensionVol", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncurbExtensionVol);
                this.columncomments2 = new global::System.Data.DataColumn("comments2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncomments2);
                this.columntypeCode = new global::System.Data.DataColumn("typeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntypeCode);
                this.columnXPSWMM_Name = new global::System.Data.DataColumn("XPSWMM_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXPSWMM_Name);
                this.columnxCoord = new global::System.Data.DataColumn("xCoord", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxCoord);
                this.columnyCoord = new global::System.Data.DataColumn("yCoord", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyCoord);
                this.columnbuildModelIC = new global::System.Data.DataColumn("buildModelIC", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbuildModelIC);
                this.columnsource = new global::System.Data.DataColumn("source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsource);
                this.columnappendDate = new global::System.Data.DataColumn("appendDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnappendDate);
                this.columnconstructed = new global::System.Data.DataColumn("constructed", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconstructed);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMAPINFO_ID}, true));
                this.columnMAPINFO_ID.AutoIncrement = true;
                this.columnMAPINFO_ID.AutoIncrementSeed = -1;
                this.columnMAPINFO_ID.AutoIncrementStep = -1;
                this.columnMAPINFO_ID.AllowDBNull = false;
                this.columnMAPINFO_ID.Unique = true;
                this.columnsICID.MaxLength = 6;
                this.columnnGTOStreet.MaxLength = 7;
                this.columnevaluation.MaxLength = 1;
                this.columncomments.MaxLength = 254;
                this.columntype.MaxLength = 10;
                this.columnintersection.MaxLength = 100;
                this.columncorner.MaxLength = 3;
                this.columnstreet1.MaxLength = 25;
                this.columnstreet2.MaxLength = 25;
                this.columncomments2.MaxLength = 254;
                this.columntypeCode.MaxLength = 1;
                this.columnXPSWMM_Name.MaxLength = 10;
                this.columnsource.MaxLength = 15;
                this.columnappendDate.MaxLength = 17;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ic_StreetTargetsRow Newic_StreetTargetsRow() {
                return ((ic_StreetTargetsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ic_StreetTargetsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ic_StreetTargetsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ic_StreetTargetsRowChanged != null)) {
                    this.ic_StreetTargetsRowChanged(this, new ic_StreetTargetsRowChangeEvent(((ic_StreetTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ic_StreetTargetsRowChanging != null)) {
                    this.ic_StreetTargetsRowChanging(this, new ic_StreetTargetsRowChangeEvent(((ic_StreetTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ic_StreetTargetsRowDeleted != null)) {
                    this.ic_StreetTargetsRowDeleted(this, new ic_StreetTargetsRowChangeEvent(((ic_StreetTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ic_StreetTargetsRowDeleting != null)) {
                    this.ic_StreetTargetsRowDeleting(this, new ic_StreetTargetsRowChangeEvent(((ic_StreetTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeic_StreetTargetsRow(ic_StreetTargetsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StormwaterControlsDataSet ds = new StormwaterControlsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ic_StreetTargetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ic_RoofTargetsDataTable : global::System.Data.TypedTableBase<ic_RoofTargetsRow> {
            
            private global::System.Data.DataColumn columnMAPINFO_ID;
            
            private global::System.Data.DataColumn columnicID;
            
            private global::System.Data.DataColumn columnrICID;
            
            private global::System.Data.DataColumn columnparcelID;
            
            private global::System.Data.DataColumn columndivideID;
            
            private global::System.Data.DataColumn columndscID;
            
            private global::System.Data.DataColumn columnnGTORoof;
            
            private global::System.Data.DataColumn columnexICFtRoof;
            
            private global::System.Data.DataColumn columnexRfAreaFt;
            
            private global::System.Data.DataColumn columnexternalDS;
            
            private global::System.Data.DataColumn columndsTotal;
            
            private global::System.Data.DataColumn columnextoVeg;
            
            private global::System.Data.DataColumn columnextoStreet;
            
            private global::System.Data.DataColumn columnextoPlanter;
            
            private global::System.Data.DataColumn columnextoBioretention;
            
            private global::System.Data.DataColumn columnextoDrywell;
            
            private global::System.Data.DataColumn columnextoEcoroof;
            
            private global::System.Data.DataColumn columndstoVeg;
            
            private global::System.Data.DataColumn columndstoStreet;
            
            private global::System.Data.DataColumn columndstoPlanter;
            
            private global::System.Data.DataColumn columndstoBioretention;
            
            private global::System.Data.DataColumn columndstoDrywell;
            
            private global::System.Data.DataColumn columndstoEcoroof;
            
            private global::System.Data.DataColumn columndsUncontrollable;
            
            private global::System.Data.DataColumn columnlandscapeAvailable;
            
            private global::System.Data.DataColumn columnfractionDrained;
            
            private global::System.Data.DataColumn columndifficulty;
            
            private global::System.Data.DataColumn columnroofEffDisc;
            
            private global::System.Data.DataColumn columncomments;
            
            private global::System.Data.DataColumn columnplantersOK;
            
            private global::System.Data.DataColumn columnbioretentionOK;
            
            private global::System.Data.DataColumn columnbuildModelIC;
            
            private global::System.Data.DataColumn columnsource;
            
            private global::System.Data.DataColumn columnappendDate;
            
            private global::System.Data.DataColumn columnconstructed;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ic_RoofTargetsDataTable() {
                this.TableName = "ic_RoofTargets";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ic_RoofTargetsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ic_RoofTargetsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAPINFO_IDColumn {
                get {
                    return this.columnMAPINFO_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn icIDColumn {
                get {
                    return this.columnicID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rICIDColumn {
                get {
                    return this.columnrICID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn parcelIDColumn {
                get {
                    return this.columnparcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn divideIDColumn {
                get {
                    return this.columndivideID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dscIDColumn {
                get {
                    return this.columndscID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nGTORoofColumn {
                get {
                    return this.columnnGTORoof;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn exICFtRoofColumn {
                get {
                    return this.columnexICFtRoof;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn exRfAreaFtColumn {
                get {
                    return this.columnexRfAreaFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn externalDSColumn {
                get {
                    return this.columnexternalDS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dsTotalColumn {
                get {
                    return this.columndsTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn extoVegColumn {
                get {
                    return this.columnextoVeg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn extoStreetColumn {
                get {
                    return this.columnextoStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn extoPlanterColumn {
                get {
                    return this.columnextoPlanter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn extoBioretentionColumn {
                get {
                    return this.columnextoBioretention;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn extoDrywellColumn {
                get {
                    return this.columnextoDrywell;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn extoEcoroofColumn {
                get {
                    return this.columnextoEcoroof;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dstoVegColumn {
                get {
                    return this.columndstoVeg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dstoStreetColumn {
                get {
                    return this.columndstoStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dstoPlanterColumn {
                get {
                    return this.columndstoPlanter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dstoBioretentionColumn {
                get {
                    return this.columndstoBioretention;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dstoDrywellColumn {
                get {
                    return this.columndstoDrywell;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dstoEcoroofColumn {
                get {
                    return this.columndstoEcoroof;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dsUncontrollableColumn {
                get {
                    return this.columndsUncontrollable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn landscapeAvailableColumn {
                get {
                    return this.columnlandscapeAvailable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fractionDrainedColumn {
                get {
                    return this.columnfractionDrained;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn difficultyColumn {
                get {
                    return this.columndifficulty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn roofEffDiscColumn {
                get {
                    return this.columnroofEffDisc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn commentsColumn {
                get {
                    return this.columncomments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn plantersOKColumn {
                get {
                    return this.columnplantersOK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bioretentionOKColumn {
                get {
                    return this.columnbioretentionOK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn buildModelICColumn {
                get {
                    return this.columnbuildModelIC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sourceColumn {
                get {
                    return this.columnsource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn appendDateColumn {
                get {
                    return this.columnappendDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn constructedColumn {
                get {
                    return this.columnconstructed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ic_RoofTargetsRow this[int index] {
                get {
                    return ((ic_RoofTargetsRow)(this.Rows[index]));
                }
            }
            
            public event ic_RoofTargetsRowChangeEventHandler ic_RoofTargetsRowChanging;
            
            public event ic_RoofTargetsRowChangeEventHandler ic_RoofTargetsRowChanged;
            
            public event ic_RoofTargetsRowChangeEventHandler ic_RoofTargetsRowDeleting;
            
            public event ic_RoofTargetsRowChangeEventHandler ic_RoofTargetsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addic_RoofTargetsRow(ic_RoofTargetsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ic_RoofTargetsRow Addic_RoofTargetsRow(
                        int icID, 
                        string rICID, 
                        int parcelID, 
                        short divideID, 
                        int dscID, 
                        string nGTORoof, 
                        int exICFtRoof, 
                        int exRfAreaFt, 
                        bool externalDS, 
                        short dsTotal, 
                        short extoVeg, 
                        short extoStreet, 
                        short extoPlanter, 
                        short extoBioretention, 
                        short extoDrywell, 
                        short extoEcoroof, 
                        short dstoVeg, 
                        short dstoStreet, 
                        short dstoPlanter, 
                        short dstoBioretention, 
                        short dstoDrywell, 
                        short dstoEcoroof, 
                        short dsUncontrollable, 
                        bool landscapeAvailable, 
                        double fractionDrained, 
                        short difficulty, 
                        double roofEffDisc, 
                        string comments, 
                        bool plantersOK, 
                        bool bioretentionOK, 
                        bool buildModelIC, 
                        string source, 
                        string appendDate, 
                        int constructed) {
                ic_RoofTargetsRow rowic_RoofTargetsRow = ((ic_RoofTargetsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        icID,
                        rICID,
                        parcelID,
                        divideID,
                        dscID,
                        nGTORoof,
                        exICFtRoof,
                        exRfAreaFt,
                        externalDS,
                        dsTotal,
                        extoVeg,
                        extoStreet,
                        extoPlanter,
                        extoBioretention,
                        extoDrywell,
                        extoEcoroof,
                        dstoVeg,
                        dstoStreet,
                        dstoPlanter,
                        dstoBioretention,
                        dstoDrywell,
                        dstoEcoroof,
                        dsUncontrollable,
                        landscapeAvailable,
                        fractionDrained,
                        difficulty,
                        roofEffDisc,
                        comments,
                        plantersOK,
                        bioretentionOK,
                        buildModelIC,
                        source,
                        appendDate,
                        constructed};
                rowic_RoofTargetsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowic_RoofTargetsRow);
                return rowic_RoofTargetsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ic_RoofTargetsRow FindByMAPINFO_ID(int MAPINFO_ID) {
                return ((ic_RoofTargetsRow)(this.Rows.Find(new object[] {
                            MAPINFO_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ic_RoofTargetsDataTable cln = ((ic_RoofTargetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ic_RoofTargetsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMAPINFO_ID = base.Columns["MAPINFO_ID"];
                this.columnicID = base.Columns["icID"];
                this.columnrICID = base.Columns["rICID"];
                this.columnparcelID = base.Columns["parcelID"];
                this.columndivideID = base.Columns["divideID"];
                this.columndscID = base.Columns["dscID"];
                this.columnnGTORoof = base.Columns["nGTORoof"];
                this.columnexICFtRoof = base.Columns["exICFtRoof"];
                this.columnexRfAreaFt = base.Columns["exRfAreaFt"];
                this.columnexternalDS = base.Columns["externalDS"];
                this.columndsTotal = base.Columns["dsTotal"];
                this.columnextoVeg = base.Columns["extoVeg"];
                this.columnextoStreet = base.Columns["extoStreet"];
                this.columnextoPlanter = base.Columns["extoPlanter"];
                this.columnextoBioretention = base.Columns["extoBioretention"];
                this.columnextoDrywell = base.Columns["extoDrywell"];
                this.columnextoEcoroof = base.Columns["extoEcoroof"];
                this.columndstoVeg = base.Columns["dstoVeg"];
                this.columndstoStreet = base.Columns["dstoStreet"];
                this.columndstoPlanter = base.Columns["dstoPlanter"];
                this.columndstoBioretention = base.Columns["dstoBioretention"];
                this.columndstoDrywell = base.Columns["dstoDrywell"];
                this.columndstoEcoroof = base.Columns["dstoEcoroof"];
                this.columndsUncontrollable = base.Columns["dsUncontrollable"];
                this.columnlandscapeAvailable = base.Columns["landscapeAvailable"];
                this.columnfractionDrained = base.Columns["fractionDrained"];
                this.columndifficulty = base.Columns["difficulty"];
                this.columnroofEffDisc = base.Columns["roofEffDisc"];
                this.columncomments = base.Columns["comments"];
                this.columnplantersOK = base.Columns["plantersOK"];
                this.columnbioretentionOK = base.Columns["bioretentionOK"];
                this.columnbuildModelIC = base.Columns["buildModelIC"];
                this.columnsource = base.Columns["source"];
                this.columnappendDate = base.Columns["appendDate"];
                this.columnconstructed = base.Columns["constructed"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMAPINFO_ID = new global::System.Data.DataColumn("MAPINFO_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAPINFO_ID);
                this.columnicID = new global::System.Data.DataColumn("icID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnicID);
                this.columnrICID = new global::System.Data.DataColumn("rICID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrICID);
                this.columnparcelID = new global::System.Data.DataColumn("parcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparcelID);
                this.columndivideID = new global::System.Data.DataColumn("divideID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndivideID);
                this.columndscID = new global::System.Data.DataColumn("dscID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndscID);
                this.columnnGTORoof = new global::System.Data.DataColumn("nGTORoof", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnGTORoof);
                this.columnexICFtRoof = new global::System.Data.DataColumn("exICFtRoof", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnexICFtRoof);
                this.columnexRfAreaFt = new global::System.Data.DataColumn("exRfAreaFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnexRfAreaFt);
                this.columnexternalDS = new global::System.Data.DataColumn("externalDS", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnexternalDS);
                this.columndsTotal = new global::System.Data.DataColumn("dsTotal", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndsTotal);
                this.columnextoVeg = new global::System.Data.DataColumn("extoVeg", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnextoVeg);
                this.columnextoStreet = new global::System.Data.DataColumn("extoStreet", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnextoStreet);
                this.columnextoPlanter = new global::System.Data.DataColumn("extoPlanter", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnextoPlanter);
                this.columnextoBioretention = new global::System.Data.DataColumn("extoBioretention", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnextoBioretention);
                this.columnextoDrywell = new global::System.Data.DataColumn("extoDrywell", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnextoDrywell);
                this.columnextoEcoroof = new global::System.Data.DataColumn("extoEcoroof", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnextoEcoroof);
                this.columndstoVeg = new global::System.Data.DataColumn("dstoVeg", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndstoVeg);
                this.columndstoStreet = new global::System.Data.DataColumn("dstoStreet", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndstoStreet);
                this.columndstoPlanter = new global::System.Data.DataColumn("dstoPlanter", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndstoPlanter);
                this.columndstoBioretention = new global::System.Data.DataColumn("dstoBioretention", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndstoBioretention);
                this.columndstoDrywell = new global::System.Data.DataColumn("dstoDrywell", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndstoDrywell);
                this.columndstoEcoroof = new global::System.Data.DataColumn("dstoEcoroof", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndstoEcoroof);
                this.columndsUncontrollable = new global::System.Data.DataColumn("dsUncontrollable", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndsUncontrollable);
                this.columnlandscapeAvailable = new global::System.Data.DataColumn("landscapeAvailable", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlandscapeAvailable);
                this.columnfractionDrained = new global::System.Data.DataColumn("fractionDrained", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfractionDrained);
                this.columndifficulty = new global::System.Data.DataColumn("difficulty", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndifficulty);
                this.columnroofEffDisc = new global::System.Data.DataColumn("roofEffDisc", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnroofEffDisc);
                this.columncomments = new global::System.Data.DataColumn("comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncomments);
                this.columnplantersOK = new global::System.Data.DataColumn("plantersOK", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnplantersOK);
                this.columnbioretentionOK = new global::System.Data.DataColumn("bioretentionOK", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbioretentionOK);
                this.columnbuildModelIC = new global::System.Data.DataColumn("buildModelIC", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbuildModelIC);
                this.columnsource = new global::System.Data.DataColumn("source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsource);
                this.columnappendDate = new global::System.Data.DataColumn("appendDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnappendDate);
                this.columnconstructed = new global::System.Data.DataColumn("constructed", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconstructed);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMAPINFO_ID}, true));
                this.columnMAPINFO_ID.AutoIncrement = true;
                this.columnMAPINFO_ID.AutoIncrementSeed = -1;
                this.columnMAPINFO_ID.AutoIncrementStep = -1;
                this.columnMAPINFO_ID.AllowDBNull = false;
                this.columnMAPINFO_ID.Unique = true;
                this.columnrICID.MaxLength = 5;
                this.columnnGTORoof.MaxLength = 6;
                this.columncomments.MaxLength = 254;
                this.columnsource.MaxLength = 15;
                this.columnappendDate.MaxLength = 17;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ic_RoofTargetsRow Newic_RoofTargetsRow() {
                return ((ic_RoofTargetsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ic_RoofTargetsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ic_RoofTargetsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ic_RoofTargetsRowChanged != null)) {
                    this.ic_RoofTargetsRowChanged(this, new ic_RoofTargetsRowChangeEvent(((ic_RoofTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ic_RoofTargetsRowChanging != null)) {
                    this.ic_RoofTargetsRowChanging(this, new ic_RoofTargetsRowChangeEvent(((ic_RoofTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ic_RoofTargetsRowDeleted != null)) {
                    this.ic_RoofTargetsRowDeleted(this, new ic_RoofTargetsRowChangeEvent(((ic_RoofTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ic_RoofTargetsRowDeleting != null)) {
                    this.ic_RoofTargetsRowDeleting(this, new ic_RoofTargetsRowChangeEvent(((ic_RoofTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeic_RoofTargetsRow(ic_RoofTargetsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StormwaterControlsDataSet ds = new StormwaterControlsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ic_RoofTargetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ic_ParkingTargetsDataTable : global::System.Data.TypedTableBase<ic_ParkingTargetsRow> {
            
            private global::System.Data.DataColumn columnMAPINFO_ID;
            
            private global::System.Data.DataColumn columnicID;
            
            private global::System.Data.DataColumn columnpICID;
            
            private global::System.Data.DataColumn columnparcelID;
            
            private global::System.Data.DataColumn columndivideID;
            
            private global::System.Data.DataColumn columndscID;
            
            private global::System.Data.DataColumn columnexICFtParking;
            
            private global::System.Data.DataColumn columnexPkAreaFt;
            
            private global::System.Data.DataColumn columnparkingTargetArea;
            
            private global::System.Data.DataColumn columnnGTO_Direct;
            
            private global::System.Data.DataColumn columnnGTO_Surface;
            
            private global::System.Data.DataColumn columnnGTOParking;
            
            private global::System.Data.DataColumn columnevaluated;
            
            private global::System.Data.DataColumn columninlets;
            
            private global::System.Data.DataColumn columnparkingSpaces;
            
            private global::System.Data.DataColumn columnpercentParkingUsed;
            
            private global::System.Data.DataColumn columndrainage;
            
            private global::System.Data.DataColumn columnnGTO;
            
            private global::System.Data.DataColumn columncontrollable;
            
            private global::System.Data.DataColumn columnfractionControllable;
            
            private global::System.Data.DataColumn columndifficulty;
            
            private global::System.Data.DataColumn columnparkingEffDisc;
            
            private global::System.Data.DataColumn columncomments;
            
            private global::System.Data.DataColumn columnfraction2Drywell;
            
            private global::System.Data.DataColumn columnbuildModelIC;
            
            private global::System.Data.DataColumn columnsource;
            
            private global::System.Data.DataColumn columnappendDate;
            
            private global::System.Data.DataColumn columnconstructed;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ic_ParkingTargetsDataTable() {
                this.TableName = "ic_ParkingTargets";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ic_ParkingTargetsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ic_ParkingTargetsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAPINFO_IDColumn {
                get {
                    return this.columnMAPINFO_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn icIDColumn {
                get {
                    return this.columnicID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pICIDColumn {
                get {
                    return this.columnpICID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn parcelIDColumn {
                get {
                    return this.columnparcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn divideIDColumn {
                get {
                    return this.columndivideID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dscIDColumn {
                get {
                    return this.columndscID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn exICFtParkingColumn {
                get {
                    return this.columnexICFtParking;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn exPkAreaFtColumn {
                get {
                    return this.columnexPkAreaFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn parkingTargetAreaColumn {
                get {
                    return this.columnparkingTargetArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nGTO_DirectColumn {
                get {
                    return this.columnnGTO_Direct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nGTO_SurfaceColumn {
                get {
                    return this.columnnGTO_Surface;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nGTOParkingColumn {
                get {
                    return this.columnnGTOParking;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn evaluatedColumn {
                get {
                    return this.columnevaluated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inletsColumn {
                get {
                    return this.columninlets;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn parkingSpacesColumn {
                get {
                    return this.columnparkingSpaces;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn percentParkingUsedColumn {
                get {
                    return this.columnpercentParkingUsed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn drainageColumn {
                get {
                    return this.columndrainage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nGTOColumn {
                get {
                    return this.columnnGTO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn controllableColumn {
                get {
                    return this.columncontrollable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fractionControllableColumn {
                get {
                    return this.columnfractionControllable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn difficultyColumn {
                get {
                    return this.columndifficulty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn parkingEffDiscColumn {
                get {
                    return this.columnparkingEffDisc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn commentsColumn {
                get {
                    return this.columncomments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fraction2DrywellColumn {
                get {
                    return this.columnfraction2Drywell;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn buildModelICColumn {
                get {
                    return this.columnbuildModelIC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sourceColumn {
                get {
                    return this.columnsource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn appendDateColumn {
                get {
                    return this.columnappendDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn constructedColumn {
                get {
                    return this.columnconstructed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ic_ParkingTargetsRow this[int index] {
                get {
                    return ((ic_ParkingTargetsRow)(this.Rows[index]));
                }
            }
            
            public event ic_ParkingTargetsRowChangeEventHandler ic_ParkingTargetsRowChanging;
            
            public event ic_ParkingTargetsRowChangeEventHandler ic_ParkingTargetsRowChanged;
            
            public event ic_ParkingTargetsRowChangeEventHandler ic_ParkingTargetsRowDeleting;
            
            public event ic_ParkingTargetsRowChangeEventHandler ic_ParkingTargetsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addic_ParkingTargetsRow(ic_ParkingTargetsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ic_ParkingTargetsRow Addic_ParkingTargetsRow(
                        int icID, 
                        string pICID, 
                        int parcelID, 
                        short divideID, 
                        int dscID, 
                        int exICFtParking, 
                        int exPkAreaFt, 
                        int parkingTargetArea, 
                        string nGTO_Direct, 
                        string nGTO_Surface, 
                        string nGTOParking, 
                        bool evaluated, 
                        bool inlets, 
                        int parkingSpaces, 
                        int percentParkingUsed, 
                        string drainage, 
                        string nGTO, 
                        string controllable, 
                        double fractionControllable, 
                        short difficulty, 
                        double parkingEffDisc, 
                        string comments, 
                        double fraction2Drywell, 
                        bool buildModelIC, 
                        string source, 
                        string appendDate, 
                        int constructed) {
                ic_ParkingTargetsRow rowic_ParkingTargetsRow = ((ic_ParkingTargetsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        icID,
                        pICID,
                        parcelID,
                        divideID,
                        dscID,
                        exICFtParking,
                        exPkAreaFt,
                        parkingTargetArea,
                        nGTO_Direct,
                        nGTO_Surface,
                        nGTOParking,
                        evaluated,
                        inlets,
                        parkingSpaces,
                        percentParkingUsed,
                        drainage,
                        nGTO,
                        controllable,
                        fractionControllable,
                        difficulty,
                        parkingEffDisc,
                        comments,
                        fraction2Drywell,
                        buildModelIC,
                        source,
                        appendDate,
                        constructed};
                rowic_ParkingTargetsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowic_ParkingTargetsRow);
                return rowic_ParkingTargetsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ic_ParkingTargetsRow FindByMAPINFO_ID(int MAPINFO_ID) {
                return ((ic_ParkingTargetsRow)(this.Rows.Find(new object[] {
                            MAPINFO_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ic_ParkingTargetsDataTable cln = ((ic_ParkingTargetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ic_ParkingTargetsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMAPINFO_ID = base.Columns["MAPINFO_ID"];
                this.columnicID = base.Columns["icID"];
                this.columnpICID = base.Columns["pICID"];
                this.columnparcelID = base.Columns["parcelID"];
                this.columndivideID = base.Columns["divideID"];
                this.columndscID = base.Columns["dscID"];
                this.columnexICFtParking = base.Columns["exICFtParking"];
                this.columnexPkAreaFt = base.Columns["exPkAreaFt"];
                this.columnparkingTargetArea = base.Columns["parkingTargetArea"];
                this.columnnGTO_Direct = base.Columns["nGTO_Direct"];
                this.columnnGTO_Surface = base.Columns["nGTO_Surface"];
                this.columnnGTOParking = base.Columns["nGTOParking"];
                this.columnevaluated = base.Columns["evaluated"];
                this.columninlets = base.Columns["inlets"];
                this.columnparkingSpaces = base.Columns["parkingSpaces"];
                this.columnpercentParkingUsed = base.Columns["percentParkingUsed"];
                this.columndrainage = base.Columns["drainage"];
                this.columnnGTO = base.Columns["nGTO"];
                this.columncontrollable = base.Columns["controllable"];
                this.columnfractionControllable = base.Columns["fractionControllable"];
                this.columndifficulty = base.Columns["difficulty"];
                this.columnparkingEffDisc = base.Columns["parkingEffDisc"];
                this.columncomments = base.Columns["comments"];
                this.columnfraction2Drywell = base.Columns["fraction2Drywell"];
                this.columnbuildModelIC = base.Columns["buildModelIC"];
                this.columnsource = base.Columns["source"];
                this.columnappendDate = base.Columns["appendDate"];
                this.columnconstructed = base.Columns["constructed"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMAPINFO_ID = new global::System.Data.DataColumn("MAPINFO_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAPINFO_ID);
                this.columnicID = new global::System.Data.DataColumn("icID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnicID);
                this.columnpICID = new global::System.Data.DataColumn("pICID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpICID);
                this.columnparcelID = new global::System.Data.DataColumn("parcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparcelID);
                this.columndivideID = new global::System.Data.DataColumn("divideID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndivideID);
                this.columndscID = new global::System.Data.DataColumn("dscID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndscID);
                this.columnexICFtParking = new global::System.Data.DataColumn("exICFtParking", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnexICFtParking);
                this.columnexPkAreaFt = new global::System.Data.DataColumn("exPkAreaFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnexPkAreaFt);
                this.columnparkingTargetArea = new global::System.Data.DataColumn("parkingTargetArea", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparkingTargetArea);
                this.columnnGTO_Direct = new global::System.Data.DataColumn("nGTO_Direct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnGTO_Direct);
                this.columnnGTO_Surface = new global::System.Data.DataColumn("nGTO_Surface", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnGTO_Surface);
                this.columnnGTOParking = new global::System.Data.DataColumn("nGTOParking", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnGTOParking);
                this.columnevaluated = new global::System.Data.DataColumn("evaluated", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnevaluated);
                this.columninlets = new global::System.Data.DataColumn("inlets", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninlets);
                this.columnparkingSpaces = new global::System.Data.DataColumn("parkingSpaces", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparkingSpaces);
                this.columnpercentParkingUsed = new global::System.Data.DataColumn("percentParkingUsed", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpercentParkingUsed);
                this.columndrainage = new global::System.Data.DataColumn("drainage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndrainage);
                this.columnnGTO = new global::System.Data.DataColumn("nGTO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnGTO);
                this.columncontrollable = new global::System.Data.DataColumn("controllable", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncontrollable);
                this.columnfractionControllable = new global::System.Data.DataColumn("fractionControllable", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfractionControllable);
                this.columndifficulty = new global::System.Data.DataColumn("difficulty", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndifficulty);
                this.columnparkingEffDisc = new global::System.Data.DataColumn("parkingEffDisc", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparkingEffDisc);
                this.columncomments = new global::System.Data.DataColumn("comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncomments);
                this.columnfraction2Drywell = new global::System.Data.DataColumn("fraction2Drywell", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfraction2Drywell);
                this.columnbuildModelIC = new global::System.Data.DataColumn("buildModelIC", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbuildModelIC);
                this.columnsource = new global::System.Data.DataColumn("source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsource);
                this.columnappendDate = new global::System.Data.DataColumn("appendDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnappendDate);
                this.columnconstructed = new global::System.Data.DataColumn("constructed", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconstructed);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMAPINFO_ID}, true));
                this.columnMAPINFO_ID.AutoIncrement = true;
                this.columnMAPINFO_ID.AutoIncrementSeed = -1;
                this.columnMAPINFO_ID.AutoIncrementStep = -1;
                this.columnMAPINFO_ID.AllowDBNull = false;
                this.columnMAPINFO_ID.Unique = true;
                this.columnpICID.MaxLength = 5;
                this.columnnGTO_Direct.MaxLength = 7;
                this.columnnGTO_Surface.MaxLength = 7;
                this.columnnGTOParking.MaxLength = 7;
                this.columndrainage.MaxLength = 30;
                this.columnnGTO.MaxLength = 7;
                this.columncontrollable.MaxLength = 1;
                this.columncomments.MaxLength = 254;
                this.columnsource.MaxLength = 15;
                this.columnappendDate.MaxLength = 17;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ic_ParkingTargetsRow Newic_ParkingTargetsRow() {
                return ((ic_ParkingTargetsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ic_ParkingTargetsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ic_ParkingTargetsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ic_ParkingTargetsRowChanged != null)) {
                    this.ic_ParkingTargetsRowChanged(this, new ic_ParkingTargetsRowChangeEvent(((ic_ParkingTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ic_ParkingTargetsRowChanging != null)) {
                    this.ic_ParkingTargetsRowChanging(this, new ic_ParkingTargetsRowChangeEvent(((ic_ParkingTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ic_ParkingTargetsRowDeleted != null)) {
                    this.ic_ParkingTargetsRowDeleted(this, new ic_ParkingTargetsRowChangeEvent(((ic_ParkingTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ic_ParkingTargetsRowDeleting != null)) {
                    this.ic_ParkingTargetsRowDeleting(this, new ic_ParkingTargetsRowChangeEvent(((ic_ParkingTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeic_ParkingTargetsRow(ic_ParkingTargetsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StormwaterControlsDataSet ds = new StormwaterControlsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ic_ParkingTargetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AltRoofTargetsDataTable : global::System.Data.TypedTableBase<AltRoofTargetsRow> {
            
            private global::System.Data.DataColumn columnMapInfoID;
            
            private global::System.Data.DataColumn columnNGToRoof;
            
            private global::System.Data.DataColumn columnBuildModelIC;
            
            private global::System.Data.DataColumn columnICID;
            
            private global::System.Data.DataColumn columnConstructed;
            
            private global::System.Data.DataColumn columnAltICID;
            
            private global::System.Data.DataColumn columnDifficulty;
            
            private global::System.Data.DataColumn columnFocusArea;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AltRoofTargetsDataTable() {
                this.TableName = "AltRoofTargets";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AltRoofTargetsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AltRoofTargetsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapInfoIDColumn {
                get {
                    return this.columnMapInfoID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NGToRoofColumn {
                get {
                    return this.columnNGToRoof;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuildModelICColumn {
                get {
                    return this.columnBuildModelIC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ICIDColumn {
                get {
                    return this.columnICID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConstructedColumn {
                get {
                    return this.columnConstructed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AltICIDColumn {
                get {
                    return this.columnAltICID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DifficultyColumn {
                get {
                    return this.columnDifficulty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FocusAreaColumn {
                get {
                    return this.columnFocusArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AltRoofTargetsRow this[int index] {
                get {
                    return ((AltRoofTargetsRow)(this.Rows[index]));
                }
            }
            
            public event AltRoofTargetsRowChangeEventHandler AltRoofTargetsRowChanging;
            
            public event AltRoofTargetsRowChangeEventHandler AltRoofTargetsRowChanged;
            
            public event AltRoofTargetsRowChangeEventHandler AltRoofTargetsRowDeleting;
            
            public event AltRoofTargetsRowChangeEventHandler AltRoofTargetsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAltRoofTargetsRow(AltRoofTargetsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AltRoofTargetsRow AddAltRoofTargetsRow(string NGToRoof, bool BuildModelIC, int ICID, int Constructed, int AltICID, short Difficulty, string FocusArea) {
                AltRoofTargetsRow rowAltRoofTargetsRow = ((AltRoofTargetsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        NGToRoof,
                        BuildModelIC,
                        ICID,
                        Constructed,
                        AltICID,
                        Difficulty,
                        FocusArea};
                rowAltRoofTargetsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAltRoofTargetsRow);
                return rowAltRoofTargetsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AltRoofTargetsRow FindByMapInfoID(int MapInfoID) {
                return ((AltRoofTargetsRow)(this.Rows.Find(new object[] {
                            MapInfoID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AltRoofTargetsDataTable cln = ((AltRoofTargetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AltRoofTargetsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMapInfoID = base.Columns["MapInfoID"];
                this.columnNGToRoof = base.Columns["NGToRoof"];
                this.columnBuildModelIC = base.Columns["BuildModelIC"];
                this.columnICID = base.Columns["ICID"];
                this.columnConstructed = base.Columns["Constructed"];
                this.columnAltICID = base.Columns["AltICID"];
                this.columnDifficulty = base.Columns["Difficulty"];
                this.columnFocusArea = base.Columns["FocusArea"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMapInfoID = new global::System.Data.DataColumn("MapInfoID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapInfoID);
                this.columnNGToRoof = new global::System.Data.DataColumn("NGToRoof", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGToRoof);
                this.columnBuildModelIC = new global::System.Data.DataColumn("BuildModelIC", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildModelIC);
                this.columnICID = new global::System.Data.DataColumn("ICID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnICID);
                this.columnConstructed = new global::System.Data.DataColumn("Constructed", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConstructed);
                this.columnAltICID = new global::System.Data.DataColumn("AltICID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAltICID);
                this.columnDifficulty = new global::System.Data.DataColumn("Difficulty", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDifficulty);
                this.columnFocusArea = new global::System.Data.DataColumn("FocusArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFocusArea);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMapInfoID}, true));
                this.columnMapInfoID.AutoIncrement = true;
                this.columnMapInfoID.AllowDBNull = false;
                this.columnMapInfoID.Unique = true;
                this.columnNGToRoof.MaxLength = 6;
                this.columnFocusArea.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AltRoofTargetsRow NewAltRoofTargetsRow() {
                return ((AltRoofTargetsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AltRoofTargetsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AltRoofTargetsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AltRoofTargetsRowChanged != null)) {
                    this.AltRoofTargetsRowChanged(this, new AltRoofTargetsRowChangeEvent(((AltRoofTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AltRoofTargetsRowChanging != null)) {
                    this.AltRoofTargetsRowChanging(this, new AltRoofTargetsRowChangeEvent(((AltRoofTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AltRoofTargetsRowDeleted != null)) {
                    this.AltRoofTargetsRowDeleted(this, new AltRoofTargetsRowChangeEvent(((AltRoofTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AltRoofTargetsRowDeleting != null)) {
                    this.AltRoofTargetsRowDeleting(this, new AltRoofTargetsRowChangeEvent(((AltRoofTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAltRoofTargetsRow(AltRoofTargetsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StormwaterControlsDataSet ds = new StormwaterControlsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AltRoofTargetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AltParkingTargetsDataTable : global::System.Data.TypedTableBase<AltParkingTargetsRow> {
            
            private global::System.Data.DataColumn columnMapInfoID;
            
            private global::System.Data.DataColumn columnNGToStreet;
            
            private global::System.Data.DataColumn columnNGToSurface;
            
            private global::System.Data.DataColumn columnNGTOParking;
            
            private global::System.Data.DataColumn columnNGTo;
            
            private global::System.Data.DataColumn columnBuildModelIC;
            
            private global::System.Data.DataColumn columnICID;
            
            private global::System.Data.DataColumn columnConstructed;
            
            private global::System.Data.DataColumn columnAltICID;
            
            private global::System.Data.DataColumn columnDifficulty;
            
            private global::System.Data.DataColumn columnFocusArea;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AltParkingTargetsDataTable() {
                this.TableName = "AltParkingTargets";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AltParkingTargetsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AltParkingTargetsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapInfoIDColumn {
                get {
                    return this.columnMapInfoID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NGToStreetColumn {
                get {
                    return this.columnNGToStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NGToSurfaceColumn {
                get {
                    return this.columnNGToSurface;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NGTOParkingColumn {
                get {
                    return this.columnNGTOParking;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NGToColumn {
                get {
                    return this.columnNGTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuildModelICColumn {
                get {
                    return this.columnBuildModelIC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ICIDColumn {
                get {
                    return this.columnICID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConstructedColumn {
                get {
                    return this.columnConstructed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AltICIDColumn {
                get {
                    return this.columnAltICID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DifficultyColumn {
                get {
                    return this.columnDifficulty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FocusAreaColumn {
                get {
                    return this.columnFocusArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AltParkingTargetsRow this[int index] {
                get {
                    return ((AltParkingTargetsRow)(this.Rows[index]));
                }
            }
            
            public event AltParkingTargetsRowChangeEventHandler AltParkingTargetsRowChanging;
            
            public event AltParkingTargetsRowChangeEventHandler AltParkingTargetsRowChanged;
            
            public event AltParkingTargetsRowChangeEventHandler AltParkingTargetsRowDeleting;
            
            public event AltParkingTargetsRowChangeEventHandler AltParkingTargetsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAltParkingTargetsRow(AltParkingTargetsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AltParkingTargetsRow AddAltParkingTargetsRow(string NGToStreet, string NGToSurface, string NGTOParking, string NGTo, bool BuildModelIC, int ICID, int Constructed, int AltICID, short Difficulty, string FocusArea) {
                AltParkingTargetsRow rowAltParkingTargetsRow = ((AltParkingTargetsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        NGToStreet,
                        NGToSurface,
                        NGTOParking,
                        NGTo,
                        BuildModelIC,
                        ICID,
                        Constructed,
                        AltICID,
                        Difficulty,
                        FocusArea};
                rowAltParkingTargetsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAltParkingTargetsRow);
                return rowAltParkingTargetsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AltParkingTargetsRow FindByMapInfoID(int MapInfoID) {
                return ((AltParkingTargetsRow)(this.Rows.Find(new object[] {
                            MapInfoID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AltParkingTargetsDataTable cln = ((AltParkingTargetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AltParkingTargetsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMapInfoID = base.Columns["MapInfoID"];
                this.columnNGToStreet = base.Columns["NGToStreet"];
                this.columnNGToSurface = base.Columns["NGToSurface"];
                this.columnNGTOParking = base.Columns["NGTOParking"];
                this.columnNGTo = base.Columns["NGTo"];
                this.columnBuildModelIC = base.Columns["BuildModelIC"];
                this.columnICID = base.Columns["ICID"];
                this.columnConstructed = base.Columns["Constructed"];
                this.columnAltICID = base.Columns["AltICID"];
                this.columnDifficulty = base.Columns["Difficulty"];
                this.columnFocusArea = base.Columns["FocusArea"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMapInfoID = new global::System.Data.DataColumn("MapInfoID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapInfoID);
                this.columnNGToStreet = new global::System.Data.DataColumn("NGToStreet", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGToStreet);
                this.columnNGToSurface = new global::System.Data.DataColumn("NGToSurface", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGToSurface);
                this.columnNGTOParking = new global::System.Data.DataColumn("NGTOParking", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGTOParking);
                this.columnNGTo = new global::System.Data.DataColumn("NGTo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGTo);
                this.columnBuildModelIC = new global::System.Data.DataColumn("BuildModelIC", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildModelIC);
                this.columnICID = new global::System.Data.DataColumn("ICID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnICID);
                this.columnConstructed = new global::System.Data.DataColumn("Constructed", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConstructed);
                this.columnAltICID = new global::System.Data.DataColumn("AltICID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAltICID);
                this.columnDifficulty = new global::System.Data.DataColumn("Difficulty", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDifficulty);
                this.columnFocusArea = new global::System.Data.DataColumn("FocusArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFocusArea);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMapInfoID}, true));
                this.columnMapInfoID.AutoIncrement = true;
                this.columnMapInfoID.AllowDBNull = false;
                this.columnMapInfoID.Unique = true;
                this.columnNGToStreet.MaxLength = 7;
                this.columnNGToSurface.MaxLength = 7;
                this.columnNGTOParking.MaxLength = 7;
                this.columnNGTo.MaxLength = 7;
                this.columnFocusArea.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AltParkingTargetsRow NewAltParkingTargetsRow() {
                return ((AltParkingTargetsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AltParkingTargetsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AltParkingTargetsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AltParkingTargetsRowChanged != null)) {
                    this.AltParkingTargetsRowChanged(this, new AltParkingTargetsRowChangeEvent(((AltParkingTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AltParkingTargetsRowChanging != null)) {
                    this.AltParkingTargetsRowChanging(this, new AltParkingTargetsRowChangeEvent(((AltParkingTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AltParkingTargetsRowDeleted != null)) {
                    this.AltParkingTargetsRowDeleted(this, new AltParkingTargetsRowChangeEvent(((AltParkingTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AltParkingTargetsRowDeleting != null)) {
                    this.AltParkingTargetsRowDeleting(this, new AltParkingTargetsRowChangeEvent(((AltParkingTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAltParkingTargetsRow(AltParkingTargetsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StormwaterControlsDataSet ds = new StormwaterControlsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AltParkingTargetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AltStreetTargetsDataTable : global::System.Data.TypedTableBase<AltStreetTargetsRow> {
            
            private global::System.Data.DataColumn columnMapInfoID;
            
            private global::System.Data.DataColumn columnNGToStreet;
            
            private global::System.Data.DataColumn columnBuildModelIC;
            
            private global::System.Data.DataColumn columnICID;
            
            private global::System.Data.DataColumn columnConstructed;
            
            private global::System.Data.DataColumn columnAltICID;
            
            private global::System.Data.DataColumn columnEvaluation;
            
            private global::System.Data.DataColumn columnFocusArea;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AltStreetTargetsDataTable() {
                this.TableName = "AltStreetTargets";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AltStreetTargetsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AltStreetTargetsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapInfoIDColumn {
                get {
                    return this.columnMapInfoID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NGToStreetColumn {
                get {
                    return this.columnNGToStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuildModelICColumn {
                get {
                    return this.columnBuildModelIC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ICIDColumn {
                get {
                    return this.columnICID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConstructedColumn {
                get {
                    return this.columnConstructed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AltICIDColumn {
                get {
                    return this.columnAltICID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EvaluationColumn {
                get {
                    return this.columnEvaluation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FocusAreaColumn {
                get {
                    return this.columnFocusArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AltStreetTargetsRow this[int index] {
                get {
                    return ((AltStreetTargetsRow)(this.Rows[index]));
                }
            }
            
            public event AltStreetTargetsRowChangeEventHandler AltStreetTargetsRowChanging;
            
            public event AltStreetTargetsRowChangeEventHandler AltStreetTargetsRowChanged;
            
            public event AltStreetTargetsRowChangeEventHandler AltStreetTargetsRowDeleting;
            
            public event AltStreetTargetsRowChangeEventHandler AltStreetTargetsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAltStreetTargetsRow(AltStreetTargetsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AltStreetTargetsRow AddAltStreetTargetsRow(string NGToStreet, bool BuildModelIC, int ICID, int Constructed, int AltICID, string Evaluation, string FocusArea) {
                AltStreetTargetsRow rowAltStreetTargetsRow = ((AltStreetTargetsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        NGToStreet,
                        BuildModelIC,
                        ICID,
                        Constructed,
                        AltICID,
                        Evaluation,
                        FocusArea};
                rowAltStreetTargetsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAltStreetTargetsRow);
                return rowAltStreetTargetsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AltStreetTargetsRow FindByMapInfoID(int MapInfoID) {
                return ((AltStreetTargetsRow)(this.Rows.Find(new object[] {
                            MapInfoID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AltStreetTargetsDataTable cln = ((AltStreetTargetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AltStreetTargetsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMapInfoID = base.Columns["MapInfoID"];
                this.columnNGToStreet = base.Columns["NGToStreet"];
                this.columnBuildModelIC = base.Columns["BuildModelIC"];
                this.columnICID = base.Columns["ICID"];
                this.columnConstructed = base.Columns["Constructed"];
                this.columnAltICID = base.Columns["AltICID"];
                this.columnEvaluation = base.Columns["Evaluation"];
                this.columnFocusArea = base.Columns["FocusArea"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMapInfoID = new global::System.Data.DataColumn("MapInfoID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapInfoID);
                this.columnNGToStreet = new global::System.Data.DataColumn("NGToStreet", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGToStreet);
                this.columnBuildModelIC = new global::System.Data.DataColumn("BuildModelIC", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildModelIC);
                this.columnICID = new global::System.Data.DataColumn("ICID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnICID);
                this.columnConstructed = new global::System.Data.DataColumn("Constructed", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConstructed);
                this.columnAltICID = new global::System.Data.DataColumn("AltICID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAltICID);
                this.columnEvaluation = new global::System.Data.DataColumn("Evaluation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEvaluation);
                this.columnFocusArea = new global::System.Data.DataColumn("FocusArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFocusArea);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMapInfoID}, true));
                this.columnMapInfoID.AutoIncrement = true;
                this.columnMapInfoID.AllowDBNull = false;
                this.columnMapInfoID.Unique = true;
                this.columnNGToStreet.MaxLength = 7;
                this.columnEvaluation.MaxLength = 1;
                this.columnFocusArea.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AltStreetTargetsRow NewAltStreetTargetsRow() {
                return ((AltStreetTargetsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AltStreetTargetsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AltStreetTargetsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AltStreetTargetsRowChanged != null)) {
                    this.AltStreetTargetsRowChanged(this, new AltStreetTargetsRowChangeEvent(((AltStreetTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AltStreetTargetsRowChanging != null)) {
                    this.AltStreetTargetsRowChanging(this, new AltStreetTargetsRowChangeEvent(((AltStreetTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AltStreetTargetsRowDeleted != null)) {
                    this.AltStreetTargetsRowDeleted(this, new AltStreetTargetsRowChangeEvent(((AltStreetTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AltStreetTargetsRowDeleting != null)) {
                    this.AltStreetTargetsRowDeleting(this, new AltStreetTargetsRowChangeEvent(((AltStreetTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAltStreetTargetsRow(AltStreetTargetsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StormwaterControlsDataSet ds = new StormwaterControlsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AltStreetTargetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class mdl_dirsc_acDataTable : global::System.Data.TypedTableBase<mdl_dirsc_acRow> {
            
            private global::System.Data.DataColumn columnMAPINFO_ID;
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnDivideID;
            
            private global::System.Data.DataColumn columnDSCID;
            
            private global::System.Data.DataColumn columndiscoSiteID;
            
            private global::System.Data.DataColumn columnDiscoClass;
            
            private global::System.Data.DataColumn columnToLinkSan;
            
            private global::System.Data.DataColumn columnToLinkStorm;
            
            private global::System.Data.DataColumn columnNGTOSan;
            
            private global::System.Data.DataColumn columnNGTOStorm;
            
            private global::System.Data.DataColumn columnPipeFlowTypeSan;
            
            private global::System.Data.DataColumn columnPipeFlowTypeStorm;
            
            private global::System.Data.DataColumn columnSanSwrCrown;
            
            private global::System.Data.DataColumn columnFrac2SwrBeg;
            
            private global::System.Data.DataColumn columnFloodRefElev;
            
            private global::System.Data.DataColumn columnFalseBFRisk;
            
            private global::System.Data.DataColumn columnGridQAQC;
            
            private global::System.Data.DataColumn columnMaxBldGrid;
            
            private global::System.Data.DataColumn columnAvgParcelElev;
            
            private global::System.Data.DataColumn columnEFFMethod;
            
            private global::System.Data.DataColumn columnFFOverride;
            
            private global::System.Data.DataColumn columnOrigFinishFloor;
            
            private global::System.Data.DataColumn columnHGL;
            
            private global::System.Data.DataColumn columnDeltaHGL;
            
            private global::System.Data.DataColumn columnHGLComment;
            
            private global::System.Data.DataColumn columnDataSourceFlags;
            
            private global::System.Data.DataColumn columnZoneEX;
            
            private global::System.Data.DataColumn columnZoneCP;
            
            private global::System.Data.DataColumn columnGenEX;
            
            private global::System.Data.DataColumn columnGenCP;
            
            private global::System.Data.DataColumn columnBaseFlow;
            
            private global::System.Data.DataColumn columnBaseFlowEX;
            
            private global::System.Data.DataColumn columnBaseFlowDM;
            
            private global::System.Data.DataColumn columnICFtRoof;
            
            private global::System.Data.DataColumn columnICFtParking;
            
            private global::System.Data.DataColumn columnICFlag;
            
            private global::System.Data.DataColumn columnImpFractEX;
            
            private global::System.Data.DataColumn columnImpFractCP;
            
            private global::System.Data.DataColumn columnImpFractFB;
            
            private global::System.Data.DataColumn columnAreaFt;
            
            private global::System.Data.DataColumn columnRfAreaFt;
            
            private global::System.Data.DataColumn columnPkAreaFt;
            
            private global::System.Data.DataColumn columnTraceVisit;
            
            private global::System.Data.DataColumn columnDSCPickedFlag;
            
            private global::System.Data.DataColumn columnUpdateAtts;
            
            private global::System.Data.DataColumn columnc_RFtosurfFt;
            
            private global::System.Data.DataColumn columnc_PKtosurfFt;
            
            private global::System.Data.DataColumn columnc_RFtosurfImpFt;
            
            private global::System.Data.DataColumn columnc_PKtosurfImpFt;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnSewerable;
            
            private global::System.Data.DataColumn columnHasBasement;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mdl_dirsc_acDataTable() {
                this.TableName = "mdl_dirsc_ac";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal mdl_dirsc_acDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected mdl_dirsc_acDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAPINFO_IDColumn {
                get {
                    return this.columnMAPINFO_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DivideIDColumn {
                get {
                    return this.columnDivideID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSCIDColumn {
                get {
                    return this.columnDSCID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn discoSiteIDColumn {
                get {
                    return this.columndiscoSiteID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiscoClassColumn {
                get {
                    return this.columnDiscoClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToLinkSanColumn {
                get {
                    return this.columnToLinkSan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToLinkStormColumn {
                get {
                    return this.columnToLinkStorm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NGTOSanColumn {
                get {
                    return this.columnNGTOSan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NGTOStormColumn {
                get {
                    return this.columnNGTOStorm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeFlowTypeSanColumn {
                get {
                    return this.columnPipeFlowTypeSan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeFlowTypeStormColumn {
                get {
                    return this.columnPipeFlowTypeStorm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SanSwrCrownColumn {
                get {
                    return this.columnSanSwrCrown;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Frac2SwrBegColumn {
                get {
                    return this.columnFrac2SwrBeg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FloodRefElevColumn {
                get {
                    return this.columnFloodRefElev;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FalseBFRiskColumn {
                get {
                    return this.columnFalseBFRisk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GridQAQCColumn {
                get {
                    return this.columnGridQAQC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxBldGridColumn {
                get {
                    return this.columnMaxBldGrid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AvgParcelElevColumn {
                get {
                    return this.columnAvgParcelElev;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EFFMethodColumn {
                get {
                    return this.columnEFFMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FFOverrideColumn {
                get {
                    return this.columnFFOverride;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrigFinishFloorColumn {
                get {
                    return this.columnOrigFinishFloor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HGLColumn {
                get {
                    return this.columnHGL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeltaHGLColumn {
                get {
                    return this.columnDeltaHGL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HGLCommentColumn {
                get {
                    return this.columnHGLComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataSourceFlagsColumn {
                get {
                    return this.columnDataSourceFlags;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZoneEXColumn {
                get {
                    return this.columnZoneEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZoneCPColumn {
                get {
                    return this.columnZoneCP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenEXColumn {
                get {
                    return this.columnGenEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenCPColumn {
                get {
                    return this.columnGenCP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseFlowColumn {
                get {
                    return this.columnBaseFlow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseFlowEXColumn {
                get {
                    return this.columnBaseFlowEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseFlowDMColumn {
                get {
                    return this.columnBaseFlowDM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ICFtRoofColumn {
                get {
                    return this.columnICFtRoof;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ICFtParkingColumn {
                get {
                    return this.columnICFtParking;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ICFlagColumn {
                get {
                    return this.columnICFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImpFractEXColumn {
                get {
                    return this.columnImpFractEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImpFractCPColumn {
                get {
                    return this.columnImpFractCP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImpFractFBColumn {
                get {
                    return this.columnImpFractFB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AreaFtColumn {
                get {
                    return this.columnAreaFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RfAreaFtColumn {
                get {
                    return this.columnRfAreaFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PkAreaFtColumn {
                get {
                    return this.columnPkAreaFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TraceVisitColumn {
                get {
                    return this.columnTraceVisit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSCPickedFlagColumn {
                get {
                    return this.columnDSCPickedFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateAttsColumn {
                get {
                    return this.columnUpdateAtts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn c_RFtosurfFtColumn {
                get {
                    return this.columnc_RFtosurfFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn c_PKtosurfFtColumn {
                get {
                    return this.columnc_PKtosurfFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn c_RFtosurfImpFtColumn {
                get {
                    return this.columnc_RFtosurfImpFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn c_PKtosurfImpFtColumn {
                get {
                    return this.columnc_PKtosurfImpFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SewerableColumn {
                get {
                    return this.columnSewerable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasBasementColumn {
                get {
                    return this.columnHasBasement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mdl_dirsc_acRow this[int index] {
                get {
                    return ((mdl_dirsc_acRow)(this.Rows[index]));
                }
            }
            
            public event mdl_dirsc_acRowChangeEventHandler mdl_dirsc_acRowChanging;
            
            public event mdl_dirsc_acRowChangeEventHandler mdl_dirsc_acRowChanged;
            
            public event mdl_dirsc_acRowChangeEventHandler mdl_dirsc_acRowDeleting;
            
            public event mdl_dirsc_acRowChangeEventHandler mdl_dirsc_acRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addmdl_dirsc_acRow(mdl_dirsc_acRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mdl_dirsc_acRow Addmdl_dirsc_acRow(
                        int ParcelID, 
                        int DivideID, 
                        int DSCID, 
                        int discoSiteID, 
                        string DiscoClass, 
                        int ToLinkSan, 
                        int ToLinkStorm, 
                        string NGTOSan, 
                        string NGTOStorm, 
                        string PipeFlowTypeSan, 
                        string PipeFlowTypeStorm, 
                        double SanSwrCrown, 
                        double Frac2SwrBeg, 
                        double FloodRefElev, 
                        bool FalseBFRisk, 
                        string GridQAQC, 
                        double MaxBldGrid, 
                        double AvgParcelElev, 
                        string EFFMethod, 
                        string FFOverride, 
                        double OrigFinishFloor, 
                        double HGL, 
                        double DeltaHGL, 
                        string HGLComment, 
                        string DataSourceFlags, 
                        string ZoneEX, 
                        string ZoneCP, 
                        string GenEX, 
                        string GenCP, 
                        double BaseFlow, 
                        double BaseFlowEX, 
                        double BaseFlowDM, 
                        int ICFtRoof, 
                        int ICFtParking, 
                        string ICFlag, 
                        double ImpFractEX, 
                        double ImpFractCP, 
                        double ImpFractFB, 
                        double AreaFt, 
                        double RfAreaFt, 
                        double PkAreaFt, 
                        string TraceVisit, 
                        string DSCPickedFlag, 
                        bool UpdateAtts, 
                        int c_RFtosurfFt, 
                        int c_PKtosurfFt, 
                        int c_RFtosurfImpFt, 
                        int c_PKtosurfImpFt, 
                        bool IsActive, 
                        int Sewerable, 
                        int HasBasement) {
                mdl_dirsc_acRow rowmdl_dirsc_acRow = ((mdl_dirsc_acRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ParcelID,
                        DivideID,
                        DSCID,
                        discoSiteID,
                        DiscoClass,
                        ToLinkSan,
                        ToLinkStorm,
                        NGTOSan,
                        NGTOStorm,
                        PipeFlowTypeSan,
                        PipeFlowTypeStorm,
                        SanSwrCrown,
                        Frac2SwrBeg,
                        FloodRefElev,
                        FalseBFRisk,
                        GridQAQC,
                        MaxBldGrid,
                        AvgParcelElev,
                        EFFMethod,
                        FFOverride,
                        OrigFinishFloor,
                        HGL,
                        DeltaHGL,
                        HGLComment,
                        DataSourceFlags,
                        ZoneEX,
                        ZoneCP,
                        GenEX,
                        GenCP,
                        BaseFlow,
                        BaseFlowEX,
                        BaseFlowDM,
                        ICFtRoof,
                        ICFtParking,
                        ICFlag,
                        ImpFractEX,
                        ImpFractCP,
                        ImpFractFB,
                        AreaFt,
                        RfAreaFt,
                        PkAreaFt,
                        TraceVisit,
                        DSCPickedFlag,
                        UpdateAtts,
                        c_RFtosurfFt,
                        c_PKtosurfFt,
                        c_RFtosurfImpFt,
                        c_PKtosurfImpFt,
                        IsActive,
                        Sewerable,
                        HasBasement};
                rowmdl_dirsc_acRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowmdl_dirsc_acRow);
                return rowmdl_dirsc_acRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mdl_dirsc_acRow FindByMAPINFO_ID(int MAPINFO_ID) {
                return ((mdl_dirsc_acRow)(this.Rows.Find(new object[] {
                            MAPINFO_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                mdl_dirsc_acDataTable cln = ((mdl_dirsc_acDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new mdl_dirsc_acDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMAPINFO_ID = base.Columns["MAPINFO_ID"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnDivideID = base.Columns["DivideID"];
                this.columnDSCID = base.Columns["DSCID"];
                this.columndiscoSiteID = base.Columns["discoSiteID"];
                this.columnDiscoClass = base.Columns["DiscoClass"];
                this.columnToLinkSan = base.Columns["ToLinkSan"];
                this.columnToLinkStorm = base.Columns["ToLinkStorm"];
                this.columnNGTOSan = base.Columns["NGTOSan"];
                this.columnNGTOStorm = base.Columns["NGTOStorm"];
                this.columnPipeFlowTypeSan = base.Columns["PipeFlowTypeSan"];
                this.columnPipeFlowTypeStorm = base.Columns["PipeFlowTypeStorm"];
                this.columnSanSwrCrown = base.Columns["SanSwrCrown"];
                this.columnFrac2SwrBeg = base.Columns["Frac2SwrBeg"];
                this.columnFloodRefElev = base.Columns["FloodRefElev"];
                this.columnFalseBFRisk = base.Columns["FalseBFRisk"];
                this.columnGridQAQC = base.Columns["GridQAQC"];
                this.columnMaxBldGrid = base.Columns["MaxBldGrid"];
                this.columnAvgParcelElev = base.Columns["AvgParcelElev"];
                this.columnEFFMethod = base.Columns["EFFMethod"];
                this.columnFFOverride = base.Columns["FFOverride"];
                this.columnOrigFinishFloor = base.Columns["OrigFinishFloor"];
                this.columnHGL = base.Columns["HGL"];
                this.columnDeltaHGL = base.Columns["DeltaHGL"];
                this.columnHGLComment = base.Columns["HGLComment"];
                this.columnDataSourceFlags = base.Columns["DataSourceFlags"];
                this.columnZoneEX = base.Columns["ZoneEX"];
                this.columnZoneCP = base.Columns["ZoneCP"];
                this.columnGenEX = base.Columns["GenEX"];
                this.columnGenCP = base.Columns["GenCP"];
                this.columnBaseFlow = base.Columns["BaseFlow"];
                this.columnBaseFlowEX = base.Columns["BaseFlowEX"];
                this.columnBaseFlowDM = base.Columns["BaseFlowDM"];
                this.columnICFtRoof = base.Columns["ICFtRoof"];
                this.columnICFtParking = base.Columns["ICFtParking"];
                this.columnICFlag = base.Columns["ICFlag"];
                this.columnImpFractEX = base.Columns["ImpFractEX"];
                this.columnImpFractCP = base.Columns["ImpFractCP"];
                this.columnImpFractFB = base.Columns["ImpFractFB"];
                this.columnAreaFt = base.Columns["AreaFt"];
                this.columnRfAreaFt = base.Columns["RfAreaFt"];
                this.columnPkAreaFt = base.Columns["PkAreaFt"];
                this.columnTraceVisit = base.Columns["TraceVisit"];
                this.columnDSCPickedFlag = base.Columns["DSCPickedFlag"];
                this.columnUpdateAtts = base.Columns["UpdateAtts"];
                this.columnc_RFtosurfFt = base.Columns["c_RFtosurfFt"];
                this.columnc_PKtosurfFt = base.Columns["c_PKtosurfFt"];
                this.columnc_RFtosurfImpFt = base.Columns["c_RFtosurfImpFt"];
                this.columnc_PKtosurfImpFt = base.Columns["c_PKtosurfImpFt"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnSewerable = base.Columns["Sewerable"];
                this.columnHasBasement = base.Columns["HasBasement"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMAPINFO_ID = new global::System.Data.DataColumn("MAPINFO_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAPINFO_ID);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnDivideID = new global::System.Data.DataColumn("DivideID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDivideID);
                this.columnDSCID = new global::System.Data.DataColumn("DSCID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSCID);
                this.columndiscoSiteID = new global::System.Data.DataColumn("discoSiteID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndiscoSiteID);
                this.columnDiscoClass = new global::System.Data.DataColumn("DiscoClass", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscoClass);
                this.columnToLinkSan = new global::System.Data.DataColumn("ToLinkSan", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToLinkSan);
                this.columnToLinkStorm = new global::System.Data.DataColumn("ToLinkStorm", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToLinkStorm);
                this.columnNGTOSan = new global::System.Data.DataColumn("NGTOSan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGTOSan);
                this.columnNGTOStorm = new global::System.Data.DataColumn("NGTOStorm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGTOStorm);
                this.columnPipeFlowTypeSan = new global::System.Data.DataColumn("PipeFlowTypeSan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeFlowTypeSan);
                this.columnPipeFlowTypeStorm = new global::System.Data.DataColumn("PipeFlowTypeStorm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeFlowTypeStorm);
                this.columnSanSwrCrown = new global::System.Data.DataColumn("SanSwrCrown", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSanSwrCrown);
                this.columnFrac2SwrBeg = new global::System.Data.DataColumn("Frac2SwrBeg", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrac2SwrBeg);
                this.columnFloodRefElev = new global::System.Data.DataColumn("FloodRefElev", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFloodRefElev);
                this.columnFalseBFRisk = new global::System.Data.DataColumn("FalseBFRisk", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFalseBFRisk);
                this.columnGridQAQC = new global::System.Data.DataColumn("GridQAQC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGridQAQC);
                this.columnMaxBldGrid = new global::System.Data.DataColumn("MaxBldGrid", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxBldGrid);
                this.columnAvgParcelElev = new global::System.Data.DataColumn("AvgParcelElev", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAvgParcelElev);
                this.columnEFFMethod = new global::System.Data.DataColumn("EFFMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEFFMethod);
                this.columnFFOverride = new global::System.Data.DataColumn("FFOverride", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFFOverride);
                this.columnOrigFinishFloor = new global::System.Data.DataColumn("OrigFinishFloor", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrigFinishFloor);
                this.columnHGL = new global::System.Data.DataColumn("HGL", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHGL);
                this.columnDeltaHGL = new global::System.Data.DataColumn("DeltaHGL", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeltaHGL);
                this.columnHGLComment = new global::System.Data.DataColumn("HGLComment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHGLComment);
                this.columnDataSourceFlags = new global::System.Data.DataColumn("DataSourceFlags", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataSourceFlags);
                this.columnZoneEX = new global::System.Data.DataColumn("ZoneEX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZoneEX);
                this.columnZoneCP = new global::System.Data.DataColumn("ZoneCP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZoneCP);
                this.columnGenEX = new global::System.Data.DataColumn("GenEX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenEX);
                this.columnGenCP = new global::System.Data.DataColumn("GenCP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenCP);
                this.columnBaseFlow = new global::System.Data.DataColumn("BaseFlow", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseFlow);
                this.columnBaseFlowEX = new global::System.Data.DataColumn("BaseFlowEX", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseFlowEX);
                this.columnBaseFlowDM = new global::System.Data.DataColumn("BaseFlowDM", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseFlowDM);
                this.columnICFtRoof = new global::System.Data.DataColumn("ICFtRoof", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnICFtRoof);
                this.columnICFtParking = new global::System.Data.DataColumn("ICFtParking", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnICFtParking);
                this.columnICFlag = new global::System.Data.DataColumn("ICFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnICFlag);
                this.columnImpFractEX = new global::System.Data.DataColumn("ImpFractEX", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImpFractEX);
                this.columnImpFractCP = new global::System.Data.DataColumn("ImpFractCP", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImpFractCP);
                this.columnImpFractFB = new global::System.Data.DataColumn("ImpFractFB", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImpFractFB);
                this.columnAreaFt = new global::System.Data.DataColumn("AreaFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAreaFt);
                this.columnRfAreaFt = new global::System.Data.DataColumn("RfAreaFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRfAreaFt);
                this.columnPkAreaFt = new global::System.Data.DataColumn("PkAreaFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPkAreaFt);
                this.columnTraceVisit = new global::System.Data.DataColumn("TraceVisit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTraceVisit);
                this.columnDSCPickedFlag = new global::System.Data.DataColumn("DSCPickedFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSCPickedFlag);
                this.columnUpdateAtts = new global::System.Data.DataColumn("UpdateAtts", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateAtts);
                this.columnc_RFtosurfFt = new global::System.Data.DataColumn("c_RFtosurfFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnc_RFtosurfFt);
                this.columnc_PKtosurfFt = new global::System.Data.DataColumn("c_PKtosurfFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnc_PKtosurfFt);
                this.columnc_RFtosurfImpFt = new global::System.Data.DataColumn("c_RFtosurfImpFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnc_RFtosurfImpFt);
                this.columnc_PKtosurfImpFt = new global::System.Data.DataColumn("c_PKtosurfImpFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnc_PKtosurfImpFt);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnSewerable = new global::System.Data.DataColumn("Sewerable", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSewerable);
                this.columnHasBasement = new global::System.Data.DataColumn("HasBasement", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasBasement);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMAPINFO_ID}, true));
                this.columnMAPINFO_ID.AutoIncrement = true;
                this.columnMAPINFO_ID.AutoIncrementSeed = -1;
                this.columnMAPINFO_ID.AutoIncrementStep = -1;
                this.columnMAPINFO_ID.AllowDBNull = false;
                this.columnMAPINFO_ID.Unique = true;
                this.columnDiscoClass.MaxLength = 1;
                this.columnNGTOSan.MaxLength = 6;
                this.columnNGTOStorm.MaxLength = 6;
                this.columnPipeFlowTypeSan.MaxLength = 1;
                this.columnPipeFlowTypeStorm.MaxLength = 1;
                this.columnGridQAQC.MaxLength = 10;
                this.columnEFFMethod.MaxLength = 15;
                this.columnFFOverride.MaxLength = 15;
                this.columnHGLComment.MaxLength = 20;
                this.columnDataSourceFlags.MaxLength = 100;
                this.columnZoneEX.MaxLength = 5;
                this.columnZoneCP.MaxLength = 5;
                this.columnGenEX.MaxLength = 3;
                this.columnGenCP.MaxLength = 3;
                this.columnICFlag.MaxLength = 8;
                this.columnTraceVisit.MaxLength = 1;
                this.columnDSCPickedFlag.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mdl_dirsc_acRow Newmdl_dirsc_acRow() {
                return ((mdl_dirsc_acRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new mdl_dirsc_acRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(mdl_dirsc_acRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.mdl_dirsc_acRowChanged != null)) {
                    this.mdl_dirsc_acRowChanged(this, new mdl_dirsc_acRowChangeEvent(((mdl_dirsc_acRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.mdl_dirsc_acRowChanging != null)) {
                    this.mdl_dirsc_acRowChanging(this, new mdl_dirsc_acRowChangeEvent(((mdl_dirsc_acRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.mdl_dirsc_acRowDeleted != null)) {
                    this.mdl_dirsc_acRowDeleted(this, new mdl_dirsc_acRowChangeEvent(((mdl_dirsc_acRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.mdl_dirsc_acRowDeleting != null)) {
                    this.mdl_dirsc_acRowDeleting(this, new mdl_dirsc_acRowChangeEvent(((mdl_dirsc_acRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removemdl_dirsc_acRow(mdl_dirsc_acRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StormwaterControlsDataSet ds = new StormwaterControlsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "mdl_dirsc_acDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _mdl_roofTargetsDataTable : global::System.Data.TypedTableBase<_mdl_roofTargetsRow> {
            
            private global::System.Data.DataColumn columnMAPINFO_ID;
            
            private global::System.Data.DataColumn columnicID;
            
            private global::System.Data.DataColumn columnrICID;
            
            private global::System.Data.DataColumn columnparcelID;
            
            private global::System.Data.DataColumn columndivideID;
            
            private global::System.Data.DataColumn columndscID;
            
            private global::System.Data.DataColumn columnnGTORoof;
            
            private global::System.Data.DataColumn columnexICFtRoof;
            
            private global::System.Data.DataColumn columnexRfAreaFt;
            
            private global::System.Data.DataColumn columnexternalDS;
            
            private global::System.Data.DataColumn columndsTotal;
            
            private global::System.Data.DataColumn columnextoVeg;
            
            private global::System.Data.DataColumn columnextoStreet;
            
            private global::System.Data.DataColumn columnextoPlanter;
            
            private global::System.Data.DataColumn columnextoBioretention;
            
            private global::System.Data.DataColumn columnextoDrywell;
            
            private global::System.Data.DataColumn columnextoEcoroof;
            
            private global::System.Data.DataColumn columndstoVeg;
            
            private global::System.Data.DataColumn columndstoStreet;
            
            private global::System.Data.DataColumn columndstoPlanter;
            
            private global::System.Data.DataColumn columndstoBioretention;
            
            private global::System.Data.DataColumn columndstoDrywell;
            
            private global::System.Data.DataColumn columndstoEcoroof;
            
            private global::System.Data.DataColumn columndsUncontrollable;
            
            private global::System.Data.DataColumn columnlandscapeAvailable;
            
            private global::System.Data.DataColumn columnfractionDrained;
            
            private global::System.Data.DataColumn columndifficulty;
            
            private global::System.Data.DataColumn columnroofEffDisc;
            
            private global::System.Data.DataColumn columncomments;
            
            private global::System.Data.DataColumn columnplantersOK;
            
            private global::System.Data.DataColumn columnbioretentionOK;
            
            private global::System.Data.DataColumn columnbuildModelIC;
            
            private global::System.Data.DataColumn columnsource;
            
            private global::System.Data.DataColumn columnappendDate;
            
            private global::System.Data.DataColumn columnconstructed;
            
            private global::System.Data.DataColumn columnSqFt_Bioret;
            
            private global::System.Data.DataColumn columnSqFt_Drywell;
            
            private global::System.Data.DataColumn columnSqFt_Veg;
            
            private global::System.Data.DataColumn columnSqFt_Eco;
            
            private global::System.Data.DataColumn columnSqFt_Plntr;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _mdl_roofTargetsDataTable() {
                this.TableName = "_mdl_roofTargets";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _mdl_roofTargetsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _mdl_roofTargetsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAPINFO_IDColumn {
                get {
                    return this.columnMAPINFO_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn icIDColumn {
                get {
                    return this.columnicID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rICIDColumn {
                get {
                    return this.columnrICID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn parcelIDColumn {
                get {
                    return this.columnparcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn divideIDColumn {
                get {
                    return this.columndivideID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dscIDColumn {
                get {
                    return this.columndscID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nGTORoofColumn {
                get {
                    return this.columnnGTORoof;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn exICFtRoofColumn {
                get {
                    return this.columnexICFtRoof;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn exRfAreaFtColumn {
                get {
                    return this.columnexRfAreaFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn externalDSColumn {
                get {
                    return this.columnexternalDS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dsTotalColumn {
                get {
                    return this.columndsTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn extoVegColumn {
                get {
                    return this.columnextoVeg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn extoStreetColumn {
                get {
                    return this.columnextoStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn extoPlanterColumn {
                get {
                    return this.columnextoPlanter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn extoBioretentionColumn {
                get {
                    return this.columnextoBioretention;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn extoDrywellColumn {
                get {
                    return this.columnextoDrywell;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn extoEcoroofColumn {
                get {
                    return this.columnextoEcoroof;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dstoVegColumn {
                get {
                    return this.columndstoVeg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dstoStreetColumn {
                get {
                    return this.columndstoStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dstoPlanterColumn {
                get {
                    return this.columndstoPlanter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dstoBioretentionColumn {
                get {
                    return this.columndstoBioretention;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dstoDrywellColumn {
                get {
                    return this.columndstoDrywell;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dstoEcoroofColumn {
                get {
                    return this.columndstoEcoroof;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dsUncontrollableColumn {
                get {
                    return this.columndsUncontrollable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn landscapeAvailableColumn {
                get {
                    return this.columnlandscapeAvailable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fractionDrainedColumn {
                get {
                    return this.columnfractionDrained;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn difficultyColumn {
                get {
                    return this.columndifficulty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn roofEffDiscColumn {
                get {
                    return this.columnroofEffDisc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn commentsColumn {
                get {
                    return this.columncomments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn plantersOKColumn {
                get {
                    return this.columnplantersOK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bioretentionOKColumn {
                get {
                    return this.columnbioretentionOK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn buildModelICColumn {
                get {
                    return this.columnbuildModelIC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sourceColumn {
                get {
                    return this.columnsource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn appendDateColumn {
                get {
                    return this.columnappendDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn constructedColumn {
                get {
                    return this.columnconstructed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SqFt_BioretColumn {
                get {
                    return this.columnSqFt_Bioret;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SqFt_DrywellColumn {
                get {
                    return this.columnSqFt_Drywell;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SqFt_VegColumn {
                get {
                    return this.columnSqFt_Veg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SqFt_EcoColumn {
                get {
                    return this.columnSqFt_Eco;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SqFt_PlntrColumn {
                get {
                    return this.columnSqFt_Plntr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _mdl_roofTargetsRow this[int index] {
                get {
                    return ((_mdl_roofTargetsRow)(this.Rows[index]));
                }
            }
            
            public event _mdl_roofTargetsRowChangeEventHandler _mdl_roofTargetsRowChanging;
            
            public event _mdl_roofTargetsRowChangeEventHandler _mdl_roofTargetsRowChanged;
            
            public event _mdl_roofTargetsRowChangeEventHandler _mdl_roofTargetsRowDeleting;
            
            public event _mdl_roofTargetsRowChangeEventHandler _mdl_roofTargetsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_mdl_roofTargetsRow(_mdl_roofTargetsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _mdl_roofTargetsRow Add_mdl_roofTargetsRow(
                        int icID, 
                        string rICID, 
                        int parcelID, 
                        short divideID, 
                        int dscID, 
                        string nGTORoof, 
                        int exICFtRoof, 
                        int exRfAreaFt, 
                        bool externalDS, 
                        short dsTotal, 
                        short extoVeg, 
                        short extoStreet, 
                        short extoPlanter, 
                        short extoBioretention, 
                        short extoDrywell, 
                        short extoEcoroof, 
                        short dstoVeg, 
                        short dstoStreet, 
                        short dstoPlanter, 
                        short dstoBioretention, 
                        short dstoDrywell, 
                        short dstoEcoroof, 
                        short dsUncontrollable, 
                        bool landscapeAvailable, 
                        double fractionDrained, 
                        short difficulty, 
                        double roofEffDisc, 
                        string comments, 
                        bool plantersOK, 
                        bool bioretentionOK, 
                        bool buildModelIC, 
                        string source, 
                        string appendDate, 
                        int constructed, 
                        int SqFt_Bioret, 
                        int SqFt_Drywell, 
                        int SqFt_Veg, 
                        int SqFt_Eco, 
                        int SqFt_Plntr) {
                _mdl_roofTargetsRow row_mdl_roofTargetsRow = ((_mdl_roofTargetsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        icID,
                        rICID,
                        parcelID,
                        divideID,
                        dscID,
                        nGTORoof,
                        exICFtRoof,
                        exRfAreaFt,
                        externalDS,
                        dsTotal,
                        extoVeg,
                        extoStreet,
                        extoPlanter,
                        extoBioretention,
                        extoDrywell,
                        extoEcoroof,
                        dstoVeg,
                        dstoStreet,
                        dstoPlanter,
                        dstoBioretention,
                        dstoDrywell,
                        dstoEcoroof,
                        dsUncontrollable,
                        landscapeAvailable,
                        fractionDrained,
                        difficulty,
                        roofEffDisc,
                        comments,
                        plantersOK,
                        bioretentionOK,
                        buildModelIC,
                        source,
                        appendDate,
                        constructed,
                        SqFt_Bioret,
                        SqFt_Drywell,
                        SqFt_Veg,
                        SqFt_Eco,
                        SqFt_Plntr};
                row_mdl_roofTargetsRow.ItemArray = columnValuesArray;
                this.Rows.Add(row_mdl_roofTargetsRow);
                return row_mdl_roofTargetsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                _mdl_roofTargetsDataTable cln = ((_mdl_roofTargetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new _mdl_roofTargetsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMAPINFO_ID = base.Columns["MAPINFO_ID"];
                this.columnicID = base.Columns["icID"];
                this.columnrICID = base.Columns["rICID"];
                this.columnparcelID = base.Columns["parcelID"];
                this.columndivideID = base.Columns["divideID"];
                this.columndscID = base.Columns["dscID"];
                this.columnnGTORoof = base.Columns["nGTORoof"];
                this.columnexICFtRoof = base.Columns["exICFtRoof"];
                this.columnexRfAreaFt = base.Columns["exRfAreaFt"];
                this.columnexternalDS = base.Columns["externalDS"];
                this.columndsTotal = base.Columns["dsTotal"];
                this.columnextoVeg = base.Columns["extoVeg"];
                this.columnextoStreet = base.Columns["extoStreet"];
                this.columnextoPlanter = base.Columns["extoPlanter"];
                this.columnextoBioretention = base.Columns["extoBioretention"];
                this.columnextoDrywell = base.Columns["extoDrywell"];
                this.columnextoEcoroof = base.Columns["extoEcoroof"];
                this.columndstoVeg = base.Columns["dstoVeg"];
                this.columndstoStreet = base.Columns["dstoStreet"];
                this.columndstoPlanter = base.Columns["dstoPlanter"];
                this.columndstoBioretention = base.Columns["dstoBioretention"];
                this.columndstoDrywell = base.Columns["dstoDrywell"];
                this.columndstoEcoroof = base.Columns["dstoEcoroof"];
                this.columndsUncontrollable = base.Columns["dsUncontrollable"];
                this.columnlandscapeAvailable = base.Columns["landscapeAvailable"];
                this.columnfractionDrained = base.Columns["fractionDrained"];
                this.columndifficulty = base.Columns["difficulty"];
                this.columnroofEffDisc = base.Columns["roofEffDisc"];
                this.columncomments = base.Columns["comments"];
                this.columnplantersOK = base.Columns["plantersOK"];
                this.columnbioretentionOK = base.Columns["bioretentionOK"];
                this.columnbuildModelIC = base.Columns["buildModelIC"];
                this.columnsource = base.Columns["source"];
                this.columnappendDate = base.Columns["appendDate"];
                this.columnconstructed = base.Columns["constructed"];
                this.columnSqFt_Bioret = base.Columns["SqFt_Bioret"];
                this.columnSqFt_Drywell = base.Columns["SqFt_Drywell"];
                this.columnSqFt_Veg = base.Columns["SqFt_Veg"];
                this.columnSqFt_Eco = base.Columns["SqFt_Eco"];
                this.columnSqFt_Plntr = base.Columns["SqFt_Plntr"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMAPINFO_ID = new global::System.Data.DataColumn("MAPINFO_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAPINFO_ID);
                this.columnicID = new global::System.Data.DataColumn("icID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnicID);
                this.columnrICID = new global::System.Data.DataColumn("rICID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrICID);
                this.columnparcelID = new global::System.Data.DataColumn("parcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparcelID);
                this.columndivideID = new global::System.Data.DataColumn("divideID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndivideID);
                this.columndscID = new global::System.Data.DataColumn("dscID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndscID);
                this.columnnGTORoof = new global::System.Data.DataColumn("nGTORoof", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnGTORoof);
                this.columnexICFtRoof = new global::System.Data.DataColumn("exICFtRoof", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnexICFtRoof);
                this.columnexRfAreaFt = new global::System.Data.DataColumn("exRfAreaFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnexRfAreaFt);
                this.columnexternalDS = new global::System.Data.DataColumn("externalDS", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnexternalDS);
                this.columndsTotal = new global::System.Data.DataColumn("dsTotal", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndsTotal);
                this.columnextoVeg = new global::System.Data.DataColumn("extoVeg", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnextoVeg);
                this.columnextoStreet = new global::System.Data.DataColumn("extoStreet", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnextoStreet);
                this.columnextoPlanter = new global::System.Data.DataColumn("extoPlanter", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnextoPlanter);
                this.columnextoBioretention = new global::System.Data.DataColumn("extoBioretention", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnextoBioretention);
                this.columnextoDrywell = new global::System.Data.DataColumn("extoDrywell", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnextoDrywell);
                this.columnextoEcoroof = new global::System.Data.DataColumn("extoEcoroof", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnextoEcoroof);
                this.columndstoVeg = new global::System.Data.DataColumn("dstoVeg", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndstoVeg);
                this.columndstoStreet = new global::System.Data.DataColumn("dstoStreet", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndstoStreet);
                this.columndstoPlanter = new global::System.Data.DataColumn("dstoPlanter", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndstoPlanter);
                this.columndstoBioretention = new global::System.Data.DataColumn("dstoBioretention", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndstoBioretention);
                this.columndstoDrywell = new global::System.Data.DataColumn("dstoDrywell", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndstoDrywell);
                this.columndstoEcoroof = new global::System.Data.DataColumn("dstoEcoroof", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndstoEcoroof);
                this.columndsUncontrollable = new global::System.Data.DataColumn("dsUncontrollable", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndsUncontrollable);
                this.columnlandscapeAvailable = new global::System.Data.DataColumn("landscapeAvailable", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlandscapeAvailable);
                this.columnfractionDrained = new global::System.Data.DataColumn("fractionDrained", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfractionDrained);
                this.columndifficulty = new global::System.Data.DataColumn("difficulty", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndifficulty);
                this.columnroofEffDisc = new global::System.Data.DataColumn("roofEffDisc", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnroofEffDisc);
                this.columncomments = new global::System.Data.DataColumn("comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncomments);
                this.columnplantersOK = new global::System.Data.DataColumn("plantersOK", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnplantersOK);
                this.columnbioretentionOK = new global::System.Data.DataColumn("bioretentionOK", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbioretentionOK);
                this.columnbuildModelIC = new global::System.Data.DataColumn("buildModelIC", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbuildModelIC);
                this.columnsource = new global::System.Data.DataColumn("source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsource);
                this.columnappendDate = new global::System.Data.DataColumn("appendDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnappendDate);
                this.columnconstructed = new global::System.Data.DataColumn("constructed", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconstructed);
                this.columnSqFt_Bioret = new global::System.Data.DataColumn("SqFt_Bioret", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSqFt_Bioret);
                this.columnSqFt_Drywell = new global::System.Data.DataColumn("SqFt_Drywell", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSqFt_Drywell);
                this.columnSqFt_Veg = new global::System.Data.DataColumn("SqFt_Veg", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSqFt_Veg);
                this.columnSqFt_Eco = new global::System.Data.DataColumn("SqFt_Eco", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSqFt_Eco);
                this.columnSqFt_Plntr = new global::System.Data.DataColumn("SqFt_Plntr", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSqFt_Plntr);
                this.columnMAPINFO_ID.AutoIncrement = true;
                this.columnMAPINFO_ID.AutoIncrementSeed = -1;
                this.columnMAPINFO_ID.AutoIncrementStep = -1;
                this.columnMAPINFO_ID.AllowDBNull = false;
                this.columnrICID.MaxLength = 5;
                this.columnnGTORoof.MaxLength = 6;
                this.columncomments.MaxLength = 254;
                this.columnsource.MaxLength = 15;
                this.columnappendDate.MaxLength = 17;
                this.columnSqFt_Bioret.ReadOnly = true;
                this.columnSqFt_Drywell.ReadOnly = true;
                this.columnSqFt_Veg.ReadOnly = true;
                this.columnSqFt_Eco.ReadOnly = true;
                this.columnSqFt_Plntr.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _mdl_roofTargetsRow New_mdl_roofTargetsRow() {
                return ((_mdl_roofTargetsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new _mdl_roofTargetsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(_mdl_roofTargetsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._mdl_roofTargetsRowChanged != null)) {
                    this._mdl_roofTargetsRowChanged(this, new _mdl_roofTargetsRowChangeEvent(((_mdl_roofTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._mdl_roofTargetsRowChanging != null)) {
                    this._mdl_roofTargetsRowChanging(this, new _mdl_roofTargetsRowChangeEvent(((_mdl_roofTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._mdl_roofTargetsRowDeleted != null)) {
                    this._mdl_roofTargetsRowDeleted(this, new _mdl_roofTargetsRowChangeEvent(((_mdl_roofTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._mdl_roofTargetsRowDeleting != null)) {
                    this._mdl_roofTargetsRowDeleting(this, new _mdl_roofTargetsRowChangeEvent(((_mdl_roofTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_mdl_roofTargetsRow(_mdl_roofTargetsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StormwaterControlsDataSet ds = new StormwaterControlsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_mdl_roofTargetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _mdl_ParkingTargetsDataTable : global::System.Data.TypedTableBase<_mdl_ParkingTargetsRow> {
            
            private global::System.Data.DataColumn columnMst_targetMIID;
            
            private global::System.Data.DataColumn columnMAPINFO_ID;
            
            private global::System.Data.DataColumn columnicID;
            
            private global::System.Data.DataColumn columnpICID;
            
            private global::System.Data.DataColumn columnparcelID;
            
            private global::System.Data.DataColumn columndivideID;
            
            private global::System.Data.DataColumn columndscID;
            
            private global::System.Data.DataColumn columnexICFtParking;
            
            private global::System.Data.DataColumn columnexPkAreaFt;
            
            private global::System.Data.DataColumn columnparkingTargetArea;
            
            private global::System.Data.DataColumn columnnGTO_Direct;
            
            private global::System.Data.DataColumn columnnGTO_Surface;
            
            private global::System.Data.DataColumn columnnGTOParking;
            
            private global::System.Data.DataColumn columnevaluated;
            
            private global::System.Data.DataColumn columninlets;
            
            private global::System.Data.DataColumn columnparkingSpaces;
            
            private global::System.Data.DataColumn columnpercentParkingUsed;
            
            private global::System.Data.DataColumn columndrainage;
            
            private global::System.Data.DataColumn columnnGTO;
            
            private global::System.Data.DataColumn columncontrollable;
            
            private global::System.Data.DataColumn columnfractionControllable;
            
            private global::System.Data.DataColumn columndifficulty;
            
            private global::System.Data.DataColumn columnparkingEffDisc;
            
            private global::System.Data.DataColumn columncomments;
            
            private global::System.Data.DataColumn columnfraction2Drywell;
            
            private global::System.Data.DataColumn columnbuildModelIC;
            
            private global::System.Data.DataColumn columnsource;
            
            private global::System.Data.DataColumn columnappendDate;
            
            private global::System.Data.DataColumn columnconstructed;
            
            private global::System.Data.DataColumn columnSqFt_Bioret;
            
            private global::System.Data.DataColumn columnSqFt_Drywell;
            
            private global::System.Data.DataColumn columnSqFt_Surf;
            
            private global::System.Data.DataColumn columnSqFt_StOnly;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _mdl_ParkingTargetsDataTable() {
                this.TableName = "_mdl_ParkingTargets";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _mdl_ParkingTargetsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _mdl_ParkingTargetsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mst_targetMIIDColumn {
                get {
                    return this.columnMst_targetMIID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAPINFO_IDColumn {
                get {
                    return this.columnMAPINFO_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn icIDColumn {
                get {
                    return this.columnicID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pICIDColumn {
                get {
                    return this.columnpICID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn parcelIDColumn {
                get {
                    return this.columnparcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn divideIDColumn {
                get {
                    return this.columndivideID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dscIDColumn {
                get {
                    return this.columndscID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn exICFtParkingColumn {
                get {
                    return this.columnexICFtParking;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn exPkAreaFtColumn {
                get {
                    return this.columnexPkAreaFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn parkingTargetAreaColumn {
                get {
                    return this.columnparkingTargetArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nGTO_DirectColumn {
                get {
                    return this.columnnGTO_Direct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nGTO_SurfaceColumn {
                get {
                    return this.columnnGTO_Surface;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nGTOParkingColumn {
                get {
                    return this.columnnGTOParking;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn evaluatedColumn {
                get {
                    return this.columnevaluated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inletsColumn {
                get {
                    return this.columninlets;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn parkingSpacesColumn {
                get {
                    return this.columnparkingSpaces;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn percentParkingUsedColumn {
                get {
                    return this.columnpercentParkingUsed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn drainageColumn {
                get {
                    return this.columndrainage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nGTOColumn {
                get {
                    return this.columnnGTO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn controllableColumn {
                get {
                    return this.columncontrollable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fractionControllableColumn {
                get {
                    return this.columnfractionControllable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn difficultyColumn {
                get {
                    return this.columndifficulty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn parkingEffDiscColumn {
                get {
                    return this.columnparkingEffDisc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn commentsColumn {
                get {
                    return this.columncomments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fraction2DrywellColumn {
                get {
                    return this.columnfraction2Drywell;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn buildModelICColumn {
                get {
                    return this.columnbuildModelIC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sourceColumn {
                get {
                    return this.columnsource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn appendDateColumn {
                get {
                    return this.columnappendDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn constructedColumn {
                get {
                    return this.columnconstructed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SqFt_BioretColumn {
                get {
                    return this.columnSqFt_Bioret;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SqFt_DrywellColumn {
                get {
                    return this.columnSqFt_Drywell;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SqFt_SurfColumn {
                get {
                    return this.columnSqFt_Surf;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SqFt_StOnlyColumn {
                get {
                    return this.columnSqFt_StOnly;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _mdl_ParkingTargetsRow this[int index] {
                get {
                    return ((_mdl_ParkingTargetsRow)(this.Rows[index]));
                }
            }
            
            public event _mdl_ParkingTargetsRowChangeEventHandler _mdl_ParkingTargetsRowChanging;
            
            public event _mdl_ParkingTargetsRowChangeEventHandler _mdl_ParkingTargetsRowChanged;
            
            public event _mdl_ParkingTargetsRowChangeEventHandler _mdl_ParkingTargetsRowDeleting;
            
            public event _mdl_ParkingTargetsRowChangeEventHandler _mdl_ParkingTargetsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_mdl_ParkingTargetsRow(_mdl_ParkingTargetsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _mdl_ParkingTargetsRow Add_mdl_ParkingTargetsRow(
                        int Mst_targetMIID, 
                        int MAPINFO_ID, 
                        int icID, 
                        string pICID, 
                        int parcelID, 
                        short divideID, 
                        int dscID, 
                        int exICFtParking, 
                        int exPkAreaFt, 
                        int parkingTargetArea, 
                        string nGTO_Direct, 
                        string nGTO_Surface, 
                        string nGTOParking, 
                        bool evaluated, 
                        bool inlets, 
                        int parkingSpaces, 
                        int percentParkingUsed, 
                        string drainage, 
                        string nGTO, 
                        string controllable, 
                        double fractionControllable, 
                        short difficulty, 
                        double parkingEffDisc, 
                        string comments, 
                        double fraction2Drywell, 
                        bool buildModelIC, 
                        string source, 
                        string appendDate, 
                        int constructed, 
                        int SqFt_Bioret, 
                        int SqFt_Drywell, 
                        int SqFt_Surf, 
                        int SqFt_StOnly) {
                _mdl_ParkingTargetsRow row_mdl_ParkingTargetsRow = ((_mdl_ParkingTargetsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Mst_targetMIID,
                        MAPINFO_ID,
                        icID,
                        pICID,
                        parcelID,
                        divideID,
                        dscID,
                        exICFtParking,
                        exPkAreaFt,
                        parkingTargetArea,
                        nGTO_Direct,
                        nGTO_Surface,
                        nGTOParking,
                        evaluated,
                        inlets,
                        parkingSpaces,
                        percentParkingUsed,
                        drainage,
                        nGTO,
                        controllable,
                        fractionControllable,
                        difficulty,
                        parkingEffDisc,
                        comments,
                        fraction2Drywell,
                        buildModelIC,
                        source,
                        appendDate,
                        constructed,
                        SqFt_Bioret,
                        SqFt_Drywell,
                        SqFt_Surf,
                        SqFt_StOnly};
                row_mdl_ParkingTargetsRow.ItemArray = columnValuesArray;
                this.Rows.Add(row_mdl_ParkingTargetsRow);
                return row_mdl_ParkingTargetsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                _mdl_ParkingTargetsDataTable cln = ((_mdl_ParkingTargetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new _mdl_ParkingTargetsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMst_targetMIID = base.Columns["Mst_targetMIID"];
                this.columnMAPINFO_ID = base.Columns["MAPINFO_ID"];
                this.columnicID = base.Columns["icID"];
                this.columnpICID = base.Columns["pICID"];
                this.columnparcelID = base.Columns["parcelID"];
                this.columndivideID = base.Columns["divideID"];
                this.columndscID = base.Columns["dscID"];
                this.columnexICFtParking = base.Columns["exICFtParking"];
                this.columnexPkAreaFt = base.Columns["exPkAreaFt"];
                this.columnparkingTargetArea = base.Columns["parkingTargetArea"];
                this.columnnGTO_Direct = base.Columns["nGTO_Direct"];
                this.columnnGTO_Surface = base.Columns["nGTO_Surface"];
                this.columnnGTOParking = base.Columns["nGTOParking"];
                this.columnevaluated = base.Columns["evaluated"];
                this.columninlets = base.Columns["inlets"];
                this.columnparkingSpaces = base.Columns["parkingSpaces"];
                this.columnpercentParkingUsed = base.Columns["percentParkingUsed"];
                this.columndrainage = base.Columns["drainage"];
                this.columnnGTO = base.Columns["nGTO"];
                this.columncontrollable = base.Columns["controllable"];
                this.columnfractionControllable = base.Columns["fractionControllable"];
                this.columndifficulty = base.Columns["difficulty"];
                this.columnparkingEffDisc = base.Columns["parkingEffDisc"];
                this.columncomments = base.Columns["comments"];
                this.columnfraction2Drywell = base.Columns["fraction2Drywell"];
                this.columnbuildModelIC = base.Columns["buildModelIC"];
                this.columnsource = base.Columns["source"];
                this.columnappendDate = base.Columns["appendDate"];
                this.columnconstructed = base.Columns["constructed"];
                this.columnSqFt_Bioret = base.Columns["SqFt_Bioret"];
                this.columnSqFt_Drywell = base.Columns["SqFt_Drywell"];
                this.columnSqFt_Surf = base.Columns["SqFt_Surf"];
                this.columnSqFt_StOnly = base.Columns["SqFt_StOnly"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMst_targetMIID = new global::System.Data.DataColumn("Mst_targetMIID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMst_targetMIID);
                this.columnMAPINFO_ID = new global::System.Data.DataColumn("MAPINFO_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAPINFO_ID);
                this.columnicID = new global::System.Data.DataColumn("icID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnicID);
                this.columnpICID = new global::System.Data.DataColumn("pICID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpICID);
                this.columnparcelID = new global::System.Data.DataColumn("parcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparcelID);
                this.columndivideID = new global::System.Data.DataColumn("divideID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndivideID);
                this.columndscID = new global::System.Data.DataColumn("dscID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndscID);
                this.columnexICFtParking = new global::System.Data.DataColumn("exICFtParking", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnexICFtParking);
                this.columnexPkAreaFt = new global::System.Data.DataColumn("exPkAreaFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnexPkAreaFt);
                this.columnparkingTargetArea = new global::System.Data.DataColumn("parkingTargetArea", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparkingTargetArea);
                this.columnnGTO_Direct = new global::System.Data.DataColumn("nGTO_Direct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnGTO_Direct);
                this.columnnGTO_Surface = new global::System.Data.DataColumn("nGTO_Surface", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnGTO_Surface);
                this.columnnGTOParking = new global::System.Data.DataColumn("nGTOParking", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnGTOParking);
                this.columnevaluated = new global::System.Data.DataColumn("evaluated", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnevaluated);
                this.columninlets = new global::System.Data.DataColumn("inlets", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninlets);
                this.columnparkingSpaces = new global::System.Data.DataColumn("parkingSpaces", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparkingSpaces);
                this.columnpercentParkingUsed = new global::System.Data.DataColumn("percentParkingUsed", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpercentParkingUsed);
                this.columndrainage = new global::System.Data.DataColumn("drainage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndrainage);
                this.columnnGTO = new global::System.Data.DataColumn("nGTO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnGTO);
                this.columncontrollable = new global::System.Data.DataColumn("controllable", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncontrollable);
                this.columnfractionControllable = new global::System.Data.DataColumn("fractionControllable", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfractionControllable);
                this.columndifficulty = new global::System.Data.DataColumn("difficulty", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndifficulty);
                this.columnparkingEffDisc = new global::System.Data.DataColumn("parkingEffDisc", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparkingEffDisc);
                this.columncomments = new global::System.Data.DataColumn("comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncomments);
                this.columnfraction2Drywell = new global::System.Data.DataColumn("fraction2Drywell", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfraction2Drywell);
                this.columnbuildModelIC = new global::System.Data.DataColumn("buildModelIC", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbuildModelIC);
                this.columnsource = new global::System.Data.DataColumn("source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsource);
                this.columnappendDate = new global::System.Data.DataColumn("appendDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnappendDate);
                this.columnconstructed = new global::System.Data.DataColumn("constructed", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconstructed);
                this.columnSqFt_Bioret = new global::System.Data.DataColumn("SqFt_Bioret", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSqFt_Bioret);
                this.columnSqFt_Drywell = new global::System.Data.DataColumn("SqFt_Drywell", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSqFt_Drywell);
                this.columnSqFt_Surf = new global::System.Data.DataColumn("SqFt_Surf", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSqFt_Surf);
                this.columnSqFt_StOnly = new global::System.Data.DataColumn("SqFt_StOnly", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSqFt_StOnly);
                this.columnpICID.MaxLength = 255;
                this.columnnGTO_Direct.MaxLength = 255;
                this.columnnGTO_Surface.MaxLength = 255;
                this.columnnGTOParking.MaxLength = 255;
                this.columndrainage.MaxLength = 255;
                this.columnnGTO.MaxLength = 255;
                this.columncontrollable.MaxLength = 255;
                this.columncomments.MaxLength = 255;
                this.columnsource.MaxLength = 255;
                this.columnappendDate.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _mdl_ParkingTargetsRow New_mdl_ParkingTargetsRow() {
                return ((_mdl_ParkingTargetsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new _mdl_ParkingTargetsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(_mdl_ParkingTargetsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._mdl_ParkingTargetsRowChanged != null)) {
                    this._mdl_ParkingTargetsRowChanged(this, new _mdl_ParkingTargetsRowChangeEvent(((_mdl_ParkingTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._mdl_ParkingTargetsRowChanging != null)) {
                    this._mdl_ParkingTargetsRowChanging(this, new _mdl_ParkingTargetsRowChangeEvent(((_mdl_ParkingTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._mdl_ParkingTargetsRowDeleted != null)) {
                    this._mdl_ParkingTargetsRowDeleted(this, new _mdl_ParkingTargetsRowChangeEvent(((_mdl_ParkingTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._mdl_ParkingTargetsRowDeleting != null)) {
                    this._mdl_ParkingTargetsRowDeleting(this, new _mdl_ParkingTargetsRowChangeEvent(((_mdl_ParkingTargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_mdl_ParkingTargetsRow(_mdl_ParkingTargetsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StormwaterControlsDataSet ds = new StormwaterControlsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_mdl_ParkingTargetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TableE18DataTable : global::System.Data.TypedTableBase<TableE18Row> {
            
            private global::System.Data.DataColumn columnNodeName;
            
            private global::System.Data.DataColumn columnStorageVolumeCuFt;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE18DataTable() {
                this.TableName = "TableE18";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TableE18DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TableE18DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NodeNameColumn {
                get {
                    return this.columnNodeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StorageVolumeCuFtColumn {
                get {
                    return this.columnStorageVolumeCuFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE18Row this[int index] {
                get {
                    return ((TableE18Row)(this.Rows[index]));
                }
            }
            
            public event TableE18RowChangeEventHandler TableE18RowChanging;
            
            public event TableE18RowChangeEventHandler TableE18RowChanged;
            
            public event TableE18RowChangeEventHandler TableE18RowDeleting;
            
            public event TableE18RowChangeEventHandler TableE18RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTableE18Row(TableE18Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE18Row AddTableE18Row(string NodeName, double StorageVolumeCuFt) {
                TableE18Row rowTableE18Row = ((TableE18Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NodeName,
                        StorageVolumeCuFt};
                rowTableE18Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTableE18Row);
                return rowTableE18Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE18Row FindByNodeName(string NodeName) {
                return ((TableE18Row)(this.Rows.Find(new object[] {
                            NodeName})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TableE18DataTable cln = ((TableE18DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TableE18DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNodeName = base.Columns["NodeName"];
                this.columnStorageVolumeCuFt = base.Columns["StorageVolumeCuFt"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNodeName = new global::System.Data.DataColumn("NodeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNodeName);
                this.columnStorageVolumeCuFt = new global::System.Data.DataColumn("StorageVolumeCuFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStorageVolumeCuFt);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNodeName}, true));
                this.columnNodeName.AllowDBNull = false;
                this.columnNodeName.Unique = true;
                this.columnNodeName.MaxLength = 15;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE18Row NewTableE18Row() {
                return ((TableE18Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TableE18Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TableE18Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TableE18RowChanged != null)) {
                    this.TableE18RowChanged(this, new TableE18RowChangeEvent(((TableE18Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TableE18RowChanging != null)) {
                    this.TableE18RowChanging(this, new TableE18RowChangeEvent(((TableE18Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TableE18RowDeleted != null)) {
                    this.TableE18RowDeleted(this, new TableE18RowChangeEvent(((TableE18Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TableE18RowDeleting != null)) {
                    this.TableE18RowDeleting(this, new TableE18RowChangeEvent(((TableE18Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTableE18Row(TableE18Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StormwaterControlsDataSet ds = new StormwaterControlsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TableE18DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TableE19DataTable : global::System.Data.TypedTableBase<TableE19Row> {
            
            private global::System.Data.DataColumn columnNodeName;
            
            private global::System.Data.DataColumn columnInterfaceInflowCuFt;
            
            private global::System.Data.DataColumn columnInfiltrationVolumeCuFt;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE19DataTable() {
                this.TableName = "TableE19";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TableE19DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TableE19DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NodeNameColumn {
                get {
                    return this.columnNodeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InterfaceInflowCuFtColumn {
                get {
                    return this.columnInterfaceInflowCuFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfiltrationVolumeCuFtColumn {
                get {
                    return this.columnInfiltrationVolumeCuFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE19Row this[int index] {
                get {
                    return ((TableE19Row)(this.Rows[index]));
                }
            }
            
            public event TableE19RowChangeEventHandler TableE19RowChanging;
            
            public event TableE19RowChangeEventHandler TableE19RowChanged;
            
            public event TableE19RowChangeEventHandler TableE19RowDeleting;
            
            public event TableE19RowChangeEventHandler TableE19RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTableE19Row(TableE19Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE19Row AddTableE19Row(string NodeName, double InterfaceInflowCuFt, double InfiltrationVolumeCuFt) {
                TableE19Row rowTableE19Row = ((TableE19Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NodeName,
                        InterfaceInflowCuFt,
                        InfiltrationVolumeCuFt};
                rowTableE19Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTableE19Row);
                return rowTableE19Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE19Row FindByNodeName(string NodeName) {
                return ((TableE19Row)(this.Rows.Find(new object[] {
                            NodeName})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TableE19DataTable cln = ((TableE19DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TableE19DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNodeName = base.Columns["NodeName"];
                this.columnInterfaceInflowCuFt = base.Columns["InterfaceInflowCuFt"];
                this.columnInfiltrationVolumeCuFt = base.Columns["InfiltrationVolumeCuFt"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNodeName = new global::System.Data.DataColumn("NodeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNodeName);
                this.columnInterfaceInflowCuFt = new global::System.Data.DataColumn("InterfaceInflowCuFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInterfaceInflowCuFt);
                this.columnInfiltrationVolumeCuFt = new global::System.Data.DataColumn("InfiltrationVolumeCuFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfiltrationVolumeCuFt);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNodeName}, true));
                this.columnNodeName.AllowDBNull = false;
                this.columnNodeName.Unique = true;
                this.columnNodeName.MaxLength = 15;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE19Row NewTableE19Row() {
                return ((TableE19Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TableE19Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TableE19Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TableE19RowChanged != null)) {
                    this.TableE19RowChanged(this, new TableE19RowChangeEvent(((TableE19Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TableE19RowChanging != null)) {
                    this.TableE19RowChanging(this, new TableE19RowChangeEvent(((TableE19Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TableE19RowDeleted != null)) {
                    this.TableE19RowDeleted(this, new TableE19RowChangeEvent(((TableE19Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TableE19RowDeleting != null)) {
                    this.TableE19RowDeleting(this, new TableE19RowChangeEvent(((TableE19Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTableE19Row(TableE19Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StormwaterControlsDataSet ds = new StormwaterControlsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TableE19DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TableE03aDataTable : global::System.Data.TypedTableBase<TableE03aRow> {
            
            private global::System.Data.DataColumn columnnodeName;
            
            private global::System.Data.DataColumn columngroundElevFt;
            
            private global::System.Data.DataColumn columncrownElevFt;
            
            private global::System.Data.DataColumn columninvertElevFt;
            
            private global::System.Data.DataColumn columnqInstCfs;
            
            private global::System.Data.DataColumn columninitialDepthFt;
            
            private global::System.Data.DataColumn columninterfaceFlowPct;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE03aDataTable() {
                this.TableName = "TableE03a";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TableE03aDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TableE03aDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nodeNameColumn {
                get {
                    return this.columnnodeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn groundElevFtColumn {
                get {
                    return this.columngroundElevFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn crownElevFtColumn {
                get {
                    return this.columncrownElevFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invertElevFtColumn {
                get {
                    return this.columninvertElevFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn qInstCfsColumn {
                get {
                    return this.columnqInstCfs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn initialDepthFtColumn {
                get {
                    return this.columninitialDepthFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn interfaceFlowPctColumn {
                get {
                    return this.columninterfaceFlowPct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE03aRow this[int index] {
                get {
                    return ((TableE03aRow)(this.Rows[index]));
                }
            }
            
            public event TableE03aRowChangeEventHandler TableE03aRowChanging;
            
            public event TableE03aRowChangeEventHandler TableE03aRowChanged;
            
            public event TableE03aRowChangeEventHandler TableE03aRowDeleting;
            
            public event TableE03aRowChangeEventHandler TableE03aRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTableE03aRow(TableE03aRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE03aRow AddTableE03aRow(string nodeName, double groundElevFt, double crownElevFt, double invertElevFt, double qInstCfs, double initialDepthFt, double interfaceFlowPct) {
                TableE03aRow rowTableE03aRow = ((TableE03aRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        nodeName,
                        groundElevFt,
                        crownElevFt,
                        invertElevFt,
                        qInstCfs,
                        initialDepthFt,
                        interfaceFlowPct};
                rowTableE03aRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTableE03aRow);
                return rowTableE03aRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE03aRow FindBynodeName(string nodeName) {
                return ((TableE03aRow)(this.Rows.Find(new object[] {
                            nodeName})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TableE03aDataTable cln = ((TableE03aDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TableE03aDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnnodeName = base.Columns["nodeName"];
                this.columngroundElevFt = base.Columns["groundElevFt"];
                this.columncrownElevFt = base.Columns["crownElevFt"];
                this.columninvertElevFt = base.Columns["invertElevFt"];
                this.columnqInstCfs = base.Columns["qInstCfs"];
                this.columninitialDepthFt = base.Columns["initialDepthFt"];
                this.columninterfaceFlowPct = base.Columns["interfaceFlowPct"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnnodeName = new global::System.Data.DataColumn("nodeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnodeName);
                this.columngroundElevFt = new global::System.Data.DataColumn("groundElevFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngroundElevFt);
                this.columncrownElevFt = new global::System.Data.DataColumn("crownElevFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncrownElevFt);
                this.columninvertElevFt = new global::System.Data.DataColumn("invertElevFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvertElevFt);
                this.columnqInstCfs = new global::System.Data.DataColumn("qInstCfs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnqInstCfs);
                this.columninitialDepthFt = new global::System.Data.DataColumn("initialDepthFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninitialDepthFt);
                this.columninterfaceFlowPct = new global::System.Data.DataColumn("interfaceFlowPct", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninterfaceFlowPct);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnnodeName}, true));
                this.columnnodeName.AllowDBNull = false;
                this.columnnodeName.Unique = true;
                this.columnnodeName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE03aRow NewTableE03aRow() {
                return ((TableE03aRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TableE03aRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TableE03aRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TableE03aRowChanged != null)) {
                    this.TableE03aRowChanged(this, new TableE03aRowChangeEvent(((TableE03aRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TableE03aRowChanging != null)) {
                    this.TableE03aRowChanging(this, new TableE03aRowChangeEvent(((TableE03aRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TableE03aRowDeleted != null)) {
                    this.TableE03aRowDeleted(this, new TableE03aRowChangeEvent(((TableE03aRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TableE03aRowDeleting != null)) {
                    this.TableE03aRowDeleting(this, new TableE03aRowChangeEvent(((TableE03aRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTableE03aRow(TableE03aRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StormwaterControlsDataSet ds = new StormwaterControlsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TableE03aDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TableE03bDataTable : global::System.Data.TypedTableBase<TableE03bRow> {
            
            private global::System.Data.DataColumn columnnodeName;
            
            private global::System.Data.DataColumn columnxCoordFt;
            
            private global::System.Data.DataColumn columnyCoordFt;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE03bDataTable() {
                this.TableName = "TableE03b";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TableE03bDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TableE03bDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nodeNameColumn {
                get {
                    return this.columnnodeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xCoordFtColumn {
                get {
                    return this.columnxCoordFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yCoordFtColumn {
                get {
                    return this.columnyCoordFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE03bRow this[int index] {
                get {
                    return ((TableE03bRow)(this.Rows[index]));
                }
            }
            
            public event TableE03bRowChangeEventHandler TableE03bRowChanging;
            
            public event TableE03bRowChangeEventHandler TableE03bRowChanged;
            
            public event TableE03bRowChangeEventHandler TableE03bRowDeleting;
            
            public event TableE03bRowChangeEventHandler TableE03bRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTableE03bRow(TableE03bRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE03bRow AddTableE03bRow(string nodeName, double xCoordFt, double yCoordFt) {
                TableE03bRow rowTableE03bRow = ((TableE03bRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        nodeName,
                        xCoordFt,
                        yCoordFt};
                rowTableE03bRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTableE03bRow);
                return rowTableE03bRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TableE03bDataTable cln = ((TableE03bDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TableE03bDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnnodeName = base.Columns["nodeName"];
                this.columnxCoordFt = base.Columns["xCoordFt"];
                this.columnyCoordFt = base.Columns["yCoordFt"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnnodeName = new global::System.Data.DataColumn("nodeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnodeName);
                this.columnxCoordFt = new global::System.Data.DataColumn("xCoordFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxCoordFt);
                this.columnyCoordFt = new global::System.Data.DataColumn("yCoordFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyCoordFt);
                this.columnnodeName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE03bRow NewTableE03bRow() {
                return ((TableE03bRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TableE03bRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TableE03bRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TableE03bRowChanged != null)) {
                    this.TableE03bRowChanged(this, new TableE03bRowChangeEvent(((TableE03bRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TableE03bRowChanging != null)) {
                    this.TableE03bRowChanging(this, new TableE03bRowChangeEvent(((TableE03bRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TableE03bRowDeleted != null)) {
                    this.TableE03bRowDeleted(this, new TableE03bRowChangeEvent(((TableE03bRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TableE03bRowDeleting != null)) {
                    this.TableE03bRowDeleting(this, new TableE03bRowChangeEvent(((TableE03bRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTableE03bRow(TableE03bRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StormwaterControlsDataSet ds = new StormwaterControlsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TableE03bDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TableE22DataTable : global::System.Data.TypedTableBase<TableE22Row> {
            
            private global::System.Data.DataColumn columnoverallErrorPct;
            
            private global::System.Data.DataColumn columnworstNodeErrorPct;
            
            private global::System.Data.DataColumn columnworstNodalErrorNode;
            
            private global::System.Data.DataColumn columntotalInflowLossPct;
            
            private global::System.Data.DataColumn columnoveralllConinuityError;
            
            private global::System.Data.DataColumn columnefficiency;
            
            private global::System.Data.DataColumn columnefficiencyPct;
            
            private global::System.Data.DataColumn columnmostNodeNonConvergences;
            
            private global::System.Data.DataColumn columntotalNonConvergences;
            
            private global::System.Data.DataColumn columntotalNonConvergedNodes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE22DataTable() {
                this.TableName = "TableE22";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TableE22DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TableE22DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn overallErrorPctColumn {
                get {
                    return this.columnoverallErrorPct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn worstNodeErrorPctColumn {
                get {
                    return this.columnworstNodeErrorPct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn worstNodalErrorNodeColumn {
                get {
                    return this.columnworstNodalErrorNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalInflowLossPctColumn {
                get {
                    return this.columntotalInflowLossPct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn overalllConinuityErrorColumn {
                get {
                    return this.columnoveralllConinuityError;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn efficiencyColumn {
                get {
                    return this.columnefficiency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn efficiencyPctColumn {
                get {
                    return this.columnefficiencyPct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mostNodeNonConvergencesColumn {
                get {
                    return this.columnmostNodeNonConvergences;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalNonConvergencesColumn {
                get {
                    return this.columntotalNonConvergences;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalNonConvergedNodesColumn {
                get {
                    return this.columntotalNonConvergedNodes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE22Row this[int index] {
                get {
                    return ((TableE22Row)(this.Rows[index]));
                }
            }
            
            public event TableE22RowChangeEventHandler TableE22RowChanging;
            
            public event TableE22RowChangeEventHandler TableE22RowChanged;
            
            public event TableE22RowChangeEventHandler TableE22RowDeleting;
            
            public event TableE22RowChangeEventHandler TableE22RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTableE22Row(TableE22Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE22Row AddTableE22Row(double overallErrorPct, double worstNodeErrorPct, string worstNodalErrorNode, double totalInflowLossPct, string overalllConinuityError, string efficiency, double efficiencyPct, int mostNodeNonConvergences, int totalNonConvergences, int totalNonConvergedNodes) {
                TableE22Row rowTableE22Row = ((TableE22Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        overallErrorPct,
                        worstNodeErrorPct,
                        worstNodalErrorNode,
                        totalInflowLossPct,
                        overalllConinuityError,
                        efficiency,
                        efficiencyPct,
                        mostNodeNonConvergences,
                        totalNonConvergences,
                        totalNonConvergedNodes};
                rowTableE22Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTableE22Row);
                return rowTableE22Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TableE22DataTable cln = ((TableE22DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TableE22DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnoverallErrorPct = base.Columns["overallErrorPct"];
                this.columnworstNodeErrorPct = base.Columns["worstNodeErrorPct"];
                this.columnworstNodalErrorNode = base.Columns["worstNodalErrorNode"];
                this.columntotalInflowLossPct = base.Columns["totalInflowLossPct"];
                this.columnoveralllConinuityError = base.Columns["overalllConinuityError"];
                this.columnefficiency = base.Columns["efficiency"];
                this.columnefficiencyPct = base.Columns["efficiencyPct"];
                this.columnmostNodeNonConvergences = base.Columns["mostNodeNonConvergences"];
                this.columntotalNonConvergences = base.Columns["totalNonConvergences"];
                this.columntotalNonConvergedNodes = base.Columns["totalNonConvergedNodes"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnoverallErrorPct = new global::System.Data.DataColumn("overallErrorPct", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoverallErrorPct);
                this.columnworstNodeErrorPct = new global::System.Data.DataColumn("worstNodeErrorPct", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnworstNodeErrorPct);
                this.columnworstNodalErrorNode = new global::System.Data.DataColumn("worstNodalErrorNode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnworstNodalErrorNode);
                this.columntotalInflowLossPct = new global::System.Data.DataColumn("totalInflowLossPct", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalInflowLossPct);
                this.columnoveralllConinuityError = new global::System.Data.DataColumn("overalllConinuityError", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoveralllConinuityError);
                this.columnefficiency = new global::System.Data.DataColumn("efficiency", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnefficiency);
                this.columnefficiencyPct = new global::System.Data.DataColumn("efficiencyPct", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnefficiencyPct);
                this.columnmostNodeNonConvergences = new global::System.Data.DataColumn("mostNodeNonConvergences", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmostNodeNonConvergences);
                this.columntotalNonConvergences = new global::System.Data.DataColumn("totalNonConvergences", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalNonConvergences);
                this.columntotalNonConvergedNodes = new global::System.Data.DataColumn("totalNonConvergedNodes", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalNonConvergedNodes);
                this.columnworstNodalErrorNode.MaxLength = 50;
                this.columnoveralllConinuityError.MaxLength = 50;
                this.columnefficiency.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE22Row NewTableE22Row() {
                return ((TableE22Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TableE22Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TableE22Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TableE22RowChanged != null)) {
                    this.TableE22RowChanged(this, new TableE22RowChangeEvent(((TableE22Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TableE22RowChanging != null)) {
                    this.TableE22RowChanging(this, new TableE22RowChangeEvent(((TableE22Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TableE22RowDeleted != null)) {
                    this.TableE22RowDeleted(this, new TableE22RowChangeEvent(((TableE22Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TableE22RowDeleting != null)) {
                    this.TableE22RowDeleting(this, new TableE22RowChangeEvent(((TableE22Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTableE22Row(TableE22Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StormwaterControlsDataSet ds = new StormwaterControlsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TableE22DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TableE21DataTable : global::System.Data.TypedTableBase<TableE21Row> {
            
            private global::System.Data.DataColumn columnNodeName;
            
            private global::System.Data.DataColumn columnInflowVolumeCuFt;
            
            private global::System.Data.DataColumn columnAverageInflowCfs;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE21DataTable() {
                this.TableName = "TableE21";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TableE21DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TableE21DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NodeNameColumn {
                get {
                    return this.columnNodeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InflowVolumeCuFtColumn {
                get {
                    return this.columnInflowVolumeCuFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AverageInflowCfsColumn {
                get {
                    return this.columnAverageInflowCfs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE21Row this[int index] {
                get {
                    return ((TableE21Row)(this.Rows[index]));
                }
            }
            
            public event TableE21RowChangeEventHandler TableE21RowChanging;
            
            public event TableE21RowChangeEventHandler TableE21RowChanged;
            
            public event TableE21RowChangeEventHandler TableE21RowDeleting;
            
            public event TableE21RowChangeEventHandler TableE21RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTableE21Row(TableE21Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE21Row AddTableE21Row(string NodeName, double InflowVolumeCuFt, double AverageInflowCfs) {
                TableE21Row rowTableE21Row = ((TableE21Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NodeName,
                        InflowVolumeCuFt,
                        AverageInflowCfs};
                rowTableE21Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTableE21Row);
                return rowTableE21Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE21Row FindByNodeName(string NodeName) {
                return ((TableE21Row)(this.Rows.Find(new object[] {
                            NodeName})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TableE21DataTable cln = ((TableE21DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TableE21DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNodeName = base.Columns["NodeName"];
                this.columnInflowVolumeCuFt = base.Columns["InflowVolumeCuFt"];
                this.columnAverageInflowCfs = base.Columns["AverageInflowCfs"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNodeName = new global::System.Data.DataColumn("NodeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNodeName);
                this.columnInflowVolumeCuFt = new global::System.Data.DataColumn("InflowVolumeCuFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInflowVolumeCuFt);
                this.columnAverageInflowCfs = new global::System.Data.DataColumn("AverageInflowCfs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverageInflowCfs);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNodeName}, true));
                this.columnNodeName.AllowDBNull = false;
                this.columnNodeName.Unique = true;
                this.columnNodeName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE21Row NewTableE21Row() {
                return ((TableE21Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TableE21Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TableE21Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TableE21RowChanged != null)) {
                    this.TableE21RowChanged(this, new TableE21RowChangeEvent(((TableE21Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TableE21RowChanging != null)) {
                    this.TableE21RowChanging(this, new TableE21RowChangeEvent(((TableE21Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TableE21RowDeleted != null)) {
                    this.TableE21RowDeleted(this, new TableE21RowChangeEvent(((TableE21Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TableE21RowDeleting != null)) {
                    this.TableE21RowDeleting(this, new TableE21RowChangeEvent(((TableE21Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTableE21Row(TableE21Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StormwaterControlsDataSet ds = new StormwaterControlsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TableE21DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ICNodeRow : global::System.Data.DataRow {
            
            private ICNodeDataTable tableICNode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ICNodeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableICNode = ((ICNodeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RefNode {
                get {
                    try {
                        return ((string)(this[this.tableICNode.RefNodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RefNode\' in table \'ICNode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICNode.RefNodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RefX {
                get {
                    try {
                        return ((double)(this[this.tableICNode.RefXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RefX\' in table \'ICNode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICNode.RefXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RefY {
                get {
                    try {
                        return ((double)(this[this.tableICNode.RefYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RefY\' in table \'ICNode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICNode.RefYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RefGrelev {
                get {
                    try {
                        return ((double)(this[this.tableICNode.RefGrelevColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RefGrelev\' in table \'ICNode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICNode.RefGrelevColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FacVolCuFt {
                get {
                    try {
                        return ((double)(this[this.tableICNode.FacVolCuFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FacVolCuFt\' in table \'ICNode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICNode.FacVolCuFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PondingCuFt {
                get {
                    try {
                        return ((double)(this[this.tableICNode.PondingCuFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PondingCuFt\' in table \'ICNode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICNode.PondingCuFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double vFlowControl {
                get {
                    try {
                        return ((double)(this[this.tableICNode.vFlowControlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'vFlowControl\' in table \'ICNode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICNode.vFlowControlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Factype {
                get {
                    try {
                        return ((string)(this[this.tableICNode.FactypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Factype\' in table \'ICNode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICNode.FactypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FacNode {
                get {
                    return ((string)(this[this.tableICNode.FacNodeColumn]));
                }
                set {
                    this[this.tableICNode.FacNodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FacX {
                get {
                    try {
                        return ((int)(this[this.tableICNode.FacXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FacX\' in table \'ICNode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICNode.FacXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FacY {
                get {
                    try {
                        return ((int)(this[this.tableICNode.FacYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FacY\' in table \'ICNode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICNode.FacYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OutfallNode {
                get {
                    try {
                        return ((string)(this[this.tableICNode.OutfallNodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OutfallNode\' in table \'ICNode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICNode.OutfallNodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OFX {
                get {
                    try {
                        return ((int)(this[this.tableICNode.OFXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OFX\' in table \'ICNode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICNode.OFXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OFY {
                get {
                    try {
                        return ((int)(this[this.tableICNode.OFYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OFY\' in table \'ICNode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICNode.OFYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double InfilFactor {
                get {
                    try {
                        return ((double)(this[this.tableICNode.InfilFactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfilFactor\' in table \'ICNode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICNode.InfilFactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Infilcfs {
                get {
                    try {
                        return ((double)(this[this.tableICNode.InfilcfsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Infilcfs\' in table \'ICNode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICNode.InfilcfsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Roughness {
                get {
                    try {
                        return ((double)(this[this.tableICNode.RoughnessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Roughness\' in table \'ICNode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICNode.RoughnessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Include {
                get {
                    try {
                        return ((string)(this[this.tableICNode.IncludeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Include\' in table \'ICNode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableICNode.IncludeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRefNodeNull() {
                return this.IsNull(this.tableICNode.RefNodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRefNodeNull() {
                this[this.tableICNode.RefNodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRefXNull() {
                return this.IsNull(this.tableICNode.RefXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRefXNull() {
                this[this.tableICNode.RefXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRefYNull() {
                return this.IsNull(this.tableICNode.RefYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRefYNull() {
                this[this.tableICNode.RefYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRefGrelevNull() {
                return this.IsNull(this.tableICNode.RefGrelevColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRefGrelevNull() {
                this[this.tableICNode.RefGrelevColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFacVolCuFtNull() {
                return this.IsNull(this.tableICNode.FacVolCuFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFacVolCuFtNull() {
                this[this.tableICNode.FacVolCuFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPondingCuFtNull() {
                return this.IsNull(this.tableICNode.PondingCuFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPondingCuFtNull() {
                this[this.tableICNode.PondingCuFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvFlowControlNull() {
                return this.IsNull(this.tableICNode.vFlowControlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvFlowControlNull() {
                this[this.tableICNode.vFlowControlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFactypeNull() {
                return this.IsNull(this.tableICNode.FactypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFactypeNull() {
                this[this.tableICNode.FactypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFacXNull() {
                return this.IsNull(this.tableICNode.FacXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFacXNull() {
                this[this.tableICNode.FacXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFacYNull() {
                return this.IsNull(this.tableICNode.FacYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFacYNull() {
                this[this.tableICNode.FacYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOutfallNodeNull() {
                return this.IsNull(this.tableICNode.OutfallNodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOutfallNodeNull() {
                this[this.tableICNode.OutfallNodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOFXNull() {
                return this.IsNull(this.tableICNode.OFXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOFXNull() {
                this[this.tableICNode.OFXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOFYNull() {
                return this.IsNull(this.tableICNode.OFYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOFYNull() {
                this[this.tableICNode.OFYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfilFactorNull() {
                return this.IsNull(this.tableICNode.InfilFactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfilFactorNull() {
                this[this.tableICNode.InfilFactorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfilcfsNull() {
                return this.IsNull(this.tableICNode.InfilcfsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfilcfsNull() {
                this[this.tableICNode.InfilcfsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoughnessNull() {
                return this.IsNull(this.tableICNode.RoughnessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRoughnessNull() {
                this[this.tableICNode.RoughnessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncludeNull() {
                return this.IsNull(this.tableICNode.IncludeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncludeNull() {
                this[this.tableICNode.IncludeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class mdl_SurfSC_acRow : global::System.Data.DataRow {
            
            private mdl_SurfSC_acDataTable tablemdl_SurfSC_ac;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal mdl_SurfSC_acRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemdl_SurfSC_ac = ((mdl_SurfSC_acDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MAPINFO_ID {
                get {
                    return ((int)(this[this.tablemdl_SurfSC_ac.MAPINFO_IDColumn]));
                }
                set {
                    this[this.tablemdl_SurfSC_ac.MAPINFO_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurfSCID {
                get {
                    try {
                        return ((int)(this[this.tablemdl_SurfSC_ac.SurfSCIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurfSCID\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.SurfSCIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NGTO {
                get {
                    try {
                        return ((string)(this[this.tablemdl_SurfSC_ac.NGTOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NGTO\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.NGTOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Slope {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.SlopeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Slope\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.SlopeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FlowLengthFt {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.FlowLengthFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowLengthFt\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.FlowLengthFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double dH {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.dHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dH\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.dHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Imp_n {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.Imp_nColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Imp_n\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.Imp_nColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Per_n {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.Per_nColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Per_n\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.Per_nColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Imp_sto {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.Imp_stoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Imp_sto\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.Imp_stoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Per_sto {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.Per_stoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Per_sto\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.Per_stoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Suct {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.SuctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Suct\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.SuctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Hydcon {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.HydconColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hydcon\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.HydconColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SMDMax {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.SMDMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SMDMax\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.SMDMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool issumped {
                get {
                    try {
                        return ((bool)(this[this.tablemdl_SurfSC_ac.issumpedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'issumped\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.issumpedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double totalgrossacres {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.totalgrossacresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'totalgrossacres\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.totalgrossacresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double paveacres {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.paveacresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'paveacres\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.paveacresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SWacres {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.SWacresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SWacres\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.SWacresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SWAcresOther {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.SWAcresOtherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SWAcresOther\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.SWAcresOtherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SWfactor {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.SWfactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SWfactor\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.SWfactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PaveTreeAcres {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.PaveTreeAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaveTreeAcres\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.PaveTreeAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TraceVisit {
                get {
                    try {
                        return ((string)(this[this.tablemdl_SurfSC_ac.TraceVisitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TraceVisit\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.TraceVisitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UpdateAtts {
                get {
                    try {
                        return ((bool)(this[this.tablemdl_SurfSC_ac.UpdateAttsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdateAtts\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.UpdateAttsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataSource {
                get {
                    try {
                        return ((string)(this[this.tablemdl_SurfSC_ac.DataSourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataSource\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.DataSourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ROWAcres {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.ROWAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ROWAcres\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.ROWAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ROWAcresOther {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.ROWAcresOtherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ROWAcresOther\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.ROWAcresOtherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double c_RFgrossacres {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.c_RFgrossacresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'c_RFgrossacres\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.c_RFgrossacresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double c_RFtosurfacres {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.c_RFtosurfacresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'c_RFtosurfacres\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.c_RFtosurfacresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double c_RFtosurfIMPacres {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.c_RFtosurfIMPacresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'c_RFtosurfIMPacres\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.c_RFtosurfIMPacresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double c_PKgrossacres {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.c_PKgrossacresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'c_PKgrossacres\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.c_PKgrossacresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double c_PKtosurfacres {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.c_PKtosurfacresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'c_PKtosurfacres\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.c_PKtosurfacresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double c_PKtosurfIMPacres {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.c_PKtosurfIMPacresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'c_PKtosurfIMPacres\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.c_PKtosurfIMPacresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double c_netacres {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.c_netacresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'c_netacres\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.c_netacresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double c_netIMPacres {
                get {
                    try {
                        return ((double)(this[this.tablemdl_SurfSC_ac.c_netIMPacresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'c_netIMPacres\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.c_netIMPacresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tablemdl_SurfSC_ac.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'mdl_SurfSC_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_SurfSC_ac.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurfSCIDNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.SurfSCIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurfSCIDNull() {
                this[this.tablemdl_SurfSC_ac.SurfSCIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNGTONull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.NGTOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNGTONull() {
                this[this.tablemdl_SurfSC_ac.NGTOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSlopeNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.SlopeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSlopeNull() {
                this[this.tablemdl_SurfSC_ac.SlopeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowLengthFtNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.FlowLengthFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowLengthFtNull() {
                this[this.tablemdl_SurfSC_ac.FlowLengthFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdHNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.dHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdHNull() {
                this[this.tablemdl_SurfSC_ac.dHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImp_nNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.Imp_nColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImp_nNull() {
                this[this.tablemdl_SurfSC_ac.Imp_nColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPer_nNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.Per_nColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPer_nNull() {
                this[this.tablemdl_SurfSC_ac.Per_nColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImp_stoNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.Imp_stoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImp_stoNull() {
                this[this.tablemdl_SurfSC_ac.Imp_stoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPer_stoNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.Per_stoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPer_stoNull() {
                this[this.tablemdl_SurfSC_ac.Per_stoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSuctNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.SuctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSuctNull() {
                this[this.tablemdl_SurfSC_ac.SuctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHydconNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.HydconColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHydconNull() {
                this[this.tablemdl_SurfSC_ac.HydconColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSMDMaxNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.SMDMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSMDMaxNull() {
                this[this.tablemdl_SurfSC_ac.SMDMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsissumpedNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.issumpedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetissumpedNull() {
                this[this.tablemdl_SurfSC_ac.issumpedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalgrossacresNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.totalgrossacresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalgrossacresNull() {
                this[this.tablemdl_SurfSC_ac.totalgrossacresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspaveacresNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.paveacresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpaveacresNull() {
                this[this.tablemdl_SurfSC_ac.paveacresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSWacresNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.SWacresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSWacresNull() {
                this[this.tablemdl_SurfSC_ac.SWacresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSWAcresOtherNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.SWAcresOtherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSWAcresOtherNull() {
                this[this.tablemdl_SurfSC_ac.SWAcresOtherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSWfactorNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.SWfactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSWfactorNull() {
                this[this.tablemdl_SurfSC_ac.SWfactorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaveTreeAcresNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.PaveTreeAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaveTreeAcresNull() {
                this[this.tablemdl_SurfSC_ac.PaveTreeAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTraceVisitNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.TraceVisitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTraceVisitNull() {
                this[this.tablemdl_SurfSC_ac.TraceVisitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdateAttsNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.UpdateAttsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdateAttsNull() {
                this[this.tablemdl_SurfSC_ac.UpdateAttsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataSourceNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.DataSourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataSourceNull() {
                this[this.tablemdl_SurfSC_ac.DataSourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsROWAcresNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.ROWAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetROWAcresNull() {
                this[this.tablemdl_SurfSC_ac.ROWAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsROWAcresOtherNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.ROWAcresOtherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetROWAcresOtherNull() {
                this[this.tablemdl_SurfSC_ac.ROWAcresOtherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isc_RFgrossacresNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.c_RFgrossacresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setc_RFgrossacresNull() {
                this[this.tablemdl_SurfSC_ac.c_RFgrossacresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isc_RFtosurfacresNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.c_RFtosurfacresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setc_RFtosurfacresNull() {
                this[this.tablemdl_SurfSC_ac.c_RFtosurfacresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isc_RFtosurfIMPacresNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.c_RFtosurfIMPacresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setc_RFtosurfIMPacresNull() {
                this[this.tablemdl_SurfSC_ac.c_RFtosurfIMPacresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isc_PKgrossacresNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.c_PKgrossacresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setc_PKgrossacresNull() {
                this[this.tablemdl_SurfSC_ac.c_PKgrossacresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isc_PKtosurfacresNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.c_PKtosurfacresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setc_PKtosurfacresNull() {
                this[this.tablemdl_SurfSC_ac.c_PKtosurfacresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isc_PKtosurfIMPacresNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.c_PKtosurfIMPacresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setc_PKtosurfIMPacresNull() {
                this[this.tablemdl_SurfSC_ac.c_PKtosurfIMPacresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isc_netacresNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.c_netacresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setc_netacresNull() {
                this[this.tablemdl_SurfSC_ac.c_netacresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isc_netIMPacresNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.c_netIMPacresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setc_netIMPacresNull() {
                this[this.tablemdl_SurfSC_ac.c_netIMPacresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tablemdl_SurfSC_ac.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tablemdl_SurfSC_ac.IsActiveColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ic_StreetTargetsRow : global::System.Data.DataRow {
            
            private ic_StreetTargetsDataTable tableic_StreetTargets;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ic_StreetTargetsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableic_StreetTargets = ((ic_StreetTargetsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MAPINFO_ID {
                get {
                    return ((int)(this[this.tableic_StreetTargets.MAPINFO_IDColumn]));
                }
                set {
                    this[this.tableic_StreetTargets.MAPINFO_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int icID {
                get {
                    try {
                        return ((int)(this[this.tableic_StreetTargets.icIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'icID\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.icIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sICID {
                get {
                    try {
                        return ((string)(this[this.tableic_StreetTargets.sICIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sICID\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.sICIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nGTOStreet {
                get {
                    try {
                        return ((string)(this[this.tableic_StreetTargets.nGTOStreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nGTOStreet\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.nGTOStreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int surfSCID {
                get {
                    try {
                        return ((int)(this[this.tableic_StreetTargets.surfSCIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'surfSCID\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.surfSCIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string evaluation {
                get {
                    try {
                        return ((string)(this[this.tableic_StreetTargets.evaluationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'evaluation\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.evaluationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string comments {
                get {
                    try {
                        return ((string)(this[this.tableic_StreetTargets.commentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'comments\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.commentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    try {
                        return ((string)(this[this.tableic_StreetTargets.typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'type\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double streetArea {
                get {
                    try {
                        return ((double)(this[this.tableic_StreetTargets.streetAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'streetArea\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.streetAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double flowControl {
                get {
                    try {
                        return ((double)(this[this.tableic_StreetTargets.flowControlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'flowControl\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.flowControlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string intersection {
                get {
                    try {
                        return ((string)(this[this.tableic_StreetTargets.intersectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'intersection\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.intersectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string corner {
                get {
                    try {
                        return ((string)(this[this.tableic_StreetTargets.cornerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'corner\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.cornerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string street1 {
                get {
                    try {
                        return ((string)(this[this.tableic_StreetTargets.street1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'street1\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.street1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int street1Area {
                get {
                    try {
                        return ((int)(this[this.tableic_StreetTargets.street1AreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'street1Area\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.street1AreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short street1CExtVol {
                get {
                    try {
                        return ((short)(this[this.tableic_StreetTargets.street1CExtVolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'street1CExtVol\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.street1CExtVolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double street1CExtFlow {
                get {
                    try {
                        return ((double)(this[this.tableic_StreetTargets.street1CExtFlowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'street1CExtFlow\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.street1CExtFlowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string street2 {
                get {
                    try {
                        return ((string)(this[this.tableic_StreetTargets.street2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'street2\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.street2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int street2Area {
                get {
                    try {
                        return ((int)(this[this.tableic_StreetTargets.street2AreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'street2Area\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.street2AreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short street2CExtVol {
                get {
                    try {
                        return ((short)(this[this.tableic_StreetTargets.street2CExtVolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'street2CExtVol\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.street2CExtVolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double street2CExtFlow {
                get {
                    try {
                        return ((double)(this[this.tableic_StreetTargets.street2CExtFlowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'street2CExtFlow\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.street2CExtFlowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int orificeArea {
                get {
                    try {
                        return ((int)(this[this.tableic_StreetTargets.orificeAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'orificeArea\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.orificeAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int curbExtensionArea {
                get {
                    try {
                        return ((int)(this[this.tableic_StreetTargets.curbExtensionAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'curbExtensionArea\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.curbExtensionAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short pondingVol {
                get {
                    try {
                        return ((short)(this[this.tableic_StreetTargets.pondingVolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pondingVol\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.pondingVolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short curbExtensionVol {
                get {
                    try {
                        return ((short)(this[this.tableic_StreetTargets.curbExtensionVolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'curbExtensionVol\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.curbExtensionVolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string comments2 {
                get {
                    try {
                        return ((string)(this[this.tableic_StreetTargets.comments2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'comments2\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.comments2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string typeCode {
                get {
                    try {
                        return ((string)(this[this.tableic_StreetTargets.typeCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'typeCode\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.typeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string XPSWMM_Name {
                get {
                    if (this.IsXPSWMM_NameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableic_StreetTargets.XPSWMM_NameColumn]));
                    }
                }
                set {
                    this[this.tableic_StreetTargets.XPSWMM_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int xCoord {
                get {
                    try {
                        return ((int)(this[this.tableic_StreetTargets.xCoordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xCoord\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.xCoordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int yCoord {
                get {
                    try {
                        return ((int)(this[this.tableic_StreetTargets.yCoordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'yCoord\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.yCoordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool buildModelIC {
                get {
                    try {
                        return ((bool)(this[this.tableic_StreetTargets.buildModelICColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'buildModelIC\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.buildModelICColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string source {
                get {
                    try {
                        return ((string)(this[this.tableic_StreetTargets.sourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'source\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.sourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string appendDate {
                get {
                    try {
                        return ((string)(this[this.tableic_StreetTargets.appendDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'appendDate\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.appendDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int constructed {
                get {
                    try {
                        return ((int)(this[this.tableic_StreetTargets.constructedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'constructed\' in table \'ic_StreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_StreetTargets.constructedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsicIDNull() {
                return this.IsNull(this.tableic_StreetTargets.icIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeticIDNull() {
                this[this.tableic_StreetTargets.icIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssICIDNull() {
                return this.IsNull(this.tableic_StreetTargets.sICIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsICIDNull() {
                this[this.tableic_StreetTargets.sICIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnGTOStreetNull() {
                return this.IsNull(this.tableic_StreetTargets.nGTOStreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnGTOStreetNull() {
                this[this.tableic_StreetTargets.nGTOStreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssurfSCIDNull() {
                return this.IsNull(this.tableic_StreetTargets.surfSCIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsurfSCIDNull() {
                this[this.tableic_StreetTargets.surfSCIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsevaluationNull() {
                return this.IsNull(this.tableic_StreetTargets.evaluationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetevaluationNull() {
                this[this.tableic_StreetTargets.evaluationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscommentsNull() {
                return this.IsNull(this.tableic_StreetTargets.commentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcommentsNull() {
                this[this.tableic_StreetTargets.commentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypeNull() {
                return this.IsNull(this.tableic_StreetTargets.typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypeNull() {
                this[this.tableic_StreetTargets.typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstreetAreaNull() {
                return this.IsNull(this.tableic_StreetTargets.streetAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstreetAreaNull() {
                this[this.tableic_StreetTargets.streetAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsflowControlNull() {
                return this.IsNull(this.tableic_StreetTargets.flowControlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetflowControlNull() {
                this[this.tableic_StreetTargets.flowControlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsintersectionNull() {
                return this.IsNull(this.tableic_StreetTargets.intersectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetintersectionNull() {
                this[this.tableic_StreetTargets.intersectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscornerNull() {
                return this.IsNull(this.tableic_StreetTargets.cornerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcornerNull() {
                this[this.tableic_StreetTargets.cornerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstreet1Null() {
                return this.IsNull(this.tableic_StreetTargets.street1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstreet1Null() {
                this[this.tableic_StreetTargets.street1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstreet1AreaNull() {
                return this.IsNull(this.tableic_StreetTargets.street1AreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstreet1AreaNull() {
                this[this.tableic_StreetTargets.street1AreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstreet1CExtVolNull() {
                return this.IsNull(this.tableic_StreetTargets.street1CExtVolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstreet1CExtVolNull() {
                this[this.tableic_StreetTargets.street1CExtVolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstreet1CExtFlowNull() {
                return this.IsNull(this.tableic_StreetTargets.street1CExtFlowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstreet1CExtFlowNull() {
                this[this.tableic_StreetTargets.street1CExtFlowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstreet2Null() {
                return this.IsNull(this.tableic_StreetTargets.street2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstreet2Null() {
                this[this.tableic_StreetTargets.street2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstreet2AreaNull() {
                return this.IsNull(this.tableic_StreetTargets.street2AreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstreet2AreaNull() {
                this[this.tableic_StreetTargets.street2AreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstreet2CExtVolNull() {
                return this.IsNull(this.tableic_StreetTargets.street2CExtVolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstreet2CExtVolNull() {
                this[this.tableic_StreetTargets.street2CExtVolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstreet2CExtFlowNull() {
                return this.IsNull(this.tableic_StreetTargets.street2CExtFlowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstreet2CExtFlowNull() {
                this[this.tableic_StreetTargets.street2CExtFlowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsorificeAreaNull() {
                return this.IsNull(this.tableic_StreetTargets.orificeAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetorificeAreaNull() {
                this[this.tableic_StreetTargets.orificeAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscurbExtensionAreaNull() {
                return this.IsNull(this.tableic_StreetTargets.curbExtensionAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcurbExtensionAreaNull() {
                this[this.tableic_StreetTargets.curbExtensionAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspondingVolNull() {
                return this.IsNull(this.tableic_StreetTargets.pondingVolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpondingVolNull() {
                this[this.tableic_StreetTargets.pondingVolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscurbExtensionVolNull() {
                return this.IsNull(this.tableic_StreetTargets.curbExtensionVolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcurbExtensionVolNull() {
                this[this.tableic_StreetTargets.curbExtensionVolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscomments2Null() {
                return this.IsNull(this.tableic_StreetTargets.comments2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcomments2Null() {
                this[this.tableic_StreetTargets.comments2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypeCodeNull() {
                return this.IsNull(this.tableic_StreetTargets.typeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypeCodeNull() {
                this[this.tableic_StreetTargets.typeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXPSWMM_NameNull() {
                return this.IsNull(this.tableic_StreetTargets.XPSWMM_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXPSWMM_NameNull() {
                this[this.tableic_StreetTargets.XPSWMM_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxCoordNull() {
                return this.IsNull(this.tableic_StreetTargets.xCoordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxCoordNull() {
                this[this.tableic_StreetTargets.xCoordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsyCoordNull() {
                return this.IsNull(this.tableic_StreetTargets.yCoordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetyCoordNull() {
                this[this.tableic_StreetTargets.yCoordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbuildModelICNull() {
                return this.IsNull(this.tableic_StreetTargets.buildModelICColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbuildModelICNull() {
                this[this.tableic_StreetTargets.buildModelICColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssourceNull() {
                return this.IsNull(this.tableic_StreetTargets.sourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsourceNull() {
                this[this.tableic_StreetTargets.sourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsappendDateNull() {
                return this.IsNull(this.tableic_StreetTargets.appendDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetappendDateNull() {
                this[this.tableic_StreetTargets.appendDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconstructedNull() {
                return this.IsNull(this.tableic_StreetTargets.constructedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconstructedNull() {
                this[this.tableic_StreetTargets.constructedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ic_RoofTargetsRow : global::System.Data.DataRow {
            
            private ic_RoofTargetsDataTable tableic_RoofTargets;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ic_RoofTargetsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableic_RoofTargets = ((ic_RoofTargetsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MAPINFO_ID {
                get {
                    return ((int)(this[this.tableic_RoofTargets.MAPINFO_IDColumn]));
                }
                set {
                    this[this.tableic_RoofTargets.MAPINFO_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int icID {
                get {
                    try {
                        return ((int)(this[this.tableic_RoofTargets.icIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'icID\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.icIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rICID {
                get {
                    try {
                        return ((string)(this[this.tableic_RoofTargets.rICIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rICID\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.rICIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int parcelID {
                get {
                    try {
                        return ((int)(this[this.tableic_RoofTargets.parcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'parcelID\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.parcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short divideID {
                get {
                    try {
                        return ((short)(this[this.tableic_RoofTargets.divideIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'divideID\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.divideIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dscID {
                get {
                    try {
                        return ((int)(this[this.tableic_RoofTargets.dscIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dscID\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.dscIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nGTORoof {
                get {
                    try {
                        return ((string)(this[this.tableic_RoofTargets.nGTORoofColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nGTORoof\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.nGTORoofColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int exICFtRoof {
                get {
                    try {
                        return ((int)(this[this.tableic_RoofTargets.exICFtRoofColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'exICFtRoof\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.exICFtRoofColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int exRfAreaFt {
                get {
                    try {
                        return ((int)(this[this.tableic_RoofTargets.exRfAreaFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'exRfAreaFt\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.exRfAreaFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool externalDS {
                get {
                    try {
                        return ((bool)(this[this.tableic_RoofTargets.externalDSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'externalDS\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.externalDSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short dsTotal {
                get {
                    try {
                        return ((short)(this[this.tableic_RoofTargets.dsTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dsTotal\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.dsTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short extoVeg {
                get {
                    try {
                        return ((short)(this[this.tableic_RoofTargets.extoVegColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'extoVeg\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.extoVegColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short extoStreet {
                get {
                    try {
                        return ((short)(this[this.tableic_RoofTargets.extoStreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'extoStreet\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.extoStreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short extoPlanter {
                get {
                    try {
                        return ((short)(this[this.tableic_RoofTargets.extoPlanterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'extoPlanter\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.extoPlanterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short extoBioretention {
                get {
                    try {
                        return ((short)(this[this.tableic_RoofTargets.extoBioretentionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'extoBioretention\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.extoBioretentionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short extoDrywell {
                get {
                    try {
                        return ((short)(this[this.tableic_RoofTargets.extoDrywellColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'extoDrywell\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.extoDrywellColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short extoEcoroof {
                get {
                    try {
                        return ((short)(this[this.tableic_RoofTargets.extoEcoroofColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'extoEcoroof\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.extoEcoroofColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short dstoVeg {
                get {
                    try {
                        return ((short)(this[this.tableic_RoofTargets.dstoVegColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dstoVeg\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.dstoVegColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short dstoStreet {
                get {
                    try {
                        return ((short)(this[this.tableic_RoofTargets.dstoStreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dstoStreet\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.dstoStreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short dstoPlanter {
                get {
                    try {
                        return ((short)(this[this.tableic_RoofTargets.dstoPlanterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dstoPlanter\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.dstoPlanterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short dstoBioretention {
                get {
                    try {
                        return ((short)(this[this.tableic_RoofTargets.dstoBioretentionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dstoBioretention\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.dstoBioretentionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short dstoDrywell {
                get {
                    try {
                        return ((short)(this[this.tableic_RoofTargets.dstoDrywellColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dstoDrywell\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.dstoDrywellColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short dstoEcoroof {
                get {
                    try {
                        return ((short)(this[this.tableic_RoofTargets.dstoEcoroofColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dstoEcoroof\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.dstoEcoroofColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short dsUncontrollable {
                get {
                    try {
                        return ((short)(this[this.tableic_RoofTargets.dsUncontrollableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dsUncontrollable\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.dsUncontrollableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool landscapeAvailable {
                get {
                    try {
                        return ((bool)(this[this.tableic_RoofTargets.landscapeAvailableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'landscapeAvailable\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.landscapeAvailableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double fractionDrained {
                get {
                    try {
                        return ((double)(this[this.tableic_RoofTargets.fractionDrainedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fractionDrained\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.fractionDrainedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short difficulty {
                get {
                    try {
                        return ((short)(this[this.tableic_RoofTargets.difficultyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'difficulty\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.difficultyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double roofEffDisc {
                get {
                    try {
                        return ((double)(this[this.tableic_RoofTargets.roofEffDiscColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'roofEffDisc\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.roofEffDiscColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string comments {
                get {
                    try {
                        return ((string)(this[this.tableic_RoofTargets.commentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'comments\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.commentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool plantersOK {
                get {
                    try {
                        return ((bool)(this[this.tableic_RoofTargets.plantersOKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'plantersOK\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.plantersOKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool bioretentionOK {
                get {
                    try {
                        return ((bool)(this[this.tableic_RoofTargets.bioretentionOKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'bioretentionOK\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.bioretentionOKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool buildModelIC {
                get {
                    try {
                        return ((bool)(this[this.tableic_RoofTargets.buildModelICColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'buildModelIC\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.buildModelICColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string source {
                get {
                    try {
                        return ((string)(this[this.tableic_RoofTargets.sourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'source\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.sourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string appendDate {
                get {
                    try {
                        return ((string)(this[this.tableic_RoofTargets.appendDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'appendDate\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.appendDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int constructed {
                get {
                    try {
                        return ((int)(this[this.tableic_RoofTargets.constructedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'constructed\' in table \'ic_RoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_RoofTargets.constructedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsicIDNull() {
                return this.IsNull(this.tableic_RoofTargets.icIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeticIDNull() {
                this[this.tableic_RoofTargets.icIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrICIDNull() {
                return this.IsNull(this.tableic_RoofTargets.rICIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrICIDNull() {
                this[this.tableic_RoofTargets.rICIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsparcelIDNull() {
                return this.IsNull(this.tableic_RoofTargets.parcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetparcelIDNull() {
                this[this.tableic_RoofTargets.parcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdivideIDNull() {
                return this.IsNull(this.tableic_RoofTargets.divideIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdivideIDNull() {
                this[this.tableic_RoofTargets.divideIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdscIDNull() {
                return this.IsNull(this.tableic_RoofTargets.dscIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdscIDNull() {
                this[this.tableic_RoofTargets.dscIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnGTORoofNull() {
                return this.IsNull(this.tableic_RoofTargets.nGTORoofColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnGTORoofNull() {
                this[this.tableic_RoofTargets.nGTORoofColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexICFtRoofNull() {
                return this.IsNull(this.tableic_RoofTargets.exICFtRoofColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexICFtRoofNull() {
                this[this.tableic_RoofTargets.exICFtRoofColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexRfAreaFtNull() {
                return this.IsNull(this.tableic_RoofTargets.exRfAreaFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexRfAreaFtNull() {
                this[this.tableic_RoofTargets.exRfAreaFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexternalDSNull() {
                return this.IsNull(this.tableic_RoofTargets.externalDSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexternalDSNull() {
                this[this.tableic_RoofTargets.externalDSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdsTotalNull() {
                return this.IsNull(this.tableic_RoofTargets.dsTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdsTotalNull() {
                this[this.tableic_RoofTargets.dsTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsextoVegNull() {
                return this.IsNull(this.tableic_RoofTargets.extoVegColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetextoVegNull() {
                this[this.tableic_RoofTargets.extoVegColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsextoStreetNull() {
                return this.IsNull(this.tableic_RoofTargets.extoStreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetextoStreetNull() {
                this[this.tableic_RoofTargets.extoStreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsextoPlanterNull() {
                return this.IsNull(this.tableic_RoofTargets.extoPlanterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetextoPlanterNull() {
                this[this.tableic_RoofTargets.extoPlanterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsextoBioretentionNull() {
                return this.IsNull(this.tableic_RoofTargets.extoBioretentionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetextoBioretentionNull() {
                this[this.tableic_RoofTargets.extoBioretentionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsextoDrywellNull() {
                return this.IsNull(this.tableic_RoofTargets.extoDrywellColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetextoDrywellNull() {
                this[this.tableic_RoofTargets.extoDrywellColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsextoEcoroofNull() {
                return this.IsNull(this.tableic_RoofTargets.extoEcoroofColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetextoEcoroofNull() {
                this[this.tableic_RoofTargets.extoEcoroofColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdstoVegNull() {
                return this.IsNull(this.tableic_RoofTargets.dstoVegColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdstoVegNull() {
                this[this.tableic_RoofTargets.dstoVegColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdstoStreetNull() {
                return this.IsNull(this.tableic_RoofTargets.dstoStreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdstoStreetNull() {
                this[this.tableic_RoofTargets.dstoStreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdstoPlanterNull() {
                return this.IsNull(this.tableic_RoofTargets.dstoPlanterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdstoPlanterNull() {
                this[this.tableic_RoofTargets.dstoPlanterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdstoBioretentionNull() {
                return this.IsNull(this.tableic_RoofTargets.dstoBioretentionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdstoBioretentionNull() {
                this[this.tableic_RoofTargets.dstoBioretentionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdstoDrywellNull() {
                return this.IsNull(this.tableic_RoofTargets.dstoDrywellColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdstoDrywellNull() {
                this[this.tableic_RoofTargets.dstoDrywellColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdstoEcoroofNull() {
                return this.IsNull(this.tableic_RoofTargets.dstoEcoroofColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdstoEcoroofNull() {
                this[this.tableic_RoofTargets.dstoEcoroofColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdsUncontrollableNull() {
                return this.IsNull(this.tableic_RoofTargets.dsUncontrollableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdsUncontrollableNull() {
                this[this.tableic_RoofTargets.dsUncontrollableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslandscapeAvailableNull() {
                return this.IsNull(this.tableic_RoofTargets.landscapeAvailableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlandscapeAvailableNull() {
                this[this.tableic_RoofTargets.landscapeAvailableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfractionDrainedNull() {
                return this.IsNull(this.tableic_RoofTargets.fractionDrainedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfractionDrainedNull() {
                this[this.tableic_RoofTargets.fractionDrainedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdifficultyNull() {
                return this.IsNull(this.tableic_RoofTargets.difficultyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdifficultyNull() {
                this[this.tableic_RoofTargets.difficultyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsroofEffDiscNull() {
                return this.IsNull(this.tableic_RoofTargets.roofEffDiscColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetroofEffDiscNull() {
                this[this.tableic_RoofTargets.roofEffDiscColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscommentsNull() {
                return this.IsNull(this.tableic_RoofTargets.commentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcommentsNull() {
                this[this.tableic_RoofTargets.commentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsplantersOKNull() {
                return this.IsNull(this.tableic_RoofTargets.plantersOKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetplantersOKNull() {
                this[this.tableic_RoofTargets.plantersOKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbioretentionOKNull() {
                return this.IsNull(this.tableic_RoofTargets.bioretentionOKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbioretentionOKNull() {
                this[this.tableic_RoofTargets.bioretentionOKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbuildModelICNull() {
                return this.IsNull(this.tableic_RoofTargets.buildModelICColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbuildModelICNull() {
                this[this.tableic_RoofTargets.buildModelICColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssourceNull() {
                return this.IsNull(this.tableic_RoofTargets.sourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsourceNull() {
                this[this.tableic_RoofTargets.sourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsappendDateNull() {
                return this.IsNull(this.tableic_RoofTargets.appendDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetappendDateNull() {
                this[this.tableic_RoofTargets.appendDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconstructedNull() {
                return this.IsNull(this.tableic_RoofTargets.constructedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconstructedNull() {
                this[this.tableic_RoofTargets.constructedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ic_ParkingTargetsRow : global::System.Data.DataRow {
            
            private ic_ParkingTargetsDataTable tableic_ParkingTargets;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ic_ParkingTargetsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableic_ParkingTargets = ((ic_ParkingTargetsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MAPINFO_ID {
                get {
                    return ((int)(this[this.tableic_ParkingTargets.MAPINFO_IDColumn]));
                }
                set {
                    this[this.tableic_ParkingTargets.MAPINFO_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int icID {
                get {
                    try {
                        return ((int)(this[this.tableic_ParkingTargets.icIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'icID\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.icIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pICID {
                get {
                    try {
                        return ((string)(this[this.tableic_ParkingTargets.pICIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pICID\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.pICIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int parcelID {
                get {
                    try {
                        return ((int)(this[this.tableic_ParkingTargets.parcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'parcelID\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.parcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short divideID {
                get {
                    try {
                        return ((short)(this[this.tableic_ParkingTargets.divideIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'divideID\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.divideIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dscID {
                get {
                    try {
                        return ((int)(this[this.tableic_ParkingTargets.dscIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dscID\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.dscIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int exICFtParking {
                get {
                    try {
                        return ((int)(this[this.tableic_ParkingTargets.exICFtParkingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'exICFtParking\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.exICFtParkingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int exPkAreaFt {
                get {
                    try {
                        return ((int)(this[this.tableic_ParkingTargets.exPkAreaFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'exPkAreaFt\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.exPkAreaFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int parkingTargetArea {
                get {
                    try {
                        return ((int)(this[this.tableic_ParkingTargets.parkingTargetAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'parkingTargetArea\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.parkingTargetAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nGTO_Direct {
                get {
                    try {
                        return ((string)(this[this.tableic_ParkingTargets.nGTO_DirectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nGTO_Direct\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.nGTO_DirectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nGTO_Surface {
                get {
                    try {
                        return ((string)(this[this.tableic_ParkingTargets.nGTO_SurfaceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nGTO_Surface\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.nGTO_SurfaceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nGTOParking {
                get {
                    try {
                        return ((string)(this[this.tableic_ParkingTargets.nGTOParkingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nGTOParking\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.nGTOParkingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool evaluated {
                get {
                    try {
                        return ((bool)(this[this.tableic_ParkingTargets.evaluatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'evaluated\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.evaluatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool inlets {
                get {
                    try {
                        return ((bool)(this[this.tableic_ParkingTargets.inletsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'inlets\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.inletsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int parkingSpaces {
                get {
                    try {
                        return ((int)(this[this.tableic_ParkingTargets.parkingSpacesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'parkingSpaces\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.parkingSpacesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int percentParkingUsed {
                get {
                    try {
                        return ((int)(this[this.tableic_ParkingTargets.percentParkingUsedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'percentParkingUsed\' in table \'ic_ParkingTargets\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.percentParkingUsedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string drainage {
                get {
                    try {
                        return ((string)(this[this.tableic_ParkingTargets.drainageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'drainage\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.drainageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nGTO {
                get {
                    try {
                        return ((string)(this[this.tableic_ParkingTargets.nGTOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nGTO\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.nGTOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string controllable {
                get {
                    try {
                        return ((string)(this[this.tableic_ParkingTargets.controllableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'controllable\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.controllableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double fractionControllable {
                get {
                    try {
                        return ((double)(this[this.tableic_ParkingTargets.fractionControllableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fractionControllable\' in table \'ic_ParkingTargets\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.fractionControllableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short difficulty {
                get {
                    try {
                        return ((short)(this[this.tableic_ParkingTargets.difficultyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'difficulty\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.difficultyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double parkingEffDisc {
                get {
                    try {
                        return ((double)(this[this.tableic_ParkingTargets.parkingEffDiscColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'parkingEffDisc\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.parkingEffDiscColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string comments {
                get {
                    try {
                        return ((string)(this[this.tableic_ParkingTargets.commentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'comments\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.commentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double fraction2Drywell {
                get {
                    try {
                        return ((double)(this[this.tableic_ParkingTargets.fraction2DrywellColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fraction2Drywell\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.fraction2DrywellColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool buildModelIC {
                get {
                    try {
                        return ((bool)(this[this.tableic_ParkingTargets.buildModelICColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'buildModelIC\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.buildModelICColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string source {
                get {
                    try {
                        return ((string)(this[this.tableic_ParkingTargets.sourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'source\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.sourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string appendDate {
                get {
                    try {
                        return ((string)(this[this.tableic_ParkingTargets.appendDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'appendDate\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.appendDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int constructed {
                get {
                    try {
                        return ((int)(this[this.tableic_ParkingTargets.constructedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'constructed\' in table \'ic_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableic_ParkingTargets.constructedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsicIDNull() {
                return this.IsNull(this.tableic_ParkingTargets.icIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeticIDNull() {
                this[this.tableic_ParkingTargets.icIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspICIDNull() {
                return this.IsNull(this.tableic_ParkingTargets.pICIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpICIDNull() {
                this[this.tableic_ParkingTargets.pICIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsparcelIDNull() {
                return this.IsNull(this.tableic_ParkingTargets.parcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetparcelIDNull() {
                this[this.tableic_ParkingTargets.parcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdivideIDNull() {
                return this.IsNull(this.tableic_ParkingTargets.divideIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdivideIDNull() {
                this[this.tableic_ParkingTargets.divideIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdscIDNull() {
                return this.IsNull(this.tableic_ParkingTargets.dscIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdscIDNull() {
                this[this.tableic_ParkingTargets.dscIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexICFtParkingNull() {
                return this.IsNull(this.tableic_ParkingTargets.exICFtParkingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexICFtParkingNull() {
                this[this.tableic_ParkingTargets.exICFtParkingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexPkAreaFtNull() {
                return this.IsNull(this.tableic_ParkingTargets.exPkAreaFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexPkAreaFtNull() {
                this[this.tableic_ParkingTargets.exPkAreaFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsparkingTargetAreaNull() {
                return this.IsNull(this.tableic_ParkingTargets.parkingTargetAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetparkingTargetAreaNull() {
                this[this.tableic_ParkingTargets.parkingTargetAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnGTO_DirectNull() {
                return this.IsNull(this.tableic_ParkingTargets.nGTO_DirectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnGTO_DirectNull() {
                this[this.tableic_ParkingTargets.nGTO_DirectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnGTO_SurfaceNull() {
                return this.IsNull(this.tableic_ParkingTargets.nGTO_SurfaceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnGTO_SurfaceNull() {
                this[this.tableic_ParkingTargets.nGTO_SurfaceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnGTOParkingNull() {
                return this.IsNull(this.tableic_ParkingTargets.nGTOParkingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnGTOParkingNull() {
                this[this.tableic_ParkingTargets.nGTOParkingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsevaluatedNull() {
                return this.IsNull(this.tableic_ParkingTargets.evaluatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetevaluatedNull() {
                this[this.tableic_ParkingTargets.evaluatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinletsNull() {
                return this.IsNull(this.tableic_ParkingTargets.inletsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinletsNull() {
                this[this.tableic_ParkingTargets.inletsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsparkingSpacesNull() {
                return this.IsNull(this.tableic_ParkingTargets.parkingSpacesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetparkingSpacesNull() {
                this[this.tableic_ParkingTargets.parkingSpacesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspercentParkingUsedNull() {
                return this.IsNull(this.tableic_ParkingTargets.percentParkingUsedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpercentParkingUsedNull() {
                this[this.tableic_ParkingTargets.percentParkingUsedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdrainageNull() {
                return this.IsNull(this.tableic_ParkingTargets.drainageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdrainageNull() {
                this[this.tableic_ParkingTargets.drainageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnGTONull() {
                return this.IsNull(this.tableic_ParkingTargets.nGTOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnGTONull() {
                this[this.tableic_ParkingTargets.nGTOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscontrollableNull() {
                return this.IsNull(this.tableic_ParkingTargets.controllableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcontrollableNull() {
                this[this.tableic_ParkingTargets.controllableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfractionControllableNull() {
                return this.IsNull(this.tableic_ParkingTargets.fractionControllableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfractionControllableNull() {
                this[this.tableic_ParkingTargets.fractionControllableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdifficultyNull() {
                return this.IsNull(this.tableic_ParkingTargets.difficultyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdifficultyNull() {
                this[this.tableic_ParkingTargets.difficultyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsparkingEffDiscNull() {
                return this.IsNull(this.tableic_ParkingTargets.parkingEffDiscColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetparkingEffDiscNull() {
                this[this.tableic_ParkingTargets.parkingEffDiscColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscommentsNull() {
                return this.IsNull(this.tableic_ParkingTargets.commentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcommentsNull() {
                this[this.tableic_ParkingTargets.commentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfraction2DrywellNull() {
                return this.IsNull(this.tableic_ParkingTargets.fraction2DrywellColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfraction2DrywellNull() {
                this[this.tableic_ParkingTargets.fraction2DrywellColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbuildModelICNull() {
                return this.IsNull(this.tableic_ParkingTargets.buildModelICColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbuildModelICNull() {
                this[this.tableic_ParkingTargets.buildModelICColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssourceNull() {
                return this.IsNull(this.tableic_ParkingTargets.sourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsourceNull() {
                this[this.tableic_ParkingTargets.sourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsappendDateNull() {
                return this.IsNull(this.tableic_ParkingTargets.appendDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetappendDateNull() {
                this[this.tableic_ParkingTargets.appendDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconstructedNull() {
                return this.IsNull(this.tableic_ParkingTargets.constructedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconstructedNull() {
                this[this.tableic_ParkingTargets.constructedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AltRoofTargetsRow : global::System.Data.DataRow {
            
            private AltRoofTargetsDataTable tableAltRoofTargets;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AltRoofTargetsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAltRoofTargets = ((AltRoofTargetsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MapInfoID {
                get {
                    return ((int)(this[this.tableAltRoofTargets.MapInfoIDColumn]));
                }
                set {
                    this[this.tableAltRoofTargets.MapInfoIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NGToRoof {
                get {
                    try {
                        return ((string)(this[this.tableAltRoofTargets.NGToRoofColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NGToRoof\' in table \'AltRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAltRoofTargets.NGToRoofColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool BuildModelIC {
                get {
                    try {
                        return ((bool)(this[this.tableAltRoofTargets.BuildModelICColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuildModelIC\' in table \'AltRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAltRoofTargets.BuildModelICColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ICID {
                get {
                    try {
                        return ((int)(this[this.tableAltRoofTargets.ICIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ICID\' in table \'AltRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAltRoofTargets.ICIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Constructed {
                get {
                    try {
                        return ((int)(this[this.tableAltRoofTargets.ConstructedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Constructed\' in table \'AltRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAltRoofTargets.ConstructedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AltICID {
                get {
                    try {
                        return ((int)(this[this.tableAltRoofTargets.AltICIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AltICID\' in table \'AltRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAltRoofTargets.AltICIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Difficulty {
                get {
                    try {
                        return ((short)(this[this.tableAltRoofTargets.DifficultyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Difficulty\' in table \'AltRoofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAltRoofTargets.DifficultyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FocusArea {
                get {
                    if (this.IsFocusAreaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableAltRoofTargets.FocusAreaColumn]));
                    }
                }
                set {
                    this[this.tableAltRoofTargets.FocusAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNGToRoofNull() {
                return this.IsNull(this.tableAltRoofTargets.NGToRoofColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNGToRoofNull() {
                this[this.tableAltRoofTargets.NGToRoofColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuildModelICNull() {
                return this.IsNull(this.tableAltRoofTargets.BuildModelICColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuildModelICNull() {
                this[this.tableAltRoofTargets.BuildModelICColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsICIDNull() {
                return this.IsNull(this.tableAltRoofTargets.ICIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetICIDNull() {
                this[this.tableAltRoofTargets.ICIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConstructedNull() {
                return this.IsNull(this.tableAltRoofTargets.ConstructedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConstructedNull() {
                this[this.tableAltRoofTargets.ConstructedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAltICIDNull() {
                return this.IsNull(this.tableAltRoofTargets.AltICIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAltICIDNull() {
                this[this.tableAltRoofTargets.AltICIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDifficultyNull() {
                return this.IsNull(this.tableAltRoofTargets.DifficultyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDifficultyNull() {
                this[this.tableAltRoofTargets.DifficultyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFocusAreaNull() {
                return this.IsNull(this.tableAltRoofTargets.FocusAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFocusAreaNull() {
                this[this.tableAltRoofTargets.FocusAreaColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AltParkingTargetsRow : global::System.Data.DataRow {
            
            private AltParkingTargetsDataTable tableAltParkingTargets;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AltParkingTargetsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAltParkingTargets = ((AltParkingTargetsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MapInfoID {
                get {
                    return ((int)(this[this.tableAltParkingTargets.MapInfoIDColumn]));
                }
                set {
                    this[this.tableAltParkingTargets.MapInfoIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NGToStreet {
                get {
                    try {
                        return ((string)(this[this.tableAltParkingTargets.NGToStreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NGToStreet\' in table \'AltParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAltParkingTargets.NGToStreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NGToSurface {
                get {
                    try {
                        return ((string)(this[this.tableAltParkingTargets.NGToSurfaceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NGToSurface\' in table \'AltParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAltParkingTargets.NGToSurfaceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NGTOParking {
                get {
                    if (this.IsNGTOParkingNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableAltParkingTargets.NGTOParkingColumn]));
                    }
                }
                set {
                    this[this.tableAltParkingTargets.NGTOParkingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NGTo {
                get {
                    try {
                        return ((string)(this[this.tableAltParkingTargets.NGToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NGTo\' in table \'AltParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAltParkingTargets.NGToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool BuildModelIC {
                get {
                    try {
                        return ((bool)(this[this.tableAltParkingTargets.BuildModelICColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuildModelIC\' in table \'AltParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAltParkingTargets.BuildModelICColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ICID {
                get {
                    try {
                        return ((int)(this[this.tableAltParkingTargets.ICIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ICID\' in table \'AltParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAltParkingTargets.ICIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Constructed {
                get {
                    try {
                        return ((int)(this[this.tableAltParkingTargets.ConstructedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Constructed\' in table \'AltParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAltParkingTargets.ConstructedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AltICID {
                get {
                    try {
                        return ((int)(this[this.tableAltParkingTargets.AltICIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AltICID\' in table \'AltParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAltParkingTargets.AltICIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Difficulty {
                get {
                    try {
                        return ((short)(this[this.tableAltParkingTargets.DifficultyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Difficulty\' in table \'AltParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAltParkingTargets.DifficultyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FocusArea {
                get {
                    if (this.IsFocusAreaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableAltParkingTargets.FocusAreaColumn]));
                    }
                }
                set {
                    this[this.tableAltParkingTargets.FocusAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNGToStreetNull() {
                return this.IsNull(this.tableAltParkingTargets.NGToStreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNGToStreetNull() {
                this[this.tableAltParkingTargets.NGToStreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNGToSurfaceNull() {
                return this.IsNull(this.tableAltParkingTargets.NGToSurfaceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNGToSurfaceNull() {
                this[this.tableAltParkingTargets.NGToSurfaceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNGTOParkingNull() {
                return this.IsNull(this.tableAltParkingTargets.NGTOParkingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNGTOParkingNull() {
                this[this.tableAltParkingTargets.NGTOParkingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNGToNull() {
                return this.IsNull(this.tableAltParkingTargets.NGToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNGToNull() {
                this[this.tableAltParkingTargets.NGToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuildModelICNull() {
                return this.IsNull(this.tableAltParkingTargets.BuildModelICColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuildModelICNull() {
                this[this.tableAltParkingTargets.BuildModelICColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsICIDNull() {
                return this.IsNull(this.tableAltParkingTargets.ICIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetICIDNull() {
                this[this.tableAltParkingTargets.ICIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConstructedNull() {
                return this.IsNull(this.tableAltParkingTargets.ConstructedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConstructedNull() {
                this[this.tableAltParkingTargets.ConstructedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAltICIDNull() {
                return this.IsNull(this.tableAltParkingTargets.AltICIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAltICIDNull() {
                this[this.tableAltParkingTargets.AltICIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDifficultyNull() {
                return this.IsNull(this.tableAltParkingTargets.DifficultyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDifficultyNull() {
                this[this.tableAltParkingTargets.DifficultyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFocusAreaNull() {
                return this.IsNull(this.tableAltParkingTargets.FocusAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFocusAreaNull() {
                this[this.tableAltParkingTargets.FocusAreaColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AltStreetTargetsRow : global::System.Data.DataRow {
            
            private AltStreetTargetsDataTable tableAltStreetTargets;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AltStreetTargetsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAltStreetTargets = ((AltStreetTargetsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MapInfoID {
                get {
                    return ((int)(this[this.tableAltStreetTargets.MapInfoIDColumn]));
                }
                set {
                    this[this.tableAltStreetTargets.MapInfoIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NGToStreet {
                get {
                    try {
                        return ((string)(this[this.tableAltStreetTargets.NGToStreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NGToStreet\' in table \'AltStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAltStreetTargets.NGToStreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool BuildModelIC {
                get {
                    try {
                        return ((bool)(this[this.tableAltStreetTargets.BuildModelICColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuildModelIC\' in table \'AltStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAltStreetTargets.BuildModelICColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ICID {
                get {
                    try {
                        return ((int)(this[this.tableAltStreetTargets.ICIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ICID\' in table \'AltStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAltStreetTargets.ICIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Constructed {
                get {
                    try {
                        return ((int)(this[this.tableAltStreetTargets.ConstructedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Constructed\' in table \'AltStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAltStreetTargets.ConstructedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AltICID {
                get {
                    try {
                        return ((int)(this[this.tableAltStreetTargets.AltICIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AltICID\' in table \'AltStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAltStreetTargets.AltICIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Evaluation {
                get {
                    try {
                        return ((string)(this[this.tableAltStreetTargets.EvaluationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Evaluation\' in table \'AltStreetTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAltStreetTargets.EvaluationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FocusArea {
                get {
                    if (this.IsFocusAreaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableAltStreetTargets.FocusAreaColumn]));
                    }
                }
                set {
                    this[this.tableAltStreetTargets.FocusAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNGToStreetNull() {
                return this.IsNull(this.tableAltStreetTargets.NGToStreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNGToStreetNull() {
                this[this.tableAltStreetTargets.NGToStreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuildModelICNull() {
                return this.IsNull(this.tableAltStreetTargets.BuildModelICColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuildModelICNull() {
                this[this.tableAltStreetTargets.BuildModelICColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsICIDNull() {
                return this.IsNull(this.tableAltStreetTargets.ICIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetICIDNull() {
                this[this.tableAltStreetTargets.ICIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConstructedNull() {
                return this.IsNull(this.tableAltStreetTargets.ConstructedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConstructedNull() {
                this[this.tableAltStreetTargets.ConstructedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAltICIDNull() {
                return this.IsNull(this.tableAltStreetTargets.AltICIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAltICIDNull() {
                this[this.tableAltStreetTargets.AltICIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEvaluationNull() {
                return this.IsNull(this.tableAltStreetTargets.EvaluationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEvaluationNull() {
                this[this.tableAltStreetTargets.EvaluationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFocusAreaNull() {
                return this.IsNull(this.tableAltStreetTargets.FocusAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFocusAreaNull() {
                this[this.tableAltStreetTargets.FocusAreaColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class mdl_dirsc_acRow : global::System.Data.DataRow {
            
            private mdl_dirsc_acDataTable tablemdl_dirsc_ac;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal mdl_dirsc_acRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemdl_dirsc_ac = ((mdl_dirsc_acDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MAPINFO_ID {
                get {
                    return ((int)(this[this.tablemdl_dirsc_ac.MAPINFO_IDColumn]));
                }
                set {
                    this[this.tablemdl_dirsc_ac.MAPINFO_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tablemdl_dirsc_ac.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DivideID {
                get {
                    try {
                        return ((int)(this[this.tablemdl_dirsc_ac.DivideIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DivideID\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.DivideIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DSCID {
                get {
                    try {
                        return ((int)(this[this.tablemdl_dirsc_ac.DSCIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSCID\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.DSCIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int discoSiteID {
                get {
                    try {
                        return ((int)(this[this.tablemdl_dirsc_ac.discoSiteIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'discoSiteID\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.discoSiteIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiscoClass {
                get {
                    try {
                        return ((string)(this[this.tablemdl_dirsc_ac.DiscoClassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DiscoClass\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.DiscoClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToLinkSan {
                get {
                    try {
                        return ((int)(this[this.tablemdl_dirsc_ac.ToLinkSanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToLinkSan\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.ToLinkSanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToLinkStorm {
                get {
                    try {
                        return ((int)(this[this.tablemdl_dirsc_ac.ToLinkStormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToLinkStorm\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.ToLinkStormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NGTOSan {
                get {
                    try {
                        return ((string)(this[this.tablemdl_dirsc_ac.NGTOSanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NGTOSan\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.NGTOSanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NGTOStorm {
                get {
                    try {
                        return ((string)(this[this.tablemdl_dirsc_ac.NGTOStormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NGTOStorm\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.NGTOStormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PipeFlowTypeSan {
                get {
                    try {
                        return ((string)(this[this.tablemdl_dirsc_ac.PipeFlowTypeSanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeFlowTypeSan\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.PipeFlowTypeSanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PipeFlowTypeStorm {
                get {
                    try {
                        return ((string)(this[this.tablemdl_dirsc_ac.PipeFlowTypeStormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeFlowTypeStorm\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.PipeFlowTypeStormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SanSwrCrown {
                get {
                    try {
                        return ((double)(this[this.tablemdl_dirsc_ac.SanSwrCrownColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SanSwrCrown\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.SanSwrCrownColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Frac2SwrBeg {
                get {
                    try {
                        return ((double)(this[this.tablemdl_dirsc_ac.Frac2SwrBegColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Frac2SwrBeg\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.Frac2SwrBegColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FloodRefElev {
                get {
                    try {
                        return ((double)(this[this.tablemdl_dirsc_ac.FloodRefElevColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FloodRefElev\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.FloodRefElevColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FalseBFRisk {
                get {
                    try {
                        return ((bool)(this[this.tablemdl_dirsc_ac.FalseBFRiskColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FalseBFRisk\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.FalseBFRiskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GridQAQC {
                get {
                    try {
                        return ((string)(this[this.tablemdl_dirsc_ac.GridQAQCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GridQAQC\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.GridQAQCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MaxBldGrid {
                get {
                    try {
                        return ((double)(this[this.tablemdl_dirsc_ac.MaxBldGridColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxBldGrid\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.MaxBldGridColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AvgParcelElev {
                get {
                    try {
                        return ((double)(this[this.tablemdl_dirsc_ac.AvgParcelElevColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AvgParcelElev\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.AvgParcelElevColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EFFMethod {
                get {
                    try {
                        return ((string)(this[this.tablemdl_dirsc_ac.EFFMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EFFMethod\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.EFFMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FFOverride {
                get {
                    try {
                        return ((string)(this[this.tablemdl_dirsc_ac.FFOverrideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FFOverride\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.FFOverrideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double OrigFinishFloor {
                get {
                    try {
                        return ((double)(this[this.tablemdl_dirsc_ac.OrigFinishFloorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrigFinishFloor\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.OrigFinishFloorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double HGL {
                get {
                    try {
                        return ((double)(this[this.tablemdl_dirsc_ac.HGLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HGL\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.HGLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DeltaHGL {
                get {
                    try {
                        return ((double)(this[this.tablemdl_dirsc_ac.DeltaHGLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeltaHGL\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.DeltaHGLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HGLComment {
                get {
                    try {
                        return ((string)(this[this.tablemdl_dirsc_ac.HGLCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HGLComment\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.HGLCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataSourceFlags {
                get {
                    try {
                        return ((string)(this[this.tablemdl_dirsc_ac.DataSourceFlagsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataSourceFlags\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.DataSourceFlagsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZoneEX {
                get {
                    try {
                        return ((string)(this[this.tablemdl_dirsc_ac.ZoneEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZoneEX\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.ZoneEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZoneCP {
                get {
                    try {
                        return ((string)(this[this.tablemdl_dirsc_ac.ZoneCPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZoneCP\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.ZoneCPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GenEX {
                get {
                    try {
                        return ((string)(this[this.tablemdl_dirsc_ac.GenEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GenEX\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.GenEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GenCP {
                get {
                    try {
                        return ((string)(this[this.tablemdl_dirsc_ac.GenCPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GenCP\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.GenCPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BaseFlow {
                get {
                    try {
                        return ((double)(this[this.tablemdl_dirsc_ac.BaseFlowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseFlow\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.BaseFlowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BaseFlowEX {
                get {
                    try {
                        return ((double)(this[this.tablemdl_dirsc_ac.BaseFlowEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseFlowEX\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.BaseFlowEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BaseFlowDM {
                get {
                    try {
                        return ((double)(this[this.tablemdl_dirsc_ac.BaseFlowDMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseFlowDM\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.BaseFlowDMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ICFtRoof {
                get {
                    try {
                        return ((int)(this[this.tablemdl_dirsc_ac.ICFtRoofColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ICFtRoof\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.ICFtRoofColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ICFtParking {
                get {
                    try {
                        return ((int)(this[this.tablemdl_dirsc_ac.ICFtParkingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ICFtParking\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.ICFtParkingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ICFlag {
                get {
                    try {
                        return ((string)(this[this.tablemdl_dirsc_ac.ICFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ICFlag\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.ICFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ImpFractEX {
                get {
                    try {
                        return ((double)(this[this.tablemdl_dirsc_ac.ImpFractEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImpFractEX\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.ImpFractEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ImpFractCP {
                get {
                    try {
                        return ((double)(this[this.tablemdl_dirsc_ac.ImpFractCPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImpFractCP\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.ImpFractCPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ImpFractFB {
                get {
                    try {
                        return ((double)(this[this.tablemdl_dirsc_ac.ImpFractFBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImpFractFB\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.ImpFractFBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AreaFt {
                get {
                    try {
                        return ((double)(this[this.tablemdl_dirsc_ac.AreaFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AreaFt\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.AreaFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RfAreaFt {
                get {
                    try {
                        return ((double)(this[this.tablemdl_dirsc_ac.RfAreaFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RfAreaFt\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.RfAreaFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PkAreaFt {
                get {
                    try {
                        return ((double)(this[this.tablemdl_dirsc_ac.PkAreaFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PkAreaFt\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.PkAreaFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TraceVisit {
                get {
                    try {
                        return ((string)(this[this.tablemdl_dirsc_ac.TraceVisitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TraceVisit\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.TraceVisitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSCPickedFlag {
                get {
                    try {
                        return ((string)(this[this.tablemdl_dirsc_ac.DSCPickedFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSCPickedFlag\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.DSCPickedFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UpdateAtts {
                get {
                    try {
                        return ((bool)(this[this.tablemdl_dirsc_ac.UpdateAttsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdateAtts\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.UpdateAttsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int c_RFtosurfFt {
                get {
                    try {
                        return ((int)(this[this.tablemdl_dirsc_ac.c_RFtosurfFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'c_RFtosurfFt\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.c_RFtosurfFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int c_PKtosurfFt {
                get {
                    try {
                        return ((int)(this[this.tablemdl_dirsc_ac.c_PKtosurfFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'c_PKtosurfFt\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.c_PKtosurfFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int c_RFtosurfImpFt {
                get {
                    try {
                        return ((int)(this[this.tablemdl_dirsc_ac.c_RFtosurfImpFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'c_RFtosurfImpFt\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.c_RFtosurfImpFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int c_PKtosurfImpFt {
                get {
                    try {
                        return ((int)(this[this.tablemdl_dirsc_ac.c_PKtosurfImpFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'c_PKtosurfImpFt\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.c_PKtosurfImpFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tablemdl_dirsc_ac.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sewerable {
                get {
                    try {
                        return ((int)(this[this.tablemdl_dirsc_ac.SewerableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sewerable\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.SewerableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HasBasement {
                get {
                    try {
                        return ((int)(this[this.tablemdl_dirsc_ac.HasBasementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HasBasement\' in table \'mdl_dirsc_ac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemdl_dirsc_ac.HasBasementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tablemdl_dirsc_ac.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDivideIDNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.DivideIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDivideIDNull() {
                this[this.tablemdl_dirsc_ac.DivideIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSCIDNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.DSCIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSCIDNull() {
                this[this.tablemdl_dirsc_ac.DSCIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdiscoSiteIDNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.discoSiteIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdiscoSiteIDNull() {
                this[this.tablemdl_dirsc_ac.discoSiteIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiscoClassNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.DiscoClassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiscoClassNull() {
                this[this.tablemdl_dirsc_ac.DiscoClassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToLinkSanNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.ToLinkSanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToLinkSanNull() {
                this[this.tablemdl_dirsc_ac.ToLinkSanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToLinkStormNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.ToLinkStormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToLinkStormNull() {
                this[this.tablemdl_dirsc_ac.ToLinkStormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNGTOSanNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.NGTOSanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNGTOSanNull() {
                this[this.tablemdl_dirsc_ac.NGTOSanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNGTOStormNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.NGTOStormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNGTOStormNull() {
                this[this.tablemdl_dirsc_ac.NGTOStormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeFlowTypeSanNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.PipeFlowTypeSanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeFlowTypeSanNull() {
                this[this.tablemdl_dirsc_ac.PipeFlowTypeSanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeFlowTypeStormNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.PipeFlowTypeStormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeFlowTypeStormNull() {
                this[this.tablemdl_dirsc_ac.PipeFlowTypeStormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSanSwrCrownNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.SanSwrCrownColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSanSwrCrownNull() {
                this[this.tablemdl_dirsc_ac.SanSwrCrownColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrac2SwrBegNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.Frac2SwrBegColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrac2SwrBegNull() {
                this[this.tablemdl_dirsc_ac.Frac2SwrBegColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFloodRefElevNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.FloodRefElevColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFloodRefElevNull() {
                this[this.tablemdl_dirsc_ac.FloodRefElevColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFalseBFRiskNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.FalseBFRiskColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFalseBFRiskNull() {
                this[this.tablemdl_dirsc_ac.FalseBFRiskColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGridQAQCNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.GridQAQCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGridQAQCNull() {
                this[this.tablemdl_dirsc_ac.GridQAQCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxBldGridNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.MaxBldGridColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxBldGridNull() {
                this[this.tablemdl_dirsc_ac.MaxBldGridColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAvgParcelElevNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.AvgParcelElevColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAvgParcelElevNull() {
                this[this.tablemdl_dirsc_ac.AvgParcelElevColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEFFMethodNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.EFFMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEFFMethodNull() {
                this[this.tablemdl_dirsc_ac.EFFMethodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFFOverrideNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.FFOverrideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFFOverrideNull() {
                this[this.tablemdl_dirsc_ac.FFOverrideColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrigFinishFloorNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.OrigFinishFloorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrigFinishFloorNull() {
                this[this.tablemdl_dirsc_ac.OrigFinishFloorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHGLNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.HGLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHGLNull() {
                this[this.tablemdl_dirsc_ac.HGLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeltaHGLNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.DeltaHGLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeltaHGLNull() {
                this[this.tablemdl_dirsc_ac.DeltaHGLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHGLCommentNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.HGLCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHGLCommentNull() {
                this[this.tablemdl_dirsc_ac.HGLCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataSourceFlagsNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.DataSourceFlagsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataSourceFlagsNull() {
                this[this.tablemdl_dirsc_ac.DataSourceFlagsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZoneEXNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.ZoneEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZoneEXNull() {
                this[this.tablemdl_dirsc_ac.ZoneEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZoneCPNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.ZoneCPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZoneCPNull() {
                this[this.tablemdl_dirsc_ac.ZoneCPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenEXNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.GenEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenEXNull() {
                this[this.tablemdl_dirsc_ac.GenEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenCPNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.GenCPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenCPNull() {
                this[this.tablemdl_dirsc_ac.GenCPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseFlowNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.BaseFlowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseFlowNull() {
                this[this.tablemdl_dirsc_ac.BaseFlowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseFlowEXNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.BaseFlowEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseFlowEXNull() {
                this[this.tablemdl_dirsc_ac.BaseFlowEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseFlowDMNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.BaseFlowDMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseFlowDMNull() {
                this[this.tablemdl_dirsc_ac.BaseFlowDMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsICFtRoofNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.ICFtRoofColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetICFtRoofNull() {
                this[this.tablemdl_dirsc_ac.ICFtRoofColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsICFtParkingNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.ICFtParkingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetICFtParkingNull() {
                this[this.tablemdl_dirsc_ac.ICFtParkingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsICFlagNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.ICFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetICFlagNull() {
                this[this.tablemdl_dirsc_ac.ICFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImpFractEXNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.ImpFractEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImpFractEXNull() {
                this[this.tablemdl_dirsc_ac.ImpFractEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImpFractCPNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.ImpFractCPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImpFractCPNull() {
                this[this.tablemdl_dirsc_ac.ImpFractCPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImpFractFBNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.ImpFractFBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImpFractFBNull() {
                this[this.tablemdl_dirsc_ac.ImpFractFBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAreaFtNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.AreaFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAreaFtNull() {
                this[this.tablemdl_dirsc_ac.AreaFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRfAreaFtNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.RfAreaFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRfAreaFtNull() {
                this[this.tablemdl_dirsc_ac.RfAreaFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPkAreaFtNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.PkAreaFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPkAreaFtNull() {
                this[this.tablemdl_dirsc_ac.PkAreaFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTraceVisitNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.TraceVisitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTraceVisitNull() {
                this[this.tablemdl_dirsc_ac.TraceVisitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSCPickedFlagNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.DSCPickedFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSCPickedFlagNull() {
                this[this.tablemdl_dirsc_ac.DSCPickedFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdateAttsNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.UpdateAttsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdateAttsNull() {
                this[this.tablemdl_dirsc_ac.UpdateAttsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isc_RFtosurfFtNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.c_RFtosurfFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setc_RFtosurfFtNull() {
                this[this.tablemdl_dirsc_ac.c_RFtosurfFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isc_PKtosurfFtNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.c_PKtosurfFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setc_PKtosurfFtNull() {
                this[this.tablemdl_dirsc_ac.c_PKtosurfFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isc_RFtosurfImpFtNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.c_RFtosurfImpFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setc_RFtosurfImpFtNull() {
                this[this.tablemdl_dirsc_ac.c_RFtosurfImpFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isc_PKtosurfImpFtNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.c_PKtosurfImpFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setc_PKtosurfImpFtNull() {
                this[this.tablemdl_dirsc_ac.c_PKtosurfImpFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tablemdl_dirsc_ac.IsActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSewerableNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.SewerableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSewerableNull() {
                this[this.tablemdl_dirsc_ac.SewerableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasBasementNull() {
                return this.IsNull(this.tablemdl_dirsc_ac.HasBasementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasBasementNull() {
                this[this.tablemdl_dirsc_ac.HasBasementColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _mdl_roofTargetsRow : global::System.Data.DataRow {
            
            private _mdl_roofTargetsDataTable table_mdl_roofTargets;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _mdl_roofTargetsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_mdl_roofTargets = ((_mdl_roofTargetsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MAPINFO_ID {
                get {
                    return ((int)(this[this.table_mdl_roofTargets.MAPINFO_IDColumn]));
                }
                set {
                    this[this.table_mdl_roofTargets.MAPINFO_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int icID {
                get {
                    try {
                        return ((int)(this[this.table_mdl_roofTargets.icIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'icID\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.icIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rICID {
                get {
                    try {
                        return ((string)(this[this.table_mdl_roofTargets.rICIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rICID\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.rICIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int parcelID {
                get {
                    try {
                        return ((int)(this[this.table_mdl_roofTargets.parcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'parcelID\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.parcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short divideID {
                get {
                    try {
                        return ((short)(this[this.table_mdl_roofTargets.divideIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'divideID\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.divideIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dscID {
                get {
                    try {
                        return ((int)(this[this.table_mdl_roofTargets.dscIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dscID\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.dscIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nGTORoof {
                get {
                    try {
                        return ((string)(this[this.table_mdl_roofTargets.nGTORoofColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nGTORoof\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.nGTORoofColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int exICFtRoof {
                get {
                    try {
                        return ((int)(this[this.table_mdl_roofTargets.exICFtRoofColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'exICFtRoof\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.exICFtRoofColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int exRfAreaFt {
                get {
                    try {
                        return ((int)(this[this.table_mdl_roofTargets.exRfAreaFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'exRfAreaFt\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.exRfAreaFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool externalDS {
                get {
                    try {
                        return ((bool)(this[this.table_mdl_roofTargets.externalDSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'externalDS\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.externalDSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short dsTotal {
                get {
                    try {
                        return ((short)(this[this.table_mdl_roofTargets.dsTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dsTotal\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.dsTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short extoVeg {
                get {
                    try {
                        return ((short)(this[this.table_mdl_roofTargets.extoVegColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'extoVeg\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.extoVegColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short extoStreet {
                get {
                    try {
                        return ((short)(this[this.table_mdl_roofTargets.extoStreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'extoStreet\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.extoStreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short extoPlanter {
                get {
                    try {
                        return ((short)(this[this.table_mdl_roofTargets.extoPlanterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'extoPlanter\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.extoPlanterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short extoBioretention {
                get {
                    try {
                        return ((short)(this[this.table_mdl_roofTargets.extoBioretentionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'extoBioretention\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.extoBioretentionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short extoDrywell {
                get {
                    try {
                        return ((short)(this[this.table_mdl_roofTargets.extoDrywellColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'extoDrywell\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.extoDrywellColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short extoEcoroof {
                get {
                    try {
                        return ((short)(this[this.table_mdl_roofTargets.extoEcoroofColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'extoEcoroof\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.extoEcoroofColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short dstoVeg {
                get {
                    try {
                        return ((short)(this[this.table_mdl_roofTargets.dstoVegColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dstoVeg\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.dstoVegColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short dstoStreet {
                get {
                    try {
                        return ((short)(this[this.table_mdl_roofTargets.dstoStreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dstoStreet\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.dstoStreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short dstoPlanter {
                get {
                    try {
                        return ((short)(this[this.table_mdl_roofTargets.dstoPlanterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dstoPlanter\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.dstoPlanterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short dstoBioretention {
                get {
                    try {
                        return ((short)(this[this.table_mdl_roofTargets.dstoBioretentionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dstoBioretention\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.dstoBioretentionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short dstoDrywell {
                get {
                    try {
                        return ((short)(this[this.table_mdl_roofTargets.dstoDrywellColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dstoDrywell\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.dstoDrywellColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short dstoEcoroof {
                get {
                    try {
                        return ((short)(this[this.table_mdl_roofTargets.dstoEcoroofColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dstoEcoroof\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.dstoEcoroofColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short dsUncontrollable {
                get {
                    try {
                        return ((short)(this[this.table_mdl_roofTargets.dsUncontrollableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dsUncontrollable\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.dsUncontrollableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool landscapeAvailable {
                get {
                    try {
                        return ((bool)(this[this.table_mdl_roofTargets.landscapeAvailableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'landscapeAvailable\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.landscapeAvailableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double fractionDrained {
                get {
                    try {
                        return ((double)(this[this.table_mdl_roofTargets.fractionDrainedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fractionDrained\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.fractionDrainedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short difficulty {
                get {
                    try {
                        return ((short)(this[this.table_mdl_roofTargets.difficultyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'difficulty\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.difficultyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double roofEffDisc {
                get {
                    try {
                        return ((double)(this[this.table_mdl_roofTargets.roofEffDiscColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'roofEffDisc\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.roofEffDiscColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string comments {
                get {
                    try {
                        return ((string)(this[this.table_mdl_roofTargets.commentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'comments\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.commentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool plantersOK {
                get {
                    try {
                        return ((bool)(this[this.table_mdl_roofTargets.plantersOKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'plantersOK\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.plantersOKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool bioretentionOK {
                get {
                    try {
                        return ((bool)(this[this.table_mdl_roofTargets.bioretentionOKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'bioretentionOK\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.bioretentionOKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool buildModelIC {
                get {
                    try {
                        return ((bool)(this[this.table_mdl_roofTargets.buildModelICColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'buildModelIC\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.buildModelICColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string source {
                get {
                    try {
                        return ((string)(this[this.table_mdl_roofTargets.sourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'source\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.sourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string appendDate {
                get {
                    try {
                        return ((string)(this[this.table_mdl_roofTargets.appendDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'appendDate\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.appendDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int constructed {
                get {
                    try {
                        return ((int)(this[this.table_mdl_roofTargets.constructedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'constructed\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.constructedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SqFt_Bioret {
                get {
                    try {
                        return ((int)(this[this.table_mdl_roofTargets.SqFt_BioretColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SqFt_Bioret\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.SqFt_BioretColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SqFt_Drywell {
                get {
                    try {
                        return ((int)(this[this.table_mdl_roofTargets.SqFt_DrywellColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SqFt_Drywell\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.SqFt_DrywellColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SqFt_Veg {
                get {
                    try {
                        return ((int)(this[this.table_mdl_roofTargets.SqFt_VegColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SqFt_Veg\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.SqFt_VegColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SqFt_Eco {
                get {
                    try {
                        return ((int)(this[this.table_mdl_roofTargets.SqFt_EcoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SqFt_Eco\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.SqFt_EcoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SqFt_Plntr {
                get {
                    try {
                        return ((int)(this[this.table_mdl_roofTargets.SqFt_PlntrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SqFt_Plntr\' in table \'_mdl_roofTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_roofTargets.SqFt_PlntrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsicIDNull() {
                return this.IsNull(this.table_mdl_roofTargets.icIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeticIDNull() {
                this[this.table_mdl_roofTargets.icIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrICIDNull() {
                return this.IsNull(this.table_mdl_roofTargets.rICIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrICIDNull() {
                this[this.table_mdl_roofTargets.rICIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsparcelIDNull() {
                return this.IsNull(this.table_mdl_roofTargets.parcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetparcelIDNull() {
                this[this.table_mdl_roofTargets.parcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdivideIDNull() {
                return this.IsNull(this.table_mdl_roofTargets.divideIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdivideIDNull() {
                this[this.table_mdl_roofTargets.divideIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdscIDNull() {
                return this.IsNull(this.table_mdl_roofTargets.dscIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdscIDNull() {
                this[this.table_mdl_roofTargets.dscIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnGTORoofNull() {
                return this.IsNull(this.table_mdl_roofTargets.nGTORoofColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnGTORoofNull() {
                this[this.table_mdl_roofTargets.nGTORoofColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexICFtRoofNull() {
                return this.IsNull(this.table_mdl_roofTargets.exICFtRoofColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexICFtRoofNull() {
                this[this.table_mdl_roofTargets.exICFtRoofColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexRfAreaFtNull() {
                return this.IsNull(this.table_mdl_roofTargets.exRfAreaFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexRfAreaFtNull() {
                this[this.table_mdl_roofTargets.exRfAreaFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexternalDSNull() {
                return this.IsNull(this.table_mdl_roofTargets.externalDSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexternalDSNull() {
                this[this.table_mdl_roofTargets.externalDSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdsTotalNull() {
                return this.IsNull(this.table_mdl_roofTargets.dsTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdsTotalNull() {
                this[this.table_mdl_roofTargets.dsTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsextoVegNull() {
                return this.IsNull(this.table_mdl_roofTargets.extoVegColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetextoVegNull() {
                this[this.table_mdl_roofTargets.extoVegColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsextoStreetNull() {
                return this.IsNull(this.table_mdl_roofTargets.extoStreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetextoStreetNull() {
                this[this.table_mdl_roofTargets.extoStreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsextoPlanterNull() {
                return this.IsNull(this.table_mdl_roofTargets.extoPlanterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetextoPlanterNull() {
                this[this.table_mdl_roofTargets.extoPlanterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsextoBioretentionNull() {
                return this.IsNull(this.table_mdl_roofTargets.extoBioretentionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetextoBioretentionNull() {
                this[this.table_mdl_roofTargets.extoBioretentionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsextoDrywellNull() {
                return this.IsNull(this.table_mdl_roofTargets.extoDrywellColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetextoDrywellNull() {
                this[this.table_mdl_roofTargets.extoDrywellColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsextoEcoroofNull() {
                return this.IsNull(this.table_mdl_roofTargets.extoEcoroofColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetextoEcoroofNull() {
                this[this.table_mdl_roofTargets.extoEcoroofColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdstoVegNull() {
                return this.IsNull(this.table_mdl_roofTargets.dstoVegColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdstoVegNull() {
                this[this.table_mdl_roofTargets.dstoVegColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdstoStreetNull() {
                return this.IsNull(this.table_mdl_roofTargets.dstoStreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdstoStreetNull() {
                this[this.table_mdl_roofTargets.dstoStreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdstoPlanterNull() {
                return this.IsNull(this.table_mdl_roofTargets.dstoPlanterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdstoPlanterNull() {
                this[this.table_mdl_roofTargets.dstoPlanterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdstoBioretentionNull() {
                return this.IsNull(this.table_mdl_roofTargets.dstoBioretentionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdstoBioretentionNull() {
                this[this.table_mdl_roofTargets.dstoBioretentionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdstoDrywellNull() {
                return this.IsNull(this.table_mdl_roofTargets.dstoDrywellColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdstoDrywellNull() {
                this[this.table_mdl_roofTargets.dstoDrywellColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdstoEcoroofNull() {
                return this.IsNull(this.table_mdl_roofTargets.dstoEcoroofColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdstoEcoroofNull() {
                this[this.table_mdl_roofTargets.dstoEcoroofColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdsUncontrollableNull() {
                return this.IsNull(this.table_mdl_roofTargets.dsUncontrollableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdsUncontrollableNull() {
                this[this.table_mdl_roofTargets.dsUncontrollableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslandscapeAvailableNull() {
                return this.IsNull(this.table_mdl_roofTargets.landscapeAvailableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlandscapeAvailableNull() {
                this[this.table_mdl_roofTargets.landscapeAvailableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfractionDrainedNull() {
                return this.IsNull(this.table_mdl_roofTargets.fractionDrainedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfractionDrainedNull() {
                this[this.table_mdl_roofTargets.fractionDrainedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdifficultyNull() {
                return this.IsNull(this.table_mdl_roofTargets.difficultyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdifficultyNull() {
                this[this.table_mdl_roofTargets.difficultyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsroofEffDiscNull() {
                return this.IsNull(this.table_mdl_roofTargets.roofEffDiscColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetroofEffDiscNull() {
                this[this.table_mdl_roofTargets.roofEffDiscColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscommentsNull() {
                return this.IsNull(this.table_mdl_roofTargets.commentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcommentsNull() {
                this[this.table_mdl_roofTargets.commentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsplantersOKNull() {
                return this.IsNull(this.table_mdl_roofTargets.plantersOKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetplantersOKNull() {
                this[this.table_mdl_roofTargets.plantersOKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbioretentionOKNull() {
                return this.IsNull(this.table_mdl_roofTargets.bioretentionOKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbioretentionOKNull() {
                this[this.table_mdl_roofTargets.bioretentionOKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbuildModelICNull() {
                return this.IsNull(this.table_mdl_roofTargets.buildModelICColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbuildModelICNull() {
                this[this.table_mdl_roofTargets.buildModelICColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssourceNull() {
                return this.IsNull(this.table_mdl_roofTargets.sourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsourceNull() {
                this[this.table_mdl_roofTargets.sourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsappendDateNull() {
                return this.IsNull(this.table_mdl_roofTargets.appendDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetappendDateNull() {
                this[this.table_mdl_roofTargets.appendDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconstructedNull() {
                return this.IsNull(this.table_mdl_roofTargets.constructedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconstructedNull() {
                this[this.table_mdl_roofTargets.constructedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSqFt_BioretNull() {
                return this.IsNull(this.table_mdl_roofTargets.SqFt_BioretColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSqFt_BioretNull() {
                this[this.table_mdl_roofTargets.SqFt_BioretColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSqFt_DrywellNull() {
                return this.IsNull(this.table_mdl_roofTargets.SqFt_DrywellColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSqFt_DrywellNull() {
                this[this.table_mdl_roofTargets.SqFt_DrywellColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSqFt_VegNull() {
                return this.IsNull(this.table_mdl_roofTargets.SqFt_VegColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSqFt_VegNull() {
                this[this.table_mdl_roofTargets.SqFt_VegColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSqFt_EcoNull() {
                return this.IsNull(this.table_mdl_roofTargets.SqFt_EcoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSqFt_EcoNull() {
                this[this.table_mdl_roofTargets.SqFt_EcoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSqFt_PlntrNull() {
                return this.IsNull(this.table_mdl_roofTargets.SqFt_PlntrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSqFt_PlntrNull() {
                this[this.table_mdl_roofTargets.SqFt_PlntrColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _mdl_ParkingTargetsRow : global::System.Data.DataRow {
            
            private _mdl_ParkingTargetsDataTable table_mdl_ParkingTargets;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _mdl_ParkingTargetsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_mdl_ParkingTargets = ((_mdl_ParkingTargetsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Mst_targetMIID {
                get {
                    try {
                        return ((int)(this[this.table_mdl_ParkingTargets.Mst_targetMIIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mst_targetMIID\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.Mst_targetMIIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MAPINFO_ID {
                get {
                    try {
                        return ((int)(this[this.table_mdl_ParkingTargets.MAPINFO_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MAPINFO_ID\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.MAPINFO_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int icID {
                get {
                    try {
                        return ((int)(this[this.table_mdl_ParkingTargets.icIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'icID\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.icIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pICID {
                get {
                    try {
                        return ((string)(this[this.table_mdl_ParkingTargets.pICIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pICID\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.pICIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int parcelID {
                get {
                    try {
                        return ((int)(this[this.table_mdl_ParkingTargets.parcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'parcelID\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.parcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short divideID {
                get {
                    try {
                        return ((short)(this[this.table_mdl_ParkingTargets.divideIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'divideID\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.divideIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dscID {
                get {
                    try {
                        return ((int)(this[this.table_mdl_ParkingTargets.dscIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dscID\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.dscIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int exICFtParking {
                get {
                    try {
                        return ((int)(this[this.table_mdl_ParkingTargets.exICFtParkingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'exICFtParking\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.exICFtParkingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int exPkAreaFt {
                get {
                    try {
                        return ((int)(this[this.table_mdl_ParkingTargets.exPkAreaFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'exPkAreaFt\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.exPkAreaFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int parkingTargetArea {
                get {
                    try {
                        return ((int)(this[this.table_mdl_ParkingTargets.parkingTargetAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'parkingTargetArea\' in table \'_mdl_ParkingTargets\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.parkingTargetAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nGTO_Direct {
                get {
                    try {
                        return ((string)(this[this.table_mdl_ParkingTargets.nGTO_DirectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nGTO_Direct\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.nGTO_DirectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nGTO_Surface {
                get {
                    try {
                        return ((string)(this[this.table_mdl_ParkingTargets.nGTO_SurfaceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nGTO_Surface\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.nGTO_SurfaceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nGTOParking {
                get {
                    try {
                        return ((string)(this[this.table_mdl_ParkingTargets.nGTOParkingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nGTOParking\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.nGTOParkingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool evaluated {
                get {
                    try {
                        return ((bool)(this[this.table_mdl_ParkingTargets.evaluatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'evaluated\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.evaluatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool inlets {
                get {
                    try {
                        return ((bool)(this[this.table_mdl_ParkingTargets.inletsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'inlets\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.inletsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int parkingSpaces {
                get {
                    try {
                        return ((int)(this[this.table_mdl_ParkingTargets.parkingSpacesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'parkingSpaces\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.parkingSpacesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int percentParkingUsed {
                get {
                    try {
                        return ((int)(this[this.table_mdl_ParkingTargets.percentParkingUsedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'percentParkingUsed\' in table \'_mdl_ParkingTargets\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.percentParkingUsedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string drainage {
                get {
                    try {
                        return ((string)(this[this.table_mdl_ParkingTargets.drainageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'drainage\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.drainageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nGTO {
                get {
                    try {
                        return ((string)(this[this.table_mdl_ParkingTargets.nGTOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nGTO\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.nGTOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string controllable {
                get {
                    try {
                        return ((string)(this[this.table_mdl_ParkingTargets.controllableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'controllable\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.controllableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double fractionControllable {
                get {
                    try {
                        return ((double)(this[this.table_mdl_ParkingTargets.fractionControllableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fractionControllable\' in table \'_mdl_ParkingTargets\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.fractionControllableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short difficulty {
                get {
                    try {
                        return ((short)(this[this.table_mdl_ParkingTargets.difficultyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'difficulty\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.difficultyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double parkingEffDisc {
                get {
                    try {
                        return ((double)(this[this.table_mdl_ParkingTargets.parkingEffDiscColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'parkingEffDisc\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.parkingEffDiscColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string comments {
                get {
                    try {
                        return ((string)(this[this.table_mdl_ParkingTargets.commentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'comments\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.commentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double fraction2Drywell {
                get {
                    try {
                        return ((double)(this[this.table_mdl_ParkingTargets.fraction2DrywellColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fraction2Drywell\' in table \'_mdl_ParkingTargets\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.fraction2DrywellColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool buildModelIC {
                get {
                    try {
                        return ((bool)(this[this.table_mdl_ParkingTargets.buildModelICColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'buildModelIC\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.buildModelICColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string source {
                get {
                    try {
                        return ((string)(this[this.table_mdl_ParkingTargets.sourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'source\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.sourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string appendDate {
                get {
                    try {
                        return ((string)(this[this.table_mdl_ParkingTargets.appendDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'appendDate\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.appendDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int constructed {
                get {
                    try {
                        return ((int)(this[this.table_mdl_ParkingTargets.constructedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'constructed\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.constructedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SqFt_Bioret {
                get {
                    try {
                        return ((int)(this[this.table_mdl_ParkingTargets.SqFt_BioretColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SqFt_Bioret\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.SqFt_BioretColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SqFt_Drywell {
                get {
                    try {
                        return ((int)(this[this.table_mdl_ParkingTargets.SqFt_DrywellColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SqFt_Drywell\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.SqFt_DrywellColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SqFt_Surf {
                get {
                    try {
                        return ((int)(this[this.table_mdl_ParkingTargets.SqFt_SurfColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SqFt_Surf\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.SqFt_SurfColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SqFt_StOnly {
                get {
                    try {
                        return ((int)(this[this.table_mdl_ParkingTargets.SqFt_StOnlyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SqFt_StOnly\' in table \'_mdl_ParkingTargets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mdl_ParkingTargets.SqFt_StOnlyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMst_targetMIIDNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.Mst_targetMIIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMst_targetMIIDNull() {
                this[this.table_mdl_ParkingTargets.Mst_targetMIIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMAPINFO_IDNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.MAPINFO_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMAPINFO_IDNull() {
                this[this.table_mdl_ParkingTargets.MAPINFO_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsicIDNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.icIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeticIDNull() {
                this[this.table_mdl_ParkingTargets.icIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspICIDNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.pICIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpICIDNull() {
                this[this.table_mdl_ParkingTargets.pICIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsparcelIDNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.parcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetparcelIDNull() {
                this[this.table_mdl_ParkingTargets.parcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdivideIDNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.divideIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdivideIDNull() {
                this[this.table_mdl_ParkingTargets.divideIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdscIDNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.dscIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdscIDNull() {
                this[this.table_mdl_ParkingTargets.dscIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexICFtParkingNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.exICFtParkingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexICFtParkingNull() {
                this[this.table_mdl_ParkingTargets.exICFtParkingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexPkAreaFtNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.exPkAreaFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexPkAreaFtNull() {
                this[this.table_mdl_ParkingTargets.exPkAreaFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsparkingTargetAreaNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.parkingTargetAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetparkingTargetAreaNull() {
                this[this.table_mdl_ParkingTargets.parkingTargetAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnGTO_DirectNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.nGTO_DirectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnGTO_DirectNull() {
                this[this.table_mdl_ParkingTargets.nGTO_DirectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnGTO_SurfaceNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.nGTO_SurfaceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnGTO_SurfaceNull() {
                this[this.table_mdl_ParkingTargets.nGTO_SurfaceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnGTOParkingNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.nGTOParkingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnGTOParkingNull() {
                this[this.table_mdl_ParkingTargets.nGTOParkingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsevaluatedNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.evaluatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetevaluatedNull() {
                this[this.table_mdl_ParkingTargets.evaluatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinletsNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.inletsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinletsNull() {
                this[this.table_mdl_ParkingTargets.inletsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsparkingSpacesNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.parkingSpacesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetparkingSpacesNull() {
                this[this.table_mdl_ParkingTargets.parkingSpacesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspercentParkingUsedNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.percentParkingUsedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpercentParkingUsedNull() {
                this[this.table_mdl_ParkingTargets.percentParkingUsedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdrainageNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.drainageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdrainageNull() {
                this[this.table_mdl_ParkingTargets.drainageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnGTONull() {
                return this.IsNull(this.table_mdl_ParkingTargets.nGTOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnGTONull() {
                this[this.table_mdl_ParkingTargets.nGTOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscontrollableNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.controllableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcontrollableNull() {
                this[this.table_mdl_ParkingTargets.controllableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfractionControllableNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.fractionControllableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfractionControllableNull() {
                this[this.table_mdl_ParkingTargets.fractionControllableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdifficultyNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.difficultyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdifficultyNull() {
                this[this.table_mdl_ParkingTargets.difficultyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsparkingEffDiscNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.parkingEffDiscColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetparkingEffDiscNull() {
                this[this.table_mdl_ParkingTargets.parkingEffDiscColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscommentsNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.commentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcommentsNull() {
                this[this.table_mdl_ParkingTargets.commentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfraction2DrywellNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.fraction2DrywellColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfraction2DrywellNull() {
                this[this.table_mdl_ParkingTargets.fraction2DrywellColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbuildModelICNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.buildModelICColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbuildModelICNull() {
                this[this.table_mdl_ParkingTargets.buildModelICColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssourceNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.sourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsourceNull() {
                this[this.table_mdl_ParkingTargets.sourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsappendDateNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.appendDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetappendDateNull() {
                this[this.table_mdl_ParkingTargets.appendDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconstructedNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.constructedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconstructedNull() {
                this[this.table_mdl_ParkingTargets.constructedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSqFt_BioretNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.SqFt_BioretColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSqFt_BioretNull() {
                this[this.table_mdl_ParkingTargets.SqFt_BioretColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSqFt_DrywellNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.SqFt_DrywellColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSqFt_DrywellNull() {
                this[this.table_mdl_ParkingTargets.SqFt_DrywellColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSqFt_SurfNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.SqFt_SurfColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSqFt_SurfNull() {
                this[this.table_mdl_ParkingTargets.SqFt_SurfColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSqFt_StOnlyNull() {
                return this.IsNull(this.table_mdl_ParkingTargets.SqFt_StOnlyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSqFt_StOnlyNull() {
                this[this.table_mdl_ParkingTargets.SqFt_StOnlyColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TableE18Row : global::System.Data.DataRow {
            
            private TableE18DataTable tableTableE18;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TableE18Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTableE18 = ((TableE18DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NodeName {
                get {
                    return ((string)(this[this.tableTableE18.NodeNameColumn]));
                }
                set {
                    this[this.tableTableE18.NodeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double StorageVolumeCuFt {
                get {
                    try {
                        return ((double)(this[this.tableTableE18.StorageVolumeCuFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StorageVolumeCuFt\' in table \'TableE18\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE18.StorageVolumeCuFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStorageVolumeCuFtNull() {
                return this.IsNull(this.tableTableE18.StorageVolumeCuFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStorageVolumeCuFtNull() {
                this[this.tableTableE18.StorageVolumeCuFtColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TableE19Row : global::System.Data.DataRow {
            
            private TableE19DataTable tableTableE19;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TableE19Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTableE19 = ((TableE19DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NodeName {
                get {
                    return ((string)(this[this.tableTableE19.NodeNameColumn]));
                }
                set {
                    this[this.tableTableE19.NodeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double InterfaceInflowCuFt {
                get {
                    try {
                        return ((double)(this[this.tableTableE19.InterfaceInflowCuFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InterfaceInflowCuFt\' in table \'TableE19\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE19.InterfaceInflowCuFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double InfiltrationVolumeCuFt {
                get {
                    try {
                        return ((double)(this[this.tableTableE19.InfiltrationVolumeCuFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfiltrationVolumeCuFt\' in table \'TableE19\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE19.InfiltrationVolumeCuFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInterfaceInflowCuFtNull() {
                return this.IsNull(this.tableTableE19.InterfaceInflowCuFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInterfaceInflowCuFtNull() {
                this[this.tableTableE19.InterfaceInflowCuFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfiltrationVolumeCuFtNull() {
                return this.IsNull(this.tableTableE19.InfiltrationVolumeCuFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfiltrationVolumeCuFtNull() {
                this[this.tableTableE19.InfiltrationVolumeCuFtColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TableE03aRow : global::System.Data.DataRow {
            
            private TableE03aDataTable tableTableE03a;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TableE03aRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTableE03a = ((TableE03aDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nodeName {
                get {
                    return ((string)(this[this.tableTableE03a.nodeNameColumn]));
                }
                set {
                    this[this.tableTableE03a.nodeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double groundElevFt {
                get {
                    try {
                        return ((double)(this[this.tableTableE03a.groundElevFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'groundElevFt\' in table \'TableE03a\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE03a.groundElevFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double crownElevFt {
                get {
                    try {
                        return ((double)(this[this.tableTableE03a.crownElevFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'crownElevFt\' in table \'TableE03a\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE03a.crownElevFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double invertElevFt {
                get {
                    try {
                        return ((double)(this[this.tableTableE03a.invertElevFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'invertElevFt\' in table \'TableE03a\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE03a.invertElevFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double qInstCfs {
                get {
                    try {
                        return ((double)(this[this.tableTableE03a.qInstCfsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'qInstCfs\' in table \'TableE03a\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE03a.qInstCfsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double initialDepthFt {
                get {
                    try {
                        return ((double)(this[this.tableTableE03a.initialDepthFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'initialDepthFt\' in table \'TableE03a\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE03a.initialDepthFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double interfaceFlowPct {
                get {
                    try {
                        return ((double)(this[this.tableTableE03a.interfaceFlowPctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'interfaceFlowPct\' in table \'TableE03a\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE03a.interfaceFlowPctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroundElevFtNull() {
                return this.IsNull(this.tableTableE03a.groundElevFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroundElevFtNull() {
                this[this.tableTableE03a.groundElevFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscrownElevFtNull() {
                return this.IsNull(this.tableTableE03a.crownElevFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcrownElevFtNull() {
                this[this.tableTableE03a.crownElevFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinvertElevFtNull() {
                return this.IsNull(this.tableTableE03a.invertElevFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinvertElevFtNull() {
                this[this.tableTableE03a.invertElevFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsqInstCfsNull() {
                return this.IsNull(this.tableTableE03a.qInstCfsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetqInstCfsNull() {
                this[this.tableTableE03a.qInstCfsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinitialDepthFtNull() {
                return this.IsNull(this.tableTableE03a.initialDepthFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinitialDepthFtNull() {
                this[this.tableTableE03a.initialDepthFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinterfaceFlowPctNull() {
                return this.IsNull(this.tableTableE03a.interfaceFlowPctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinterfaceFlowPctNull() {
                this[this.tableTableE03a.interfaceFlowPctColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TableE03bRow : global::System.Data.DataRow {
            
            private TableE03bDataTable tableTableE03b;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TableE03bRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTableE03b = ((TableE03bDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nodeName {
                get {
                    try {
                        return ((string)(this[this.tableTableE03b.nodeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nodeName\' in table \'TableE03b\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE03b.nodeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double xCoordFt {
                get {
                    try {
                        return ((double)(this[this.tableTableE03b.xCoordFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xCoordFt\' in table \'TableE03b\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE03b.xCoordFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double yCoordFt {
                get {
                    try {
                        return ((double)(this[this.tableTableE03b.yCoordFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'yCoordFt\' in table \'TableE03b\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE03b.yCoordFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnodeNameNull() {
                return this.IsNull(this.tableTableE03b.nodeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnodeNameNull() {
                this[this.tableTableE03b.nodeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxCoordFtNull() {
                return this.IsNull(this.tableTableE03b.xCoordFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxCoordFtNull() {
                this[this.tableTableE03b.xCoordFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsyCoordFtNull() {
                return this.IsNull(this.tableTableE03b.yCoordFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetyCoordFtNull() {
                this[this.tableTableE03b.yCoordFtColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TableE22Row : global::System.Data.DataRow {
            
            private TableE22DataTable tableTableE22;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TableE22Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTableE22 = ((TableE22DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double overallErrorPct {
                get {
                    try {
                        return ((double)(this[this.tableTableE22.overallErrorPctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'overallErrorPct\' in table \'TableE22\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE22.overallErrorPctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double worstNodeErrorPct {
                get {
                    try {
                        return ((double)(this[this.tableTableE22.worstNodeErrorPctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'worstNodeErrorPct\' in table \'TableE22\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE22.worstNodeErrorPctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string worstNodalErrorNode {
                get {
                    try {
                        return ((string)(this[this.tableTableE22.worstNodalErrorNodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'worstNodalErrorNode\' in table \'TableE22\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE22.worstNodalErrorNodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double totalInflowLossPct {
                get {
                    try {
                        return ((double)(this[this.tableTableE22.totalInflowLossPctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'totalInflowLossPct\' in table \'TableE22\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE22.totalInflowLossPctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string overalllConinuityError {
                get {
                    try {
                        return ((string)(this[this.tableTableE22.overalllConinuityErrorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'overalllConinuityError\' in table \'TableE22\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE22.overalllConinuityErrorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string efficiency {
                get {
                    try {
                        return ((string)(this[this.tableTableE22.efficiencyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'efficiency\' in table \'TableE22\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE22.efficiencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double efficiencyPct {
                get {
                    try {
                        return ((double)(this[this.tableTableE22.efficiencyPctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'efficiencyPct\' in table \'TableE22\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE22.efficiencyPctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int mostNodeNonConvergences {
                get {
                    try {
                        return ((int)(this[this.tableTableE22.mostNodeNonConvergencesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mostNodeNonConvergences\' in table \'TableE22\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE22.mostNodeNonConvergencesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int totalNonConvergences {
                get {
                    try {
                        return ((int)(this[this.tableTableE22.totalNonConvergencesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'totalNonConvergences\' in table \'TableE22\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE22.totalNonConvergencesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int totalNonConvergedNodes {
                get {
                    try {
                        return ((int)(this[this.tableTableE22.totalNonConvergedNodesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'totalNonConvergedNodes\' in table \'TableE22\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE22.totalNonConvergedNodesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsoverallErrorPctNull() {
                return this.IsNull(this.tableTableE22.overallErrorPctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetoverallErrorPctNull() {
                this[this.tableTableE22.overallErrorPctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsworstNodeErrorPctNull() {
                return this.IsNull(this.tableTableE22.worstNodeErrorPctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetworstNodeErrorPctNull() {
                this[this.tableTableE22.worstNodeErrorPctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsworstNodalErrorNodeNull() {
                return this.IsNull(this.tableTableE22.worstNodalErrorNodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetworstNodalErrorNodeNull() {
                this[this.tableTableE22.worstNodalErrorNodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalInflowLossPctNull() {
                return this.IsNull(this.tableTableE22.totalInflowLossPctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalInflowLossPctNull() {
                this[this.tableTableE22.totalInflowLossPctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsoveralllConinuityErrorNull() {
                return this.IsNull(this.tableTableE22.overalllConinuityErrorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetoveralllConinuityErrorNull() {
                this[this.tableTableE22.overalllConinuityErrorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsefficiencyNull() {
                return this.IsNull(this.tableTableE22.efficiencyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetefficiencyNull() {
                this[this.tableTableE22.efficiencyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsefficiencyPctNull() {
                return this.IsNull(this.tableTableE22.efficiencyPctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetefficiencyPctNull() {
                this[this.tableTableE22.efficiencyPctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmostNodeNonConvergencesNull() {
                return this.IsNull(this.tableTableE22.mostNodeNonConvergencesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmostNodeNonConvergencesNull() {
                this[this.tableTableE22.mostNodeNonConvergencesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNonConvergencesNull() {
                return this.IsNull(this.tableTableE22.totalNonConvergencesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNonConvergencesNull() {
                this[this.tableTableE22.totalNonConvergencesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNonConvergedNodesNull() {
                return this.IsNull(this.tableTableE22.totalNonConvergedNodesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNonConvergedNodesNull() {
                this[this.tableTableE22.totalNonConvergedNodesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TableE21Row : global::System.Data.DataRow {
            
            private TableE21DataTable tableTableE21;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TableE21Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTableE21 = ((TableE21DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NodeName {
                get {
                    return ((string)(this[this.tableTableE21.NodeNameColumn]));
                }
                set {
                    this[this.tableTableE21.NodeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double InflowVolumeCuFt {
                get {
                    try {
                        return ((double)(this[this.tableTableE21.InflowVolumeCuFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InflowVolumeCuFt\' in table \'TableE21\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE21.InflowVolumeCuFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AverageInflowCfs {
                get {
                    try {
                        return ((double)(this[this.tableTableE21.AverageInflowCfsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AverageInflowCfs\' in table \'TableE21\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableE21.AverageInflowCfsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInflowVolumeCuFtNull() {
                return this.IsNull(this.tableTableE21.InflowVolumeCuFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInflowVolumeCuFtNull() {
                this[this.tableTableE21.InflowVolumeCuFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAverageInflowCfsNull() {
                return this.IsNull(this.tableTableE21.AverageInflowCfsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAverageInflowCfsNull() {
                this[this.tableTableE21.AverageInflowCfsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ICNodeRowChangeEvent : global::System.EventArgs {
            
            private ICNodeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ICNodeRowChangeEvent(ICNodeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ICNodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class mdl_SurfSC_acRowChangeEvent : global::System.EventArgs {
            
            private mdl_SurfSC_acRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mdl_SurfSC_acRowChangeEvent(mdl_SurfSC_acRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mdl_SurfSC_acRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ic_StreetTargetsRowChangeEvent : global::System.EventArgs {
            
            private ic_StreetTargetsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ic_StreetTargetsRowChangeEvent(ic_StreetTargetsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ic_StreetTargetsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ic_RoofTargetsRowChangeEvent : global::System.EventArgs {
            
            private ic_RoofTargetsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ic_RoofTargetsRowChangeEvent(ic_RoofTargetsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ic_RoofTargetsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ic_ParkingTargetsRowChangeEvent : global::System.EventArgs {
            
            private ic_ParkingTargetsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ic_ParkingTargetsRowChangeEvent(ic_ParkingTargetsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ic_ParkingTargetsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AltRoofTargetsRowChangeEvent : global::System.EventArgs {
            
            private AltRoofTargetsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AltRoofTargetsRowChangeEvent(AltRoofTargetsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AltRoofTargetsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AltParkingTargetsRowChangeEvent : global::System.EventArgs {
            
            private AltParkingTargetsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AltParkingTargetsRowChangeEvent(AltParkingTargetsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AltParkingTargetsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AltStreetTargetsRowChangeEvent : global::System.EventArgs {
            
            private AltStreetTargetsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AltStreetTargetsRowChangeEvent(AltStreetTargetsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AltStreetTargetsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class mdl_dirsc_acRowChangeEvent : global::System.EventArgs {
            
            private mdl_dirsc_acRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mdl_dirsc_acRowChangeEvent(mdl_dirsc_acRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mdl_dirsc_acRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _mdl_roofTargetsRowChangeEvent : global::System.EventArgs {
            
            private _mdl_roofTargetsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _mdl_roofTargetsRowChangeEvent(_mdl_roofTargetsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _mdl_roofTargetsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _mdl_ParkingTargetsRowChangeEvent : global::System.EventArgs {
            
            private _mdl_ParkingTargetsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _mdl_ParkingTargetsRowChangeEvent(_mdl_ParkingTargetsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _mdl_ParkingTargetsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TableE18RowChangeEvent : global::System.EventArgs {
            
            private TableE18Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE18RowChangeEvent(TableE18Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE18Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TableE19RowChangeEvent : global::System.EventArgs {
            
            private TableE19Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE19RowChangeEvent(TableE19Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE19Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TableE03aRowChangeEvent : global::System.EventArgs {
            
            private TableE03aRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE03aRowChangeEvent(TableE03aRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE03aRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TableE03bRowChangeEvent : global::System.EventArgs {
            
            private TableE03bRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE03bRowChangeEvent(TableE03bRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE03bRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TableE22RowChangeEvent : global::System.EventArgs {
            
            private TableE22Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE22RowChangeEvent(TableE22Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE22Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TableE21RowChangeEvent : global::System.EventArgs {
            
            private TableE21Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE21RowChangeEvent(TableE21Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableE21Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace SystemsAnalysis.DataAccess.StormwaterControlsDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ICNodeTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ICNodeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ICNode";
            tableMapping.ColumnMappings.Add("RefNode", "RefNode");
            tableMapping.ColumnMappings.Add("RefX", "RefX");
            tableMapping.ColumnMappings.Add("RefY", "RefY");
            tableMapping.ColumnMappings.Add("RefGrelev", "RefGrelev");
            tableMapping.ColumnMappings.Add("FacVolCuFt", "FacVolCuFt");
            tableMapping.ColumnMappings.Add("PondingCuFt", "PondingCuFt");
            tableMapping.ColumnMappings.Add("vFlowControl", "vFlowControl");
            tableMapping.ColumnMappings.Add("Factype", "Factype");
            tableMapping.ColumnMappings.Add("FacNode", "FacNode");
            tableMapping.ColumnMappings.Add("FacX", "FacX");
            tableMapping.ColumnMappings.Add("FacY", "FacY");
            tableMapping.ColumnMappings.Add("OutfallNode", "OutfallNode");
            tableMapping.ColumnMappings.Add("OFX", "OFX");
            tableMapping.ColumnMappings.Add("OFY", "OFY");
            tableMapping.ColumnMappings.Add("InfilFactor", "InfilFactor");
            tableMapping.ColumnMappings.Add("Infilcfs", "Infilcfs");
            tableMapping.ColumnMappings.Add("Roughness", "Roughness");
            tableMapping.ColumnMappings.Add("Include", "Include");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `ICNode` WHERE (((? = 1 AND `RefNode` IS NULL) OR (`RefNode` = ?)) AND ((? = 1 AND `RefX` IS NULL) OR (`RefX` = ?)) AND ((? = 1 AND `RefY` IS NULL) OR (`RefY` = ?)) AND ((? = 1 AND `RefGrelev` IS NULL) OR (`RefGrelev` = ?)) AND ((? = 1 AND `FacVolCuFt` IS NULL) OR (`FacVolCuFt` = ?)) AND ((? = 1 AND `PondingCuFt` IS NULL) OR (`PondingCuFt` = ?)) AND ((? = 1 AND `vFlowControl` IS NULL) OR (`vFlowControl` = ?)) AND ((? = 1 AND `Factype` IS NULL) OR (`Factype` = ?)) AND (`FacNode` = ?) AND ((? = 1 AND `FacX` IS NULL) OR (`FacX` = ?)) AND ((? = 1 AND `FacY` IS NULL) OR (`FacY` = ?)) AND ((? = 1 AND `OutfallNode` IS NULL) OR (`OutfallNode` = ?)) AND ((? = 1 AND `OFX` IS NULL) OR (`OFX` = ?)) AND ((? = 1 AND `OFY` IS NULL) OR (`OFY` = ?)) AND ((? = 1 AND `InfilFactor` IS NULL) OR (`InfilFactor` = ?)) AND ((? = 1 AND `Infilcfs` IS NULL) OR (`Infilcfs` = ?)) AND ((? = 1 AND `Roughness` IS NULL) OR (`Roughness` = ?)) AND ((? = 1 AND `Include` IS NULL) OR (`Include` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RefNode", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefNode", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RefNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefNode", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RefX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RefX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RefY", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefY", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RefY", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefY", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RefGrelev", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefGrelev", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RefGrelev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefGrelev", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FacVolCuFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FacVolCuFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FacVolCuFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FacVolCuFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PondingCuFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PondingCuFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PondingCuFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PondingCuFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_vFlowControl", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "vFlowControl", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_vFlowControl", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "vFlowControl", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Factype", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Factype", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Factype", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Factype", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FacNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FacNode", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FacX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FacX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FacX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FacX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FacY", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FacY", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FacY", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FacY", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OutfallNode", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OutfallNode", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OutfallNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OutfallNode", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OFX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OFX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OFX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OFX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OFY", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OFY", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OFY", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OFY", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_InfilFactor", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InfilFactor", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_InfilFactor", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InfilFactor", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Infilcfs", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Infilcfs", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Infilcfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Infilcfs", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Roughness", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Roughness", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Roughness", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Roughness", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Include", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Include", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Include", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Include", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `ICNode` (`RefNode`, `RefX`, `RefY`, `RefGrelev`, `FacVolCuFt`, `PondingCuFt`, `vFlowControl`, `Factype`, `FacNode`, `FacX`, `FacY`, `OutfallNode`, `OFX`, `OFY`, `InfilFactor`, `Infilcfs`, `Roughness`, `Include`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RefNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefNode", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RefX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RefY", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RefGrelev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefGrelev", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FacVolCuFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FacVolCuFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PondingCuFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PondingCuFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("vFlowControl", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "vFlowControl", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Factype", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Factype", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FacNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FacNode", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FacX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FacX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FacY", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FacY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OutfallNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OutfallNode", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OFX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OFX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OFY", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OFY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("InfilFactor", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InfilFactor", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Infilcfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Infilcfs", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Roughness", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Roughness", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Include", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Include", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `ICNode` SET `RefNode` = ?, `RefX` = ?, `RefY` = ?, `RefGrelev` = ?, `FacVolCuFt` = ?, `PondingCuFt` = ?, `vFlowControl` = ?, `Factype` = ?, `FacNode` = ?, `FacX` = ?, `FacY` = ?, `OutfallNode` = ?, `OFX` = ?, `OFY` = ?, `InfilFactor` = ?, `Infilcfs` = ?, `Roughness` = ?, `Include` = ? WHERE (((? = 1 AND `RefNode` IS NULL) OR (`RefNode` = ?)) AND ((? = 1 AND `RefX` IS NULL) OR (`RefX` = ?)) AND ((? = 1 AND `RefY` IS NULL) OR (`RefY` = ?)) AND ((? = 1 AND `RefGrelev` IS NULL) OR (`RefGrelev` = ?)) AND ((? = 1 AND `FacVolCuFt` IS NULL) OR (`FacVolCuFt` = ?)) AND ((? = 1 AND `PondingCuFt` IS NULL) OR (`PondingCuFt` = ?)) AND ((? = 1 AND `vFlowControl` IS NULL) OR (`vFlowControl` = ?)) AND ((? = 1 AND `Factype` IS NULL) OR (`Factype` = ?)) AND (`FacNode` = ?) AND ((? = 1 AND `FacX` IS NULL) OR (`FacX` = ?)) AND ((? = 1 AND `FacY` IS NULL) OR (`FacY` = ?)) AND ((? = 1 AND `OutfallNode` IS NULL) OR (`OutfallNode` = ?)) AND ((? = 1 AND `OFX` IS NULL) OR (`OFX` = ?)) AND ((? = 1 AND `OFY` IS NULL) OR (`OFY` = ?)) AND ((? = 1 AND `InfilFactor` IS NULL) OR (`InfilFactor` = ?)) AND ((? = 1 AND `Infilcfs` IS NULL) OR (`Infilcfs` = ?)) AND ((? = 1 AND `Roughness` IS NULL) OR (`Roughness` = ?)) AND ((? = 1 AND `Include` IS NULL) OR (`Include` = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RefNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefNode", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RefX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RefY", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RefGrelev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefGrelev", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FacVolCuFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FacVolCuFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PondingCuFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PondingCuFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("vFlowControl", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "vFlowControl", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Factype", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Factype", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FacNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FacNode", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FacX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FacX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FacY", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FacY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OutfallNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OutfallNode", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OFX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OFX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OFY", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OFY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("InfilFactor", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InfilFactor", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Infilcfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Infilcfs", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Roughness", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Roughness", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Include", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Include", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RefNode", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefNode", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RefNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefNode", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RefX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RefX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RefY", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefY", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RefY", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefY", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RefGrelev", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefGrelev", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RefGrelev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RefGrelev", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FacVolCuFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FacVolCuFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FacVolCuFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FacVolCuFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PondingCuFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PondingCuFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PondingCuFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PondingCuFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_vFlowControl", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "vFlowControl", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_vFlowControl", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "vFlowControl", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Factype", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Factype", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Factype", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Factype", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FacNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FacNode", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FacX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FacX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FacX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FacX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FacY", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FacY", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FacY", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FacY", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OutfallNode", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OutfallNode", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OutfallNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OutfallNode", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OFX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OFX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OFX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OFX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OFY", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OFY", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OFY", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OFY", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_InfilFactor", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InfilFactor", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_InfilFactor", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InfilFactor", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Infilcfs", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Infilcfs", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Infilcfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Infilcfs", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Roughness", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Roughness", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Roughness", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Roughness", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Include", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Include", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Include", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Include", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.StormwaterControls_V12ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        ICNode.*\r\nFROM            ICNode";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StormwaterControlsDataSet.ICNodeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StormwaterControlsDataSet.ICNodeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StormwaterControlsDataSet.ICNodeDataTable dataTable = new StormwaterControlsDataSet.ICNodeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet.ICNodeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ICNode");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    string Original_RefNode, 
                    global::System.Nullable<double> Original_RefX, 
                    global::System.Nullable<double> Original_RefY, 
                    global::System.Nullable<double> Original_RefGrelev, 
                    global::System.Nullable<double> Original_FacVolCuFt, 
                    global::System.Nullable<double> Original_PondingCuFt, 
                    global::System.Nullable<double> Original_vFlowControl, 
                    string Original_Factype, 
                    string Original_FacNode, 
                    global::System.Nullable<int> Original_FacX, 
                    global::System.Nullable<int> Original_FacY, 
                    string Original_OutfallNode, 
                    global::System.Nullable<int> Original_OFX, 
                    global::System.Nullable<int> Original_OFY, 
                    global::System.Nullable<double> Original_InfilFactor, 
                    global::System.Nullable<double> Original_Infilcfs, 
                    global::System.Nullable<double> Original_Roughness, 
                    string Original_Include) {
            if ((Original_RefNode == null)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_RefNode));
            }
            if ((Original_RefX.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((double)(Original_RefX.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_RefY.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((double)(Original_RefY.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_RefGrelev.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((double)(Original_RefGrelev.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_FacVolCuFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((double)(Original_FacVolCuFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_PondingCuFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((double)(Original_PondingCuFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_vFlowControl.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((double)(Original_vFlowControl.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_Factype == null)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_Factype));
            }
            if ((Original_FacNode == null)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_FacNode));
            }
            if ((Original_FacX.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((int)(Original_FacX.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_FacY.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((int)(Original_FacY.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_OutfallNode == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_OutfallNode));
            }
            if ((Original_OFX.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((int)(Original_OFX.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_OFY.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((int)(Original_OFY.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_InfilFactor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((double)(Original_InfilFactor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_Infilcfs.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((double)(Original_Infilcfs.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_Roughness.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((double)(Original_Roughness.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_Include == null)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((string)(Original_Include));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string RefNode, 
                    global::System.Nullable<double> RefX, 
                    global::System.Nullable<double> RefY, 
                    global::System.Nullable<double> RefGrelev, 
                    global::System.Nullable<double> FacVolCuFt, 
                    global::System.Nullable<double> PondingCuFt, 
                    global::System.Nullable<double> vFlowControl, 
                    string Factype, 
                    string FacNode, 
                    global::System.Nullable<int> FacX, 
                    global::System.Nullable<int> FacY, 
                    string OutfallNode, 
                    global::System.Nullable<int> OFX, 
                    global::System.Nullable<int> OFY, 
                    global::System.Nullable<double> InfilFactor, 
                    global::System.Nullable<double> Infilcfs, 
                    global::System.Nullable<double> Roughness, 
                    string Include) {
            if ((RefNode == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(RefNode));
            }
            if ((RefX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((double)(RefX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((RefY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((double)(RefY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((RefGrelev.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(RefGrelev.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((FacVolCuFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(FacVolCuFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((PondingCuFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(PondingCuFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((vFlowControl.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(vFlowControl.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Factype == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Factype));
            }
            if ((FacNode == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(FacNode));
            }
            if ((FacX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(FacX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((FacY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(FacY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((OutfallNode == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(OutfallNode));
            }
            if ((OFX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((int)(OFX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((OFY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((int)(OFY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((InfilFactor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((double)(InfilFactor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Infilcfs.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((double)(Infilcfs.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Roughness.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((double)(Roughness.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Include == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(Include));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string RefNode, 
                    global::System.Nullable<double> RefX, 
                    global::System.Nullable<double> RefY, 
                    global::System.Nullable<double> RefGrelev, 
                    global::System.Nullable<double> FacVolCuFt, 
                    global::System.Nullable<double> PondingCuFt, 
                    global::System.Nullable<double> vFlowControl, 
                    string Factype, 
                    string FacNode, 
                    global::System.Nullable<int> FacX, 
                    global::System.Nullable<int> FacY, 
                    string OutfallNode, 
                    global::System.Nullable<int> OFX, 
                    global::System.Nullable<int> OFY, 
                    global::System.Nullable<double> InfilFactor, 
                    global::System.Nullable<double> Infilcfs, 
                    global::System.Nullable<double> Roughness, 
                    string Include, 
                    string Original_RefNode, 
                    global::System.Nullable<double> Original_RefX, 
                    global::System.Nullable<double> Original_RefY, 
                    global::System.Nullable<double> Original_RefGrelev, 
                    global::System.Nullable<double> Original_FacVolCuFt, 
                    global::System.Nullable<double> Original_PondingCuFt, 
                    global::System.Nullable<double> Original_vFlowControl, 
                    string Original_Factype, 
                    string Original_FacNode, 
                    global::System.Nullable<int> Original_FacX, 
                    global::System.Nullable<int> Original_FacY, 
                    string Original_OutfallNode, 
                    global::System.Nullable<int> Original_OFX, 
                    global::System.Nullable<int> Original_OFY, 
                    global::System.Nullable<double> Original_InfilFactor, 
                    global::System.Nullable<double> Original_Infilcfs, 
                    global::System.Nullable<double> Original_Roughness, 
                    string Original_Include) {
            if ((RefNode == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(RefNode));
            }
            if ((RefX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((double)(RefX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((RefY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((double)(RefY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((RefGrelev.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((double)(RefGrelev.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((FacVolCuFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(FacVolCuFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((PondingCuFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(PondingCuFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((vFlowControl.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(vFlowControl.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Factype == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Factype));
            }
            if ((FacNode == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(FacNode));
            }
            if ((FacX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(FacX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((FacY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(FacY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((OutfallNode == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(OutfallNode));
            }
            if ((OFX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(OFX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((OFY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(OFY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((InfilFactor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((double)(InfilFactor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Infilcfs.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((double)(Infilcfs.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Roughness.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((double)(Roughness.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Include == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Include));
            }
            if ((Original_RefNode == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_RefNode));
            }
            if ((Original_RefX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((double)(Original_RefX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Original_RefY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((double)(Original_RefY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Original_RefGrelev.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((double)(Original_RefGrelev.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((Original_FacVolCuFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((double)(Original_FacVolCuFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Original_PondingCuFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((double)(Original_PondingCuFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Original_vFlowControl.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((double)(Original_vFlowControl.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((Original_Factype == null)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_Factype));
            }
            if ((Original_FacNode == null)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_FacNode));
            }
            if ((Original_FacX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((int)(Original_FacX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_FacY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((int)(Original_FacY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_OutfallNode == null)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_OutfallNode));
            }
            if ((Original_OFX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((int)(Original_OFX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((Original_OFY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((int)(Original_OFY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((Original_InfilFactor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((double)(Original_InfilFactor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_Infilcfs.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((double)(Original_Infilcfs.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_Roughness.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((double)(Original_Roughness.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((Original_Include == null)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[52].Value = ((string)(Original_Include));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string RefNode, 
                    global::System.Nullable<double> RefX, 
                    global::System.Nullable<double> RefY, 
                    global::System.Nullable<double> RefGrelev, 
                    global::System.Nullable<double> FacVolCuFt, 
                    global::System.Nullable<double> PondingCuFt, 
                    global::System.Nullable<double> vFlowControl, 
                    string Factype, 
                    global::System.Nullable<int> FacX, 
                    global::System.Nullable<int> FacY, 
                    string OutfallNode, 
                    global::System.Nullable<int> OFX, 
                    global::System.Nullable<int> OFY, 
                    global::System.Nullable<double> InfilFactor, 
                    global::System.Nullable<double> Infilcfs, 
                    global::System.Nullable<double> Roughness, 
                    string Include, 
                    string Original_RefNode, 
                    global::System.Nullable<double> Original_RefX, 
                    global::System.Nullable<double> Original_RefY, 
                    global::System.Nullable<double> Original_RefGrelev, 
                    global::System.Nullable<double> Original_FacVolCuFt, 
                    global::System.Nullable<double> Original_PondingCuFt, 
                    global::System.Nullable<double> Original_vFlowControl, 
                    string Original_Factype, 
                    string Original_FacNode, 
                    global::System.Nullable<int> Original_FacX, 
                    global::System.Nullable<int> Original_FacY, 
                    string Original_OutfallNode, 
                    global::System.Nullable<int> Original_OFX, 
                    global::System.Nullable<int> Original_OFY, 
                    global::System.Nullable<double> Original_InfilFactor, 
                    global::System.Nullable<double> Original_Infilcfs, 
                    global::System.Nullable<double> Original_Roughness, 
                    string Original_Include) {
            return this.Update(RefNode, RefX, RefY, RefGrelev, FacVolCuFt, PondingCuFt, vFlowControl, Factype, Original_FacNode, FacX, FacY, OutfallNode, OFX, OFY, InfilFactor, Infilcfs, Roughness, Include, Original_RefNode, Original_RefX, Original_RefY, Original_RefGrelev, Original_FacVolCuFt, Original_PondingCuFt, Original_vFlowControl, Original_Factype, Original_FacNode, Original_FacX, Original_FacY, Original_OutfallNode, Original_OFX, Original_OFY, Original_InfilFactor, Original_Infilcfs, Original_Roughness, Original_Include);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class mdl_SurfSC_acTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public mdl_SurfSC_acTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "mdl_SurfSC_ac";
            tableMapping.ColumnMappings.Add("MAPINFO_ID", "MAPINFO_ID");
            tableMapping.ColumnMappings.Add("SurfSCID", "SurfSCID");
            tableMapping.ColumnMappings.Add("NGTO", "NGTO");
            tableMapping.ColumnMappings.Add("Slope", "Slope");
            tableMapping.ColumnMappings.Add("FlowLengthFt", "FlowLengthFt");
            tableMapping.ColumnMappings.Add("dH", "dH");
            tableMapping.ColumnMappings.Add("Imp_n", "Imp_n");
            tableMapping.ColumnMappings.Add("Per_n", "Per_n");
            tableMapping.ColumnMappings.Add("Imp_sto", "Imp_sto");
            tableMapping.ColumnMappings.Add("Per_sto", "Per_sto");
            tableMapping.ColumnMappings.Add("Suct", "Suct");
            tableMapping.ColumnMappings.Add("Hydcon", "Hydcon");
            tableMapping.ColumnMappings.Add("SMDMax", "SMDMax");
            tableMapping.ColumnMappings.Add("issumped", "issumped");
            tableMapping.ColumnMappings.Add("totalgrossacres", "totalgrossacres");
            tableMapping.ColumnMappings.Add("paveacres", "paveacres");
            tableMapping.ColumnMappings.Add("SWacres", "SWacres");
            tableMapping.ColumnMappings.Add("SWAcresOther", "SWAcresOther");
            tableMapping.ColumnMappings.Add("SWfactor", "SWfactor");
            tableMapping.ColumnMappings.Add("PaveTreeAcres", "PaveTreeAcres");
            tableMapping.ColumnMappings.Add("TraceVisit", "TraceVisit");
            tableMapping.ColumnMappings.Add("UpdateAtts", "UpdateAtts");
            tableMapping.ColumnMappings.Add("DataSource", "DataSource");
            tableMapping.ColumnMappings.Add("ROWAcres", "ROWAcres");
            tableMapping.ColumnMappings.Add("ROWAcresOther", "ROWAcresOther");
            tableMapping.ColumnMappings.Add("c_RFgrossacres", "c_RFgrossacres");
            tableMapping.ColumnMappings.Add("c_RFtosurfacres", "c_RFtosurfacres");
            tableMapping.ColumnMappings.Add("c_RFtosurfIMPacres", "c_RFtosurfIMPacres");
            tableMapping.ColumnMappings.Add("c_PKgrossacres", "c_PKgrossacres");
            tableMapping.ColumnMappings.Add("c_PKtosurfacres", "c_PKtosurfacres");
            tableMapping.ColumnMappings.Add("c_PKtosurfIMPacres", "c_PKtosurfIMPacres");
            tableMapping.ColumnMappings.Add("c_netacres", "c_netacres");
            tableMapping.ColumnMappings.Add("c_netIMPacres", "c_netIMPacres");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `mdl_SurfSC_ac` WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `SurfSCID` " +
                "IS NULL) OR (`SurfSCID` = ?)) AND ((? = 1 AND `NGTO` IS NULL) OR (`NGTO` = ?)) A" +
                "ND ((? = 1 AND `Slope` IS NULL) OR (`Slope` = ?)) AND ((? = 1 AND `FlowLengthFt`" +
                " IS NULL) OR (`FlowLengthFt` = ?)) AND ((? = 1 AND `dH` IS NULL) OR (`dH` = ?)) " +
                "AND ((? = 1 AND `Imp_n` IS NULL) OR (`Imp_n` = ?)) AND ((? = 1 AND `Per_n` IS NU" +
                "LL) OR (`Per_n` = ?)) AND ((? = 1 AND `Imp_sto` IS NULL) OR (`Imp_sto` = ?)) AND" +
                " ((? = 1 AND `Per_sto` IS NULL) OR (`Per_sto` = ?)) AND ((? = 1 AND `Suct` IS NU" +
                "LL) OR (`Suct` = ?)) AND ((? = 1 AND `Hydcon` IS NULL) OR (`Hydcon` = ?)) AND ((" +
                "? = 1 AND `SMDMax` IS NULL) OR (`SMDMax` = ?)) AND ((? = 1 AND `issumped` IS NUL" +
                "L) OR (`issumped` = ?)) AND ((? = 1 AND `totalgrossacres` IS NULL) OR (`totalgro" +
                "ssacres` = ?)) AND ((? = 1 AND `paveacres` IS NULL) OR (`paveacres` = ?)) AND ((" +
                "? = 1 AND `SWacres` IS NULL) OR (`SWacres` = ?)) AND ((? = 1 AND `SWAcresOther` " +
                "IS NULL) OR (`SWAcresOther` = ?)) AND ((? = 1 AND `SWfactor` IS NULL) OR (`SWfac" +
                "tor` = ?)) AND ((? = 1 AND `PaveTreeAcres` IS NULL) OR (`PaveTreeAcres` = ?)) AN" +
                "D ((? = 1 AND `TraceVisit` IS NULL) OR (`TraceVisit` = ?)) AND ((? = 1 AND `Upda" +
                "teAtts` IS NULL) OR (`UpdateAtts` = ?)) AND ((? = 1 AND `DataSource` IS NULL) OR" +
                " (`DataSource` = ?)) AND ((? = 1 AND `ROWAcres` IS NULL) OR (`ROWAcres` = ?)) AN" +
                "D ((? = 1 AND `ROWAcresOther` IS NULL) OR (`ROWAcresOther` = ?)) AND ((? = 1 AND" +
                " `c_RFgrossacres` IS NULL) OR (`c_RFgrossacres` = ?)) AND ((? = 1 AND `c_RFtosur" +
                "facres` IS NULL) OR (`c_RFtosurfacres` = ?)) AND ((? = 1 AND `c_RFtosurfIMPacres" +
                "` IS NULL) OR (`c_RFtosurfIMPacres` = ?)) AND ((? = 1 AND `c_PKgrossacres` IS NU" +
                "LL) OR (`c_PKgrossacres` = ?)) AND ((? = 1 AND `c_PKtosurfacres` IS NULL) OR (`c" +
                "_PKtosurfacres` = ?)) AND ((? = 1 AND `c_PKtosurfIMPacres` IS NULL) OR (`c_PKtos" +
                "urfIMPacres` = ?)) AND ((? = 1 AND `c_netacres` IS NULL) OR (`c_netacres` = ?)) " +
                "AND ((? = 1 AND `c_netIMPacres` IS NULL) OR (`c_netIMPacres` = ?)) AND ((? = 1 A" +
                "ND `IsActive` IS NULL) OR (`IsActive` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SurfSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SurfSCID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SurfSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SurfSCID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTO", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Slope", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Slope", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Slope", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Slope", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FlowLengthFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FlowLengthFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FlowLengthFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FlowLengthFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dH", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dH", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dH", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dH", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Imp_n", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Imp_n", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Imp_n", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Imp_n", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Per_n", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Per_n", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Per_n", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Per_n", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Imp_sto", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Imp_sto", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Imp_sto", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Imp_sto", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Per_sto", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Per_sto", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Per_sto", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Per_sto", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Suct", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Suct", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Suct", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Suct", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Hydcon", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Hydcon", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Hydcon", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Hydcon", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SMDMax", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SMDMax", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SMDMax", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SMDMax", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_issumped", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "issumped", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_issumped", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "issumped", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_totalgrossacres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "totalgrossacres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_totalgrossacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "totalgrossacres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_paveacres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "paveacres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_paveacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "paveacres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SWacres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SWacres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SWacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SWacres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SWAcresOther", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SWAcresOther", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SWAcresOther", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SWAcresOther", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SWfactor", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SWfactor", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SWfactor", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SWfactor", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PaveTreeAcres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PaveTreeAcres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PaveTreeAcres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PaveTreeAcres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_TraceVisit", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_TraceVisit", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_UpdateAtts", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UpdateAtts", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_UpdateAtts", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UpdateAtts", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DataSource", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSource", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DataSource", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSource", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ROWAcres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ROWAcres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ROWAcres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ROWAcres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ROWAcresOther", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ROWAcresOther", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ROWAcresOther", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ROWAcresOther", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_RFgrossacres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFgrossacres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_RFgrossacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFgrossacres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_RFtosurfacres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfacres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_RFtosurfacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfacres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_RFtosurfIMPacres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfIMPacres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_RFtosurfIMPacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfIMPacres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_PKgrossacres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKgrossacres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_PKgrossacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKgrossacres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_PKtosurfacres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfacres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_PKtosurfacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfacres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_PKtosurfIMPacres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfIMPacres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_PKtosurfIMPacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfIMPacres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_netacres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_netacres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_netacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_netacres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_netIMPacres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_netIMPacres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_netIMPacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_netIMPacres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_IsActive", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `mdl_SurfSC_ac` (`SurfSCID`, `NGTO`, `Slope`, `FlowLengthFt`, `dH`, `Imp_n`, `Per_n`, `Imp_sto`, `Per_sto`, `Suct`, `Hydcon`, `SMDMax`, `issumped`, `totalgrossacres`, `paveacres`, `SWacres`, `SWAcresOther`, `SWfactor`, `PaveTreeAcres`, `TraceVisit`, `UpdateAtts`, `DataSource`, `ROWAcres`, `ROWAcresOther`, `c_RFgrossacres`, `c_RFtosurfacres`, `c_RFtosurfIMPacres`, `c_PKgrossacres`, `c_PKtosurfacres`, `c_PKtosurfIMPacres`, `c_netacres`, `c_netIMPacres`, `IsActive`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SurfSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SurfSCID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Slope", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Slope", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FlowLengthFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FlowLengthFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dH", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dH", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Imp_n", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Imp_n", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Per_n", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Per_n", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Imp_sto", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Imp_sto", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Per_sto", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Per_sto", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Suct", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Suct", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Hydcon", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Hydcon", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SMDMax", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SMDMax", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("issumped", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "issumped", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("totalgrossacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "totalgrossacres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("paveacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "paveacres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SWacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SWacres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SWAcresOther", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SWAcresOther", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SWfactor", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SWfactor", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PaveTreeAcres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PaveTreeAcres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("TraceVisit", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("UpdateAtts", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UpdateAtts", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DataSource", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSource", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ROWAcres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ROWAcres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ROWAcresOther", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ROWAcresOther", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_RFgrossacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFgrossacres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_RFtosurfacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfacres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_RFtosurfIMPacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfIMPacres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_PKgrossacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKgrossacres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_PKtosurfacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfacres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_PKtosurfIMPacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfIMPacres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_netacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_netacres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_netIMPacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_netIMPacres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE `mdl_SurfSC_ac` SET `SurfSCID` = ?, `NGTO` = ?, `Slope` = ?, `FlowLengthFt" +
                "` = ?, `dH` = ?, `Imp_n` = ?, `Per_n` = ?, `Imp_sto` = ?, `Per_sto` = ?, `Suct` " +
                "= ?, `Hydcon` = ?, `SMDMax` = ?, `issumped` = ?, `totalgrossacres` = ?, `paveacr" +
                "es` = ?, `SWacres` = ?, `SWAcresOther` = ?, `SWfactor` = ?, `PaveTreeAcres` = ?," +
                " `TraceVisit` = ?, `UpdateAtts` = ?, `DataSource` = ?, `ROWAcres` = ?, `ROWAcres" +
                "Other` = ?, `c_RFgrossacres` = ?, `c_RFtosurfacres` = ?, `c_RFtosurfIMPacres` = " +
                "?, `c_PKgrossacres` = ?, `c_PKtosurfacres` = ?, `c_PKtosurfIMPacres` = ?, `c_net" +
                "acres` = ?, `c_netIMPacres` = ?, `IsActive` = ? WHERE ((`MAPINFO_ID` = ?) AND ((" +
                "? = 1 AND `SurfSCID` IS NULL) OR (`SurfSCID` = ?)) AND ((? = 1 AND `NGTO` IS NUL" +
                "L) OR (`NGTO` = ?)) AND ((? = 1 AND `Slope` IS NULL) OR (`Slope` = ?)) AND ((? =" +
                " 1 AND `FlowLengthFt` IS NULL) OR (`FlowLengthFt` = ?)) AND ((? = 1 AND `dH` IS " +
                "NULL) OR (`dH` = ?)) AND ((? = 1 AND `Imp_n` IS NULL) OR (`Imp_n` = ?)) AND ((? " +
                "= 1 AND `Per_n` IS NULL) OR (`Per_n` = ?)) AND ((? = 1 AND `Imp_sto` IS NULL) OR" +
                " (`Imp_sto` = ?)) AND ((? = 1 AND `Per_sto` IS NULL) OR (`Per_sto` = ?)) AND ((?" +
                " = 1 AND `Suct` IS NULL) OR (`Suct` = ?)) AND ((? = 1 AND `Hydcon` IS NULL) OR (" +
                "`Hydcon` = ?)) AND ((? = 1 AND `SMDMax` IS NULL) OR (`SMDMax` = ?)) AND ((? = 1 " +
                "AND `issumped` IS NULL) OR (`issumped` = ?)) AND ((? = 1 AND `totalgrossacres` I" +
                "S NULL) OR (`totalgrossacres` = ?)) AND ((? = 1 AND `paveacres` IS NULL) OR (`pa" +
                "veacres` = ?)) AND ((? = 1 AND `SWacres` IS NULL) OR (`SWacres` = ?)) AND ((? = " +
                "1 AND `SWAcresOther` IS NULL) OR (`SWAcresOther` = ?)) AND ((? = 1 AND `SWfactor" +
                "` IS NULL) OR (`SWfactor` = ?)) AND ((? = 1 AND `PaveTreeAcres` IS NULL) OR (`Pa" +
                "veTreeAcres` = ?)) AND ((? = 1 AND `TraceVisit` IS NULL) OR (`TraceVisit` = ?)) " +
                "AND ((? = 1 AND `UpdateAtts` IS NULL) OR (`UpdateAtts` = ?)) AND ((? = 1 AND `Da" +
                "taSource` IS NULL) OR (`DataSource` = ?)) AND ((? = 1 AND `ROWAcres` IS NULL) OR" +
                " (`ROWAcres` = ?)) AND ((? = 1 AND `ROWAcresOther` IS NULL) OR (`ROWAcresOther` " +
                "= ?)) AND ((? = 1 AND `c_RFgrossacres` IS NULL) OR (`c_RFgrossacres` = ?)) AND (" +
                "(? = 1 AND `c_RFtosurfacres` IS NULL) OR (`c_RFtosurfacres` = ?)) AND ((? = 1 AN" +
                "D `c_RFtosurfIMPacres` IS NULL) OR (`c_RFtosurfIMPacres` = ?)) AND ((? = 1 AND `" +
                "c_PKgrossacres` IS NULL) OR (`c_PKgrossacres` = ?)) AND ((? = 1 AND `c_PKtosurfa" +
                "cres` IS NULL) OR (`c_PKtosurfacres` = ?)) AND ((? = 1 AND `c_PKtosurfIMPacres` " +
                "IS NULL) OR (`c_PKtosurfIMPacres` = ?)) AND ((? = 1 AND `c_netacres` IS NULL) OR" +
                " (`c_netacres` = ?)) AND ((? = 1 AND `c_netIMPacres` IS NULL) OR (`c_netIMPacres" +
                "` = ?)) AND ((? = 1 AND `IsActive` IS NULL) OR (`IsActive` = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SurfSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SurfSCID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Slope", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Slope", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FlowLengthFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FlowLengthFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dH", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dH", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Imp_n", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Imp_n", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Per_n", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Per_n", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Imp_sto", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Imp_sto", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Per_sto", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Per_sto", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Suct", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Suct", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Hydcon", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Hydcon", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SMDMax", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SMDMax", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("issumped", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "issumped", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("totalgrossacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "totalgrossacres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("paveacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "paveacres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SWacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SWacres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SWAcresOther", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SWAcresOther", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SWfactor", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SWfactor", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PaveTreeAcres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PaveTreeAcres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("TraceVisit", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("UpdateAtts", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UpdateAtts", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DataSource", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSource", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ROWAcres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ROWAcres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ROWAcresOther", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ROWAcresOther", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_RFgrossacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFgrossacres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_RFtosurfacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfacres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_RFtosurfIMPacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfIMPacres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_PKgrossacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKgrossacres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_PKtosurfacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfacres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_PKtosurfIMPacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfIMPacres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_netacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_netacres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_netIMPacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_netIMPacres", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SurfSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SurfSCID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SurfSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SurfSCID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTO", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Slope", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Slope", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Slope", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Slope", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FlowLengthFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FlowLengthFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FlowLengthFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FlowLengthFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dH", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dH", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dH", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dH", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Imp_n", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Imp_n", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Imp_n", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Imp_n", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Per_n", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Per_n", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Per_n", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Per_n", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Imp_sto", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Imp_sto", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Imp_sto", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Imp_sto", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Per_sto", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Per_sto", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Per_sto", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Per_sto", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Suct", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Suct", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Suct", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Suct", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Hydcon", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Hydcon", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Hydcon", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Hydcon", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SMDMax", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SMDMax", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SMDMax", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SMDMax", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_issumped", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "issumped", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_issumped", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "issumped", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_totalgrossacres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "totalgrossacres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_totalgrossacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "totalgrossacres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_paveacres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "paveacres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_paveacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "paveacres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SWacres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SWacres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SWacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SWacres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SWAcresOther", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SWAcresOther", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SWAcresOther", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SWAcresOther", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SWfactor", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SWfactor", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SWfactor", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SWfactor", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PaveTreeAcres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PaveTreeAcres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PaveTreeAcres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PaveTreeAcres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_TraceVisit", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_TraceVisit", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_UpdateAtts", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UpdateAtts", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_UpdateAtts", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UpdateAtts", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DataSource", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSource", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DataSource", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSource", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ROWAcres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ROWAcres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ROWAcres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ROWAcres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ROWAcresOther", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ROWAcresOther", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ROWAcresOther", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ROWAcresOther", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_RFgrossacres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFgrossacres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_RFgrossacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFgrossacres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_RFtosurfacres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfacres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_RFtosurfacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfacres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_RFtosurfIMPacres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfIMPacres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_RFtosurfIMPacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfIMPacres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_PKgrossacres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKgrossacres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_PKgrossacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKgrossacres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_PKtosurfacres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfacres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_PKtosurfacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfacres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_PKtosurfIMPacres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfIMPacres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_PKtosurfIMPacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfIMPacres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_netacres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_netacres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_netacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_netacres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_netIMPacres", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_netIMPacres", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_netIMPacres", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_netIMPacres", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_IsActive", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.StormwaterControls_V12ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        mdl_SurfSC_ac.*\r\nFROM            mdl_SurfSC_ac";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StormwaterControlsDataSet.mdl_SurfSC_acDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StormwaterControlsDataSet.mdl_SurfSC_acDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StormwaterControlsDataSet.mdl_SurfSC_acDataTable dataTable = new StormwaterControlsDataSet.mdl_SurfSC_acDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet.mdl_SurfSC_acDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "mdl_SurfSC_ac");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_MAPINFO_ID, 
                    global::System.Nullable<int> Original_SurfSCID, 
                    string Original_NGTO, 
                    global::System.Nullable<double> Original_Slope, 
                    global::System.Nullable<double> Original_FlowLengthFt, 
                    global::System.Nullable<double> Original_dH, 
                    global::System.Nullable<double> Original_Imp_n, 
                    global::System.Nullable<double> Original_Per_n, 
                    global::System.Nullable<double> Original_Imp_sto, 
                    global::System.Nullable<double> Original_Per_sto, 
                    global::System.Nullable<double> Original_Suct, 
                    global::System.Nullable<double> Original_Hydcon, 
                    global::System.Nullable<double> Original_SMDMax, 
                    bool Original_issumped, 
                    global::System.Nullable<double> Original_totalgrossacres, 
                    global::System.Nullable<double> Original_paveacres, 
                    global::System.Nullable<double> Original_SWacres, 
                    global::System.Nullable<double> Original_SWAcresOther, 
                    global::System.Nullable<double> Original_SWfactor, 
                    global::System.Nullable<double> Original_PaveTreeAcres, 
                    string Original_TraceVisit, 
                    bool Original_UpdateAtts, 
                    string Original_DataSource, 
                    global::System.Nullable<double> Original_ROWAcres, 
                    global::System.Nullable<double> Original_ROWAcresOther, 
                    global::System.Nullable<double> Original_c_RFgrossacres, 
                    global::System.Nullable<double> Original_c_RFtosurfacres, 
                    global::System.Nullable<double> Original_c_RFtosurfIMPacres, 
                    global::System.Nullable<double> Original_c_PKgrossacres, 
                    global::System.Nullable<double> Original_c_PKtosurfacres, 
                    global::System.Nullable<double> Original_c_PKtosurfIMPacres, 
                    global::System.Nullable<double> Original_c_netacres, 
                    global::System.Nullable<double> Original_c_netIMPacres, 
                    bool Original_IsActive) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_SurfSCID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_SurfSCID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_NGTO == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_NGTO));
            }
            if ((Original_Slope.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((double)(Original_Slope.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_FlowLengthFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((double)(Original_FlowLengthFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_dH.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((double)(Original_dH.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_Imp_n.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((double)(Original_Imp_n.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_Per_n.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((double)(Original_Per_n.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_Imp_sto.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((double)(Original_Imp_sto.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_Per_sto.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((double)(Original_Per_sto.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_Suct.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((double)(Original_Suct.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_Hydcon.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((double)(Original_Hydcon.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_SMDMax.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((double)(Original_SMDMax.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[26].Value = ((bool)(Original_issumped));
            if ((Original_totalgrossacres.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((double)(Original_totalgrossacres.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_paveacres.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((double)(Original_paveacres.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_SWacres.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((double)(Original_SWacres.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_SWAcresOther.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((double)(Original_SWAcresOther.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_SWfactor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((double)(Original_SWfactor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_PaveTreeAcres.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((double)(Original_PaveTreeAcres.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_TraceVisit == null)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((string)(Original_TraceVisit));
            }
            this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[42].Value = ((bool)(Original_UpdateAtts));
            if ((Original_DataSource == null)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((string)(Original_DataSource));
            }
            if ((Original_ROWAcres.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((double)(Original_ROWAcres.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_ROWAcresOther.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((double)(Original_ROWAcresOther.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_c_RFgrossacres.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((double)(Original_c_RFgrossacres.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((Original_c_RFtosurfacres.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((double)(Original_c_RFtosurfacres.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((Original_c_RFtosurfIMPacres.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[54].Value = ((double)(Original_c_RFtosurfIMPacres.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((Original_c_PKgrossacres.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[56].Value = ((double)(Original_c_PKgrossacres.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((Original_c_PKtosurfacres.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[58].Value = ((double)(Original_c_PKtosurfacres.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((Original_c_PKtosurfIMPacres.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[60].Value = ((double)(Original_c_PKtosurfIMPacres.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((Original_c_netacres.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[62].Value = ((double)(Original_c_netacres.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((Original_c_netIMPacres.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[64].Value = ((double)(Original_c_netIMPacres.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[66].Value = ((bool)(Original_IsActive));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<int> SurfSCID, 
                    string NGTO, 
                    global::System.Nullable<double> Slope, 
                    global::System.Nullable<double> FlowLengthFt, 
                    global::System.Nullable<double> dH, 
                    global::System.Nullable<double> Imp_n, 
                    global::System.Nullable<double> Per_n, 
                    global::System.Nullable<double> Imp_sto, 
                    global::System.Nullable<double> Per_sto, 
                    global::System.Nullable<double> Suct, 
                    global::System.Nullable<double> Hydcon, 
                    global::System.Nullable<double> SMDMax, 
                    bool issumped, 
                    global::System.Nullable<double> totalgrossacres, 
                    global::System.Nullable<double> paveacres, 
                    global::System.Nullable<double> SWacres, 
                    global::System.Nullable<double> SWAcresOther, 
                    global::System.Nullable<double> SWfactor, 
                    global::System.Nullable<double> PaveTreeAcres, 
                    string TraceVisit, 
                    bool UpdateAtts, 
                    string DataSource, 
                    global::System.Nullable<double> ROWAcres, 
                    global::System.Nullable<double> ROWAcresOther, 
                    global::System.Nullable<double> c_RFgrossacres, 
                    global::System.Nullable<double> c_RFtosurfacres, 
                    global::System.Nullable<double> c_RFtosurfIMPacres, 
                    global::System.Nullable<double> c_PKgrossacres, 
                    global::System.Nullable<double> c_PKtosurfacres, 
                    global::System.Nullable<double> c_PKtosurfIMPacres, 
                    global::System.Nullable<double> c_netacres, 
                    global::System.Nullable<double> c_netIMPacres, 
                    bool IsActive) {
            if ((SurfSCID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(SurfSCID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((NGTO == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NGTO));
            }
            if ((Slope.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((double)(Slope.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((FlowLengthFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(FlowLengthFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((dH.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(dH.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Imp_n.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(Imp_n.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Per_n.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(Per_n.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Imp_sto.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(Imp_sto.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Per_sto.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(Per_sto.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Suct.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(Suct.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Hydcon.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(Hydcon.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((SMDMax.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(SMDMax.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[12].Value = ((bool)(issumped));
            if ((totalgrossacres.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((double)(totalgrossacres.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((paveacres.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((double)(paveacres.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((SWacres.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((double)(SWacres.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((SWAcresOther.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((double)(SWAcresOther.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((SWfactor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((double)(SWfactor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((PaveTreeAcres.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((double)(PaveTreeAcres.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((TraceVisit == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(TraceVisit));
            }
            this.Adapter.InsertCommand.Parameters[20].Value = ((bool)(UpdateAtts));
            if ((DataSource == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(DataSource));
            }
            if ((ROWAcres.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((double)(ROWAcres.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((ROWAcresOther.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((double)(ROWAcresOther.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((c_RFgrossacres.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((double)(c_RFgrossacres.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((c_RFtosurfacres.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((double)(c_RFtosurfacres.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((c_RFtosurfIMPacres.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((double)(c_RFtosurfIMPacres.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((c_PKgrossacres.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[27].Value = ((double)(c_PKgrossacres.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((c_PKtosurfacres.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[28].Value = ((double)(c_PKtosurfacres.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((c_PKtosurfIMPacres.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[29].Value = ((double)(c_PKtosurfIMPacres.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((c_netacres.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((double)(c_netacres.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((c_netIMPacres.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((double)(c_netIMPacres.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[32].Value = ((bool)(IsActive));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> SurfSCID, 
                    string NGTO, 
                    global::System.Nullable<double> Slope, 
                    global::System.Nullable<double> FlowLengthFt, 
                    global::System.Nullable<double> dH, 
                    global::System.Nullable<double> Imp_n, 
                    global::System.Nullable<double> Per_n, 
                    global::System.Nullable<double> Imp_sto, 
                    global::System.Nullable<double> Per_sto, 
                    global::System.Nullable<double> Suct, 
                    global::System.Nullable<double> Hydcon, 
                    global::System.Nullable<double> SMDMax, 
                    bool issumped, 
                    global::System.Nullable<double> totalgrossacres, 
                    global::System.Nullable<double> paveacres, 
                    global::System.Nullable<double> SWacres, 
                    global::System.Nullable<double> SWAcresOther, 
                    global::System.Nullable<double> SWfactor, 
                    global::System.Nullable<double> PaveTreeAcres, 
                    string TraceVisit, 
                    bool UpdateAtts, 
                    string DataSource, 
                    global::System.Nullable<double> ROWAcres, 
                    global::System.Nullable<double> ROWAcresOther, 
                    global::System.Nullable<double> c_RFgrossacres, 
                    global::System.Nullable<double> c_RFtosurfacres, 
                    global::System.Nullable<double> c_RFtosurfIMPacres, 
                    global::System.Nullable<double> c_PKgrossacres, 
                    global::System.Nullable<double> c_PKtosurfacres, 
                    global::System.Nullable<double> c_PKtosurfIMPacres, 
                    global::System.Nullable<double> c_netacres, 
                    global::System.Nullable<double> c_netIMPacres, 
                    bool IsActive, 
                    int Original_MAPINFO_ID, 
                    global::System.Nullable<int> Original_SurfSCID, 
                    string Original_NGTO, 
                    global::System.Nullable<double> Original_Slope, 
                    global::System.Nullable<double> Original_FlowLengthFt, 
                    global::System.Nullable<double> Original_dH, 
                    global::System.Nullable<double> Original_Imp_n, 
                    global::System.Nullable<double> Original_Per_n, 
                    global::System.Nullable<double> Original_Imp_sto, 
                    global::System.Nullable<double> Original_Per_sto, 
                    global::System.Nullable<double> Original_Suct, 
                    global::System.Nullable<double> Original_Hydcon, 
                    global::System.Nullable<double> Original_SMDMax, 
                    bool Original_issumped, 
                    global::System.Nullable<double> Original_totalgrossacres, 
                    global::System.Nullable<double> Original_paveacres, 
                    global::System.Nullable<double> Original_SWacres, 
                    global::System.Nullable<double> Original_SWAcresOther, 
                    global::System.Nullable<double> Original_SWfactor, 
                    global::System.Nullable<double> Original_PaveTreeAcres, 
                    string Original_TraceVisit, 
                    bool Original_UpdateAtts, 
                    string Original_DataSource, 
                    global::System.Nullable<double> Original_ROWAcres, 
                    global::System.Nullable<double> Original_ROWAcresOther, 
                    global::System.Nullable<double> Original_c_RFgrossacres, 
                    global::System.Nullable<double> Original_c_RFtosurfacres, 
                    global::System.Nullable<double> Original_c_RFtosurfIMPacres, 
                    global::System.Nullable<double> Original_c_PKgrossacres, 
                    global::System.Nullable<double> Original_c_PKtosurfacres, 
                    global::System.Nullable<double> Original_c_PKtosurfIMPacres, 
                    global::System.Nullable<double> Original_c_netacres, 
                    global::System.Nullable<double> Original_c_netIMPacres, 
                    bool Original_IsActive) {
            if ((SurfSCID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(SurfSCID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((NGTO == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NGTO));
            }
            if ((Slope.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((double)(Slope.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((FlowLengthFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((double)(FlowLengthFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((dH.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(dH.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Imp_n.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(Imp_n.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Per_n.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(Per_n.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Imp_sto.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(Imp_sto.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Per_sto.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((double)(Per_sto.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Suct.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((double)(Suct.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Hydcon.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((double)(Hydcon.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((SMDMax.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((double)(SMDMax.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((bool)(issumped));
            if ((totalgrossacres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((double)(totalgrossacres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((paveacres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((double)(paveacres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((SWacres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((double)(SWacres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((SWAcresOther.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((double)(SWAcresOther.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((SWfactor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((double)(SWfactor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((PaveTreeAcres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((double)(PaveTreeAcres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((TraceVisit == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(TraceVisit));
            }
            this.Adapter.UpdateCommand.Parameters[20].Value = ((bool)(UpdateAtts));
            if ((DataSource == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(DataSource));
            }
            if ((ROWAcres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((double)(ROWAcres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((ROWAcresOther.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((double)(ROWAcresOther.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((c_RFgrossacres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((double)(c_RFgrossacres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((c_RFtosurfacres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((double)(c_RFtosurfacres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((c_RFtosurfIMPacres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((double)(c_RFtosurfIMPacres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((c_PKgrossacres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((double)(c_PKgrossacres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((c_PKtosurfacres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((double)(c_PKtosurfacres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((c_PKtosurfIMPacres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((double)(c_PKtosurfIMPacres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((c_netacres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((double)(c_netacres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((c_netIMPacres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((double)(c_netIMPacres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[32].Value = ((bool)(IsActive));
            this.Adapter.UpdateCommand.Parameters[33].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_SurfSCID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((int)(Original_SurfSCID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((Original_NGTO == null)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(Original_NGTO));
            }
            if ((Original_Slope.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[39].Value = ((double)(Original_Slope.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((Original_FlowLengthFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[41].Value = ((double)(Original_FlowLengthFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((Original_dH.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[43].Value = ((double)(Original_dH.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((Original_Imp_n.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[45].Value = ((double)(Original_Imp_n.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((Original_Per_n.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[47].Value = ((double)(Original_Per_n.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            if ((Original_Imp_sto.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[49].Value = ((double)(Original_Imp_sto.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            if ((Original_Per_sto.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[51].Value = ((double)(Original_Per_sto.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((Original_Suct.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[53].Value = ((double)(Original_Suct.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            if ((Original_Hydcon.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[55].Value = ((double)(Original_Hydcon.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            if ((Original_SMDMax.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[57].Value = ((double)(Original_SMDMax.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[59].Value = ((bool)(Original_issumped));
            if ((Original_totalgrossacres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[61].Value = ((double)(Original_totalgrossacres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            if ((Original_paveacres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[63].Value = ((double)(Original_paveacres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            if ((Original_SWacres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[65].Value = ((double)(Original_SWacres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            if ((Original_SWAcresOther.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[67].Value = ((double)(Original_SWAcresOther.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            if ((Original_SWfactor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[69].Value = ((double)(Original_SWfactor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            if ((Original_PaveTreeAcres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[71].Value = ((double)(Original_PaveTreeAcres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            if ((Original_TraceVisit == null)) {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[73].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[73].Value = ((string)(Original_TraceVisit));
            }
            this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[75].Value = ((bool)(Original_UpdateAtts));
            if ((Original_DataSource == null)) {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[77].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[77].Value = ((string)(Original_DataSource));
            }
            if ((Original_ROWAcres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[79].Value = ((double)(Original_ROWAcres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[79].Value = global::System.DBNull.Value;
            }
            if ((Original_ROWAcresOther.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[81].Value = ((double)(Original_ROWAcresOther.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[81].Value = global::System.DBNull.Value;
            }
            if ((Original_c_RFgrossacres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[83].Value = ((double)(Original_c_RFgrossacres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[83].Value = global::System.DBNull.Value;
            }
            if ((Original_c_RFtosurfacres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[85].Value = ((double)(Original_c_RFtosurfacres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[85].Value = global::System.DBNull.Value;
            }
            if ((Original_c_RFtosurfIMPacres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[87].Value = ((double)(Original_c_RFtosurfIMPacres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[87].Value = global::System.DBNull.Value;
            }
            if ((Original_c_PKgrossacres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[89].Value = ((double)(Original_c_PKgrossacres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[89].Value = global::System.DBNull.Value;
            }
            if ((Original_c_PKtosurfacres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[91].Value = ((double)(Original_c_PKtosurfacres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[91].Value = global::System.DBNull.Value;
            }
            if ((Original_c_PKtosurfIMPacres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[93].Value = ((double)(Original_c_PKtosurfIMPacres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[93].Value = global::System.DBNull.Value;
            }
            if ((Original_c_netacres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[95].Value = ((double)(Original_c_netacres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[95].Value = global::System.DBNull.Value;
            }
            if ((Original_c_netIMPacres.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[96].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[97].Value = ((double)(Original_c_netIMPacres.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[96].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[97].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[98].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[99].Value = ((bool)(Original_IsActive));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ic_StreetTargetsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ic_StreetTargetsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ic_StreetTargets";
            tableMapping.ColumnMappings.Add("MAPINFO_ID", "MAPINFO_ID");
            tableMapping.ColumnMappings.Add("icID", "icID");
            tableMapping.ColumnMappings.Add("sICID", "sICID");
            tableMapping.ColumnMappings.Add("nGTOStreet", "nGTOStreet");
            tableMapping.ColumnMappings.Add("surfSCID", "surfSCID");
            tableMapping.ColumnMappings.Add("evaluation", "evaluation");
            tableMapping.ColumnMappings.Add("comments", "comments");
            tableMapping.ColumnMappings.Add("type", "type");
            tableMapping.ColumnMappings.Add("streetArea", "streetArea");
            tableMapping.ColumnMappings.Add("flowControl", "flowControl");
            tableMapping.ColumnMappings.Add("intersection", "intersection");
            tableMapping.ColumnMappings.Add("corner", "corner");
            tableMapping.ColumnMappings.Add("street1", "street1");
            tableMapping.ColumnMappings.Add("street1Area", "street1Area");
            tableMapping.ColumnMappings.Add("street1CExtVol", "street1CExtVol");
            tableMapping.ColumnMappings.Add("street1CExtFlow", "street1CExtFlow");
            tableMapping.ColumnMappings.Add("street2", "street2");
            tableMapping.ColumnMappings.Add("street2Area", "street2Area");
            tableMapping.ColumnMappings.Add("street2CExtVol", "street2CExtVol");
            tableMapping.ColumnMappings.Add("street2CExtFlow", "street2CExtFlow");
            tableMapping.ColumnMappings.Add("orificeArea", "orificeArea");
            tableMapping.ColumnMappings.Add("curbExtensionArea", "curbExtensionArea");
            tableMapping.ColumnMappings.Add("pondingVol", "pondingVol");
            tableMapping.ColumnMappings.Add("curbExtensionVol", "curbExtensionVol");
            tableMapping.ColumnMappings.Add("comments2", "comments2");
            tableMapping.ColumnMappings.Add("typeCode", "typeCode");
            tableMapping.ColumnMappings.Add("XPSWMM_Name", "XPSWMM_Name");
            tableMapping.ColumnMappings.Add("xCoord", "xCoord");
            tableMapping.ColumnMappings.Add("yCoord", "yCoord");
            tableMapping.ColumnMappings.Add("buildModelIC", "buildModelIC");
            tableMapping.ColumnMappings.Add("source", "source");
            tableMapping.ColumnMappings.Add("appendDate", "appendDate");
            tableMapping.ColumnMappings.Add("constructed", "constructed");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `ic_StreetTargets` WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `icID` I" +
                "S NULL) OR (`icID` = ?)) AND ((? = 1 AND `sICID` IS NULL) OR (`sICID` = ?)) AND " +
                "((? = 1 AND `nGTOStreet` IS NULL) OR (`nGTOStreet` = ?)) AND ((? = 1 AND `surfSC" +
                "ID` IS NULL) OR (`surfSCID` = ?)) AND ((? = 1 AND `evaluation` IS NULL) OR (`eva" +
                "luation` = ?)) AND ((? = 1 AND `comments` IS NULL) OR (`comments` = ?)) AND ((? " +
                "= 1 AND `type` IS NULL) OR (`type` = ?)) AND ((? = 1 AND `streetArea` IS NULL) O" +
                "R (`streetArea` = ?)) AND ((? = 1 AND `flowControl` IS NULL) OR (`flowControl` =" +
                " ?)) AND ((? = 1 AND `intersection` IS NULL) OR (`intersection` = ?)) AND ((? = " +
                "1 AND `corner` IS NULL) OR (`corner` = ?)) AND ((? = 1 AND `street1` IS NULL) OR" +
                " (`street1` = ?)) AND ((? = 1 AND `street1Area` IS NULL) OR (`street1Area` = ?))" +
                " AND ((? = 1 AND `street1CExtVol` IS NULL) OR (`street1CExtVol` = ?)) AND ((? = " +
                "1 AND `street1CExtFlow` IS NULL) OR (`street1CExtFlow` = ?)) AND ((? = 1 AND `st" +
                "reet2` IS NULL) OR (`street2` = ?)) AND ((? = 1 AND `street2Area` IS NULL) OR (`" +
                "street2Area` = ?)) AND ((? = 1 AND `street2CExtVol` IS NULL) OR (`street2CExtVol" +
                "` = ?)) AND ((? = 1 AND `street2CExtFlow` IS NULL) OR (`street2CExtFlow` = ?)) A" +
                "ND ((? = 1 AND `orificeArea` IS NULL) OR (`orificeArea` = ?)) AND ((? = 1 AND `c" +
                "urbExtensionArea` IS NULL) OR (`curbExtensionArea` = ?)) AND ((? = 1 AND `pondin" +
                "gVol` IS NULL) OR (`pondingVol` = ?)) AND ((? = 1 AND `curbExtensionVol` IS NULL" +
                ") OR (`curbExtensionVol` = ?)) AND ((? = 1 AND `comments2` IS NULL) OR (`comment" +
                "s2` = ?)) AND ((? = 1 AND `typeCode` IS NULL) OR (`typeCode` = ?)) AND ((? = 1 A" +
                "ND `XPSWMM_Name` IS NULL) OR (`XPSWMM_Name` = ?)) AND ((? = 1 AND `xCoord` IS NU" +
                "LL) OR (`xCoord` = ?)) AND ((? = 1 AND `yCoord` IS NULL) OR (`yCoord` = ?)) AND " +
                "((? = 1 AND `buildModelIC` IS NULL) OR (`buildModelIC` = ?)) AND ((? = 1 AND `so" +
                "urce` IS NULL) OR (`source` = ?)) AND ((? = 1 AND `appendDate` IS NULL) OR (`app" +
                "endDate` = ?)) AND ((? = 1 AND `constructed` IS NULL) OR (`constructed` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_icID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "icID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_icID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "icID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_sICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_sICID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_nGTOStreet", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTOStreet", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_nGTOStreet", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTOStreet", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_surfSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "surfSCID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_surfSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "surfSCID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_evaluation", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "evaluation", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_evaluation", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "evaluation", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_comments", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_type", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "type", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_type", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "type", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_streetArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "streetArea", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_streetArea", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "streetArea", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_flowControl", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "flowControl", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_flowControl", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "flowControl", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_intersection", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "intersection", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_intersection", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "intersection", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_corner", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "corner", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_corner", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "corner", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_street1", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_street1", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_street1Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1Area", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_street1Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1Area", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_street1CExtVol", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1CExtVol", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_street1CExtVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1CExtVol", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_street1CExtFlow", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1CExtFlow", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_street1CExtFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1CExtFlow", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_street2", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_street2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_street2Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2Area", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_street2Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2Area", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_street2CExtVol", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2CExtVol", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_street2CExtVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2CExtVol", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_street2CExtFlow", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2CExtFlow", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_street2CExtFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2CExtFlow", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_orificeArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "orificeArea", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_orificeArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "orificeArea", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_curbExtensionArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "curbExtensionArea", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_curbExtensionArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "curbExtensionArea", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_pondingVol", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pondingVol", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_pondingVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pondingVol", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_curbExtensionVol", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "curbExtensionVol", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_curbExtensionVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "curbExtensionVol", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_comments2", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments2", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_comments2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments2", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_typeCode", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "typeCode", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_typeCode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "typeCode", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_XPSWMM_Name", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XPSWMM_Name", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_XPSWMM_Name", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XPSWMM_Name", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_xCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xCoord", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_xCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xCoord", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_yCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "yCoord", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_yCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "yCoord", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_buildModelIC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "buildModelIC", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_buildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "buildModelIC", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_source", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "source", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "source", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_appendDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "appendDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_appendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "appendDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "constructed", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "constructed", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `ic_StreetTargets` (`icID`, `sICID`, `nGTOStreet`, `surfSCID`, `evaluation`, `comments`, `type`, `streetArea`, `flowControl`, `intersection`, `corner`, `street1`, `street1Area`, `street1CExtVol`, `street1CExtFlow`, `street2`, `street2Area`, `street2CExtVol`, `street2CExtFlow`, `orificeArea`, `curbExtensionArea`, `pondingVol`, `curbExtensionVol`, `comments2`, `typeCode`, `XPSWMM_Name`, `xCoord`, `yCoord`, `buildModelIC`, `source`, `appendDate`, `constructed`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("icID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "icID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("sICID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("nGTOStreet", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTOStreet", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("surfSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "surfSCID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("evaluation", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "evaluation", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("type", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "type", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("streetArea", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "streetArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("flowControl", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "flowControl", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("intersection", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "intersection", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("corner", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "corner", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("street1", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("street1Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1Area", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("street1CExtVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1CExtVol", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("street1CExtFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1CExtFlow", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("street2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("street2Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2Area", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("street2CExtVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2CExtVol", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("street2CExtFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2CExtFlow", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("orificeArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "orificeArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("curbExtensionArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "curbExtensionArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pondingVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pondingVol", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("curbExtensionVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "curbExtensionVol", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("comments2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments2", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("typeCode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "typeCode", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("XPSWMM_Name", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XPSWMM_Name", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xCoord", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("yCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "yCoord", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("buildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "buildModelIC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "source", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("appendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "appendDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "constructed", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE `ic_StreetTargets` SET `icID` = ?, `sICID` = ?, `nGTOStreet` = ?, `surfSCI" +
                "D` = ?, `evaluation` = ?, `comments` = ?, `type` = ?, `streetArea` = ?, `flowCon" +
                "trol` = ?, `intersection` = ?, `corner` = ?, `street1` = ?, `street1Area` = ?, `" +
                "street1CExtVol` = ?, `street1CExtFlow` = ?, `street2` = ?, `street2Area` = ?, `s" +
                "treet2CExtVol` = ?, `street2CExtFlow` = ?, `orificeArea` = ?, `curbExtensionArea" +
                "` = ?, `pondingVol` = ?, `curbExtensionVol` = ?, `comments2` = ?, `typeCode` = ?" +
                ", `XPSWMM_Name` = ?, `xCoord` = ?, `yCoord` = ?, `buildModelIC` = ?, `source` = " +
                "?, `appendDate` = ?, `constructed` = ? WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND" +
                " `icID` IS NULL) OR (`icID` = ?)) AND ((? = 1 AND `sICID` IS NULL) OR (`sICID` =" +
                " ?)) AND ((? = 1 AND `nGTOStreet` IS NULL) OR (`nGTOStreet` = ?)) AND ((? = 1 AN" +
                "D `surfSCID` IS NULL) OR (`surfSCID` = ?)) AND ((? = 1 AND `evaluation` IS NULL)" +
                " OR (`evaluation` = ?)) AND ((? = 1 AND `comments` IS NULL) OR (`comments` = ?))" +
                " AND ((? = 1 AND `type` IS NULL) OR (`type` = ?)) AND ((? = 1 AND `streetArea` I" +
                "S NULL) OR (`streetArea` = ?)) AND ((? = 1 AND `flowControl` IS NULL) OR (`flowC" +
                "ontrol` = ?)) AND ((? = 1 AND `intersection` IS NULL) OR (`intersection` = ?)) A" +
                "ND ((? = 1 AND `corner` IS NULL) OR (`corner` = ?)) AND ((? = 1 AND `street1` IS" +
                " NULL) OR (`street1` = ?)) AND ((? = 1 AND `street1Area` IS NULL) OR (`street1Ar" +
                "ea` = ?)) AND ((? = 1 AND `street1CExtVol` IS NULL) OR (`street1CExtVol` = ?)) A" +
                "ND ((? = 1 AND `street1CExtFlow` IS NULL) OR (`street1CExtFlow` = ?)) AND ((? = " +
                "1 AND `street2` IS NULL) OR (`street2` = ?)) AND ((? = 1 AND `street2Area` IS NU" +
                "LL) OR (`street2Area` = ?)) AND ((? = 1 AND `street2CExtVol` IS NULL) OR (`stree" +
                "t2CExtVol` = ?)) AND ((? = 1 AND `street2CExtFlow` IS NULL) OR (`street2CExtFlow" +
                "` = ?)) AND ((? = 1 AND `orificeArea` IS NULL) OR (`orificeArea` = ?)) AND ((? =" +
                " 1 AND `curbExtensionArea` IS NULL) OR (`curbExtensionArea` = ?)) AND ((? = 1 AN" +
                "D `pondingVol` IS NULL) OR (`pondingVol` = ?)) AND ((? = 1 AND `curbExtensionVol" +
                "` IS NULL) OR (`curbExtensionVol` = ?)) AND ((? = 1 AND `comments2` IS NULL) OR " +
                "(`comments2` = ?)) AND ((? = 1 AND `typeCode` IS NULL) OR (`typeCode` = ?)) AND " +
                "((? = 1 AND `XPSWMM_Name` IS NULL) OR (`XPSWMM_Name` = ?)) AND ((? = 1 AND `xCoo" +
                "rd` IS NULL) OR (`xCoord` = ?)) AND ((? = 1 AND `yCoord` IS NULL) OR (`yCoord` =" +
                " ?)) AND ((? = 1 AND `buildModelIC` IS NULL) OR (`buildModelIC` = ?)) AND ((? = " +
                "1 AND `source` IS NULL) OR (`source` = ?)) AND ((? = 1 AND `appendDate` IS NULL)" +
                " OR (`appendDate` = ?)) AND ((? = 1 AND `constructed` IS NULL) OR (`constructed`" +
                " = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("icID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "icID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("sICID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("nGTOStreet", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTOStreet", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("surfSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "surfSCID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("evaluation", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "evaluation", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("type", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "type", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("streetArea", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "streetArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("flowControl", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "flowControl", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("intersection", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "intersection", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("corner", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "corner", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("street1", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("street1Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1Area", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("street1CExtVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1CExtVol", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("street1CExtFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1CExtFlow", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("street2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("street2Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2Area", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("street2CExtVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2CExtVol", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("street2CExtFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2CExtFlow", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("orificeArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "orificeArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("curbExtensionArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "curbExtensionArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pondingVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pondingVol", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("curbExtensionVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "curbExtensionVol", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("comments2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments2", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("typeCode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "typeCode", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("XPSWMM_Name", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XPSWMM_Name", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xCoord", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("yCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "yCoord", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("buildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "buildModelIC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "source", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("appendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "appendDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "constructed", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_icID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "icID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_icID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "icID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_sICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_sICID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_nGTOStreet", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTOStreet", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_nGTOStreet", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTOStreet", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_surfSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "surfSCID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_surfSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "surfSCID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_evaluation", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "evaluation", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_evaluation", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "evaluation", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_comments", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_type", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "type", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_type", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "type", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_streetArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "streetArea", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_streetArea", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "streetArea", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_flowControl", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "flowControl", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_flowControl", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "flowControl", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_intersection", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "intersection", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_intersection", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "intersection", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_corner", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "corner", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_corner", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "corner", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_street1", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_street1", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_street1Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1Area", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_street1Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1Area", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_street1CExtVol", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1CExtVol", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_street1CExtVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1CExtVol", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_street1CExtFlow", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1CExtFlow", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_street1CExtFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street1CExtFlow", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_street2", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_street2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_street2Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2Area", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_street2Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2Area", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_street2CExtVol", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2CExtVol", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_street2CExtVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2CExtVol", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_street2CExtFlow", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2CExtFlow", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_street2CExtFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "street2CExtFlow", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_orificeArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "orificeArea", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_orificeArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "orificeArea", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_curbExtensionArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "curbExtensionArea", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_curbExtensionArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "curbExtensionArea", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_pondingVol", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pondingVol", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_pondingVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pondingVol", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_curbExtensionVol", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "curbExtensionVol", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_curbExtensionVol", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "curbExtensionVol", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_comments2", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments2", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_comments2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments2", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_typeCode", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "typeCode", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_typeCode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "typeCode", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_XPSWMM_Name", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XPSWMM_Name", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_XPSWMM_Name", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "XPSWMM_Name", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_xCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xCoord", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_xCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xCoord", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_yCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "yCoord", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_yCoord", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "yCoord", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_buildModelIC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "buildModelIC", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_buildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "buildModelIC", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_source", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "source", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "source", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_appendDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "appendDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_appendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "appendDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "constructed", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "constructed", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.StormwaterControls_V12ConnString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     ic_StreetTargets.*\r\nFROM         ic_StreetTargets";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StormwaterControlsDataSet.ic_StreetTargetsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StormwaterControlsDataSet.ic_StreetTargetsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StormwaterControlsDataSet.ic_StreetTargetsDataTable dataTable = new StormwaterControlsDataSet.ic_StreetTargetsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet.ic_StreetTargetsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ic_StreetTargets");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_MAPINFO_ID, 
                    global::System.Nullable<int> Original_icID, 
                    string Original_sICID, 
                    string Original_nGTOStreet, 
                    global::System.Nullable<int> Original_surfSCID, 
                    string Original_evaluation, 
                    string Original_comments, 
                    string Original_type, 
                    global::System.Nullable<double> Original_streetArea, 
                    global::System.Nullable<double> Original_flowControl, 
                    string Original_intersection, 
                    string Original_corner, 
                    string Original_street1, 
                    global::System.Nullable<int> Original_street1Area, 
                    global::System.Nullable<short> Original_street1CExtVol, 
                    global::System.Nullable<double> Original_street1CExtFlow, 
                    string Original_street2, 
                    global::System.Nullable<int> Original_street2Area, 
                    global::System.Nullable<short> Original_street2CExtVol, 
                    global::System.Nullable<double> Original_street2CExtFlow, 
                    global::System.Nullable<int> Original_orificeArea, 
                    global::System.Nullable<int> Original_curbExtensionArea, 
                    global::System.Nullable<short> Original_pondingVol, 
                    global::System.Nullable<short> Original_curbExtensionVol, 
                    string Original_comments2, 
                    string Original_typeCode, 
                    string Original_XPSWMM_Name, 
                    global::System.Nullable<int> Original_xCoord, 
                    global::System.Nullable<int> Original_yCoord, 
                    bool Original_buildModelIC, 
                    string Original_source, 
                    string Original_appendDate, 
                    global::System.Nullable<int> Original_constructed) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_icID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_icID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_sICID == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_sICID));
            }
            if ((Original_nGTOStreet == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_nGTOStreet));
            }
            if ((Original_surfSCID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_surfSCID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_evaluation == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_evaluation));
            }
            if ((Original_comments == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_comments));
            }
            if ((Original_type == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_type));
            }
            if ((Original_streetArea.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((double)(Original_streetArea.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_flowControl.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((double)(Original_flowControl.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_intersection == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_intersection));
            }
            if ((Original_corner == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_corner));
            }
            if ((Original_street1 == null)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_street1));
            }
            if ((Original_street1Area.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((int)(Original_street1Area.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_street1CExtVol.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((short)(Original_street1CExtVol.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_street1CExtFlow.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((double)(Original_street1CExtFlow.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_street2 == null)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((string)(Original_street2));
            }
            if ((Original_street2Area.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((int)(Original_street2Area.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_street2CExtVol.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((short)(Original_street2CExtVol.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_street2CExtFlow.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((double)(Original_street2CExtFlow.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_orificeArea.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((int)(Original_orificeArea.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_curbExtensionArea.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((int)(Original_curbExtensionArea.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((Original_pondingVol.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((short)(Original_pondingVol.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((Original_curbExtensionVol.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((short)(Original_curbExtensionVol.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_comments2 == null)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((string)(Original_comments2));
            }
            if ((Original_typeCode == null)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((string)(Original_typeCode));
            }
            if ((Original_XPSWMM_Name == null)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((string)(Original_XPSWMM_Name));
            }
            if ((Original_xCoord.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[54].Value = ((int)(Original_xCoord.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((Original_yCoord.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[56].Value = ((int)(Original_yCoord.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[58].Value = ((bool)(Original_buildModelIC));
            if ((Original_source == null)) {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[60].Value = ((string)(Original_source));
            }
            if ((Original_appendDate == null)) {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[62].Value = ((string)(Original_appendDate));
            }
            if ((Original_constructed.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[64].Value = ((int)(Original_constructed.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<int> icID, 
                    string sICID, 
                    string nGTOStreet, 
                    global::System.Nullable<int> surfSCID, 
                    string evaluation, 
                    string comments, 
                    string type, 
                    global::System.Nullable<double> streetArea, 
                    global::System.Nullable<double> flowControl, 
                    string intersection, 
                    string corner, 
                    string street1, 
                    global::System.Nullable<int> street1Area, 
                    global::System.Nullable<short> street1CExtVol, 
                    global::System.Nullable<double> street1CExtFlow, 
                    string street2, 
                    global::System.Nullable<int> street2Area, 
                    global::System.Nullable<short> street2CExtVol, 
                    global::System.Nullable<double> street2CExtFlow, 
                    global::System.Nullable<int> orificeArea, 
                    global::System.Nullable<int> curbExtensionArea, 
                    global::System.Nullable<short> pondingVol, 
                    global::System.Nullable<short> curbExtensionVol, 
                    string comments2, 
                    string typeCode, 
                    string XPSWMM_Name, 
                    global::System.Nullable<int> xCoord, 
                    global::System.Nullable<int> yCoord, 
                    bool buildModelIC, 
                    string source, 
                    string appendDate, 
                    global::System.Nullable<int> constructed) {
            if ((icID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(icID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((sICID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(sICID));
            }
            if ((nGTOStreet == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(nGTOStreet));
            }
            if ((surfSCID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(surfSCID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((evaluation == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(evaluation));
            }
            if ((comments == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(comments));
            }
            if ((type == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(type));
            }
            if ((streetArea.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(streetArea.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((flowControl.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(flowControl.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((intersection == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(intersection));
            }
            if ((corner == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(corner));
            }
            if ((street1 == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(street1));
            }
            if ((street1Area.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((int)(street1Area.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((street1CExtVol.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((short)(street1CExtVol.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((street1CExtFlow.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((double)(street1CExtFlow.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((street2 == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(street2));
            }
            if ((street2Area.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((int)(street2Area.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((street2CExtVol.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((short)(street2CExtVol.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((street2CExtFlow.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((double)(street2CExtFlow.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((orificeArea.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((int)(orificeArea.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((curbExtensionArea.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((int)(curbExtensionArea.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((pondingVol.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((short)(pondingVol.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((curbExtensionVol.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((short)(curbExtensionVol.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((comments2 == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(comments2));
            }
            if ((typeCode == null)) {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((string)(typeCode));
            }
            if ((XPSWMM_Name == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(XPSWMM_Name));
            }
            if ((xCoord.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((int)(xCoord.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((yCoord.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[27].Value = ((int)(yCoord.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[28].Value = ((bool)(buildModelIC));
            if ((source == null)) {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = ((string)(source));
            }
            if ((appendDate == null)) {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = ((string)(appendDate));
            }
            if ((constructed.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((int)(constructed.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> icID, 
                    string sICID, 
                    string nGTOStreet, 
                    global::System.Nullable<int> surfSCID, 
                    string evaluation, 
                    string comments, 
                    string type, 
                    global::System.Nullable<double> streetArea, 
                    global::System.Nullable<double> flowControl, 
                    string intersection, 
                    string corner, 
                    string street1, 
                    global::System.Nullable<int> street1Area, 
                    global::System.Nullable<short> street1CExtVol, 
                    global::System.Nullable<double> street1CExtFlow, 
                    string street2, 
                    global::System.Nullable<int> street2Area, 
                    global::System.Nullable<short> street2CExtVol, 
                    global::System.Nullable<double> street2CExtFlow, 
                    global::System.Nullable<int> orificeArea, 
                    global::System.Nullable<int> curbExtensionArea, 
                    global::System.Nullable<short> pondingVol, 
                    global::System.Nullable<short> curbExtensionVol, 
                    string comments2, 
                    string typeCode, 
                    string XPSWMM_Name, 
                    global::System.Nullable<int> xCoord, 
                    global::System.Nullable<int> yCoord, 
                    bool buildModelIC, 
                    string source, 
                    string appendDate, 
                    global::System.Nullable<int> constructed, 
                    int Original_MAPINFO_ID, 
                    global::System.Nullable<int> Original_icID, 
                    string Original_sICID, 
                    string Original_nGTOStreet, 
                    global::System.Nullable<int> Original_surfSCID, 
                    string Original_evaluation, 
                    string Original_comments, 
                    string Original_type, 
                    global::System.Nullable<double> Original_streetArea, 
                    global::System.Nullable<double> Original_flowControl, 
                    string Original_intersection, 
                    string Original_corner, 
                    string Original_street1, 
                    global::System.Nullable<int> Original_street1Area, 
                    global::System.Nullable<short> Original_street1CExtVol, 
                    global::System.Nullable<double> Original_street1CExtFlow, 
                    string Original_street2, 
                    global::System.Nullable<int> Original_street2Area, 
                    global::System.Nullable<short> Original_street2CExtVol, 
                    global::System.Nullable<double> Original_street2CExtFlow, 
                    global::System.Nullable<int> Original_orificeArea, 
                    global::System.Nullable<int> Original_curbExtensionArea, 
                    global::System.Nullable<short> Original_pondingVol, 
                    global::System.Nullable<short> Original_curbExtensionVol, 
                    string Original_comments2, 
                    string Original_typeCode, 
                    string Original_XPSWMM_Name, 
                    global::System.Nullable<int> Original_xCoord, 
                    global::System.Nullable<int> Original_yCoord, 
                    bool Original_buildModelIC, 
                    string Original_source, 
                    string Original_appendDate, 
                    global::System.Nullable<int> Original_constructed) {
            if ((icID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(icID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((sICID == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(sICID));
            }
            if ((nGTOStreet == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(nGTOStreet));
            }
            if ((surfSCID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(surfSCID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((evaluation == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(evaluation));
            }
            if ((comments == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(comments));
            }
            if ((type == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(type));
            }
            if ((streetArea.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(streetArea.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((flowControl.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((double)(flowControl.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((intersection == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(intersection));
            }
            if ((corner == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(corner));
            }
            if ((street1 == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(street1));
            }
            if ((street1Area.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(street1Area.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((street1CExtVol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((short)(street1CExtVol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((street1CExtFlow.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((double)(street1CExtFlow.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((street2 == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(street2));
            }
            if ((street2Area.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(street2Area.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((street2CExtVol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((short)(street2CExtVol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((street2CExtFlow.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((double)(street2CExtFlow.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((orificeArea.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(orificeArea.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((curbExtensionArea.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(curbExtensionArea.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((pondingVol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((short)(pondingVol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((curbExtensionVol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((short)(curbExtensionVol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((comments2 == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(comments2));
            }
            if ((typeCode == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(typeCode));
            }
            if ((XPSWMM_Name == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(XPSWMM_Name));
            }
            if ((xCoord.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(xCoord.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((yCoord.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(yCoord.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[28].Value = ((bool)(buildModelIC));
            if ((source == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(source));
            }
            if ((appendDate == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(appendDate));
            }
            if ((constructed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((int)(constructed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_icID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((int)(Original_icID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_sICID == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_sICID));
            }
            if ((Original_nGTOStreet == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_nGTOStreet));
            }
            if ((Original_surfSCID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((int)(Original_surfSCID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_evaluation == null)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Original_evaluation));
            }
            if ((Original_comments == null)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_comments));
            }
            if ((Original_type == null)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(Original_type));
            }
            if ((Original_streetArea.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((double)(Original_streetArea.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_flowControl.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((double)(Original_flowControl.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((Original_intersection == null)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[52].Value = ((string)(Original_intersection));
            }
            if ((Original_corner == null)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[54].Value = ((string)(Original_corner));
            }
            if ((Original_street1 == null)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[56].Value = ((string)(Original_street1));
            }
            if ((Original_street1Area.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[58].Value = ((int)(Original_street1Area.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((Original_street1CExtVol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[60].Value = ((short)(Original_street1CExtVol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((Original_street1CExtFlow.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[62].Value = ((double)(Original_street1CExtFlow.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((Original_street2 == null)) {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[64].Value = ((string)(Original_street2));
            }
            if ((Original_street2Area.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[66].Value = ((int)(Original_street2Area.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            if ((Original_street2CExtVol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[68].Value = ((short)(Original_street2CExtVol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            if ((Original_street2CExtFlow.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[70].Value = ((double)(Original_street2CExtFlow.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            if ((Original_orificeArea.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[72].Value = ((int)(Original_orificeArea.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            if ((Original_curbExtensionArea.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[74].Value = ((int)(Original_curbExtensionArea.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[74].Value = global::System.DBNull.Value;
            }
            if ((Original_pondingVol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[76].Value = ((short)(Original_pondingVol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            if ((Original_curbExtensionVol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[78].Value = ((short)(Original_curbExtensionVol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            if ((Original_comments2 == null)) {
                this.Adapter.UpdateCommand.Parameters[79].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[79].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[80].Value = ((string)(Original_comments2));
            }
            if ((Original_typeCode == null)) {
                this.Adapter.UpdateCommand.Parameters[81].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[82].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[81].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[82].Value = ((string)(Original_typeCode));
            }
            if ((Original_XPSWMM_Name == null)) {
                this.Adapter.UpdateCommand.Parameters[83].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[84].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[83].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[84].Value = ((string)(Original_XPSWMM_Name));
            }
            if ((Original_xCoord.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[85].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[86].Value = ((int)(Original_xCoord.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[85].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[86].Value = global::System.DBNull.Value;
            }
            if ((Original_yCoord.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[87].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[88].Value = ((int)(Original_yCoord.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[87].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[88].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[89].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[90].Value = ((bool)(Original_buildModelIC));
            if ((Original_source == null)) {
                this.Adapter.UpdateCommand.Parameters[91].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[92].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[91].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[92].Value = ((string)(Original_source));
            }
            if ((Original_appendDate == null)) {
                this.Adapter.UpdateCommand.Parameters[93].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[94].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[93].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[94].Value = ((string)(Original_appendDate));
            }
            if ((Original_constructed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[95].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[96].Value = ((int)(Original_constructed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[95].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[96].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ic_RoofTargetsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ic_RoofTargetsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ic_RoofTargets";
            tableMapping.ColumnMappings.Add("MAPINFO_ID", "MAPINFO_ID");
            tableMapping.ColumnMappings.Add("icID", "icID");
            tableMapping.ColumnMappings.Add("rICID", "rICID");
            tableMapping.ColumnMappings.Add("parcelID", "parcelID");
            tableMapping.ColumnMappings.Add("divideID", "divideID");
            tableMapping.ColumnMappings.Add("dscID", "dscID");
            tableMapping.ColumnMappings.Add("nGTORoof", "nGTORoof");
            tableMapping.ColumnMappings.Add("exICFtRoof", "exICFtRoof");
            tableMapping.ColumnMappings.Add("exRfAreaFt", "exRfAreaFt");
            tableMapping.ColumnMappings.Add("externalDS", "externalDS");
            tableMapping.ColumnMappings.Add("dsTotal", "dsTotal");
            tableMapping.ColumnMappings.Add("extoVeg", "extoVeg");
            tableMapping.ColumnMappings.Add("extoStreet", "extoStreet");
            tableMapping.ColumnMappings.Add("extoPlanter", "extoPlanter");
            tableMapping.ColumnMappings.Add("extoBioretention", "extoBioretention");
            tableMapping.ColumnMappings.Add("extoDrywell", "extoDrywell");
            tableMapping.ColumnMappings.Add("extoEcoroof", "extoEcoroof");
            tableMapping.ColumnMappings.Add("dstoVeg", "dstoVeg");
            tableMapping.ColumnMappings.Add("dstoStreet", "dstoStreet");
            tableMapping.ColumnMappings.Add("dstoPlanter", "dstoPlanter");
            tableMapping.ColumnMappings.Add("dstoBioretention", "dstoBioretention");
            tableMapping.ColumnMappings.Add("dstoDrywell", "dstoDrywell");
            tableMapping.ColumnMappings.Add("dstoEcoroof", "dstoEcoroof");
            tableMapping.ColumnMappings.Add("dsUncontrollable", "dsUncontrollable");
            tableMapping.ColumnMappings.Add("landscapeAvailable", "landscapeAvailable");
            tableMapping.ColumnMappings.Add("fractionDrained", "fractionDrained");
            tableMapping.ColumnMappings.Add("difficulty", "difficulty");
            tableMapping.ColumnMappings.Add("roofEffDisc", "roofEffDisc");
            tableMapping.ColumnMappings.Add("comments", "comments");
            tableMapping.ColumnMappings.Add("plantersOK", "plantersOK");
            tableMapping.ColumnMappings.Add("bioretentionOK", "bioretentionOK");
            tableMapping.ColumnMappings.Add("buildModelIC", "buildModelIC");
            tableMapping.ColumnMappings.Add("source", "source");
            tableMapping.ColumnMappings.Add("appendDate", "appendDate");
            tableMapping.ColumnMappings.Add("constructed", "constructed");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `ic_RoofTargets` WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `icID` IS " +
                "NULL) OR (`icID` = ?)) AND ((? = 1 AND `rICID` IS NULL) OR (`rICID` = ?)) AND ((" +
                "? = 1 AND `parcelID` IS NULL) OR (`parcelID` = ?)) AND ((? = 1 AND `divideID` IS" +
                " NULL) OR (`divideID` = ?)) AND ((? = 1 AND `dscID` IS NULL) OR (`dscID` = ?)) A" +
                "ND ((? = 1 AND `nGTORoof` IS NULL) OR (`nGTORoof` = ?)) AND ((? = 1 AND `exICFtR" +
                "oof` IS NULL) OR (`exICFtRoof` = ?)) AND ((? = 1 AND `exRfAreaFt` IS NULL) OR (`" +
                "exRfAreaFt` = ?)) AND ((? = 1 AND `externalDS` IS NULL) OR (`externalDS` = ?)) A" +
                "ND ((? = 1 AND `dsTotal` IS NULL) OR (`dsTotal` = ?)) AND ((? = 1 AND `extoVeg` " +
                "IS NULL) OR (`extoVeg` = ?)) AND ((? = 1 AND `extoStreet` IS NULL) OR (`extoStre" +
                "et` = ?)) AND ((? = 1 AND `extoPlanter` IS NULL) OR (`extoPlanter` = ?)) AND ((?" +
                " = 1 AND `extoBioretention` IS NULL) OR (`extoBioretention` = ?)) AND ((? = 1 AN" +
                "D `extoDrywell` IS NULL) OR (`extoDrywell` = ?)) AND ((? = 1 AND `extoEcoroof` I" +
                "S NULL) OR (`extoEcoroof` = ?)) AND ((? = 1 AND `dstoVeg` IS NULL) OR (`dstoVeg`" +
                " = ?)) AND ((? = 1 AND `dstoStreet` IS NULL) OR (`dstoStreet` = ?)) AND ((? = 1 " +
                "AND `dstoPlanter` IS NULL) OR (`dstoPlanter` = ?)) AND ((? = 1 AND `dstoBioreten" +
                "tion` IS NULL) OR (`dstoBioretention` = ?)) AND ((? = 1 AND `dstoDrywell` IS NUL" +
                "L) OR (`dstoDrywell` = ?)) AND ((? = 1 AND `dstoEcoroof` IS NULL) OR (`dstoEcoro" +
                "of` = ?)) AND ((? = 1 AND `dsUncontrollable` IS NULL) OR (`dsUncontrollable` = ?" +
                ")) AND ((? = 1 AND `landscapeAvailable` IS NULL) OR (`landscapeAvailable` = ?)) " +
                "AND ((? = 1 AND `fractionDrained` IS NULL) OR (`fractionDrained` = ?)) AND ((? =" +
                " 1 AND `difficulty` IS NULL) OR (`difficulty` = ?)) AND ((? = 1 AND `roofEffDisc" +
                "` IS NULL) OR (`roofEffDisc` = ?)) AND ((? = 1 AND `comments` IS NULL) OR (`comm" +
                "ents` = ?)) AND ((? = 1 AND `plantersOK` IS NULL) OR (`plantersOK` = ?)) AND ((?" +
                " = 1 AND `bioretentionOK` IS NULL) OR (`bioretentionOK` = ?)) AND ((? = 1 AND `b" +
                "uildModelIC` IS NULL) OR (`buildModelIC` = ?)) AND ((? = 1 AND `source` IS NULL)" +
                " OR (`source` = ?)) AND ((? = 1 AND `appendDate` IS NULL) OR (`appendDate` = ?))" +
                " AND ((? = 1 AND `constructed` IS NULL) OR (`constructed` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_icID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "icID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_icID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "icID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_rICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "rICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_rICID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "rICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_parcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parcelID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_parcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parcelID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_divideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "divideID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_divideID", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "divideID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_nGTORoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTORoof", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_nGTORoof", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTORoof", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_exICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exICFtRoof", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_exICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exICFtRoof", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_exRfAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exRfAreaFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_exRfAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exRfAreaFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_externalDS", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "externalDS", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_externalDS", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "externalDS", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dsTotal", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dsTotal", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dsTotal", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dsTotal", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_extoVeg", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoVeg", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_extoVeg", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoVeg", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_extoStreet", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoStreet", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_extoStreet", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoStreet", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_extoPlanter", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoPlanter", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_extoPlanter", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoPlanter", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_extoBioretention", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoBioretention", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_extoBioretention", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoBioretention", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_extoDrywell", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoDrywell", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_extoDrywell", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoDrywell", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_extoEcoroof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoEcoroof", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_extoEcoroof", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoEcoroof", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dstoVeg", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoVeg", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dstoVeg", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoVeg", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dstoStreet", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoStreet", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dstoStreet", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoStreet", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dstoPlanter", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoPlanter", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dstoPlanter", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoPlanter", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dstoBioretention", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoBioretention", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dstoBioretention", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoBioretention", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dstoDrywell", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoDrywell", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dstoDrywell", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoDrywell", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dstoEcoroof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoEcoroof", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dstoEcoroof", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoEcoroof", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dsUncontrollable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dsUncontrollable", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dsUncontrollable", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dsUncontrollable", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_landscapeAvailable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "landscapeAvailable", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_landscapeAvailable", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "landscapeAvailable", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_fractionDrained", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fractionDrained", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_fractionDrained", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fractionDrained", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_difficulty", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "difficulty", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "difficulty", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_roofEffDisc", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "roofEffDisc", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_roofEffDisc", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "roofEffDisc", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_comments", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_plantersOK", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "plantersOK", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_plantersOK", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "plantersOK", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_bioretentionOK", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "bioretentionOK", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_bioretentionOK", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "bioretentionOK", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_buildModelIC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "buildModelIC", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_buildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "buildModelIC", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_source", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "source", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "source", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_appendDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "appendDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_appendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "appendDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "constructed", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "constructed", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `ic_RoofTargets` (`icID`, `rICID`, `parcelID`, `divideID`, `dscID`, `nGTORoof`, `exICFtRoof`, `exRfAreaFt`, `externalDS`, `dsTotal`, `extoVeg`, `extoStreet`, `extoPlanter`, `extoBioretention`, `extoDrywell`, `extoEcoroof`, `dstoVeg`, `dstoStreet`, `dstoPlanter`, `dstoBioretention`, `dstoDrywell`, `dstoEcoroof`, `dsUncontrollable`, `landscapeAvailable`, `fractionDrained`, `difficulty`, `roofEffDisc`, `comments`, `plantersOK`, `bioretentionOK`, `buildModelIC`, `source`, `appendDate`, `constructed`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("icID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "icID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("rICID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "rICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("parcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parcelID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("divideID", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "divideID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("nGTORoof", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTORoof", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("exICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exICFtRoof", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("exRfAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exRfAreaFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("externalDS", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "externalDS", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dsTotal", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dsTotal", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("extoVeg", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoVeg", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("extoStreet", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoStreet", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("extoPlanter", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoPlanter", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("extoBioretention", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoBioretention", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("extoDrywell", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoDrywell", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("extoEcoroof", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoEcoroof", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dstoVeg", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoVeg", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dstoStreet", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoStreet", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dstoPlanter", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoPlanter", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dstoBioretention", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoBioretention", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dstoDrywell", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoDrywell", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dstoEcoroof", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoEcoroof", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dsUncontrollable", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dsUncontrollable", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("landscapeAvailable", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "landscapeAvailable", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("fractionDrained", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fractionDrained", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "difficulty", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("roofEffDisc", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "roofEffDisc", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("plantersOK", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "plantersOK", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("bioretentionOK", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "bioretentionOK", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("buildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "buildModelIC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "source", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("appendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "appendDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "constructed", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE `ic_RoofTargets` SET `icID` = ?, `rICID` = ?, `parcelID` = ?, `divideID` =" +
                " ?, `dscID` = ?, `nGTORoof` = ?, `exICFtRoof` = ?, `exRfAreaFt` = ?, `externalDS" +
                "` = ?, `dsTotal` = ?, `extoVeg` = ?, `extoStreet` = ?, `extoPlanter` = ?, `extoB" +
                "ioretention` = ?, `extoDrywell` = ?, `extoEcoroof` = ?, `dstoVeg` = ?, `dstoStre" +
                "et` = ?, `dstoPlanter` = ?, `dstoBioretention` = ?, `dstoDrywell` = ?, `dstoEcor" +
                "oof` = ?, `dsUncontrollable` = ?, `landscapeAvailable` = ?, `fractionDrained` = " +
                "?, `difficulty` = ?, `roofEffDisc` = ?, `comments` = ?, `plantersOK` = ?, `biore" +
                "tentionOK` = ?, `buildModelIC` = ?, `source` = ?, `appendDate` = ?, `constructed" +
                "` = ? WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `icID` IS NULL) OR (`icID` = ?))" +
                " AND ((? = 1 AND `rICID` IS NULL) OR (`rICID` = ?)) AND ((? = 1 AND `parcelID` I" +
                "S NULL) OR (`parcelID` = ?)) AND ((? = 1 AND `divideID` IS NULL) OR (`divideID` " +
                "= ?)) AND ((? = 1 AND `dscID` IS NULL) OR (`dscID` = ?)) AND ((? = 1 AND `nGTORo" +
                "of` IS NULL) OR (`nGTORoof` = ?)) AND ((? = 1 AND `exICFtRoof` IS NULL) OR (`exI" +
                "CFtRoof` = ?)) AND ((? = 1 AND `exRfAreaFt` IS NULL) OR (`exRfAreaFt` = ?)) AND " +
                "((? = 1 AND `externalDS` IS NULL) OR (`externalDS` = ?)) AND ((? = 1 AND `dsTota" +
                "l` IS NULL) OR (`dsTotal` = ?)) AND ((? = 1 AND `extoVeg` IS NULL) OR (`extoVeg`" +
                " = ?)) AND ((? = 1 AND `extoStreet` IS NULL) OR (`extoStreet` = ?)) AND ((? = 1 " +
                "AND `extoPlanter` IS NULL) OR (`extoPlanter` = ?)) AND ((? = 1 AND `extoBioreten" +
                "tion` IS NULL) OR (`extoBioretention` = ?)) AND ((? = 1 AND `extoDrywell` IS NUL" +
                "L) OR (`extoDrywell` = ?)) AND ((? = 1 AND `extoEcoroof` IS NULL) OR (`extoEcoro" +
                "of` = ?)) AND ((? = 1 AND `dstoVeg` IS NULL) OR (`dstoVeg` = ?)) AND ((? = 1 AND" +
                " `dstoStreet` IS NULL) OR (`dstoStreet` = ?)) AND ((? = 1 AND `dstoPlanter` IS N" +
                "ULL) OR (`dstoPlanter` = ?)) AND ((? = 1 AND `dstoBioretention` IS NULL) OR (`ds" +
                "toBioretention` = ?)) AND ((? = 1 AND `dstoDrywell` IS NULL) OR (`dstoDrywell` =" +
                " ?)) AND ((? = 1 AND `dstoEcoroof` IS NULL) OR (`dstoEcoroof` = ?)) AND ((? = 1 " +
                "AND `dsUncontrollable` IS NULL) OR (`dsUncontrollable` = ?)) AND ((? = 1 AND `la" +
                "ndscapeAvailable` IS NULL) OR (`landscapeAvailable` = ?)) AND ((? = 1 AND `fract" +
                "ionDrained` IS NULL) OR (`fractionDrained` = ?)) AND ((? = 1 AND `difficulty` IS" +
                " NULL) OR (`difficulty` = ?)) AND ((? = 1 AND `roofEffDisc` IS NULL) OR (`roofEf" +
                "fDisc` = ?)) AND ((? = 1 AND `comments` IS NULL) OR (`comments` = ?)) AND ((? = " +
                "1 AND `plantersOK` IS NULL) OR (`plantersOK` = ?)) AND ((? = 1 AND `bioretention" +
                "OK` IS NULL) OR (`bioretentionOK` = ?)) AND ((? = 1 AND `buildModelIC` IS NULL) " +
                "OR (`buildModelIC` = ?)) AND ((? = 1 AND `source` IS NULL) OR (`source` = ?)) AN" +
                "D ((? = 1 AND `appendDate` IS NULL) OR (`appendDate` = ?)) AND ((? = 1 AND `cons" +
                "tructed` IS NULL) OR (`constructed` = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("icID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "icID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("rICID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "rICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("parcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parcelID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("divideID", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "divideID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("nGTORoof", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTORoof", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("exICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exICFtRoof", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("exRfAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exRfAreaFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("externalDS", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "externalDS", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dsTotal", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dsTotal", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("extoVeg", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoVeg", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("extoStreet", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoStreet", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("extoPlanter", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoPlanter", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("extoBioretention", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoBioretention", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("extoDrywell", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoDrywell", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("extoEcoroof", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoEcoroof", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dstoVeg", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoVeg", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dstoStreet", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoStreet", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dstoPlanter", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoPlanter", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dstoBioretention", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoBioretention", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dstoDrywell", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoDrywell", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dstoEcoroof", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoEcoroof", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dsUncontrollable", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dsUncontrollable", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("landscapeAvailable", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "landscapeAvailable", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("fractionDrained", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fractionDrained", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "difficulty", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("roofEffDisc", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "roofEffDisc", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("plantersOK", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "plantersOK", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("bioretentionOK", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "bioretentionOK", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("buildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "buildModelIC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "source", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("appendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "appendDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "constructed", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_icID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "icID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_icID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "icID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_rICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "rICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_rICID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "rICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_parcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parcelID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_parcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parcelID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_divideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "divideID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_divideID", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "divideID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_nGTORoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTORoof", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_nGTORoof", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTORoof", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_exICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exICFtRoof", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_exICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exICFtRoof", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_exRfAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exRfAreaFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_exRfAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exRfAreaFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_externalDS", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "externalDS", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_externalDS", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "externalDS", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dsTotal", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dsTotal", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dsTotal", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dsTotal", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_extoVeg", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoVeg", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_extoVeg", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoVeg", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_extoStreet", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoStreet", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_extoStreet", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoStreet", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_extoPlanter", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoPlanter", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_extoPlanter", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoPlanter", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_extoBioretention", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoBioretention", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_extoBioretention", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoBioretention", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_extoDrywell", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoDrywell", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_extoDrywell", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoDrywell", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_extoEcoroof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoEcoroof", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_extoEcoroof", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extoEcoroof", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dstoVeg", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoVeg", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dstoVeg", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoVeg", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dstoStreet", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoStreet", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dstoStreet", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoStreet", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dstoPlanter", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoPlanter", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dstoPlanter", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoPlanter", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dstoBioretention", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoBioretention", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dstoBioretention", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoBioretention", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dstoDrywell", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoDrywell", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dstoDrywell", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoDrywell", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dstoEcoroof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoEcoroof", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dstoEcoroof", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dstoEcoroof", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dsUncontrollable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dsUncontrollable", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dsUncontrollable", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dsUncontrollable", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_landscapeAvailable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "landscapeAvailable", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_landscapeAvailable", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "landscapeAvailable", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_fractionDrained", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fractionDrained", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_fractionDrained", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fractionDrained", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_difficulty", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "difficulty", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "difficulty", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_roofEffDisc", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "roofEffDisc", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_roofEffDisc", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "roofEffDisc", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_comments", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_plantersOK", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "plantersOK", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_plantersOK", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "plantersOK", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_bioretentionOK", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "bioretentionOK", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_bioretentionOK", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "bioretentionOK", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_buildModelIC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "buildModelIC", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_buildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "buildModelIC", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_source", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "source", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "source", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_appendDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "appendDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_appendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "appendDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "constructed", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "constructed", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.StormwaterControls_V12ConnString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     ic_RoofTargets.*\r\nFROM         ic_RoofTargets";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StormwaterControlsDataSet.ic_RoofTargetsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StormwaterControlsDataSet.ic_RoofTargetsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StormwaterControlsDataSet.ic_RoofTargetsDataTable dataTable = new StormwaterControlsDataSet.ic_RoofTargetsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet.ic_RoofTargetsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ic_RoofTargets");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_MAPINFO_ID, 
                    global::System.Nullable<int> Original_icID, 
                    string Original_rICID, 
                    global::System.Nullable<int> Original_parcelID, 
                    global::System.Nullable<short> Original_divideID, 
                    global::System.Nullable<int> Original_dscID, 
                    string Original_nGTORoof, 
                    global::System.Nullable<int> Original_exICFtRoof, 
                    global::System.Nullable<int> Original_exRfAreaFt, 
                    bool Original_externalDS, 
                    global::System.Nullable<short> Original_dsTotal, 
                    global::System.Nullable<short> Original_extoVeg, 
                    global::System.Nullable<short> Original_extoStreet, 
                    global::System.Nullable<short> Original_extoPlanter, 
                    global::System.Nullable<short> Original_extoBioretention, 
                    global::System.Nullable<short> Original_extoDrywell, 
                    global::System.Nullable<short> Original_extoEcoroof, 
                    global::System.Nullable<short> Original_dstoVeg, 
                    global::System.Nullable<short> Original_dstoStreet, 
                    global::System.Nullable<short> Original_dstoPlanter, 
                    global::System.Nullable<short> Original_dstoBioretention, 
                    global::System.Nullable<short> Original_dstoDrywell, 
                    global::System.Nullable<short> Original_dstoEcoroof, 
                    global::System.Nullable<short> Original_dsUncontrollable, 
                    bool Original_landscapeAvailable, 
                    global::System.Nullable<double> Original_fractionDrained, 
                    global::System.Nullable<short> Original_difficulty, 
                    global::System.Nullable<double> Original_roofEffDisc, 
                    string Original_comments, 
                    bool Original_plantersOK, 
                    bool Original_bioretentionOK, 
                    bool Original_buildModelIC, 
                    string Original_source, 
                    string Original_appendDate, 
                    global::System.Nullable<int> Original_constructed) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_icID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_icID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_rICID == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_rICID));
            }
            if ((Original_parcelID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_parcelID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_divideID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((short)(Original_divideID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_dscID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_dscID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_nGTORoof == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_nGTORoof));
            }
            if ((Original_exICFtRoof.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_exICFtRoof.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_exRfAreaFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((int)(Original_exRfAreaFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[18].Value = ((bool)(Original_externalDS));
            if ((Original_dsTotal.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((short)(Original_dsTotal.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_extoVeg.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((short)(Original_extoVeg.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_extoStreet.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((short)(Original_extoStreet.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_extoPlanter.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((short)(Original_extoPlanter.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_extoBioretention.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((short)(Original_extoBioretention.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_extoDrywell.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((short)(Original_extoDrywell.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_extoEcoroof.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((short)(Original_extoEcoroof.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_dstoVeg.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((short)(Original_dstoVeg.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_dstoStreet.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((short)(Original_dstoStreet.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_dstoPlanter.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((short)(Original_dstoPlanter.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_dstoBioretention.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((short)(Original_dstoBioretention.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_dstoDrywell.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((short)(Original_dstoDrywell.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((Original_dstoEcoroof.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((short)(Original_dstoEcoroof.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((Original_dsUncontrollable.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((short)(Original_dsUncontrollable.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[48].Value = ((bool)(Original_landscapeAvailable));
            if ((Original_fractionDrained.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((double)(Original_fractionDrained.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((Original_difficulty.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((short)(Original_difficulty.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((Original_roofEffDisc.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[54].Value = ((double)(Original_roofEffDisc.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((Original_comments == null)) {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[56].Value = ((string)(Original_comments));
            }
            this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[58].Value = ((bool)(Original_plantersOK));
            this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[60].Value = ((bool)(Original_bioretentionOK));
            this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[62].Value = ((bool)(Original_buildModelIC));
            if ((Original_source == null)) {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[64].Value = ((string)(Original_source));
            }
            if ((Original_appendDate == null)) {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[66].Value = ((string)(Original_appendDate));
            }
            if ((Original_constructed.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[68].Value = ((int)(Original_constructed.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<int> icID, 
                    string rICID, 
                    global::System.Nullable<int> parcelID, 
                    global::System.Nullable<short> divideID, 
                    global::System.Nullable<int> dscID, 
                    string nGTORoof, 
                    global::System.Nullable<int> exICFtRoof, 
                    global::System.Nullable<int> exRfAreaFt, 
                    bool externalDS, 
                    global::System.Nullable<short> dsTotal, 
                    global::System.Nullable<short> extoVeg, 
                    global::System.Nullable<short> extoStreet, 
                    global::System.Nullable<short> extoPlanter, 
                    global::System.Nullable<short> extoBioretention, 
                    global::System.Nullable<short> extoDrywell, 
                    global::System.Nullable<short> extoEcoroof, 
                    global::System.Nullable<short> dstoVeg, 
                    global::System.Nullable<short> dstoStreet, 
                    global::System.Nullable<short> dstoPlanter, 
                    global::System.Nullable<short> dstoBioretention, 
                    global::System.Nullable<short> dstoDrywell, 
                    global::System.Nullable<short> dstoEcoroof, 
                    global::System.Nullable<short> dsUncontrollable, 
                    bool landscapeAvailable, 
                    global::System.Nullable<double> fractionDrained, 
                    global::System.Nullable<short> difficulty, 
                    global::System.Nullable<double> roofEffDisc, 
                    string comments, 
                    bool plantersOK, 
                    bool bioretentionOK, 
                    bool buildModelIC, 
                    string source, 
                    string appendDate, 
                    global::System.Nullable<int> constructed) {
            if ((icID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(icID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((rICID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(rICID));
            }
            if ((parcelID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(parcelID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((divideID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((short)(divideID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((dscID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(dscID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((nGTORoof == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(nGTORoof));
            }
            if ((exICFtRoof.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(exICFtRoof.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((exRfAreaFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(exRfAreaFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((bool)(externalDS));
            if ((dsTotal.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((short)(dsTotal.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((extoVeg.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((short)(extoVeg.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((extoStreet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((short)(extoStreet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((extoPlanter.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((short)(extoPlanter.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((extoBioretention.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((short)(extoBioretention.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((extoDrywell.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((short)(extoDrywell.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((extoEcoroof.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((short)(extoEcoroof.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((dstoVeg.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((short)(dstoVeg.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((dstoStreet.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((short)(dstoStreet.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((dstoPlanter.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((short)(dstoPlanter.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((dstoBioretention.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((short)(dstoBioretention.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((dstoDrywell.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((short)(dstoDrywell.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((dstoEcoroof.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((short)(dstoEcoroof.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((dsUncontrollable.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((short)(dsUncontrollable.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[23].Value = ((bool)(landscapeAvailable));
            if ((fractionDrained.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((double)(fractionDrained.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((difficulty.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((short)(difficulty.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((roofEffDisc.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((double)(roofEffDisc.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((comments == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(comments));
            }
            this.Adapter.InsertCommand.Parameters[28].Value = ((bool)(plantersOK));
            this.Adapter.InsertCommand.Parameters[29].Value = ((bool)(bioretentionOK));
            this.Adapter.InsertCommand.Parameters[30].Value = ((bool)(buildModelIC));
            if ((source == null)) {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = ((string)(source));
            }
            if ((appendDate == null)) {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = ((string)(appendDate));
            }
            if ((constructed.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[33].Value = ((int)(constructed.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> icID, 
                    string rICID, 
                    global::System.Nullable<int> parcelID, 
                    global::System.Nullable<short> divideID, 
                    global::System.Nullable<int> dscID, 
                    string nGTORoof, 
                    global::System.Nullable<int> exICFtRoof, 
                    global::System.Nullable<int> exRfAreaFt, 
                    bool externalDS, 
                    global::System.Nullable<short> dsTotal, 
                    global::System.Nullable<short> extoVeg, 
                    global::System.Nullable<short> extoStreet, 
                    global::System.Nullable<short> extoPlanter, 
                    global::System.Nullable<short> extoBioretention, 
                    global::System.Nullable<short> extoDrywell, 
                    global::System.Nullable<short> extoEcoroof, 
                    global::System.Nullable<short> dstoVeg, 
                    global::System.Nullable<short> dstoStreet, 
                    global::System.Nullable<short> dstoPlanter, 
                    global::System.Nullable<short> dstoBioretention, 
                    global::System.Nullable<short> dstoDrywell, 
                    global::System.Nullable<short> dstoEcoroof, 
                    global::System.Nullable<short> dsUncontrollable, 
                    bool landscapeAvailable, 
                    global::System.Nullable<double> fractionDrained, 
                    global::System.Nullable<short> difficulty, 
                    global::System.Nullable<double> roofEffDisc, 
                    string comments, 
                    bool plantersOK, 
                    bool bioretentionOK, 
                    bool buildModelIC, 
                    string source, 
                    string appendDate, 
                    global::System.Nullable<int> constructed, 
                    int Original_MAPINFO_ID, 
                    global::System.Nullable<int> Original_icID, 
                    string Original_rICID, 
                    global::System.Nullable<int> Original_parcelID, 
                    global::System.Nullable<short> Original_divideID, 
                    global::System.Nullable<int> Original_dscID, 
                    string Original_nGTORoof, 
                    global::System.Nullable<int> Original_exICFtRoof, 
                    global::System.Nullable<int> Original_exRfAreaFt, 
                    bool Original_externalDS, 
                    global::System.Nullable<short> Original_dsTotal, 
                    global::System.Nullable<short> Original_extoVeg, 
                    global::System.Nullable<short> Original_extoStreet, 
                    global::System.Nullable<short> Original_extoPlanter, 
                    global::System.Nullable<short> Original_extoBioretention, 
                    global::System.Nullable<short> Original_extoDrywell, 
                    global::System.Nullable<short> Original_extoEcoroof, 
                    global::System.Nullable<short> Original_dstoVeg, 
                    global::System.Nullable<short> Original_dstoStreet, 
                    global::System.Nullable<short> Original_dstoPlanter, 
                    global::System.Nullable<short> Original_dstoBioretention, 
                    global::System.Nullable<short> Original_dstoDrywell, 
                    global::System.Nullable<short> Original_dstoEcoroof, 
                    global::System.Nullable<short> Original_dsUncontrollable, 
                    bool Original_landscapeAvailable, 
                    global::System.Nullable<double> Original_fractionDrained, 
                    global::System.Nullable<short> Original_difficulty, 
                    global::System.Nullable<double> Original_roofEffDisc, 
                    string Original_comments, 
                    bool Original_plantersOK, 
                    bool Original_bioretentionOK, 
                    bool Original_buildModelIC, 
                    string Original_source, 
                    string Original_appendDate, 
                    global::System.Nullable<int> Original_constructed) {
            if ((icID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(icID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((rICID == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(rICID));
            }
            if ((parcelID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(parcelID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((divideID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((short)(divideID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((dscID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(dscID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((nGTORoof == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(nGTORoof));
            }
            if ((exICFtRoof.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(exICFtRoof.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((exRfAreaFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(exRfAreaFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(externalDS));
            if ((dsTotal.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((short)(dsTotal.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((extoVeg.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((short)(extoVeg.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((extoStreet.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((short)(extoStreet.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((extoPlanter.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((short)(extoPlanter.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((extoBioretention.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((short)(extoBioretention.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((extoDrywell.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((short)(extoDrywell.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((extoEcoroof.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((short)(extoEcoroof.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((dstoVeg.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((short)(dstoVeg.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((dstoStreet.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((short)(dstoStreet.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((dstoPlanter.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((short)(dstoPlanter.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((dstoBioretention.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((short)(dstoBioretention.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((dstoDrywell.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((short)(dstoDrywell.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((dstoEcoroof.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((short)(dstoEcoroof.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((dsUncontrollable.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((short)(dsUncontrollable.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((bool)(landscapeAvailable));
            if ((fractionDrained.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((double)(fractionDrained.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((difficulty.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((short)(difficulty.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((roofEffDisc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((double)(roofEffDisc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((comments == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(comments));
            }
            this.Adapter.UpdateCommand.Parameters[28].Value = ((bool)(plantersOK));
            this.Adapter.UpdateCommand.Parameters[29].Value = ((bool)(bioretentionOK));
            this.Adapter.UpdateCommand.Parameters[30].Value = ((bool)(buildModelIC));
            if ((source == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(source));
            }
            if ((appendDate == null)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(appendDate));
            }
            if ((constructed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((int)(constructed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[34].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_icID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((int)(Original_icID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_rICID == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_rICID));
            }
            if ((Original_parcelID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((int)(Original_parcelID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_divideID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((short)(Original_divideID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((Original_dscID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((int)(Original_dscID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((Original_nGTORoof == null)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(Original_nGTORoof));
            }
            if ((Original_exICFtRoof.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((int)(Original_exICFtRoof.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_exRfAreaFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((int)(Original_exRfAreaFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[52].Value = ((bool)(Original_externalDS));
            if ((Original_dsTotal.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[54].Value = ((short)(Original_dsTotal.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((Original_extoVeg.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[56].Value = ((short)(Original_extoVeg.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((Original_extoStreet.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[58].Value = ((short)(Original_extoStreet.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((Original_extoPlanter.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[60].Value = ((short)(Original_extoPlanter.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((Original_extoBioretention.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[62].Value = ((short)(Original_extoBioretention.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((Original_extoDrywell.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[64].Value = ((short)(Original_extoDrywell.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((Original_extoEcoroof.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[66].Value = ((short)(Original_extoEcoroof.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            if ((Original_dstoVeg.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[68].Value = ((short)(Original_dstoVeg.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            if ((Original_dstoStreet.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[70].Value = ((short)(Original_dstoStreet.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            if ((Original_dstoPlanter.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[72].Value = ((short)(Original_dstoPlanter.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            if ((Original_dstoBioretention.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[74].Value = ((short)(Original_dstoBioretention.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[74].Value = global::System.DBNull.Value;
            }
            if ((Original_dstoDrywell.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[76].Value = ((short)(Original_dstoDrywell.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            if ((Original_dstoEcoroof.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[78].Value = ((short)(Original_dstoEcoroof.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            if ((Original_dsUncontrollable.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[79].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[80].Value = ((short)(Original_dsUncontrollable.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[79].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[81].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[82].Value = ((bool)(Original_landscapeAvailable));
            if ((Original_fractionDrained.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[83].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[84].Value = ((double)(Original_fractionDrained.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[83].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[84].Value = global::System.DBNull.Value;
            }
            if ((Original_difficulty.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[85].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[86].Value = ((short)(Original_difficulty.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[85].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[86].Value = global::System.DBNull.Value;
            }
            if ((Original_roofEffDisc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[87].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[88].Value = ((double)(Original_roofEffDisc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[87].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[88].Value = global::System.DBNull.Value;
            }
            if ((Original_comments == null)) {
                this.Adapter.UpdateCommand.Parameters[89].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[90].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[89].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[90].Value = ((string)(Original_comments));
            }
            this.Adapter.UpdateCommand.Parameters[91].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[92].Value = ((bool)(Original_plantersOK));
            this.Adapter.UpdateCommand.Parameters[93].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[94].Value = ((bool)(Original_bioretentionOK));
            this.Adapter.UpdateCommand.Parameters[95].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[96].Value = ((bool)(Original_buildModelIC));
            if ((Original_source == null)) {
                this.Adapter.UpdateCommand.Parameters[97].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[98].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[97].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[98].Value = ((string)(Original_source));
            }
            if ((Original_appendDate == null)) {
                this.Adapter.UpdateCommand.Parameters[99].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[100].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[99].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[100].Value = ((string)(Original_appendDate));
            }
            if ((Original_constructed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[101].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[102].Value = ((int)(Original_constructed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[101].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[102].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ic_ParkingTargetsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ic_ParkingTargetsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ic_ParkingTargets";
            tableMapping.ColumnMappings.Add("MAPINFO_ID", "MAPINFO_ID");
            tableMapping.ColumnMappings.Add("icID", "icID");
            tableMapping.ColumnMappings.Add("pICID", "pICID");
            tableMapping.ColumnMappings.Add("parcelID", "parcelID");
            tableMapping.ColumnMappings.Add("divideID", "divideID");
            tableMapping.ColumnMappings.Add("dscID", "dscID");
            tableMapping.ColumnMappings.Add("exICFtParking", "exICFtParking");
            tableMapping.ColumnMappings.Add("exPkAreaFt", "exPkAreaFt");
            tableMapping.ColumnMappings.Add("parkingTargetArea", "parkingTargetArea");
            tableMapping.ColumnMappings.Add("nGTO_Direct", "nGTO_Direct");
            tableMapping.ColumnMappings.Add("nGTO_Surface", "nGTO_Surface");
            tableMapping.ColumnMappings.Add("nGTOParking", "nGTOParking");
            tableMapping.ColumnMappings.Add("evaluated", "evaluated");
            tableMapping.ColumnMappings.Add("inlets", "inlets");
            tableMapping.ColumnMappings.Add("parkingSpaces", "parkingSpaces");
            tableMapping.ColumnMappings.Add("percentParkingUsed", "percentParkingUsed");
            tableMapping.ColumnMappings.Add("drainage", "drainage");
            tableMapping.ColumnMappings.Add("nGTO", "nGTO");
            tableMapping.ColumnMappings.Add("controllable", "controllable");
            tableMapping.ColumnMappings.Add("fractionControllable", "fractionControllable");
            tableMapping.ColumnMappings.Add("difficulty", "difficulty");
            tableMapping.ColumnMappings.Add("parkingEffDisc", "parkingEffDisc");
            tableMapping.ColumnMappings.Add("comments", "comments");
            tableMapping.ColumnMappings.Add("fraction2Drywell", "fraction2Drywell");
            tableMapping.ColumnMappings.Add("buildModelIC", "buildModelIC");
            tableMapping.ColumnMappings.Add("source", "source");
            tableMapping.ColumnMappings.Add("appendDate", "appendDate");
            tableMapping.ColumnMappings.Add("constructed", "constructed");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `ic_ParkingTargets` WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `icID` " +
                "IS NULL) OR (`icID` = ?)) AND ((? = 1 AND `pICID` IS NULL) OR (`pICID` = ?)) AND" +
                " ((? = 1 AND `parcelID` IS NULL) OR (`parcelID` = ?)) AND ((? = 1 AND `divideID`" +
                " IS NULL) OR (`divideID` = ?)) AND ((? = 1 AND `dscID` IS NULL) OR (`dscID` = ?)" +
                ") AND ((? = 1 AND `exICFtParking` IS NULL) OR (`exICFtParking` = ?)) AND ((? = 1" +
                " AND `exPkAreaFt` IS NULL) OR (`exPkAreaFt` = ?)) AND ((? = 1 AND `parkingTarget" +
                "Area` IS NULL) OR (`parkingTargetArea` = ?)) AND ((? = 1 AND `nGTO_Direct` IS NU" +
                "LL) OR (`nGTO_Direct` = ?)) AND ((? = 1 AND `nGTO_Surface` IS NULL) OR (`nGTO_Su" +
                "rface` = ?)) AND ((? = 1 AND `nGTOParking` IS NULL) OR (`nGTOParking` = ?)) AND " +
                "((? = 1 AND `evaluated` IS NULL) OR (`evaluated` = ?)) AND ((? = 1 AND `inlets` " +
                "IS NULL) OR (`inlets` = ?)) AND ((? = 1 AND `parkingSpaces` IS NULL) OR (`parkin" +
                "gSpaces` = ?)) AND ((? = 1 AND `percentParkingUsed` IS NULL) OR (`percentParking" +
                "Used` = ?)) AND ((? = 1 AND `drainage` IS NULL) OR (`drainage` = ?)) AND ((? = 1" +
                " AND `nGTO` IS NULL) OR (`nGTO` = ?)) AND ((? = 1 AND `controllable` IS NULL) OR" +
                " (`controllable` = ?)) AND ((? = 1 AND `fractionControllable` IS NULL) OR (`frac" +
                "tionControllable` = ?)) AND ((? = 1 AND `difficulty` IS NULL) OR (`difficulty` =" +
                " ?)) AND ((? = 1 AND `parkingEffDisc` IS NULL) OR (`parkingEffDisc` = ?)) AND ((" +
                "? = 1 AND `comments` IS NULL) OR (`comments` = ?)) AND ((? = 1 AND `fraction2Dry" +
                "well` IS NULL) OR (`fraction2Drywell` = ?)) AND ((? = 1 AND `buildModelIC` IS NU" +
                "LL) OR (`buildModelIC` = ?)) AND ((? = 1 AND `source` IS NULL) OR (`source` = ?)" +
                ") AND ((? = 1 AND `appendDate` IS NULL) OR (`appendDate` = ?)) AND ((? = 1 AND `" +
                "constructed` IS NULL) OR (`constructed` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_icID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "icID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_icID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "icID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_pICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_pICID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_parcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parcelID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_parcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parcelID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_divideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "divideID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_divideID", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "divideID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_exICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exICFtParking", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_exICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exICFtParking", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_exPkAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exPkAreaFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_exPkAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exPkAreaFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_parkingTargetArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkingTargetArea", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_parkingTargetArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkingTargetArea", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_nGTO_Direct", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTO_Direct", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_nGTO_Direct", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTO_Direct", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_nGTO_Surface", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTO_Surface", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_nGTO_Surface", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTO_Surface", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_nGTOParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTOParking", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_nGTOParking", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTOParking", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_evaluated", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "evaluated", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_evaluated", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "evaluated", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_inlets", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "inlets", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_inlets", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "inlets", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_parkingSpaces", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkingSpaces", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_parkingSpaces", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkingSpaces", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_percentParkingUsed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "percentParkingUsed", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_percentParkingUsed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "percentParkingUsed", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_drainage", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "drainage", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_drainage", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "drainage", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_nGTO", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTO", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_nGTO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_controllable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "controllable", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_controllable", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "controllable", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_fractionControllable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fractionControllable", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_fractionControllable", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fractionControllable", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_difficulty", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "difficulty", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "difficulty", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_parkingEffDisc", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkingEffDisc", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_parkingEffDisc", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkingEffDisc", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_comments", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_fraction2Drywell", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fraction2Drywell", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_fraction2Drywell", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fraction2Drywell", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_buildModelIC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "buildModelIC", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_buildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "buildModelIC", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_source", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "source", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "source", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_appendDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "appendDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_appendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "appendDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "constructed", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "constructed", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `ic_ParkingTargets` (`icID`, `pICID`, `parcelID`, `divideID`, `dscID`, `exICFtParking`, `exPkAreaFt`, `parkingTargetArea`, `nGTO_Direct`, `nGTO_Surface`, `nGTOParking`, `evaluated`, `inlets`, `parkingSpaces`, `percentParkingUsed`, `drainage`, `nGTO`, `controllable`, `fractionControllable`, `difficulty`, `parkingEffDisc`, `comments`, `fraction2Drywell`, `buildModelIC`, `source`, `appendDate`, `constructed`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("icID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "icID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pICID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("parcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parcelID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("divideID", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "divideID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("exICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exICFtParking", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("exPkAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exPkAreaFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("parkingTargetArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkingTargetArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("nGTO_Direct", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTO_Direct", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("nGTO_Surface", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTO_Surface", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("nGTOParking", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTOParking", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("evaluated", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "evaluated", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("inlets", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "inlets", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("parkingSpaces", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkingSpaces", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("percentParkingUsed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "percentParkingUsed", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("drainage", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "drainage", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("nGTO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("controllable", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "controllable", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("fractionControllable", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fractionControllable", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "difficulty", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("parkingEffDisc", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkingEffDisc", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("fraction2Drywell", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fraction2Drywell", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("buildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "buildModelIC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "source", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("appendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "appendDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "constructed", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE `ic_ParkingTargets` SET `icID` = ?, `pICID` = ?, `parcelID` = ?, `divideID" +
                "` = ?, `dscID` = ?, `exICFtParking` = ?, `exPkAreaFt` = ?, `parkingTargetArea` =" +
                " ?, `nGTO_Direct` = ?, `nGTO_Surface` = ?, `nGTOParking` = ?, `evaluated` = ?, `" +
                "inlets` = ?, `parkingSpaces` = ?, `percentParkingUsed` = ?, `drainage` = ?, `nGT" +
                "O` = ?, `controllable` = ?, `fractionControllable` = ?, `difficulty` = ?, `parki" +
                "ngEffDisc` = ?, `comments` = ?, `fraction2Drywell` = ?, `buildModelIC` = ?, `sou" +
                "rce` = ?, `appendDate` = ?, `constructed` = ? WHERE ((`MAPINFO_ID` = ?) AND ((? " +
                "= 1 AND `icID` IS NULL) OR (`icID` = ?)) AND ((? = 1 AND `pICID` IS NULL) OR (`p" +
                "ICID` = ?)) AND ((? = 1 AND `parcelID` IS NULL) OR (`parcelID` = ?)) AND ((? = 1" +
                " AND `divideID` IS NULL) OR (`divideID` = ?)) AND ((? = 1 AND `dscID` IS NULL) O" +
                "R (`dscID` = ?)) AND ((? = 1 AND `exICFtParking` IS NULL) OR (`exICFtParking` = " +
                "?)) AND ((? = 1 AND `exPkAreaFt` IS NULL) OR (`exPkAreaFt` = ?)) AND ((? = 1 AND" +
                " `parkingTargetArea` IS NULL) OR (`parkingTargetArea` = ?)) AND ((? = 1 AND `nGT" +
                "O_Direct` IS NULL) OR (`nGTO_Direct` = ?)) AND ((? = 1 AND `nGTO_Surface` IS NUL" +
                "L) OR (`nGTO_Surface` = ?)) AND ((? = 1 AND `nGTOParking` IS NULL) OR (`nGTOPark" +
                "ing` = ?)) AND ((? = 1 AND `evaluated` IS NULL) OR (`evaluated` = ?)) AND ((? = " +
                "1 AND `inlets` IS NULL) OR (`inlets` = ?)) AND ((? = 1 AND `parkingSpaces` IS NU" +
                "LL) OR (`parkingSpaces` = ?)) AND ((? = 1 AND `percentParkingUsed` IS NULL) OR (" +
                "`percentParkingUsed` = ?)) AND ((? = 1 AND `drainage` IS NULL) OR (`drainage` = " +
                "?)) AND ((? = 1 AND `nGTO` IS NULL) OR (`nGTO` = ?)) AND ((? = 1 AND `controllab" +
                "le` IS NULL) OR (`controllable` = ?)) AND ((? = 1 AND `fractionControllable` IS " +
                "NULL) OR (`fractionControllable` = ?)) AND ((? = 1 AND `difficulty` IS NULL) OR " +
                "(`difficulty` = ?)) AND ((? = 1 AND `parkingEffDisc` IS NULL) OR (`parkingEffDis" +
                "c` = ?)) AND ((? = 1 AND `comments` IS NULL) OR (`comments` = ?)) AND ((? = 1 AN" +
                "D `fraction2Drywell` IS NULL) OR (`fraction2Drywell` = ?)) AND ((? = 1 AND `buil" +
                "dModelIC` IS NULL) OR (`buildModelIC` = ?)) AND ((? = 1 AND `source` IS NULL) OR" +
                " (`source` = ?)) AND ((? = 1 AND `appendDate` IS NULL) OR (`appendDate` = ?)) AN" +
                "D ((? = 1 AND `constructed` IS NULL) OR (`constructed` = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("icID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "icID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("pICID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("parcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parcelID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("divideID", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "divideID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("exICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exICFtParking", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("exPkAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exPkAreaFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("parkingTargetArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkingTargetArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("nGTO_Direct", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTO_Direct", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("nGTO_Surface", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTO_Surface", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("nGTOParking", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTOParking", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("evaluated", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "evaluated", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("inlets", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "inlets", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("parkingSpaces", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkingSpaces", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("percentParkingUsed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "percentParkingUsed", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("drainage", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "drainage", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("nGTO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("controllable", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "controllable", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("fractionControllable", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fractionControllable", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "difficulty", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("parkingEffDisc", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkingEffDisc", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("fraction2Drywell", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fraction2Drywell", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("buildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "buildModelIC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "source", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("appendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "appendDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "constructed", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_icID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "icID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_icID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "icID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_pICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_pICID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_parcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parcelID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_parcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parcelID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_divideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "divideID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_divideID", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "divideID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_exICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exICFtParking", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_exICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exICFtParking", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_exPkAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exPkAreaFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_exPkAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "exPkAreaFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_parkingTargetArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkingTargetArea", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_parkingTargetArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkingTargetArea", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_nGTO_Direct", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTO_Direct", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_nGTO_Direct", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTO_Direct", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_nGTO_Surface", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTO_Surface", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_nGTO_Surface", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTO_Surface", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_nGTOParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTOParking", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_nGTOParking", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTOParking", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_evaluated", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "evaluated", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_evaluated", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "evaluated", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_inlets", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "inlets", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_inlets", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "inlets", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_parkingSpaces", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkingSpaces", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_parkingSpaces", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkingSpaces", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_percentParkingUsed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "percentParkingUsed", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_percentParkingUsed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "percentParkingUsed", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_drainage", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "drainage", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_drainage", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "drainage", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_nGTO", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTO", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_nGTO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nGTO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_controllable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "controllable", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_controllable", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "controllable", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_fractionControllable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fractionControllable", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_fractionControllable", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fractionControllable", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_difficulty", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "difficulty", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "difficulty", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_parkingEffDisc", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkingEffDisc", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_parkingEffDisc", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkingEffDisc", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_comments", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_comments", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "comments", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_fraction2Drywell", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fraction2Drywell", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_fraction2Drywell", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fraction2Drywell", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_buildModelIC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "buildModelIC", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_buildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "buildModelIC", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_source", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "source", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_source", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "source", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_appendDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "appendDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_appendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "appendDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "constructed", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "constructed", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.StormwaterControls_V12ConnString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     ic_ParkingTargets.*\r\nFROM         ic_ParkingTargets";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StormwaterControlsDataSet.ic_ParkingTargetsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StormwaterControlsDataSet.ic_ParkingTargetsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StormwaterControlsDataSet.ic_ParkingTargetsDataTable dataTable = new StormwaterControlsDataSet.ic_ParkingTargetsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet.ic_ParkingTargetsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ic_ParkingTargets");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_MAPINFO_ID, 
                    global::System.Nullable<int> Original_icID, 
                    string Original_pICID, 
                    global::System.Nullable<int> Original_parcelID, 
                    global::System.Nullable<short> Original_divideID, 
                    global::System.Nullable<int> Original_dscID, 
                    global::System.Nullable<int> Original_exICFtParking, 
                    global::System.Nullable<int> Original_exPkAreaFt, 
                    global::System.Nullable<int> Original_parkingTargetArea, 
                    string Original_nGTO_Direct, 
                    string Original_nGTO_Surface, 
                    string Original_nGTOParking, 
                    bool Original_evaluated, 
                    bool Original_inlets, 
                    global::System.Nullable<int> Original_parkingSpaces, 
                    global::System.Nullable<int> Original_percentParkingUsed, 
                    string Original_drainage, 
                    string Original_nGTO, 
                    string Original_controllable, 
                    global::System.Nullable<double> Original_fractionControllable, 
                    global::System.Nullable<short> Original_difficulty, 
                    global::System.Nullable<double> Original_parkingEffDisc, 
                    string Original_comments, 
                    global::System.Nullable<double> Original_fraction2Drywell, 
                    bool Original_buildModelIC, 
                    string Original_source, 
                    string Original_appendDate, 
                    global::System.Nullable<int> Original_constructed) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_icID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_icID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_pICID == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_pICID));
            }
            if ((Original_parcelID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_parcelID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_divideID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((short)(Original_divideID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_dscID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_dscID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_exICFtParking.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_exICFtParking.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_exPkAreaFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_exPkAreaFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_parkingTargetArea.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((int)(Original_parkingTargetArea.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_nGTO_Direct == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_nGTO_Direct));
            }
            if ((Original_nGTO_Surface == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_nGTO_Surface));
            }
            if ((Original_nGTOParking == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_nGTOParking));
            }
            this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[24].Value = ((bool)(Original_evaluated));
            this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[26].Value = ((bool)(Original_inlets));
            if ((Original_parkingSpaces.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((int)(Original_parkingSpaces.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_percentParkingUsed.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((int)(Original_percentParkingUsed.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_drainage == null)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((string)(Original_drainage));
            }
            if ((Original_nGTO == null)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((string)(Original_nGTO));
            }
            if ((Original_controllable == null)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((string)(Original_controllable));
            }
            if ((Original_fractionControllable.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((double)(Original_fractionControllable.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_difficulty.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((short)(Original_difficulty.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_parkingEffDisc.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((double)(Original_parkingEffDisc.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((Original_comments == null)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((string)(Original_comments));
            }
            if ((Original_fraction2Drywell.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((double)(Original_fraction2Drywell.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[48].Value = ((bool)(Original_buildModelIC));
            if ((Original_source == null)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((string)(Original_source));
            }
            if ((Original_appendDate == null)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((string)(Original_appendDate));
            }
            if ((Original_constructed.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[54].Value = ((int)(Original_constructed.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<int> icID, 
                    string pICID, 
                    global::System.Nullable<int> parcelID, 
                    global::System.Nullable<short> divideID, 
                    global::System.Nullable<int> dscID, 
                    global::System.Nullable<int> exICFtParking, 
                    global::System.Nullable<int> exPkAreaFt, 
                    global::System.Nullable<int> parkingTargetArea, 
                    string nGTO_Direct, 
                    string nGTO_Surface, 
                    string nGTOParking, 
                    bool evaluated, 
                    bool inlets, 
                    global::System.Nullable<int> parkingSpaces, 
                    global::System.Nullable<int> percentParkingUsed, 
                    string drainage, 
                    string nGTO, 
                    string controllable, 
                    global::System.Nullable<double> fractionControllable, 
                    global::System.Nullable<short> difficulty, 
                    global::System.Nullable<double> parkingEffDisc, 
                    string comments, 
                    global::System.Nullable<double> fraction2Drywell, 
                    bool buildModelIC, 
                    string source, 
                    string appendDate, 
                    global::System.Nullable<int> constructed) {
            if ((icID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(icID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((pICID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(pICID));
            }
            if ((parcelID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(parcelID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((divideID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((short)(divideID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((dscID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(dscID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((exICFtParking.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(exICFtParking.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((exPkAreaFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(exPkAreaFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((parkingTargetArea.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(parkingTargetArea.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((nGTO_Direct == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(nGTO_Direct));
            }
            if ((nGTO_Surface == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(nGTO_Surface));
            }
            if ((nGTOParking == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(nGTOParking));
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((bool)(evaluated));
            this.Adapter.InsertCommand.Parameters[12].Value = ((bool)(inlets));
            if ((parkingSpaces.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((int)(parkingSpaces.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((percentParkingUsed.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((int)(percentParkingUsed.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((drainage == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(drainage));
            }
            if ((nGTO == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(nGTO));
            }
            if ((controllable == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(controllable));
            }
            if ((fractionControllable.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((double)(fractionControllable.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((difficulty.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((short)(difficulty.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((parkingEffDisc.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((double)(parkingEffDisc.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((comments == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(comments));
            }
            if ((fraction2Drywell.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((double)(fraction2Drywell.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[23].Value = ((bool)(buildModelIC));
            if ((source == null)) {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((string)(source));
            }
            if ((appendDate == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(appendDate));
            }
            if ((constructed.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((int)(constructed.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> icID, 
                    string pICID, 
                    global::System.Nullable<int> parcelID, 
                    global::System.Nullable<short> divideID, 
                    global::System.Nullable<int> dscID, 
                    global::System.Nullable<int> exICFtParking, 
                    global::System.Nullable<int> exPkAreaFt, 
                    global::System.Nullable<int> parkingTargetArea, 
                    string nGTO_Direct, 
                    string nGTO_Surface, 
                    string nGTOParking, 
                    bool evaluated, 
                    bool inlets, 
                    global::System.Nullable<int> parkingSpaces, 
                    global::System.Nullable<int> percentParkingUsed, 
                    string drainage, 
                    string nGTO, 
                    string controllable, 
                    global::System.Nullable<double> fractionControllable, 
                    global::System.Nullable<short> difficulty, 
                    global::System.Nullable<double> parkingEffDisc, 
                    string comments, 
                    global::System.Nullable<double> fraction2Drywell, 
                    bool buildModelIC, 
                    string source, 
                    string appendDate, 
                    global::System.Nullable<int> constructed, 
                    int Original_MAPINFO_ID, 
                    global::System.Nullable<int> Original_icID, 
                    string Original_pICID, 
                    global::System.Nullable<int> Original_parcelID, 
                    global::System.Nullable<short> Original_divideID, 
                    global::System.Nullable<int> Original_dscID, 
                    global::System.Nullable<int> Original_exICFtParking, 
                    global::System.Nullable<int> Original_exPkAreaFt, 
                    global::System.Nullable<int> Original_parkingTargetArea, 
                    string Original_nGTO_Direct, 
                    string Original_nGTO_Surface, 
                    string Original_nGTOParking, 
                    bool Original_evaluated, 
                    bool Original_inlets, 
                    global::System.Nullable<int> Original_parkingSpaces, 
                    global::System.Nullable<int> Original_percentParkingUsed, 
                    string Original_drainage, 
                    string Original_nGTO, 
                    string Original_controllable, 
                    global::System.Nullable<double> Original_fractionControllable, 
                    global::System.Nullable<short> Original_difficulty, 
                    global::System.Nullable<double> Original_parkingEffDisc, 
                    string Original_comments, 
                    global::System.Nullable<double> Original_fraction2Drywell, 
                    bool Original_buildModelIC, 
                    string Original_source, 
                    string Original_appendDate, 
                    global::System.Nullable<int> Original_constructed) {
            if ((icID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(icID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((pICID == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(pICID));
            }
            if ((parcelID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(parcelID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((divideID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((short)(divideID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((dscID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(dscID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((exICFtParking.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(exICFtParking.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((exPkAreaFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(exPkAreaFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((parkingTargetArea.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(parkingTargetArea.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((nGTO_Direct == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(nGTO_Direct));
            }
            if ((nGTO_Surface == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(nGTO_Surface));
            }
            if ((nGTOParking == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(nGTOParking));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(evaluated));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((bool)(inlets));
            if ((parkingSpaces.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(parkingSpaces.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((percentParkingUsed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(percentParkingUsed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((drainage == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(drainage));
            }
            if ((nGTO == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(nGTO));
            }
            if ((controllable == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(controllable));
            }
            if ((fractionControllable.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((double)(fractionControllable.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((difficulty.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((short)(difficulty.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((parkingEffDisc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((double)(parkingEffDisc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((comments == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(comments));
            }
            if ((fraction2Drywell.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((double)(fraction2Drywell.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((bool)(buildModelIC));
            if ((source == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(source));
            }
            if ((appendDate == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(appendDate));
            }
            if ((constructed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(constructed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_icID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((int)(Original_icID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Original_pICID == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_pICID));
            }
            if ((Original_parcelID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((int)(Original_parcelID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((Original_divideID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((short)(Original_divideID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((Original_dscID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[37].Value = ((int)(Original_dscID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((Original_exICFtParking.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[39].Value = ((int)(Original_exICFtParking.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((Original_exPkAreaFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[41].Value = ((int)(Original_exPkAreaFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((Original_parkingTargetArea.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[43].Value = ((int)(Original_parkingTargetArea.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((Original_nGTO_Direct == null)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(Original_nGTO_Direct));
            }
            if ((Original_nGTO_Surface == null)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[47].Value = ((string)(Original_nGTO_Surface));
            }
            if ((Original_nGTOParking == null)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[49].Value = ((string)(Original_nGTOParking));
            }
            this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[51].Value = ((bool)(Original_evaluated));
            this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[53].Value = ((bool)(Original_inlets));
            if ((Original_parkingSpaces.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[55].Value = ((int)(Original_parkingSpaces.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            if ((Original_percentParkingUsed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[57].Value = ((int)(Original_percentParkingUsed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            if ((Original_drainage == null)) {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[59].Value = ((string)(Original_drainage));
            }
            if ((Original_nGTO == null)) {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[61].Value = ((string)(Original_nGTO));
            }
            if ((Original_controllable == null)) {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[63].Value = ((string)(Original_controllable));
            }
            if ((Original_fractionControllable.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[65].Value = ((double)(Original_fractionControllable.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            if ((Original_difficulty.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[67].Value = ((short)(Original_difficulty.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            if ((Original_parkingEffDisc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[69].Value = ((double)(Original_parkingEffDisc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            if ((Original_comments == null)) {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[71].Value = ((string)(Original_comments));
            }
            if ((Original_fraction2Drywell.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[73].Value = ((double)(Original_fraction2Drywell.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[73].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[75].Value = ((bool)(Original_buildModelIC));
            if ((Original_source == null)) {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[77].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[77].Value = ((string)(Original_source));
            }
            if ((Original_appendDate == null)) {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[79].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[79].Value = ((string)(Original_appendDate));
            }
            if ((Original_constructed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[81].Value = ((int)(Original_constructed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[81].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AltRoofTargetsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AltRoofTargetsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AltRoofTargets";
            tableMapping.ColumnMappings.Add("MAPINFO_ID", "MapInfoID");
            tableMapping.ColumnMappings.Add("NGTORoof", "NGToRoof");
            tableMapping.ColumnMappings.Add("BuildModelIC", "BuildModelIC");
            tableMapping.ColumnMappings.Add("ICID", "ICID");
            tableMapping.ColumnMappings.Add("Constructed", "Constructed");
            tableMapping.ColumnMappings.Add("AltICID", "AltICID");
            tableMapping.ColumnMappings.Add("Difficulty", "Difficulty");
            tableMapping.ColumnMappings.Add("FocusArea", "FocusArea");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `alt_rooftargets_ac` WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `NGTORoof` IS NULL) OR (`NGTORoof` = ?)) AND ((? = 1 AND `BuildModelIC` IS NULL) OR (`BuildModelIC` = ?)) AND ((? = 1 AND `ICID` IS NULL) OR (`ICID` = ?)) AND ((? = 1 AND `Constructed` IS NULL) OR (`Constructed` = ?)) AND ((? = 1 AND `AltICID` IS NULL) OR (`AltICID` = ?)) AND ((? = 1 AND `Difficulty` IS NULL) OR (`Difficulty` = ?)) AND ((? = 1 AND `FocusArea` IS NULL) OR (`FocusArea` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTORoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTORoof", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTORoof", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTORoof", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BuildModelIC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AltICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AltICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AltICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AltICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Difficulty", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FocusArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FocusArea", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FocusArea", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FocusArea", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `alt_rooftargets_ac` (`NGTORoof`, `BuildModelIC`, `ICID`, `Constructe" +
                "d`, `AltICID`, `Difficulty`, `FocusArea`) VALUES (?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTORoof", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTORoof", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AltICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AltICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FocusArea", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FocusArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `alt_rooftargets_ac` SET `NGTORoof` = ?, `BuildModelIC` = ?, `ICID` = ?, `Constructed` = ?, `AltICID` = ?, `Difficulty` = ?, `FocusArea` = ? WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `NGTORoof` IS NULL) OR (`NGTORoof` = ?)) AND ((? = 1 AND `BuildModelIC` IS NULL) OR (`BuildModelIC` = ?)) AND ((? = 1 AND `ICID` IS NULL) OR (`ICID` = ?)) AND ((? = 1 AND `Constructed` IS NULL) OR (`Constructed` = ?)) AND ((? = 1 AND `AltICID` IS NULL) OR (`AltICID` = ?)) AND ((? = 1 AND `Difficulty` IS NULL) OR (`Difficulty` = ?)) AND ((? = 1 AND `FocusArea` IS NULL) OR (`FocusArea` = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTORoof", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTORoof", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AltICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AltICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FocusArea", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FocusArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTORoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTORoof", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTORoof", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTORoof", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BuildModelIC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AltICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AltICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AltICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AltICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Difficulty", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FocusArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FocusArea", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FocusArea", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FocusArea", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.alternative_packageConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MAPINFO_ID, NGTORoof, BuildModelIC, ICID, Constructed, AltICID, Difficulty" +
                ", FocusArea FROM alt_rooftargets_ac";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StormwaterControlsDataSet.AltRoofTargetsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StormwaterControlsDataSet.AltRoofTargetsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StormwaterControlsDataSet.AltRoofTargetsDataTable dataTable = new StormwaterControlsDataSet.AltRoofTargetsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet.AltRoofTargetsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "AltRoofTargets");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_MAPINFO_ID, string Original_NGTORoof, bool Original_BuildModelIC, global::System.Nullable<int> Original_ICID, global::System.Nullable<int> Original_Constructed, global::System.Nullable<int> Original_AltICID, global::System.Nullable<short> Original_Difficulty, string Original_FocusArea) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_NGTORoof == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_NGTORoof));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_BuildModelIC));
            if ((Original_ICID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_ICID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_Constructed.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_Constructed.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_AltICID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_AltICID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_Difficulty.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((short)(Original_Difficulty.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_FocusArea == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_FocusArea));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string NGTORoof, bool BuildModelIC, global::System.Nullable<int> ICID, global::System.Nullable<int> Constructed, global::System.Nullable<int> AltICID, global::System.Nullable<short> Difficulty, string FocusArea) {
            if ((NGTORoof == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(NGTORoof));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((bool)(BuildModelIC));
            if ((ICID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(ICID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Constructed.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(Constructed.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((AltICID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(AltICID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Difficulty.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((short)(Difficulty.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((FocusArea == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(FocusArea));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string NGTORoof, bool BuildModelIC, global::System.Nullable<int> ICID, global::System.Nullable<int> Constructed, global::System.Nullable<int> AltICID, global::System.Nullable<short> Difficulty, string FocusArea, int Original_MAPINFO_ID, string Original_NGTORoof, bool Original_BuildModelIC, global::System.Nullable<int> Original_ICID, global::System.Nullable<int> Original_Constructed, global::System.Nullable<int> Original_AltICID, global::System.Nullable<short> Original_Difficulty, string Original_FocusArea) {
            if ((NGTORoof == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(NGTORoof));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((bool)(BuildModelIC));
            if ((ICID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(ICID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Constructed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Constructed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((AltICID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(AltICID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Difficulty.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((short)(Difficulty.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((FocusArea == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(FocusArea));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_NGTORoof == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_NGTORoof));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(Original_BuildModelIC));
            if ((Original_ICID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_ICID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_Constructed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_Constructed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_AltICID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_AltICID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_Difficulty.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((short)(Original_Difficulty.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((Original_FocusArea == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_FocusArea));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AltParkingTargetsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AltParkingTargetsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AltParkingTargets";
            tableMapping.ColumnMappings.Add("MAPINFO_ID", "MapInfoID");
            tableMapping.ColumnMappings.Add("NGTO_Direct", "NGToStreet");
            tableMapping.ColumnMappings.Add("NGTO_Surface", "NGToSurface");
            tableMapping.ColumnMappings.Add("NGTOParking", "NGTOParking");
            tableMapping.ColumnMappings.Add("NGTO", "NGTo");
            tableMapping.ColumnMappings.Add("BuildModelIC", "BuildModelIC");
            tableMapping.ColumnMappings.Add("ICID", "ICID");
            tableMapping.ColumnMappings.Add("Constructed", "Constructed");
            tableMapping.ColumnMappings.Add("AltICID", "AltICID");
            tableMapping.ColumnMappings.Add("Difficulty", "Difficulty");
            tableMapping.ColumnMappings.Add("FocusArea", "FocusArea");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `alt_parkingtargets_ac` WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `NGTO_Direct` IS NULL) OR (`NGTO_Direct` = ?)) AND ((? = 1 AND `NGTO_Surface` IS NULL) OR (`NGTO_Surface` = ?)) AND ((? = 1 AND `NGTOParking` IS NULL) OR (`NGTOParking` = ?)) AND ((? = 1 AND `NGTO` IS NULL) OR (`NGTO` = ?)) AND ((? = 1 AND `BuildModelIC` IS NULL) OR (`BuildModelIC` = ?)) AND ((? = 1 AND `ICID` IS NULL) OR (`ICID` = ?)) AND ((? = 1 AND `Constructed` IS NULL) OR (`Constructed` = ?)) AND ((? = 1 AND `AltICID` IS NULL) OR (`AltICID` = ?)) AND ((? = 1 AND `Difficulty` IS NULL) OR (`Difficulty` = ?)) AND ((? = 1 AND `FocusArea` IS NULL) OR (`FocusArea` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTO_Direct", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Direct", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTO_Direct", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Direct", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTO_Surface", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Surface", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTO_Surface", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Surface", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTOParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOParking", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTOParking", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOParking", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTO", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BuildModelIC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AltICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AltICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AltICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AltICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Difficulty", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FocusArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FocusArea", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FocusArea", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FocusArea", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `alt_parkingtargets_ac` (`NGTO_Direct`, `NGTO_Surface`, `NGTOParking`" +
                ", `NGTO`, `BuildModelIC`, `ICID`, `Constructed`, `AltICID`, `Difficulty`, `Focus" +
                "Area`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTO_Direct", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Direct", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTO_Surface", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Surface", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTOParking", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOParking", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AltICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AltICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FocusArea", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FocusArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `alt_parkingtargets_ac` SET `NGTO_Direct` = ?, `NGTO_Surface` = ?, `NGTOParking` = ?, `NGTO` = ?, `BuildModelIC` = ?, `ICID` = ?, `Constructed` = ?, `AltICID` = ?, `Difficulty` = ?, `FocusArea` = ? WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `NGTO_Direct` IS NULL) OR (`NGTO_Direct` = ?)) AND ((? = 1 AND `NGTO_Surface` IS NULL) OR (`NGTO_Surface` = ?)) AND ((? = 1 AND `NGTOParking` IS NULL) OR (`NGTOParking` = ?)) AND ((? = 1 AND `NGTO` IS NULL) OR (`NGTO` = ?)) AND ((? = 1 AND `BuildModelIC` IS NULL) OR (`BuildModelIC` = ?)) AND ((? = 1 AND `ICID` IS NULL) OR (`ICID` = ?)) AND ((? = 1 AND `Constructed` IS NULL) OR (`Constructed` = ?)) AND ((? = 1 AND `AltICID` IS NULL) OR (`AltICID` = ?)) AND ((? = 1 AND `Difficulty` IS NULL) OR (`Difficulty` = ?)) AND ((? = 1 AND `FocusArea` IS NULL) OR (`FocusArea` = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTO_Direct", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Direct", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTO_Surface", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Surface", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTOParking", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOParking", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AltICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AltICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FocusArea", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FocusArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTO_Direct", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Direct", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTO_Direct", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Direct", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTO_Surface", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Surface", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTO_Surface", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO_Surface", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTOParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOParking", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTOParking", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOParking", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTO", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BuildModelIC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AltICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AltICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AltICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AltICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Difficulty", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Difficulty", global::System.Data.OleDb.OleDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Difficulty", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FocusArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FocusArea", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FocusArea", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FocusArea", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.alternative_packageConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MAPINFO_ID, NGTO_Direct, NGTO_Surface, NGTOParking, NGTO, BuildModelIC, IC" +
                "ID, Constructed, AltICID, Difficulty, FocusArea FROM alt_parkingtargets_ac";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StormwaterControlsDataSet.AltParkingTargetsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StormwaterControlsDataSet.AltParkingTargetsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StormwaterControlsDataSet.AltParkingTargetsDataTable dataTable = new StormwaterControlsDataSet.AltParkingTargetsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet.AltParkingTargetsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "AltParkingTargets");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_MAPINFO_ID, string Original_NGTO_Direct, string Original_NGTO_Surface, string Original_NGTOParking, string Original_NGTO, bool Original_BuildModelIC, global::System.Nullable<int> Original_ICID, global::System.Nullable<int> Original_Constructed, global::System.Nullable<int> Original_AltICID, global::System.Nullable<short> Original_Difficulty, string Original_FocusArea) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_NGTO_Direct == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_NGTO_Direct));
            }
            if ((Original_NGTO_Surface == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_NGTO_Surface));
            }
            if ((Original_NGTOParking == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_NGTOParking));
            }
            if ((Original_NGTO == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_NGTO));
            }
            this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((bool)(Original_BuildModelIC));
            if ((Original_ICID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_ICID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_Constructed.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_Constructed.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_AltICID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((int)(Original_AltICID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_Difficulty.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((short)(Original_Difficulty.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_FocusArea == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_FocusArea));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string NGTO_Direct, string NGTO_Surface, string NGTOParking, string NGTO, bool BuildModelIC, global::System.Nullable<int> ICID, global::System.Nullable<int> Constructed, global::System.Nullable<int> AltICID, global::System.Nullable<short> Difficulty, string FocusArea) {
            if ((NGTO_Direct == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(NGTO_Direct));
            }
            if ((NGTO_Surface == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NGTO_Surface));
            }
            if ((NGTOParking == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(NGTOParking));
            }
            if ((NGTO == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(NGTO));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(BuildModelIC));
            if ((ICID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(ICID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Constructed.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(Constructed.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((AltICID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(AltICID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Difficulty.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((short)(Difficulty.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((FocusArea == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(FocusArea));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string NGTO_Direct, 
                    string NGTO_Surface, 
                    string NGTOParking, 
                    string NGTO, 
                    bool BuildModelIC, 
                    global::System.Nullable<int> ICID, 
                    global::System.Nullable<int> Constructed, 
                    global::System.Nullable<int> AltICID, 
                    global::System.Nullable<short> Difficulty, 
                    string FocusArea, 
                    int Original_MAPINFO_ID, 
                    string Original_NGTO_Direct, 
                    string Original_NGTO_Surface, 
                    string Original_NGTOParking, 
                    string Original_NGTO, 
                    bool Original_BuildModelIC, 
                    global::System.Nullable<int> Original_ICID, 
                    global::System.Nullable<int> Original_Constructed, 
                    global::System.Nullable<int> Original_AltICID, 
                    global::System.Nullable<short> Original_Difficulty, 
                    string Original_FocusArea) {
            if ((NGTO_Direct == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(NGTO_Direct));
            }
            if ((NGTO_Surface == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NGTO_Surface));
            }
            if ((NGTOParking == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(NGTOParking));
            }
            if ((NGTO == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(NGTO));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(BuildModelIC));
            if ((ICID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(ICID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Constructed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Constructed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((AltICID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(AltICID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Difficulty.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((short)(Difficulty.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((FocusArea == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(FocusArea));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_NGTO_Direct == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_NGTO_Direct));
            }
            if ((Original_NGTO_Surface == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_NGTO_Surface));
            }
            if ((Original_NGTOParking == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_NGTOParking));
            }
            if ((Original_NGTO == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_NGTO));
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((bool)(Original_BuildModelIC));
            if ((Original_ICID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_ICID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_Constructed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(Original_Constructed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_AltICID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(Original_AltICID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_Difficulty.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((short)(Original_Difficulty.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_FocusArea == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_FocusArea));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AltStreetTargetsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AltStreetTargetsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AltStreetTargets";
            tableMapping.ColumnMappings.Add("MAPINFO_ID", "MapInfoID");
            tableMapping.ColumnMappings.Add("NGTOStreet", "NGToStreet");
            tableMapping.ColumnMappings.Add("BuildModelIC", "BuildModelIC");
            tableMapping.ColumnMappings.Add("ICID", "ICID");
            tableMapping.ColumnMappings.Add("Constructed", "Constructed");
            tableMapping.ColumnMappings.Add("AltICID", "AltICID");
            tableMapping.ColumnMappings.Add("Evaluation", "Evaluation");
            tableMapping.ColumnMappings.Add("FocusArea", "FocusArea");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `alt_streettargets_ac` WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `NGTOStreet` IS NULL) OR (`NGTOStreet` = ?)) AND ((? = 1 AND `BuildModelIC` IS NULL) OR (`BuildModelIC` = ?)) AND ((? = 1 AND `ICID` IS NULL) OR (`ICID` = ?)) AND ((? = 1 AND `Constructed` IS NULL) OR (`Constructed` = ?)) AND ((? = 1 AND `AltICID` IS NULL) OR (`AltICID` = ?)) AND ((? = 1 AND `Evaluation` IS NULL) OR (`Evaluation` = ?)) AND ((? = 1 AND `FocusArea` IS NULL) OR (`FocusArea` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTOStreet", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStreet", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTOStreet", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStreet", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BuildModelIC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AltICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AltICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AltICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AltICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Evaluation", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Evaluation", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Evaluation", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Evaluation", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FocusArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FocusArea", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FocusArea", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FocusArea", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `alt_streettargets_ac` (`NGTOStreet`, `BuildModelIC`, `ICID`, `Constr" +
                "ucted`, `AltICID`, `Evaluation`, `FocusArea`) VALUES (?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTOStreet", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStreet", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AltICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AltICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Evaluation", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Evaluation", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FocusArea", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FocusArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `alt_streettargets_ac` SET `NGTOStreet` = ?, `BuildModelIC` = ?, `ICID` = ?, `Constructed` = ?, `AltICID` = ?, `Evaluation` = ?, `FocusArea` = ? WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `NGTOStreet` IS NULL) OR (`NGTOStreet` = ?)) AND ((? = 1 AND `BuildModelIC` IS NULL) OR (`BuildModelIC` = ?)) AND ((? = 1 AND `ICID` IS NULL) OR (`ICID` = ?)) AND ((? = 1 AND `Constructed` IS NULL) OR (`Constructed` = ?)) AND ((? = 1 AND `AltICID` IS NULL) OR (`AltICID` = ?)) AND ((? = 1 AND `Evaluation` IS NULL) OR (`Evaluation` = ?)) AND ((? = 1 AND `FocusArea` IS NULL) OR (`FocusArea` = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTOStreet", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStreet", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AltICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AltICID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Evaluation", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Evaluation", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FocusArea", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FocusArea", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTOStreet", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStreet", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTOStreet", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStreet", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BuildModelIC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BuildModelIC", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BuildModelIC", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Constructed", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Constructed", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AltICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AltICID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AltICID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AltICID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Evaluation", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Evaluation", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Evaluation", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Evaluation", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FocusArea", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FocusArea", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FocusArea", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FocusArea", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.alternative_packageConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MAPINFO_ID, NGTOStreet, BuildModelIC, ICID, Constructed, AltICID, Evaluati" +
                "on, FocusArea FROM alt_streettargets_ac";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StormwaterControlsDataSet.AltStreetTargetsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StormwaterControlsDataSet.AltStreetTargetsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StormwaterControlsDataSet.AltStreetTargetsDataTable dataTable = new StormwaterControlsDataSet.AltStreetTargetsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet.AltStreetTargetsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "AltStreetTargets");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_MAPINFO_ID, string Original_NGTOStreet, bool Original_BuildModelIC, global::System.Nullable<int> Original_ICID, global::System.Nullable<int> Original_Constructed, global::System.Nullable<int> Original_AltICID, string Original_Evaluation, string Original_FocusArea) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_NGTOStreet == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_NGTOStreet));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_BuildModelIC));
            if ((Original_ICID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_ICID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_Constructed.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_Constructed.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_AltICID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_AltICID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_Evaluation == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_Evaluation));
            }
            if ((Original_FocusArea == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_FocusArea));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string NGTOStreet, bool BuildModelIC, global::System.Nullable<int> ICID, global::System.Nullable<int> Constructed, global::System.Nullable<int> AltICID, string Evaluation, string FocusArea) {
            if ((NGTOStreet == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(NGTOStreet));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((bool)(BuildModelIC));
            if ((ICID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(ICID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Constructed.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(Constructed.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((AltICID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(AltICID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Evaluation == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Evaluation));
            }
            if ((FocusArea == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(FocusArea));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string NGTOStreet, bool BuildModelIC, global::System.Nullable<int> ICID, global::System.Nullable<int> Constructed, global::System.Nullable<int> AltICID, string Evaluation, string FocusArea, int Original_MAPINFO_ID, string Original_NGTOStreet, bool Original_BuildModelIC, global::System.Nullable<int> Original_ICID, global::System.Nullable<int> Original_Constructed, global::System.Nullable<int> Original_AltICID, string Original_Evaluation, string Original_FocusArea) {
            if ((NGTOStreet == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(NGTOStreet));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((bool)(BuildModelIC));
            if ((ICID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(ICID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Constructed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Constructed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((AltICID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(AltICID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Evaluation == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Evaluation));
            }
            if ((FocusArea == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(FocusArea));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_NGTOStreet == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_NGTOStreet));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(Original_BuildModelIC));
            if ((Original_ICID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_ICID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_Constructed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_Constructed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_AltICID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_AltICID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_Evaluation == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_Evaluation));
            }
            if ((Original_FocusArea == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_FocusArea));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class mdl_dirsc_acTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public mdl_dirsc_acTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "mdl_dirsc_ac";
            tableMapping.ColumnMappings.Add("MAPINFO_ID", "MAPINFO_ID");
            tableMapping.ColumnMappings.Add("ParcelID", "ParcelID");
            tableMapping.ColumnMappings.Add("DivideID", "DivideID");
            tableMapping.ColumnMappings.Add("DSCID", "DSCID");
            tableMapping.ColumnMappings.Add("discoSiteID", "discoSiteID");
            tableMapping.ColumnMappings.Add("DiscoClass", "DiscoClass");
            tableMapping.ColumnMappings.Add("ToLinkSan", "ToLinkSan");
            tableMapping.ColumnMappings.Add("ToLinkStorm", "ToLinkStorm");
            tableMapping.ColumnMappings.Add("NGTOSan", "NGTOSan");
            tableMapping.ColumnMappings.Add("NGTOStorm", "NGTOStorm");
            tableMapping.ColumnMappings.Add("PipeFlowTypeSan", "PipeFlowTypeSan");
            tableMapping.ColumnMappings.Add("PipeFlowTypeStorm", "PipeFlowTypeStorm");
            tableMapping.ColumnMappings.Add("SanSwrCrown", "SanSwrCrown");
            tableMapping.ColumnMappings.Add("Frac2SwrBeg", "Frac2SwrBeg");
            tableMapping.ColumnMappings.Add("FloodRefElev", "FloodRefElev");
            tableMapping.ColumnMappings.Add("FalseBFRisk", "FalseBFRisk");
            tableMapping.ColumnMappings.Add("GridQAQC", "GridQAQC");
            tableMapping.ColumnMappings.Add("MaxBldGrid", "MaxBldGrid");
            tableMapping.ColumnMappings.Add("AvgParcelElev", "AvgParcelElev");
            tableMapping.ColumnMappings.Add("EFFMethod", "EFFMethod");
            tableMapping.ColumnMappings.Add("FFOverride", "FFOverride");
            tableMapping.ColumnMappings.Add("OrigFinishFloor", "OrigFinishFloor");
            tableMapping.ColumnMappings.Add("HGL", "HGL");
            tableMapping.ColumnMappings.Add("DeltaHGL", "DeltaHGL");
            tableMapping.ColumnMappings.Add("HGLComment", "HGLComment");
            tableMapping.ColumnMappings.Add("DataSourceFlags", "DataSourceFlags");
            tableMapping.ColumnMappings.Add("ZoneEX", "ZoneEX");
            tableMapping.ColumnMappings.Add("ZoneCP", "ZoneCP");
            tableMapping.ColumnMappings.Add("GenEX", "GenEX");
            tableMapping.ColumnMappings.Add("GenCP", "GenCP");
            tableMapping.ColumnMappings.Add("BaseFlow", "BaseFlow");
            tableMapping.ColumnMappings.Add("BaseFlowEX", "BaseFlowEX");
            tableMapping.ColumnMappings.Add("BaseFlowDM", "BaseFlowDM");
            tableMapping.ColumnMappings.Add("ICFtRoof", "ICFtRoof");
            tableMapping.ColumnMappings.Add("ICFtParking", "ICFtParking");
            tableMapping.ColumnMappings.Add("ICFlag", "ICFlag");
            tableMapping.ColumnMappings.Add("ImpFractEX", "ImpFractEX");
            tableMapping.ColumnMappings.Add("ImpFractCP", "ImpFractCP");
            tableMapping.ColumnMappings.Add("ImpFractFB", "ImpFractFB");
            tableMapping.ColumnMappings.Add("AreaFt", "AreaFt");
            tableMapping.ColumnMappings.Add("RfAreaFt", "RfAreaFt");
            tableMapping.ColumnMappings.Add("PkAreaFt", "PkAreaFt");
            tableMapping.ColumnMappings.Add("TraceVisit", "TraceVisit");
            tableMapping.ColumnMappings.Add("DSCPickedFlag", "DSCPickedFlag");
            tableMapping.ColumnMappings.Add("UpdateAtts", "UpdateAtts");
            tableMapping.ColumnMappings.Add("c_RFtosurfFt", "c_RFtosurfFt");
            tableMapping.ColumnMappings.Add("c_PKtosurfFt", "c_PKtosurfFt");
            tableMapping.ColumnMappings.Add("c_RFtosurfImpFt", "c_RFtosurfImpFt");
            tableMapping.ColumnMappings.Add("c_PKtosurfImpFt", "c_PKtosurfImpFt");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            tableMapping.ColumnMappings.Add("Sewerable", "Sewerable");
            tableMapping.ColumnMappings.Add("HasBasement", "HasBasement");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `mdl_dirsc_ac` WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `ParcelID` I" +
                "S NULL) OR (`ParcelID` = ?)) AND ((? = 1 AND `DivideID` IS NULL) OR (`DivideID` " +
                "= ?)) AND ((? = 1 AND `DSCID` IS NULL) OR (`DSCID` = ?)) AND ((? = 1 AND `discoS" +
                "iteID` IS NULL) OR (`discoSiteID` = ?)) AND ((? = 1 AND `DiscoClass` IS NULL) OR" +
                " (`DiscoClass` = ?)) AND ((? = 1 AND `ToLinkSan` IS NULL) OR (`ToLinkSan` = ?)) " +
                "AND ((? = 1 AND `ToLinkStorm` IS NULL) OR (`ToLinkStorm` = ?)) AND ((? = 1 AND `" +
                "NGTOSan` IS NULL) OR (`NGTOSan` = ?)) AND ((? = 1 AND `NGTOStorm` IS NULL) OR (`" +
                "NGTOStorm` = ?)) AND ((? = 1 AND `PipeFlowTypeSan` IS NULL) OR (`PipeFlowTypeSan" +
                "` = ?)) AND ((? = 1 AND `PipeFlowTypeStorm` IS NULL) OR (`PipeFlowTypeStorm` = ?" +
                ")) AND ((? = 1 AND `SanSwrCrown` IS NULL) OR (`SanSwrCrown` = ?)) AND ((? = 1 AN" +
                "D `Frac2SwrBeg` IS NULL) OR (`Frac2SwrBeg` = ?)) AND ((? = 1 AND `FloodRefElev` " +
                "IS NULL) OR (`FloodRefElev` = ?)) AND ((? = 1 AND `FalseBFRisk` IS NULL) OR (`Fa" +
                "lseBFRisk` = ?)) AND ((? = 1 AND `GridQAQC` IS NULL) OR (`GridQAQC` = ?)) AND ((" +
                "? = 1 AND `MaxBldGrid` IS NULL) OR (`MaxBldGrid` = ?)) AND ((? = 1 AND `AvgParce" +
                "lElev` IS NULL) OR (`AvgParcelElev` = ?)) AND ((? = 1 AND `EFFMethod` IS NULL) O" +
                "R (`EFFMethod` = ?)) AND ((? = 1 AND `FFOverride` IS NULL) OR (`FFOverride` = ?)" +
                ") AND ((? = 1 AND `OrigFinishFloor` IS NULL) OR (`OrigFinishFloor` = ?)) AND ((?" +
                " = 1 AND `HGL` IS NULL) OR (`HGL` = ?)) AND ((? = 1 AND `DeltaHGL` IS NULL) OR (" +
                "`DeltaHGL` = ?)) AND ((? = 1 AND `HGLComment` IS NULL) OR (`HGLComment` = ?)) AN" +
                "D ((? = 1 AND `DataSourceFlags` IS NULL) OR (`DataSourceFlags` = ?)) AND ((? = 1" +
                " AND `ZoneEX` IS NULL) OR (`ZoneEX` = ?)) AND ((? = 1 AND `ZoneCP` IS NULL) OR (" +
                "`ZoneCP` = ?)) AND ((? = 1 AND `GenEX` IS NULL) OR (`GenEX` = ?)) AND ((? = 1 AN" +
                "D `GenCP` IS NULL) OR (`GenCP` = ?)) AND ((? = 1 AND `BaseFlow` IS NULL) OR (`Ba" +
                "seFlow` = ?)) AND ((? = 1 AND `BaseFlowEX` IS NULL) OR (`BaseFlowEX` = ?)) AND (" +
                "(? = 1 AND `BaseFlowDM` IS NULL) OR (`BaseFlowDM` = ?)) AND ((? = 1 AND `ICFtRoo" +
                "f` IS NULL) OR (`ICFtRoof` = ?)) AND ((? = 1 AND `ICFtParking` IS NULL) OR (`ICF" +
                "tParking` = ?)) AND ((? = 1 AND `ICFlag` IS NULL) OR (`ICFlag` = ?)) AND ((? = 1" +
                " AND `ImpFractEX` IS NULL) OR (`ImpFractEX` = ?)) AND ((? = 1 AND `ImpFractCP` I" +
                "S NULL) OR (`ImpFractCP` = ?)) AND ((? = 1 AND `ImpFractFB` IS NULL) OR (`ImpFra" +
                "ctFB` = ?)) AND ((? = 1 AND `AreaFt` IS NULL) OR (`AreaFt` = ?)) AND ((? = 1 AND" +
                " `RfAreaFt` IS NULL) OR (`RfAreaFt` = ?)) AND ((? = 1 AND `PkAreaFt` IS NULL) OR" +
                " (`PkAreaFt` = ?)) AND ((? = 1 AND `TraceVisit` IS NULL) OR (`TraceVisit` = ?)) " +
                "AND ((? = 1 AND `DSCPickedFlag` IS NULL) OR (`DSCPickedFlag` = ?)) AND ((? = 1 A" +
                "ND `UpdateAtts` IS NULL) OR (`UpdateAtts` = ?)) AND ((? = 1 AND `c_RFtosurfFt` I" +
                "S NULL) OR (`c_RFtosurfFt` = ?)) AND ((? = 1 AND `c_PKtosurfFt` IS NULL) OR (`c_" +
                "PKtosurfFt` = ?)) AND ((? = 1 AND `c_RFtosurfImpFt` IS NULL) OR (`c_RFtosurfImpF" +
                "t` = ?)) AND ((? = 1 AND `c_PKtosurfImpFt` IS NULL) OR (`c_PKtosurfImpFt` = ?)) " +
                "AND ((? = 1 AND `IsActive` IS NULL) OR (`IsActive` = ?)) AND ((? = 1 AND `Sewera" +
                "ble` IS NULL) OR (`Sewerable` = ?)) AND ((? = 1 AND `HasBasement` IS NULL) OR (`" +
                "HasBasement` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_discoSiteID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "discoSiteID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_discoSiteID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "discoSiteID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DiscoClass", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiscoClass", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DiscoClass", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiscoClass", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToLinkSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkSan", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToLinkSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkSan", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToLinkStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkStorm", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToLinkStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkStorm", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTOSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOSan", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTOSan", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOSan", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTOStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStorm", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTOStorm", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStorm", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PipeFlowTypeSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeSan", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PipeFlowTypeSan", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeSan", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PipeFlowTypeStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeStorm", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PipeFlowTypeStorm", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeStorm", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SanSwrCrown", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SanSwrCrown", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SanSwrCrown", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SanSwrCrown", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Frac2SwrBeg", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Frac2SwrBeg", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Frac2SwrBeg", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Frac2SwrBeg", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FloodRefElev", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FloodRefElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FalseBFRisk", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FalseBFRisk", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FalseBFRisk", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FalseBFRisk", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_GridQAQC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GridQAQC", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_GridQAQC", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GridQAQC", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_MaxBldGrid", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MaxBldGrid", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MaxBldGrid", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MaxBldGrid", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AvgParcelElev", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AvgParcelElev", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AvgParcelElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AvgParcelElev", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EFFMethod", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EFFMethod", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EFFMethod", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EFFMethod", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FFOverride", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FFOverride", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FFOverride", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FFOverride", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OrigFinishFloor", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrigFinishFloor", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OrigFinishFloor", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrigFinishFloor", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_HGL", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGL", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_HGL", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGL", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DeltaHGL", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DeltaHGL", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DeltaHGL", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DeltaHGL", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_HGLComment", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGLComment", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_HGLComment", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGLComment", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DataSourceFlags", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSourceFlags", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DataSourceFlags", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSourceFlags", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ZoneEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ZoneEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ZoneCP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneCP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ZoneCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneCP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_GenEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_GenEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_GenCP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenCP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_GenCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenCP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BaseFlow", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlow", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BaseFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlow", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BaseFlowEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BaseFlowEX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BaseFlowDM", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowDM", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BaseFlowDM", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowDM", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoof", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoof", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParking", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParking", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICFlag", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFlag", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICFlag", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFlag", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ImpFractEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ImpFractEX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ImpFractCP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractCP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ImpFractCP", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractCP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ImpFractFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractFB", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ImpFractFB", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractFB", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AreaFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AreaFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RfAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RfAreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PkAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PkAreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_TraceVisit", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_TraceVisit", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DSCPickedFlag", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCPickedFlag", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DSCPickedFlag", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCPickedFlag", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_UpdateAtts", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UpdateAtts", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_UpdateAtts", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UpdateAtts", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_RFtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_RFtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_PKtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_PKtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_RFtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfImpFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_RFtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfImpFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_PKtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfImpFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_PKtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfImpFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_IsActive", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Sewerable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Sewerable", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Sewerable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Sewerable", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_HasBasement", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasBasement", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_HasBasement", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasBasement", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `mdl_dirsc_ac` (`ParcelID`, `DivideID`, `DSCID`, `discoSiteID`, `DiscoClass`, `ToLinkSan`, `ToLinkStorm`, `NGTOSan`, `NGTOStorm`, `PipeFlowTypeSan`, `PipeFlowTypeStorm`, `SanSwrCrown`, `Frac2SwrBeg`, `FloodRefElev`, `FalseBFRisk`, `GridQAQC`, `MaxBldGrid`, `AvgParcelElev`, `EFFMethod`, `FFOverride`, `OrigFinishFloor`, `HGL`, `DeltaHGL`, `HGLComment`, `DataSourceFlags`, `ZoneEX`, `ZoneCP`, `GenEX`, `GenCP`, `BaseFlow`, `BaseFlowEX`, `BaseFlowDM`, `ICFtRoof`, `ICFtParking`, `ICFlag`, `ImpFractEX`, `ImpFractCP`, `ImpFractFB`, `AreaFt`, `RfAreaFt`, `PkAreaFt`, `TraceVisit`, `DSCPickedFlag`, `UpdateAtts`, `c_RFtosurfFt`, `c_PKtosurfFt`, `c_RFtosurfImpFt`, `c_PKtosurfImpFt`, `IsActive`, `Sewerable`, `HasBasement`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("discoSiteID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "discoSiteID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DiscoClass", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiscoClass", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToLinkSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkSan", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToLinkStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkStorm", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTOSan", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOSan", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTOStorm", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStorm", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PipeFlowTypeSan", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeSan", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PipeFlowTypeStorm", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeStorm", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SanSwrCrown", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SanSwrCrown", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Frac2SwrBeg", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Frac2SwrBeg", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FloodRefElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FalseBFRisk", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FalseBFRisk", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("GridQAQC", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GridQAQC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("MaxBldGrid", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MaxBldGrid", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AvgParcelElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AvgParcelElev", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EFFMethod", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EFFMethod", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FFOverride", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FFOverride", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OrigFinishFloor", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrigFinishFloor", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("HGL", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DeltaHGL", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DeltaHGL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("HGLComment", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGLComment", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DataSourceFlags", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSourceFlags", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ZoneEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ZoneCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneCP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("GenEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("GenCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenCP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BaseFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlow", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BaseFlowEX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BaseFlowDM", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowDM", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoof", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParking", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICFlag", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFlag", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ImpFractEX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ImpFractCP", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractCP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ImpFractFB", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractFB", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AreaFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RfAreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PkAreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("TraceVisit", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DSCPickedFlag", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCPickedFlag", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("UpdateAtts", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UpdateAtts", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_RFtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_PKtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_RFtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfImpFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_PKtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfImpFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Sewerable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Sewerable", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("HasBasement", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasBasement", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE `mdl_dirsc_ac` SET `ParcelID` = ?, `DivideID` = ?, `DSCID` = ?, `discoSite" +
                "ID` = ?, `DiscoClass` = ?, `ToLinkSan` = ?, `ToLinkStorm` = ?, `NGTOSan` = ?, `N" +
                "GTOStorm` = ?, `PipeFlowTypeSan` = ?, `PipeFlowTypeStorm` = ?, `SanSwrCrown` = ?" +
                ", `Frac2SwrBeg` = ?, `FloodRefElev` = ?, `FalseBFRisk` = ?, `GridQAQC` = ?, `Max" +
                "BldGrid` = ?, `AvgParcelElev` = ?, `EFFMethod` = ?, `FFOverride` = ?, `OrigFinis" +
                "hFloor` = ?, `HGL` = ?, `DeltaHGL` = ?, `HGLComment` = ?, `DataSourceFlags` = ?," +
                " `ZoneEX` = ?, `ZoneCP` = ?, `GenEX` = ?, `GenCP` = ?, `BaseFlow` = ?, `BaseFlow" +
                "EX` = ?, `BaseFlowDM` = ?, `ICFtRoof` = ?, `ICFtParking` = ?, `ICFlag` = ?, `Imp" +
                "FractEX` = ?, `ImpFractCP` = ?, `ImpFractFB` = ?, `AreaFt` = ?, `RfAreaFt` = ?, " +
                "`PkAreaFt` = ?, `TraceVisit` = ?, `DSCPickedFlag` = ?, `UpdateAtts` = ?, `c_RFto" +
                "surfFt` = ?, `c_PKtosurfFt` = ?, `c_RFtosurfImpFt` = ?, `c_PKtosurfImpFt` = ?, `" +
                "IsActive` = ?, `Sewerable` = ?, `HasBasement` = ? WHERE ((`MAPINFO_ID` = ?) AND " +
                "((? = 1 AND `ParcelID` IS NULL) OR (`ParcelID` = ?)) AND ((? = 1 AND `DivideID` " +
                "IS NULL) OR (`DivideID` = ?)) AND ((? = 1 AND `DSCID` IS NULL) OR (`DSCID` = ?))" +
                " AND ((? = 1 AND `discoSiteID` IS NULL) OR (`discoSiteID` = ?)) AND ((? = 1 AND " +
                "`DiscoClass` IS NULL) OR (`DiscoClass` = ?)) AND ((? = 1 AND `ToLinkSan` IS NULL" +
                ") OR (`ToLinkSan` = ?)) AND ((? = 1 AND `ToLinkStorm` IS NULL) OR (`ToLinkStorm`" +
                " = ?)) AND ((? = 1 AND `NGTOSan` IS NULL) OR (`NGTOSan` = ?)) AND ((? = 1 AND `N" +
                "GTOStorm` IS NULL) OR (`NGTOStorm` = ?)) AND ((? = 1 AND `PipeFlowTypeSan` IS NU" +
                "LL) OR (`PipeFlowTypeSan` = ?)) AND ((? = 1 AND `PipeFlowTypeStorm` IS NULL) OR " +
                "(`PipeFlowTypeStorm` = ?)) AND ((? = 1 AND `SanSwrCrown` IS NULL) OR (`SanSwrCro" +
                "wn` = ?)) AND ((? = 1 AND `Frac2SwrBeg` IS NULL) OR (`Frac2SwrBeg` = ?)) AND ((?" +
                " = 1 AND `FloodRefElev` IS NULL) OR (`FloodRefElev` = ?)) AND ((? = 1 AND `False" +
                "BFRisk` IS NULL) OR (`FalseBFRisk` = ?)) AND ((? = 1 AND `GridQAQC` IS NULL) OR " +
                "(`GridQAQC` = ?)) AND ((? = 1 AND `MaxBldGrid` IS NULL) OR (`MaxBldGrid` = ?)) A" +
                "ND ((? = 1 AND `AvgParcelElev` IS NULL) OR (`AvgParcelElev` = ?)) AND ((? = 1 AN" +
                "D `EFFMethod` IS NULL) OR (`EFFMethod` = ?)) AND ((? = 1 AND `FFOverride` IS NUL" +
                "L) OR (`FFOverride` = ?)) AND ((? = 1 AND `OrigFinishFloor` IS NULL) OR (`OrigFi" +
                "nishFloor` = ?)) AND ((? = 1 AND `HGL` IS NULL) OR (`HGL` = ?)) AND ((? = 1 AND " +
                "`DeltaHGL` IS NULL) OR (`DeltaHGL` = ?)) AND ((? = 1 AND `HGLComment` IS NULL) O" +
                "R (`HGLComment` = ?)) AND ((? = 1 AND `DataSourceFlags` IS NULL) OR (`DataSource" +
                "Flags` = ?)) AND ((? = 1 AND `ZoneEX` IS NULL) OR (`ZoneEX` = ?)) AND ((? = 1 AN" +
                "D `ZoneCP` IS NULL) OR (`ZoneCP` = ?)) AND ((? = 1 AND `GenEX` IS NULL) OR (`Gen" +
                "EX` = ?)) AND ((? = 1 AND `GenCP` IS NULL) OR (`GenCP` = ?)) AND ((? = 1 AND `Ba" +
                "seFlow` IS NULL) OR (`BaseFlow` = ?)) AND ((? = 1 AND `BaseFlowEX` IS NULL) OR (" +
                "`BaseFlowEX` = ?)) AND ((? = 1 AND `BaseFlowDM` IS NULL) OR (`BaseFlowDM` = ?)) " +
                "AND ((? = 1 AND `ICFtRoof` IS NULL) OR (`ICFtRoof` = ?)) AND ((? = 1 AND `ICFtPa" +
                "rking` IS NULL) OR (`ICFtParking` = ?)) AND ((? = 1 AND `ICFlag` IS NULL) OR (`I" +
                "CFlag` = ?)) AND ((? = 1 AND `ImpFractEX` IS NULL) OR (`ImpFractEX` = ?)) AND ((" +
                "? = 1 AND `ImpFractCP` IS NULL) OR (`ImpFractCP` = ?)) AND ((? = 1 AND `ImpFract" +
                "FB` IS NULL) OR (`ImpFractFB` = ?)) AND ((? = 1 AND `AreaFt` IS NULL) OR (`AreaF" +
                "t` = ?)) AND ((? = 1 AND `RfAreaFt` IS NULL) OR (`RfAreaFt` = ?)) AND ((? = 1 AN" +
                "D `PkAreaFt` IS NULL) OR (`PkAreaFt` = ?)) AND ((? = 1 AND `TraceVisit` IS NULL)" +
                " OR (`TraceVisit` = ?)) AND ((? = 1 AND `DSCPickedFlag` IS NULL) OR (`DSCPickedF" +
                "lag` = ?)) AND ((? = 1 AND `UpdateAtts` IS NULL) OR (`UpdateAtts` = ?)) AND ((? " +
                "= 1 AND `c_RFtosurfFt` IS NULL) OR (`c_RFtosurfFt` = ?)) AND ((? = 1 AND `c_PKto" +
                "surfFt` IS NULL) OR (`c_PKtosurfFt` = ?)) AND ((? = 1 AND `c_RFtosurfImpFt` IS N" +
                "ULL) OR (`c_RFtosurfImpFt` = ?)) AND ((? = 1 AND `c_PKtosurfImpFt` IS NULL) OR (" +
                "`c_PKtosurfImpFt` = ?)) AND ((? = 1 AND `IsActive` IS NULL) OR (`IsActive` = ?))" +
                " AND ((? = 1 AND `Sewerable` IS NULL) OR (`Sewerable` = ?)) AND ((? = 1 AND `Has" +
                "Basement` IS NULL) OR (`HasBasement` = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("discoSiteID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "discoSiteID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DiscoClass", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiscoClass", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToLinkSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkSan", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToLinkStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkStorm", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTOSan", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOSan", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NGTOStorm", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStorm", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PipeFlowTypeSan", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeSan", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PipeFlowTypeStorm", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeStorm", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SanSwrCrown", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SanSwrCrown", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Frac2SwrBeg", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Frac2SwrBeg", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FloodRefElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FalseBFRisk", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FalseBFRisk", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("GridQAQC", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GridQAQC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("MaxBldGrid", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MaxBldGrid", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AvgParcelElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AvgParcelElev", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EFFMethod", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EFFMethod", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FFOverride", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FFOverride", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OrigFinishFloor", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrigFinishFloor", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("HGL", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DeltaHGL", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DeltaHGL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("HGLComment", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGLComment", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DataSourceFlags", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSourceFlags", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ZoneEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ZoneCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneCP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("GenEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("GenCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenCP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BaseFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlow", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BaseFlowEX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BaseFlowDM", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowDM", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoof", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParking", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICFlag", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFlag", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ImpFractEX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ImpFractCP", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractCP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ImpFractFB", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractFB", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AreaFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RfAreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PkAreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("TraceVisit", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DSCPickedFlag", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCPickedFlag", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("UpdateAtts", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UpdateAtts", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_RFtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_PKtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_RFtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfImpFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("c_PKtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfImpFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Sewerable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Sewerable", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("HasBasement", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasBasement", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_discoSiteID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "discoSiteID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_discoSiteID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "discoSiteID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DiscoClass", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiscoClass", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DiscoClass", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiscoClass", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToLinkSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkSan", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToLinkSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkSan", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToLinkStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkStorm", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToLinkStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToLinkStorm", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTOSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOSan", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTOSan", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOSan", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_NGTOStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStorm", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NGTOStorm", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NGTOStorm", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PipeFlowTypeSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeSan", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PipeFlowTypeSan", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeSan", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PipeFlowTypeStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeStorm", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PipeFlowTypeStorm", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeStorm", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SanSwrCrown", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SanSwrCrown", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SanSwrCrown", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SanSwrCrown", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Frac2SwrBeg", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Frac2SwrBeg", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Frac2SwrBeg", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Frac2SwrBeg", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FloodRefElev", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FloodRefElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FalseBFRisk", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FalseBFRisk", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FalseBFRisk", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FalseBFRisk", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_GridQAQC", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GridQAQC", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_GridQAQC", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GridQAQC", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_MaxBldGrid", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MaxBldGrid", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MaxBldGrid", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MaxBldGrid", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AvgParcelElev", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AvgParcelElev", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AvgParcelElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AvgParcelElev", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EFFMethod", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EFFMethod", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EFFMethod", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EFFMethod", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FFOverride", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FFOverride", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FFOverride", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FFOverride", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OrigFinishFloor", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrigFinishFloor", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OrigFinishFloor", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrigFinishFloor", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_HGL", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGL", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_HGL", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGL", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DeltaHGL", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DeltaHGL", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DeltaHGL", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DeltaHGL", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_HGLComment", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGLComment", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_HGLComment", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HGLComment", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DataSourceFlags", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSourceFlags", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DataSourceFlags", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DataSourceFlags", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ZoneEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ZoneEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ZoneCP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneCP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ZoneCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneCP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_GenEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_GenEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_GenCP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenCP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_GenCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenCP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BaseFlow", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlow", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BaseFlow", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlow", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BaseFlowEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BaseFlowEX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BaseFlowDM", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowDM", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BaseFlowDM", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseFlowDM", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoof", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICFtRoof", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoof", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParking", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICFtParking", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParking", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICFlag", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFlag", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICFlag", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFlag", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ImpFractEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ImpFractEX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ImpFractCP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractCP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ImpFractCP", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractCP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ImpFractFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractFB", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ImpFractFB", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractFB", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AreaFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AreaFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RfAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RfAreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PkAreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PkAreaFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_TraceVisit", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_TraceVisit", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TraceVisit", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DSCPickedFlag", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCPickedFlag", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DSCPickedFlag", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCPickedFlag", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_UpdateAtts", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UpdateAtts", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_UpdateAtts", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UpdateAtts", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_RFtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_RFtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_PKtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_PKtosurfFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_RFtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfImpFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_RFtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_RFtosurfImpFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_c_PKtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfImpFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_c_PKtosurfImpFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "c_PKtosurfImpFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_IsActive", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_IsActive", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IsActive", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Sewerable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Sewerable", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Sewerable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Sewerable", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_HasBasement", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasBasement", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_HasBasement", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasBasement", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.StormwaterControls_V12ConnString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     mdl_dirsc_ac.*\r\nFROM         mdl_dirsc_ac";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StormwaterControlsDataSet.mdl_dirsc_acDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StormwaterControlsDataSet.mdl_dirsc_acDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StormwaterControlsDataSet.mdl_dirsc_acDataTable dataTable = new StormwaterControlsDataSet.mdl_dirsc_acDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet.mdl_dirsc_acDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "mdl_dirsc_ac");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_MAPINFO_ID, 
                    global::System.Nullable<int> Original_ParcelID, 
                    global::System.Nullable<int> Original_DivideID, 
                    global::System.Nullable<int> Original_DSCID, 
                    global::System.Nullable<int> Original_discoSiteID, 
                    string Original_DiscoClass, 
                    global::System.Nullable<int> Original_ToLinkSan, 
                    global::System.Nullable<int> Original_ToLinkStorm, 
                    string Original_NGTOSan, 
                    string Original_NGTOStorm, 
                    string Original_PipeFlowTypeSan, 
                    string Original_PipeFlowTypeStorm, 
                    global::System.Nullable<double> Original_SanSwrCrown, 
                    global::System.Nullable<double> Original_Frac2SwrBeg, 
                    global::System.Nullable<double> Original_FloodRefElev, 
                    bool Original_FalseBFRisk, 
                    string Original_GridQAQC, 
                    global::System.Nullable<double> Original_MaxBldGrid, 
                    global::System.Nullable<double> Original_AvgParcelElev, 
                    string Original_EFFMethod, 
                    string Original_FFOverride, 
                    global::System.Nullable<double> Original_OrigFinishFloor, 
                    global::System.Nullable<double> Original_HGL, 
                    global::System.Nullable<double> Original_DeltaHGL, 
                    string Original_HGLComment, 
                    string Original_DataSourceFlags, 
                    string Original_ZoneEX, 
                    string Original_ZoneCP, 
                    string Original_GenEX, 
                    string Original_GenCP, 
                    global::System.Nullable<double> Original_BaseFlow, 
                    global::System.Nullable<double> Original_BaseFlowEX, 
                    global::System.Nullable<double> Original_BaseFlowDM, 
                    global::System.Nullable<int> Original_ICFtRoof, 
                    global::System.Nullable<int> Original_ICFtParking, 
                    string Original_ICFlag, 
                    global::System.Nullable<double> Original_ImpFractEX, 
                    global::System.Nullable<double> Original_ImpFractCP, 
                    global::System.Nullable<double> Original_ImpFractFB, 
                    global::System.Nullable<double> Original_AreaFt, 
                    global::System.Nullable<double> Original_RfAreaFt, 
                    global::System.Nullable<double> Original_PkAreaFt, 
                    string Original_TraceVisit, 
                    string Original_DSCPickedFlag, 
                    bool Original_UpdateAtts, 
                    global::System.Nullable<int> Original_c_RFtosurfFt, 
                    global::System.Nullable<int> Original_c_PKtosurfFt, 
                    global::System.Nullable<int> Original_c_RFtosurfImpFt, 
                    global::System.Nullable<int> Original_c_PKtosurfImpFt, 
                    bool Original_IsActive, 
                    global::System.Nullable<int> Original_Sewerable, 
                    global::System.Nullable<int> Original_HasBasement) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_ParcelID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ParcelID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_DivideID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_DivideID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_DSCID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_DSCID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_discoSiteID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_discoSiteID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_DiscoClass == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_DiscoClass));
            }
            if ((Original_ToLinkSan.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_ToLinkSan.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_ToLinkStorm.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_ToLinkStorm.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_NGTOSan == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_NGTOSan));
            }
            if ((Original_NGTOStorm == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_NGTOStorm));
            }
            if ((Original_PipeFlowTypeSan == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_PipeFlowTypeSan));
            }
            if ((Original_PipeFlowTypeStorm == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_PipeFlowTypeStorm));
            }
            if ((Original_SanSwrCrown.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((double)(Original_SanSwrCrown.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_Frac2SwrBeg.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((double)(Original_Frac2SwrBeg.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_FloodRefElev.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((double)(Original_FloodRefElev.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[30].Value = ((bool)(Original_FalseBFRisk));
            if ((Original_GridQAQC == null)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((string)(Original_GridQAQC));
            }
            if ((Original_MaxBldGrid.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((double)(Original_MaxBldGrid.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_AvgParcelElev.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((double)(Original_AvgParcelElev.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_EFFMethod == null)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((string)(Original_EFFMethod));
            }
            if ((Original_FFOverride == null)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((string)(Original_FFOverride));
            }
            if ((Original_OrigFinishFloor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((double)(Original_OrigFinishFloor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((Original_HGL.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((double)(Original_HGL.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((Original_DeltaHGL.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((double)(Original_DeltaHGL.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_HGLComment == null)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((string)(Original_HGLComment));
            }
            if ((Original_DataSourceFlags == null)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((string)(Original_DataSourceFlags));
            }
            if ((Original_ZoneEX == null)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((string)(Original_ZoneEX));
            }
            if ((Original_ZoneCP == null)) {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[54].Value = ((string)(Original_ZoneCP));
            }
            if ((Original_GenEX == null)) {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[56].Value = ((string)(Original_GenEX));
            }
            if ((Original_GenCP == null)) {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[58].Value = ((string)(Original_GenCP));
            }
            if ((Original_BaseFlow.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[60].Value = ((double)(Original_BaseFlow.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((Original_BaseFlowEX.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[62].Value = ((double)(Original_BaseFlowEX.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((Original_BaseFlowDM.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[64].Value = ((double)(Original_BaseFlowDM.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((Original_ICFtRoof.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[66].Value = ((int)(Original_ICFtRoof.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            if ((Original_ICFtParking.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[68].Value = ((int)(Original_ICFtParking.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            if ((Original_ICFlag == null)) {
                this.Adapter.DeleteCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[70].Value = ((string)(Original_ICFlag));
            }
            if ((Original_ImpFractEX.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[71].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[72].Value = ((double)(Original_ImpFractEX.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[71].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            if ((Original_ImpFractCP.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[73].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[74].Value = ((double)(Original_ImpFractCP.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[73].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[74].Value = global::System.DBNull.Value;
            }
            if ((Original_ImpFractFB.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[75].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[76].Value = ((double)(Original_ImpFractFB.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[75].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            if ((Original_AreaFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[77].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[78].Value = ((double)(Original_AreaFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[77].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            if ((Original_RfAreaFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[79].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[80].Value = ((double)(Original_RfAreaFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[79].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            if ((Original_PkAreaFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[81].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[82].Value = ((double)(Original_PkAreaFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[81].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[82].Value = global::System.DBNull.Value;
            }
            if ((Original_TraceVisit == null)) {
                this.Adapter.DeleteCommand.Parameters[83].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[84].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[83].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[84].Value = ((string)(Original_TraceVisit));
            }
            if ((Original_DSCPickedFlag == null)) {
                this.Adapter.DeleteCommand.Parameters[85].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[86].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[85].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[86].Value = ((string)(Original_DSCPickedFlag));
            }
            this.Adapter.DeleteCommand.Parameters[87].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[88].Value = ((bool)(Original_UpdateAtts));
            if ((Original_c_RFtosurfFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[89].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[90].Value = ((int)(Original_c_RFtosurfFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[89].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[90].Value = global::System.DBNull.Value;
            }
            if ((Original_c_PKtosurfFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[91].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[92].Value = ((int)(Original_c_PKtosurfFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[91].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[92].Value = global::System.DBNull.Value;
            }
            if ((Original_c_RFtosurfImpFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[93].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[94].Value = ((int)(Original_c_RFtosurfImpFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[93].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[94].Value = global::System.DBNull.Value;
            }
            if ((Original_c_PKtosurfImpFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[95].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[96].Value = ((int)(Original_c_PKtosurfImpFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[95].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[96].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[97].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[98].Value = ((bool)(Original_IsActive));
            if ((Original_Sewerable.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[99].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[100].Value = ((int)(Original_Sewerable.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[99].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[100].Value = global::System.DBNull.Value;
            }
            if ((Original_HasBasement.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[101].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[102].Value = ((int)(Original_HasBasement.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[101].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[102].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<int> ParcelID, 
                    global::System.Nullable<int> DivideID, 
                    global::System.Nullable<int> DSCID, 
                    global::System.Nullable<int> discoSiteID, 
                    string DiscoClass, 
                    global::System.Nullable<int> ToLinkSan, 
                    global::System.Nullable<int> ToLinkStorm, 
                    string NGTOSan, 
                    string NGTOStorm, 
                    string PipeFlowTypeSan, 
                    string PipeFlowTypeStorm, 
                    global::System.Nullable<double> SanSwrCrown, 
                    global::System.Nullable<double> Frac2SwrBeg, 
                    global::System.Nullable<double> FloodRefElev, 
                    bool FalseBFRisk, 
                    string GridQAQC, 
                    global::System.Nullable<double> MaxBldGrid, 
                    global::System.Nullable<double> AvgParcelElev, 
                    string EFFMethod, 
                    string FFOverride, 
                    global::System.Nullable<double> OrigFinishFloor, 
                    global::System.Nullable<double> HGL, 
                    global::System.Nullable<double> DeltaHGL, 
                    string HGLComment, 
                    string DataSourceFlags, 
                    string ZoneEX, 
                    string ZoneCP, 
                    string GenEX, 
                    string GenCP, 
                    global::System.Nullable<double> BaseFlow, 
                    global::System.Nullable<double> BaseFlowEX, 
                    global::System.Nullable<double> BaseFlowDM, 
                    global::System.Nullable<int> ICFtRoof, 
                    global::System.Nullable<int> ICFtParking, 
                    string ICFlag, 
                    global::System.Nullable<double> ImpFractEX, 
                    global::System.Nullable<double> ImpFractCP, 
                    global::System.Nullable<double> ImpFractFB, 
                    global::System.Nullable<double> AreaFt, 
                    global::System.Nullable<double> RfAreaFt, 
                    global::System.Nullable<double> PkAreaFt, 
                    string TraceVisit, 
                    string DSCPickedFlag, 
                    bool UpdateAtts, 
                    global::System.Nullable<int> c_RFtosurfFt, 
                    global::System.Nullable<int> c_PKtosurfFt, 
                    global::System.Nullable<int> c_RFtosurfImpFt, 
                    global::System.Nullable<int> c_PKtosurfImpFt, 
                    bool IsActive, 
                    global::System.Nullable<int> Sewerable, 
                    global::System.Nullable<int> HasBasement) {
            if ((ParcelID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ParcelID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((DivideID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(DivideID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((DSCID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(DSCID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((discoSiteID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(discoSiteID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((DiscoClass == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(DiscoClass));
            }
            if ((ToLinkSan.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(ToLinkSan.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((ToLinkStorm.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(ToLinkStorm.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((NGTOSan == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(NGTOSan));
            }
            if ((NGTOStorm == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(NGTOStorm));
            }
            if ((PipeFlowTypeSan == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(PipeFlowTypeSan));
            }
            if ((PipeFlowTypeStorm == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(PipeFlowTypeStorm));
            }
            if ((SanSwrCrown.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(SanSwrCrown.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Frac2SwrBeg.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((double)(Frac2SwrBeg.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((FloodRefElev.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((double)(FloodRefElev.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[14].Value = ((bool)(FalseBFRisk));
            if ((GridQAQC == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(GridQAQC));
            }
            if ((MaxBldGrid.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((double)(MaxBldGrid.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((AvgParcelElev.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((double)(AvgParcelElev.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((EFFMethod == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(EFFMethod));
            }
            if ((FFOverride == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(FFOverride));
            }
            if ((OrigFinishFloor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((double)(OrigFinishFloor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((HGL.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((double)(HGL.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((DeltaHGL.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((double)(DeltaHGL.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((HGLComment == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(HGLComment));
            }
            if ((DataSourceFlags == null)) {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((string)(DataSourceFlags));
            }
            if ((ZoneEX == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(ZoneEX));
            }
            if ((ZoneCP == null)) {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = ((string)(ZoneCP));
            }
            if ((GenEX == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(GenEX));
            }
            if ((GenCP == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(GenCP));
            }
            if ((BaseFlow.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[29].Value = ((double)(BaseFlow.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((BaseFlowEX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((double)(BaseFlowEX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((BaseFlowDM.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((double)(BaseFlowDM.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((ICFtRoof.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[32].Value = ((int)(ICFtRoof.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((ICFtParking.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[33].Value = ((int)(ICFtParking.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((ICFlag == null)) {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = ((string)(ICFlag));
            }
            if ((ImpFractEX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[35].Value = ((double)(ImpFractEX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((ImpFractCP.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[36].Value = ((double)(ImpFractCP.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((ImpFractFB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[37].Value = ((double)(ImpFractFB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((AreaFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[38].Value = ((double)(AreaFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((RfAreaFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[39].Value = ((double)(RfAreaFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((PkAreaFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[40].Value = ((double)(PkAreaFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((TraceVisit == null)) {
                this.Adapter.InsertCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[41].Value = ((string)(TraceVisit));
            }
            if ((DSCPickedFlag == null)) {
                this.Adapter.InsertCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[42].Value = ((string)(DSCPickedFlag));
            }
            this.Adapter.InsertCommand.Parameters[43].Value = ((bool)(UpdateAtts));
            if ((c_RFtosurfFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[44].Value = ((int)(c_RFtosurfFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((c_PKtosurfFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[45].Value = ((int)(c_PKtosurfFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((c_RFtosurfImpFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[46].Value = ((int)(c_RFtosurfImpFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((c_PKtosurfImpFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[47].Value = ((int)(c_PKtosurfImpFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[48].Value = ((bool)(IsActive));
            if ((Sewerable.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[49].Value = ((int)(Sewerable.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            if ((HasBasement.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[50].Value = ((int)(HasBasement.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> ParcelID, 
                    global::System.Nullable<int> DivideID, 
                    global::System.Nullable<int> DSCID, 
                    global::System.Nullable<int> discoSiteID, 
                    string DiscoClass, 
                    global::System.Nullable<int> ToLinkSan, 
                    global::System.Nullable<int> ToLinkStorm, 
                    string NGTOSan, 
                    string NGTOStorm, 
                    string PipeFlowTypeSan, 
                    string PipeFlowTypeStorm, 
                    global::System.Nullable<double> SanSwrCrown, 
                    global::System.Nullable<double> Frac2SwrBeg, 
                    global::System.Nullable<double> FloodRefElev, 
                    bool FalseBFRisk, 
                    string GridQAQC, 
                    global::System.Nullable<double> MaxBldGrid, 
                    global::System.Nullable<double> AvgParcelElev, 
                    string EFFMethod, 
                    string FFOverride, 
                    global::System.Nullable<double> OrigFinishFloor, 
                    global::System.Nullable<double> HGL, 
                    global::System.Nullable<double> DeltaHGL, 
                    string HGLComment, 
                    string DataSourceFlags, 
                    string ZoneEX, 
                    string ZoneCP, 
                    string GenEX, 
                    string GenCP, 
                    global::System.Nullable<double> BaseFlow, 
                    global::System.Nullable<double> BaseFlowEX, 
                    global::System.Nullable<double> BaseFlowDM, 
                    global::System.Nullable<int> ICFtRoof, 
                    global::System.Nullable<int> ICFtParking, 
                    string ICFlag, 
                    global::System.Nullable<double> ImpFractEX, 
                    global::System.Nullable<double> ImpFractCP, 
                    global::System.Nullable<double> ImpFractFB, 
                    global::System.Nullable<double> AreaFt, 
                    global::System.Nullable<double> RfAreaFt, 
                    global::System.Nullable<double> PkAreaFt, 
                    string TraceVisit, 
                    string DSCPickedFlag, 
                    bool UpdateAtts, 
                    global::System.Nullable<int> c_RFtosurfFt, 
                    global::System.Nullable<int> c_PKtosurfFt, 
                    global::System.Nullable<int> c_RFtosurfImpFt, 
                    global::System.Nullable<int> c_PKtosurfImpFt, 
                    bool IsActive, 
                    global::System.Nullable<int> Sewerable, 
                    global::System.Nullable<int> HasBasement, 
                    int Original_MAPINFO_ID, 
                    global::System.Nullable<int> Original_ParcelID, 
                    global::System.Nullable<int> Original_DivideID, 
                    global::System.Nullable<int> Original_DSCID, 
                    global::System.Nullable<int> Original_discoSiteID, 
                    string Original_DiscoClass, 
                    global::System.Nullable<int> Original_ToLinkSan, 
                    global::System.Nullable<int> Original_ToLinkStorm, 
                    string Original_NGTOSan, 
                    string Original_NGTOStorm, 
                    string Original_PipeFlowTypeSan, 
                    string Original_PipeFlowTypeStorm, 
                    global::System.Nullable<double> Original_SanSwrCrown, 
                    global::System.Nullable<double> Original_Frac2SwrBeg, 
                    global::System.Nullable<double> Original_FloodRefElev, 
                    bool Original_FalseBFRisk, 
                    string Original_GridQAQC, 
                    global::System.Nullable<double> Original_MaxBldGrid, 
                    global::System.Nullable<double> Original_AvgParcelElev, 
                    string Original_EFFMethod, 
                    string Original_FFOverride, 
                    global::System.Nullable<double> Original_OrigFinishFloor, 
                    global::System.Nullable<double> Original_HGL, 
                    global::System.Nullable<double> Original_DeltaHGL, 
                    string Original_HGLComment, 
                    string Original_DataSourceFlags, 
                    string Original_ZoneEX, 
                    string Original_ZoneCP, 
                    string Original_GenEX, 
                    string Original_GenCP, 
                    global::System.Nullable<double> Original_BaseFlow, 
                    global::System.Nullable<double> Original_BaseFlowEX, 
                    global::System.Nullable<double> Original_BaseFlowDM, 
                    global::System.Nullable<int> Original_ICFtRoof, 
                    global::System.Nullable<int> Original_ICFtParking, 
                    string Original_ICFlag, 
                    global::System.Nullable<double> Original_ImpFractEX, 
                    global::System.Nullable<double> Original_ImpFractCP, 
                    global::System.Nullable<double> Original_ImpFractFB, 
                    global::System.Nullable<double> Original_AreaFt, 
                    global::System.Nullable<double> Original_RfAreaFt, 
                    global::System.Nullable<double> Original_PkAreaFt, 
                    string Original_TraceVisit, 
                    string Original_DSCPickedFlag, 
                    bool Original_UpdateAtts, 
                    global::System.Nullable<int> Original_c_RFtosurfFt, 
                    global::System.Nullable<int> Original_c_PKtosurfFt, 
                    global::System.Nullable<int> Original_c_RFtosurfImpFt, 
                    global::System.Nullable<int> Original_c_PKtosurfImpFt, 
                    bool Original_IsActive, 
                    global::System.Nullable<int> Original_Sewerable, 
                    global::System.Nullable<int> Original_HasBasement) {
            if ((ParcelID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ParcelID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((DivideID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(DivideID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((DSCID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(DSCID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((discoSiteID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(discoSiteID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((DiscoClass == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(DiscoClass));
            }
            if ((ToLinkSan.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(ToLinkSan.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((ToLinkStorm.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ToLinkStorm.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((NGTOSan == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(NGTOSan));
            }
            if ((NGTOStorm == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(NGTOStorm));
            }
            if ((PipeFlowTypeSan == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(PipeFlowTypeSan));
            }
            if ((PipeFlowTypeStorm == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(PipeFlowTypeStorm));
            }
            if ((SanSwrCrown.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((double)(SanSwrCrown.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Frac2SwrBeg.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((double)(Frac2SwrBeg.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((FloodRefElev.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((double)(FloodRefElev.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((bool)(FalseBFRisk));
            if ((GridQAQC == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(GridQAQC));
            }
            if ((MaxBldGrid.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((double)(MaxBldGrid.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((AvgParcelElev.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((double)(AvgParcelElev.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((EFFMethod == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(EFFMethod));
            }
            if ((FFOverride == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(FFOverride));
            }
            if ((OrigFinishFloor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((double)(OrigFinishFloor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((HGL.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((double)(HGL.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((DeltaHGL.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((double)(DeltaHGL.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((HGLComment == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(HGLComment));
            }
            if ((DataSourceFlags == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(DataSourceFlags));
            }
            if ((ZoneEX == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(ZoneEX));
            }
            if ((ZoneCP == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(ZoneCP));
            }
            if ((GenEX == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(GenEX));
            }
            if ((GenCP == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(GenCP));
            }
            if ((BaseFlow.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((double)(BaseFlow.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((BaseFlowEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((double)(BaseFlowEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((BaseFlowDM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((double)(BaseFlowDM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((ICFtRoof.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(ICFtRoof.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((ICFtParking.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((int)(ICFtParking.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((ICFlag == null)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(ICFlag));
            }
            if ((ImpFractEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((double)(ImpFractEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((ImpFractCP.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((double)(ImpFractCP.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((ImpFractFB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((double)(ImpFractFB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((AreaFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((double)(AreaFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((RfAreaFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((double)(RfAreaFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((PkAreaFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((double)(PkAreaFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((TraceVisit == null)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(TraceVisit));
            }
            if ((DSCPickedFlag == null)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(DSCPickedFlag));
            }
            this.Adapter.UpdateCommand.Parameters[43].Value = ((bool)(UpdateAtts));
            if ((c_RFtosurfFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((int)(c_RFtosurfFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((c_PKtosurfFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((int)(c_PKtosurfFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((c_RFtosurfImpFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((int)(c_RFtosurfImpFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((c_PKtosurfImpFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((int)(c_PKtosurfImpFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[48].Value = ((bool)(IsActive));
            if ((Sewerable.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((int)(Sewerable.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            if ((HasBasement.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((int)(HasBasement.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[51].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_ParcelID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[53].Value = ((int)(Original_ParcelID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            if ((Original_DivideID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[55].Value = ((int)(Original_DivideID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            if ((Original_DSCID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[57].Value = ((int)(Original_DSCID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            if ((Original_discoSiteID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[59].Value = ((int)(Original_discoSiteID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            if ((Original_DiscoClass == null)) {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[61].Value = ((string)(Original_DiscoClass));
            }
            if ((Original_ToLinkSan.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[63].Value = ((int)(Original_ToLinkSan.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            if ((Original_ToLinkStorm.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[65].Value = ((int)(Original_ToLinkStorm.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            if ((Original_NGTOSan == null)) {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[67].Value = ((string)(Original_NGTOSan));
            }
            if ((Original_NGTOStorm == null)) {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[69].Value = ((string)(Original_NGTOStorm));
            }
            if ((Original_PipeFlowTypeSan == null)) {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[71].Value = ((string)(Original_PipeFlowTypeSan));
            }
            if ((Original_PipeFlowTypeStorm == null)) {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[73].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[73].Value = ((string)(Original_PipeFlowTypeStorm));
            }
            if ((Original_SanSwrCrown.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[75].Value = ((double)(Original_SanSwrCrown.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[75].Value = global::System.DBNull.Value;
            }
            if ((Original_Frac2SwrBeg.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[77].Value = ((double)(Original_Frac2SwrBeg.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[77].Value = global::System.DBNull.Value;
            }
            if ((Original_FloodRefElev.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[79].Value = ((double)(Original_FloodRefElev.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[79].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[81].Value = ((bool)(Original_FalseBFRisk));
            if ((Original_GridQAQC == null)) {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[83].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[83].Value = ((string)(Original_GridQAQC));
            }
            if ((Original_MaxBldGrid.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[85].Value = ((double)(Original_MaxBldGrid.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[85].Value = global::System.DBNull.Value;
            }
            if ((Original_AvgParcelElev.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[87].Value = ((double)(Original_AvgParcelElev.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[87].Value = global::System.DBNull.Value;
            }
            if ((Original_EFFMethod == null)) {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[89].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[89].Value = ((string)(Original_EFFMethod));
            }
            if ((Original_FFOverride == null)) {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[91].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[91].Value = ((string)(Original_FFOverride));
            }
            if ((Original_OrigFinishFloor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[93].Value = ((double)(Original_OrigFinishFloor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[93].Value = global::System.DBNull.Value;
            }
            if ((Original_HGL.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[95].Value = ((double)(Original_HGL.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[95].Value = global::System.DBNull.Value;
            }
            if ((Original_DeltaHGL.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[96].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[97].Value = ((double)(Original_DeltaHGL.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[96].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[97].Value = global::System.DBNull.Value;
            }
            if ((Original_HGLComment == null)) {
                this.Adapter.UpdateCommand.Parameters[98].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[99].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[98].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[99].Value = ((string)(Original_HGLComment));
            }
            if ((Original_DataSourceFlags == null)) {
                this.Adapter.UpdateCommand.Parameters[100].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[101].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[100].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[101].Value = ((string)(Original_DataSourceFlags));
            }
            if ((Original_ZoneEX == null)) {
                this.Adapter.UpdateCommand.Parameters[102].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[103].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[102].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[103].Value = ((string)(Original_ZoneEX));
            }
            if ((Original_ZoneCP == null)) {
                this.Adapter.UpdateCommand.Parameters[104].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[105].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[104].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[105].Value = ((string)(Original_ZoneCP));
            }
            if ((Original_GenEX == null)) {
                this.Adapter.UpdateCommand.Parameters[106].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[107].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[106].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[107].Value = ((string)(Original_GenEX));
            }
            if ((Original_GenCP == null)) {
                this.Adapter.UpdateCommand.Parameters[108].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[109].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[108].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[109].Value = ((string)(Original_GenCP));
            }
            if ((Original_BaseFlow.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[110].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[111].Value = ((double)(Original_BaseFlow.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[110].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[111].Value = global::System.DBNull.Value;
            }
            if ((Original_BaseFlowEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[112].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[113].Value = ((double)(Original_BaseFlowEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[112].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[113].Value = global::System.DBNull.Value;
            }
            if ((Original_BaseFlowDM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[114].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[115].Value = ((double)(Original_BaseFlowDM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[114].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[115].Value = global::System.DBNull.Value;
            }
            if ((Original_ICFtRoof.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[116].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[117].Value = ((int)(Original_ICFtRoof.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[116].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[117].Value = global::System.DBNull.Value;
            }
            if ((Original_ICFtParking.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[118].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[119].Value = ((int)(Original_ICFtParking.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[118].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[119].Value = global::System.DBNull.Value;
            }
            if ((Original_ICFlag == null)) {
                this.Adapter.UpdateCommand.Parameters[120].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[121].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[120].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[121].Value = ((string)(Original_ICFlag));
            }
            if ((Original_ImpFractEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[122].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[123].Value = ((double)(Original_ImpFractEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[122].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[123].Value = global::System.DBNull.Value;
            }
            if ((Original_ImpFractCP.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[124].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[125].Value = ((double)(Original_ImpFractCP.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[124].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[125].Value = global::System.DBNull.Value;
            }
            if ((Original_ImpFractFB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[126].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[127].Value = ((double)(Original_ImpFractFB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[126].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[127].Value = global::System.DBNull.Value;
            }
            if ((Original_AreaFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[128].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[129].Value = ((double)(Original_AreaFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[128].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[129].Value = global::System.DBNull.Value;
            }
            if ((Original_RfAreaFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[130].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[131].Value = ((double)(Original_RfAreaFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[130].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[131].Value = global::System.DBNull.Value;
            }
            if ((Original_PkAreaFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[132].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[133].Value = ((double)(Original_PkAreaFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[132].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[133].Value = global::System.DBNull.Value;
            }
            if ((Original_TraceVisit == null)) {
                this.Adapter.UpdateCommand.Parameters[134].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[135].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[134].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[135].Value = ((string)(Original_TraceVisit));
            }
            if ((Original_DSCPickedFlag == null)) {
                this.Adapter.UpdateCommand.Parameters[136].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[137].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[136].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[137].Value = ((string)(Original_DSCPickedFlag));
            }
            this.Adapter.UpdateCommand.Parameters[138].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[139].Value = ((bool)(Original_UpdateAtts));
            if ((Original_c_RFtosurfFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[140].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[141].Value = ((int)(Original_c_RFtosurfFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[140].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[141].Value = global::System.DBNull.Value;
            }
            if ((Original_c_PKtosurfFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[142].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[143].Value = ((int)(Original_c_PKtosurfFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[142].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[143].Value = global::System.DBNull.Value;
            }
            if ((Original_c_RFtosurfImpFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[144].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[145].Value = ((int)(Original_c_RFtosurfImpFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[144].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[145].Value = global::System.DBNull.Value;
            }
            if ((Original_c_PKtosurfImpFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[146].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[147].Value = ((int)(Original_c_PKtosurfImpFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[146].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[147].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[148].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[149].Value = ((bool)(Original_IsActive));
            if ((Original_Sewerable.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[150].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[151].Value = ((int)(Original_Sewerable.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[150].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[151].Value = global::System.DBNull.Value;
            }
            if ((Original_HasBasement.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[152].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[153].Value = ((int)(Original_HasBasement.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[152].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[153].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class _mdl_roofTargetsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _mdl_roofTargetsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "_mdl_roofTargets";
            tableMapping.ColumnMappings.Add("MAPINFO_ID", "MAPINFO_ID");
            tableMapping.ColumnMappings.Add("icID", "icID");
            tableMapping.ColumnMappings.Add("rICID", "rICID");
            tableMapping.ColumnMappings.Add("parcelID", "parcelID");
            tableMapping.ColumnMappings.Add("divideID", "divideID");
            tableMapping.ColumnMappings.Add("dscID", "dscID");
            tableMapping.ColumnMappings.Add("nGTORoof", "nGTORoof");
            tableMapping.ColumnMappings.Add("exICFtRoof", "exICFtRoof");
            tableMapping.ColumnMappings.Add("exRfAreaFt", "exRfAreaFt");
            tableMapping.ColumnMappings.Add("externalDS", "externalDS");
            tableMapping.ColumnMappings.Add("dsTotal", "dsTotal");
            tableMapping.ColumnMappings.Add("extoVeg", "extoVeg");
            tableMapping.ColumnMappings.Add("extoStreet", "extoStreet");
            tableMapping.ColumnMappings.Add("extoPlanter", "extoPlanter");
            tableMapping.ColumnMappings.Add("extoBioretention", "extoBioretention");
            tableMapping.ColumnMappings.Add("extoDrywell", "extoDrywell");
            tableMapping.ColumnMappings.Add("extoEcoroof", "extoEcoroof");
            tableMapping.ColumnMappings.Add("dstoVeg", "dstoVeg");
            tableMapping.ColumnMappings.Add("dstoStreet", "dstoStreet");
            tableMapping.ColumnMappings.Add("dstoPlanter", "dstoPlanter");
            tableMapping.ColumnMappings.Add("dstoBioretention", "dstoBioretention");
            tableMapping.ColumnMappings.Add("dstoDrywell", "dstoDrywell");
            tableMapping.ColumnMappings.Add("dstoEcoroof", "dstoEcoroof");
            tableMapping.ColumnMappings.Add("dsUncontrollable", "dsUncontrollable");
            tableMapping.ColumnMappings.Add("landscapeAvailable", "landscapeAvailable");
            tableMapping.ColumnMappings.Add("fractionDrained", "fractionDrained");
            tableMapping.ColumnMappings.Add("difficulty", "difficulty");
            tableMapping.ColumnMappings.Add("roofEffDisc", "roofEffDisc");
            tableMapping.ColumnMappings.Add("comments", "comments");
            tableMapping.ColumnMappings.Add("plantersOK", "plantersOK");
            tableMapping.ColumnMappings.Add("bioretentionOK", "bioretentionOK");
            tableMapping.ColumnMappings.Add("buildModelIC", "buildModelIC");
            tableMapping.ColumnMappings.Add("source", "source");
            tableMapping.ColumnMappings.Add("appendDate", "appendDate");
            tableMapping.ColumnMappings.Add("constructed", "constructed");
            tableMapping.ColumnMappings.Add("SqFt_Bioret", "SqFt_Bioret");
            tableMapping.ColumnMappings.Add("SqFt_Drywell", "SqFt_Drywell");
            tableMapping.ColumnMappings.Add("SqFt_Veg", "SqFt_Veg");
            tableMapping.ColumnMappings.Add("SqFt_Eco", "SqFt_Eco");
            tableMapping.ColumnMappings.Add("SqFt_Plntr", "SqFt_Plntr");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.StormwaterControls_V12ConnString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     [_mdl_roofTargets].*\r\nFROM         [_mdl_roofTargets]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StormwaterControlsDataSet._mdl_roofTargetsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StormwaterControlsDataSet._mdl_roofTargetsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StormwaterControlsDataSet._mdl_roofTargetsDataTable dataTable = new StormwaterControlsDataSet._mdl_roofTargetsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class _mdl_ParkingTargetsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _mdl_ParkingTargetsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "_mdl_ParkingTargets";
            tableMapping.ColumnMappings.Add("Mst_targetMIID", "Mst_targetMIID");
            tableMapping.ColumnMappings.Add("MAPINFO_ID", "MAPINFO_ID");
            tableMapping.ColumnMappings.Add("icID", "icID");
            tableMapping.ColumnMappings.Add("pICID", "pICID");
            tableMapping.ColumnMappings.Add("parcelID", "parcelID");
            tableMapping.ColumnMappings.Add("divideID", "divideID");
            tableMapping.ColumnMappings.Add("dscID", "dscID");
            tableMapping.ColumnMappings.Add("exICFtParking", "exICFtParking");
            tableMapping.ColumnMappings.Add("exPkAreaFt", "exPkAreaFt");
            tableMapping.ColumnMappings.Add("parkingTargetArea", "parkingTargetArea");
            tableMapping.ColumnMappings.Add("nGTO_Direct", "nGTO_Direct");
            tableMapping.ColumnMappings.Add("nGTO_Surface", "nGTO_Surface");
            tableMapping.ColumnMappings.Add("nGTOParking", "nGTOParking");
            tableMapping.ColumnMappings.Add("evaluated", "evaluated");
            tableMapping.ColumnMappings.Add("inlets", "inlets");
            tableMapping.ColumnMappings.Add("parkingSpaces", "parkingSpaces");
            tableMapping.ColumnMappings.Add("percentParkingUsed", "percentParkingUsed");
            tableMapping.ColumnMappings.Add("drainage", "drainage");
            tableMapping.ColumnMappings.Add("nGTO", "nGTO");
            tableMapping.ColumnMappings.Add("controllable", "controllable");
            tableMapping.ColumnMappings.Add("fractionControllable", "fractionControllable");
            tableMapping.ColumnMappings.Add("difficulty", "difficulty");
            tableMapping.ColumnMappings.Add("parkingEffDisc", "parkingEffDisc");
            tableMapping.ColumnMappings.Add("comments", "comments");
            tableMapping.ColumnMappings.Add("fraction2Drywell", "fraction2Drywell");
            tableMapping.ColumnMappings.Add("buildModelIC", "buildModelIC");
            tableMapping.ColumnMappings.Add("source", "source");
            tableMapping.ColumnMappings.Add("appendDate", "appendDate");
            tableMapping.ColumnMappings.Add("constructed", "constructed");
            tableMapping.ColumnMappings.Add("SqFt_Bioret", "SqFt_Bioret");
            tableMapping.ColumnMappings.Add("SqFt_Drywell", "SqFt_Drywell");
            tableMapping.ColumnMappings.Add("SqFt_Surf", "SqFt_Surf");
            tableMapping.ColumnMappings.Add("SqFt_StOnly", "SqFt_StOnly");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.StormwaterControls_V12ConnString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     *\r\nFROM         [_mdl_ParkingTargets]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StormwaterControlsDataSet._mdl_ParkingTargetsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StormwaterControlsDataSet._mdl_ParkingTargetsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StormwaterControlsDataSet._mdl_ParkingTargetsDataTable dataTable = new StormwaterControlsDataSet._mdl_ParkingTargetsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TableE18TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TableE18TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TableE18";
            tableMapping.ColumnMappings.Add("nodeName", "NodeName");
            tableMapping.ColumnMappings.Add("storageVolumeCuFt", "StorageVolumeCuFt");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `TableE18` WHERE ((`nodeName` = ?) AND ((? = 1 AND `storageVolumeCuFt" +
                "` IS NULL) OR (`storageVolumeCuFt` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_nodeName", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nodeName", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_storageVolumeCuFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "storageVolumeCuFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_storageVolumeCuFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "storageVolumeCuFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `TableE18` (`nodeName`, `storageVolumeCuFt`) VALUES (?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("nodeName", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nodeName", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("storageVolumeCuFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "storageVolumeCuFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE `TableE18` SET `nodeName` = ?, `storageVolumeCuFt` = ? WHERE ((`nodeName` " +
                "= ?) AND ((? = 1 AND `storageVolumeCuFt` IS NULL) OR (`storageVolumeCuFt` = ?)))" +
                "";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("nodeName", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nodeName", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("storageVolumeCuFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "storageVolumeCuFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_nodeName", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nodeName", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_storageVolumeCuFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "storageVolumeCuFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_storageVolumeCuFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "storageVolumeCuFt", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.XPSWMMResultsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     nodeName, storageVolumeCuFt\r\nFROM         TableE18";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StormwaterControlsDataSet.TableE18DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StormwaterControlsDataSet.TableE18DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StormwaterControlsDataSet.TableE18DataTable dataTable = new StormwaterControlsDataSet.TableE18DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet.TableE18DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TableE18");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_nodeName, global::System.Nullable<int> Original_storageVolumeCuFt) {
            if ((Original_nodeName == null)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_nodeName));
            }
            if ((Original_storageVolumeCuFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_storageVolumeCuFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string nodeName, global::System.Nullable<int> storageVolumeCuFt) {
            if ((nodeName == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(nodeName));
            }
            if ((storageVolumeCuFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(storageVolumeCuFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string nodeName, global::System.Nullable<int> storageVolumeCuFt, string Original_nodeName, global::System.Nullable<int> Original_storageVolumeCuFt) {
            if ((nodeName == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(nodeName));
            }
            if ((storageVolumeCuFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(storageVolumeCuFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_nodeName == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_nodeName));
            }
            if ((Original_storageVolumeCuFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_storageVolumeCuFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TableE19TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TableE19TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TableE19";
            tableMapping.ColumnMappings.Add("nodeName", "NodeName");
            tableMapping.ColumnMappings.Add("interfaceInflowCuFt", "InterfaceInflowCuFt");
            tableMapping.ColumnMappings.Add("infiltrationVolumeCuFt", "InfiltrationVolumeCuFt");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `TableE19` WHERE ((`nodeName` = ?) AND ((? = 1 AND `infiltrationVolum" +
                "eCuFt` IS NULL) OR (`infiltrationVolumeCuFt` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_nodeName", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nodeName", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_infiltrationVolumeCuFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "infiltrationVolumeCuFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_infiltrationVolumeCuFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "infiltrationVolumeCuFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `TableE19` (`nodeName`, `infiltrationVolumeCuFt`) VALUES (?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("nodeName", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nodeName", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("infiltrationVolumeCuFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "infiltrationVolumeCuFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE `TableE19` SET `nodeName` = ?, `infiltrationVolumeCuFt` = ? WHERE ((`nodeN" +
                "ame` = ?) AND ((? = 1 AND `infiltrationVolumeCuFt` IS NULL) OR (`infiltrationVol" +
                "umeCuFt` = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("nodeName", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nodeName", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("infiltrationVolumeCuFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "infiltrationVolumeCuFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_nodeName", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nodeName", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_infiltrationVolumeCuFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "infiltrationVolumeCuFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_infiltrationVolumeCuFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "infiltrationVolumeCuFt", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.XPSWMMResultsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     nodeName, infiltrationVolumeCuFt\r\nFROM         TableE19";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StormwaterControlsDataSet.TableE19DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StormwaterControlsDataSet.TableE19DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StormwaterControlsDataSet.TableE19DataTable dataTable = new StormwaterControlsDataSet.TableE19DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet.TableE19DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TableE19");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_nodeName, global::System.Nullable<int> Original_infiltrationVolumeCuFt) {
            if ((Original_nodeName == null)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_nodeName));
            }
            if ((Original_infiltrationVolumeCuFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_infiltrationVolumeCuFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string nodeName, global::System.Nullable<int> infiltrationVolumeCuFt) {
            if ((nodeName == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(nodeName));
            }
            if ((infiltrationVolumeCuFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(infiltrationVolumeCuFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string nodeName, global::System.Nullable<int> infiltrationVolumeCuFt, string Original_nodeName, global::System.Nullable<int> Original_infiltrationVolumeCuFt) {
            if ((nodeName == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(nodeName));
            }
            if ((infiltrationVolumeCuFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(infiltrationVolumeCuFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_nodeName == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_nodeName));
            }
            if ((Original_infiltrationVolumeCuFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_infiltrationVolumeCuFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TableE03aTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TableE03aTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TableE03a";
            tableMapping.ColumnMappings.Add("nodeName", "nodeName");
            tableMapping.ColumnMappings.Add("groundElevFt", "groundElevFt");
            tableMapping.ColumnMappings.Add("crownElevFt", "crownElevFt");
            tableMapping.ColumnMappings.Add("invertElevFt", "invertElevFt");
            tableMapping.ColumnMappings.Add("qInstCfs", "qInstCfs");
            tableMapping.ColumnMappings.Add("initialDepthFt", "initialDepthFt");
            tableMapping.ColumnMappings.Add("interfaceFlowPct", "interfaceFlowPct");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `TableE03a` WHERE ((`nodeName` = ?) AND ((? = 1 AND `groundElevFt` IS NULL) OR (`groundElevFt` = ?)) AND ((? = 1 AND `crownElevFt` IS NULL) OR (`crownElevFt` = ?)) AND ((? = 1 AND `invertElevFt` IS NULL) OR (`invertElevFt` = ?)) AND ((? = 1 AND `qInstCfs` IS NULL) OR (`qInstCfs` = ?)) AND ((? = 1 AND `initialDepthFt` IS NULL) OR (`initialDepthFt` = ?)) AND ((? = 1 AND `interfaceFlowPct` IS NULL) OR (`interfaceFlowPct` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_nodeName", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nodeName", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_groundElevFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "groundElevFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_groundElevFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "groundElevFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_crownElevFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "crownElevFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_crownElevFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "crownElevFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_invertElevFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "invertElevFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_invertElevFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "invertElevFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_qInstCfs", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "qInstCfs", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_qInstCfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "qInstCfs", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_initialDepthFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "initialDepthFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_initialDepthFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "initialDepthFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_interfaceFlowPct", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "interfaceFlowPct", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_interfaceFlowPct", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "interfaceFlowPct", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `TableE03a` (`nodeName`, `groundElevFt`, `crownElevFt`, `invertElevFt" +
                "`, `qInstCfs`, `initialDepthFt`, `interfaceFlowPct`) VALUES (?, ?, ?, ?, ?, ?, ?" +
                ")";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("nodeName", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nodeName", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("groundElevFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "groundElevFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("crownElevFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "crownElevFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("invertElevFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "invertElevFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("qInstCfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "qInstCfs", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("initialDepthFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "initialDepthFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("interfaceFlowPct", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "interfaceFlowPct", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `TableE03a` SET `nodeName` = ?, `groundElevFt` = ?, `crownElevFt` = ?, `invertElevFt` = ?, `qInstCfs` = ?, `initialDepthFt` = ?, `interfaceFlowPct` = ? WHERE ((`nodeName` = ?) AND ((? = 1 AND `groundElevFt` IS NULL) OR (`groundElevFt` = ?)) AND ((? = 1 AND `crownElevFt` IS NULL) OR (`crownElevFt` = ?)) AND ((? = 1 AND `invertElevFt` IS NULL) OR (`invertElevFt` = ?)) AND ((? = 1 AND `qInstCfs` IS NULL) OR (`qInstCfs` = ?)) AND ((? = 1 AND `initialDepthFt` IS NULL) OR (`initialDepthFt` = ?)) AND ((? = 1 AND `interfaceFlowPct` IS NULL) OR (`interfaceFlowPct` = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("nodeName", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nodeName", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("groundElevFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "groundElevFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("crownElevFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "crownElevFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("invertElevFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "invertElevFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("qInstCfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "qInstCfs", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("initialDepthFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "initialDepthFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("interfaceFlowPct", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "interfaceFlowPct", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_nodeName", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nodeName", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_groundElevFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "groundElevFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_groundElevFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "groundElevFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_crownElevFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "crownElevFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_crownElevFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "crownElevFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_invertElevFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "invertElevFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_invertElevFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "invertElevFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_qInstCfs", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "qInstCfs", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_qInstCfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "qInstCfs", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_initialDepthFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "initialDepthFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_initialDepthFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "initialDepthFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_interfaceFlowPct", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "interfaceFlowPct", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_interfaceFlowPct", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "interfaceFlowPct", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.XPSWMMResultsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     nodeName, groundElevFt, crownElevFt, invertElevFt, qInstCfs, initialDe" +
                "pthFt, interfaceFlowPct\r\nFROM         TableE03a";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StormwaterControlsDataSet.TableE03aDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StormwaterControlsDataSet.TableE03aDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StormwaterControlsDataSet.TableE03aDataTable dataTable = new StormwaterControlsDataSet.TableE03aDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet.TableE03aDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TableE03a");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_nodeName, global::System.Nullable<double> Original_groundElevFt, global::System.Nullable<double> Original_crownElevFt, global::System.Nullable<double> Original_invertElevFt, global::System.Nullable<double> Original_qInstCfs, global::System.Nullable<double> Original_initialDepthFt, global::System.Nullable<double> Original_interfaceFlowPct) {
            if ((Original_nodeName == null)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_nodeName));
            }
            if ((Original_groundElevFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((double)(Original_groundElevFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_crownElevFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((double)(Original_crownElevFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_invertElevFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((double)(Original_invertElevFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_qInstCfs.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((double)(Original_qInstCfs.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_initialDepthFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((double)(Original_initialDepthFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_interfaceFlowPct.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((double)(Original_interfaceFlowPct.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string nodeName, global::System.Nullable<double> groundElevFt, global::System.Nullable<double> crownElevFt, global::System.Nullable<double> invertElevFt, global::System.Nullable<double> qInstCfs, global::System.Nullable<double> initialDepthFt, global::System.Nullable<double> interfaceFlowPct) {
            if ((nodeName == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(nodeName));
            }
            if ((groundElevFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((double)(groundElevFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((crownElevFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((double)(crownElevFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((invertElevFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(invertElevFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((qInstCfs.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(qInstCfs.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((initialDepthFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(initialDepthFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((interfaceFlowPct.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(interfaceFlowPct.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string nodeName, global::System.Nullable<double> groundElevFt, global::System.Nullable<double> crownElevFt, global::System.Nullable<double> invertElevFt, global::System.Nullable<double> qInstCfs, global::System.Nullable<double> initialDepthFt, global::System.Nullable<double> interfaceFlowPct, string Original_nodeName, global::System.Nullable<double> Original_groundElevFt, global::System.Nullable<double> Original_crownElevFt, global::System.Nullable<double> Original_invertElevFt, global::System.Nullable<double> Original_qInstCfs, global::System.Nullable<double> Original_initialDepthFt, global::System.Nullable<double> Original_interfaceFlowPct) {
            if ((nodeName == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(nodeName));
            }
            if ((groundElevFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((double)(groundElevFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((crownElevFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((double)(crownElevFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((invertElevFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((double)(invertElevFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((qInstCfs.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(qInstCfs.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((initialDepthFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(initialDepthFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((interfaceFlowPct.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(interfaceFlowPct.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_nodeName == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_nodeName));
            }
            if ((Original_groundElevFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((double)(Original_groundElevFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_crownElevFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((double)(Original_crownElevFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_invertElevFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((double)(Original_invertElevFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_qInstCfs.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((double)(Original_qInstCfs.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_initialDepthFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((double)(Original_initialDepthFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_interfaceFlowPct.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((double)(Original_interfaceFlowPct.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<double> groundElevFt, global::System.Nullable<double> crownElevFt, global::System.Nullable<double> invertElevFt, global::System.Nullable<double> qInstCfs, global::System.Nullable<double> initialDepthFt, global::System.Nullable<double> interfaceFlowPct, string Original_nodeName, global::System.Nullable<double> Original_groundElevFt, global::System.Nullable<double> Original_crownElevFt, global::System.Nullable<double> Original_invertElevFt, global::System.Nullable<double> Original_qInstCfs, global::System.Nullable<double> Original_initialDepthFt, global::System.Nullable<double> Original_interfaceFlowPct) {
            return this.Update(Original_nodeName, groundElevFt, crownElevFt, invertElevFt, qInstCfs, initialDepthFt, interfaceFlowPct, Original_nodeName, Original_groundElevFt, Original_crownElevFt, Original_invertElevFt, Original_qInstCfs, Original_initialDepthFt, Original_interfaceFlowPct);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TableE03bTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TableE03bTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TableE03b";
            tableMapping.ColumnMappings.Add("nodeName", "nodeName");
            tableMapping.ColumnMappings.Add("xCoordFt", "xCoordFt");
            tableMapping.ColumnMappings.Add("yCoordFt", "yCoordFt");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `TableE03b` (`nodeName`, `xCoordFt`, `yCoordFt`) VALUES (?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("nodeName", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "nodeName", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("xCoordFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "xCoordFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("yCoordFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "yCoordFt", global::System.Data.DataRowVersion.Current, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.XPSWMMResultsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     nodeName, xCoordFt, yCoordFt\r\nFROM         TableE03b";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StormwaterControlsDataSet.TableE03bDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StormwaterControlsDataSet.TableE03bDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StormwaterControlsDataSet.TableE03bDataTable dataTable = new StormwaterControlsDataSet.TableE03bDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet.TableE03bDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TableE03b");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string nodeName, global::System.Nullable<double> xCoordFt, global::System.Nullable<double> yCoordFt) {
            if ((nodeName == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(nodeName));
            }
            if ((xCoordFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((double)(xCoordFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((yCoordFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((double)(yCoordFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TableE22TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TableE22TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TableE22";
            tableMapping.ColumnMappings.Add("overallErrorPct", "overallErrorPct");
            tableMapping.ColumnMappings.Add("worstNodeErrorPct", "worstNodeErrorPct");
            tableMapping.ColumnMappings.Add("worstNodalErrorNode", "worstNodalErrorNode");
            tableMapping.ColumnMappings.Add("totalInflowLossPct", "totalInflowLossPct");
            tableMapping.ColumnMappings.Add("overalllConinuityError", "overalllConinuityError");
            tableMapping.ColumnMappings.Add("efficiency", "efficiency");
            tableMapping.ColumnMappings.Add("efficiencyPct", "efficiencyPct");
            tableMapping.ColumnMappings.Add("mostNodeNonConvergences", "mostNodeNonConvergences");
            tableMapping.ColumnMappings.Add("totalNonConvergences", "totalNonConvergences");
            tableMapping.ColumnMappings.Add("totalNonConvergedNodes", "totalNonConvergedNodes");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `TableE22` (`overallErrorPct`, `worstNodeErrorPct`, `worstNodalErrorNode`, `totalInflowLossPct`, `overalllConinuityError`, `efficiency`, `efficiencyPct`, `mostNodeNonConvergences`, `totalNonConvergences`, `totalNonConvergedNodes`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("overallErrorPct", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "overallErrorPct", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("worstNodeErrorPct", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "worstNodeErrorPct", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("worstNodalErrorNode", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "worstNodalErrorNode", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("totalInflowLossPct", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "totalInflowLossPct", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("overalllConinuityError", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "overalllConinuityError", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("efficiency", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "efficiency", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("efficiencyPct", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "efficiencyPct", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("mostNodeNonConvergences", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "mostNodeNonConvergences", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("totalNonConvergences", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "totalNonConvergences", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("totalNonConvergedNodes", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "totalNonConvergedNodes", global::System.Data.DataRowVersion.Current, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.XPSWMMResultsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     overallErrorPct, worstNodeErrorPct, worstNodalErrorNode, totalInflowLo" +
                "ssPct, overalllConinuityError, efficiency, efficiencyPct, \r\n                    " +
                "  mostNodeNonConvergences, totalNonConvergences, totalNonConvergedNodes\r\nFROM   " +
                "      TableE22";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StormwaterControlsDataSet.TableE22DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StormwaterControlsDataSet.TableE22DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StormwaterControlsDataSet.TableE22DataTable dataTable = new StormwaterControlsDataSet.TableE22DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet.TableE22DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TableE22");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<double> overallErrorPct, global::System.Nullable<double> worstNodeErrorPct, string worstNodalErrorNode, global::System.Nullable<double> totalInflowLossPct, string overalllConinuityError, string efficiency, global::System.Nullable<double> efficiencyPct, global::System.Nullable<int> mostNodeNonConvergences, global::System.Nullable<int> totalNonConvergences, global::System.Nullable<int> totalNonConvergedNodes) {
            if ((overallErrorPct.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((double)(overallErrorPct.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((worstNodeErrorPct.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((double)(worstNodeErrorPct.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((worstNodalErrorNode == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(worstNodalErrorNode));
            }
            if ((totalInflowLossPct.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(totalInflowLossPct.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((overalllConinuityError == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(overalllConinuityError));
            }
            if ((efficiency == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(efficiency));
            }
            if ((efficiencyPct.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(efficiencyPct.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((mostNodeNonConvergences.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(mostNodeNonConvergences.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((totalNonConvergences.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(totalNonConvergences.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((totalNonConvergedNodes.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(totalNonConvergedNodes.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TableE21TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TableE21TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TableE21";
            tableMapping.ColumnMappings.Add("NodeName", "NodeName");
            tableMapping.ColumnMappings.Add("InflowVolumeCuFt", "InflowVolumeCuFt");
            tableMapping.ColumnMappings.Add("AverageInflowCfs", "AverageInflowCfs");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `TableE21` WHERE ((`nodeName` = ?) AND ((? = 1 AND `inflowVolumeCuFt`" +
                " IS NULL) OR (`inflowVolumeCuFt` = ?)) AND ((? = 1 AND `averageInflowCfs` IS NUL" +
                "L) OR (`averageInflowCfs` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NodeName", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NodeName", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_InflowVolumeCuFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InflowVolumeCuFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_InflowVolumeCuFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InflowVolumeCuFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AverageInflowCfs", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AverageInflowCfs", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AverageInflowCfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AverageInflowCfs", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `TableE21` (`nodeName`, `inflowVolumeCuFt`, `averageInflowCfs`) VALUE" +
                "S (?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NodeName", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NodeName", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("InflowVolumeCuFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InflowVolumeCuFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AverageInflowCfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AverageInflowCfs", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE `TableE21` SET `nodeName` = ?, `inflowVolumeCuFt` = ?, `averageInflowCfs` " +
                "= ? WHERE ((`nodeName` = ?) AND ((? = 1 AND `inflowVolumeCuFt` IS NULL) OR (`inf" +
                "lowVolumeCuFt` = ?)) AND ((? = 1 AND `averageInflowCfs` IS NULL) OR (`averageInf" +
                "lowCfs` = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("NodeName", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NodeName", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("InflowVolumeCuFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InflowVolumeCuFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AverageInflowCfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AverageInflowCfs", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_NodeName", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NodeName", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_InflowVolumeCuFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InflowVolumeCuFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_InflowVolumeCuFt", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InflowVolumeCuFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AverageInflowCfs", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AverageInflowCfs", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AverageInflowCfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AverageInflowCfs", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.XPSWMMResultsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     nodeName AS NodeName, inflowVolumeCuFt AS InflowVolumeCuFt, averageInf" +
                "lowCfs AS AverageInflowCfs\r\nFROM         TableE21";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StormwaterControlsDataSet.TableE21DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StormwaterControlsDataSet.TableE21DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StormwaterControlsDataSet.TableE21DataTable dataTable = new StormwaterControlsDataSet.TableE21DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet.TableE21DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StormwaterControlsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TableE21");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_NodeName, double Original_InflowVolumeCuFt, double Original_AverageInflowCfs) {
            if ((Original_NodeName == null)) {
                throw new global::System.ArgumentNullException("Original_NodeName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_NodeName));
            }
            this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((double)(Original_InflowVolumeCuFt));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((double)(Original_AverageInflowCfs));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string NodeName, double InflowVolumeCuFt, double AverageInflowCfs) {
            if ((NodeName == null)) {
                throw new global::System.ArgumentNullException("NodeName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(NodeName));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((double)(InflowVolumeCuFt));
            this.Adapter.InsertCommand.Parameters[2].Value = ((double)(AverageInflowCfs));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string NodeName, double InflowVolumeCuFt, double AverageInflowCfs, string Original_NodeName, double Original_InflowVolumeCuFt, double Original_AverageInflowCfs) {
            if ((NodeName == null)) {
                throw new global::System.ArgumentNullException("NodeName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(NodeName));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((double)(InflowVolumeCuFt));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((double)(AverageInflowCfs));
            if ((Original_NodeName == null)) {
                throw new global::System.ArgumentNullException("Original_NodeName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_NodeName));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(Original_InflowVolumeCuFt));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(Original_AverageInflowCfs));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(double InflowVolumeCuFt, double AverageInflowCfs, string Original_NodeName, double Original_InflowVolumeCuFt, double Original_AverageInflowCfs) {
            return this.Update(Original_NodeName, InflowVolumeCuFt, AverageInflowCfs, Original_NodeName, Original_InflowVolumeCuFt, Original_AverageInflowCfs);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private ICNodeTableAdapter _iCNodeTableAdapter;
        
        private mdl_SurfSC_acTableAdapter _mdl_SurfSC_acTableAdapter;
        
        private ic_StreetTargetsTableAdapter _ic_StreetTargetsTableAdapter;
        
        private ic_RoofTargetsTableAdapter _ic_RoofTargetsTableAdapter;
        
        private ic_ParkingTargetsTableAdapter _ic_ParkingTargetsTableAdapter;
        
        private AltRoofTargetsTableAdapter _altRoofTargetsTableAdapter;
        
        private AltParkingTargetsTableAdapter _altParkingTargetsTableAdapter;
        
        private AltStreetTargetsTableAdapter _altStreetTargetsTableAdapter;
        
        private mdl_dirsc_acTableAdapter _mdl_dirsc_acTableAdapter;
        
        private TableE18TableAdapter _tableE18TableAdapter;
        
        private TableE19TableAdapter _tableE19TableAdapter;
        
        private TableE03aTableAdapter _tableE03aTableAdapter;
        
        private TableE03bTableAdapter _tableE03bTableAdapter;
        
        private TableE22TableAdapter _tableE22TableAdapter;
        
        private TableE21TableAdapter _tableE21TableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ICNodeTableAdapter ICNodeTableAdapter {
            get {
                return this._iCNodeTableAdapter;
            }
            set {
                this._iCNodeTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public mdl_SurfSC_acTableAdapter mdl_SurfSC_acTableAdapter {
            get {
                return this._mdl_SurfSC_acTableAdapter;
            }
            set {
                this._mdl_SurfSC_acTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ic_StreetTargetsTableAdapter ic_StreetTargetsTableAdapter {
            get {
                return this._ic_StreetTargetsTableAdapter;
            }
            set {
                this._ic_StreetTargetsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ic_RoofTargetsTableAdapter ic_RoofTargetsTableAdapter {
            get {
                return this._ic_RoofTargetsTableAdapter;
            }
            set {
                this._ic_RoofTargetsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ic_ParkingTargetsTableAdapter ic_ParkingTargetsTableAdapter {
            get {
                return this._ic_ParkingTargetsTableAdapter;
            }
            set {
                this._ic_ParkingTargetsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public AltRoofTargetsTableAdapter AltRoofTargetsTableAdapter {
            get {
                return this._altRoofTargetsTableAdapter;
            }
            set {
                this._altRoofTargetsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public AltParkingTargetsTableAdapter AltParkingTargetsTableAdapter {
            get {
                return this._altParkingTargetsTableAdapter;
            }
            set {
                this._altParkingTargetsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public AltStreetTargetsTableAdapter AltStreetTargetsTableAdapter {
            get {
                return this._altStreetTargetsTableAdapter;
            }
            set {
                this._altStreetTargetsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public mdl_dirsc_acTableAdapter mdl_dirsc_acTableAdapter {
            get {
                return this._mdl_dirsc_acTableAdapter;
            }
            set {
                this._mdl_dirsc_acTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TableE18TableAdapter TableE18TableAdapter {
            get {
                return this._tableE18TableAdapter;
            }
            set {
                this._tableE18TableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TableE19TableAdapter TableE19TableAdapter {
            get {
                return this._tableE19TableAdapter;
            }
            set {
                this._tableE19TableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TableE03aTableAdapter TableE03aTableAdapter {
            get {
                return this._tableE03aTableAdapter;
            }
            set {
                this._tableE03aTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TableE03bTableAdapter TableE03bTableAdapter {
            get {
                return this._tableE03bTableAdapter;
            }
            set {
                this._tableE03bTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TableE22TableAdapter TableE22TableAdapter {
            get {
                return this._tableE22TableAdapter;
            }
            set {
                this._tableE22TableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TableE21TableAdapter TableE21TableAdapter {
            get {
                return this._tableE21TableAdapter;
            }
            set {
                this._tableE21TableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._iCNodeTableAdapter != null) 
                            && (this._iCNodeTableAdapter.Connection != null))) {
                    return this._iCNodeTableAdapter.Connection;
                }
                if (((this._mdl_SurfSC_acTableAdapter != null) 
                            && (this._mdl_SurfSC_acTableAdapter.Connection != null))) {
                    return this._mdl_SurfSC_acTableAdapter.Connection;
                }
                if (((this._ic_StreetTargetsTableAdapter != null) 
                            && (this._ic_StreetTargetsTableAdapter.Connection != null))) {
                    return this._ic_StreetTargetsTableAdapter.Connection;
                }
                if (((this._ic_RoofTargetsTableAdapter != null) 
                            && (this._ic_RoofTargetsTableAdapter.Connection != null))) {
                    return this._ic_RoofTargetsTableAdapter.Connection;
                }
                if (((this._ic_ParkingTargetsTableAdapter != null) 
                            && (this._ic_ParkingTargetsTableAdapter.Connection != null))) {
                    return this._ic_ParkingTargetsTableAdapter.Connection;
                }
                if (((this._altRoofTargetsTableAdapter != null) 
                            && (this._altRoofTargetsTableAdapter.Connection != null))) {
                    return this._altRoofTargetsTableAdapter.Connection;
                }
                if (((this._altParkingTargetsTableAdapter != null) 
                            && (this._altParkingTargetsTableAdapter.Connection != null))) {
                    return this._altParkingTargetsTableAdapter.Connection;
                }
                if (((this._altStreetTargetsTableAdapter != null) 
                            && (this._altStreetTargetsTableAdapter.Connection != null))) {
                    return this._altStreetTargetsTableAdapter.Connection;
                }
                if (((this._mdl_dirsc_acTableAdapter != null) 
                            && (this._mdl_dirsc_acTableAdapter.Connection != null))) {
                    return this._mdl_dirsc_acTableAdapter.Connection;
                }
                if (((this._tableE18TableAdapter != null) 
                            && (this._tableE18TableAdapter.Connection != null))) {
                    return this._tableE18TableAdapter.Connection;
                }
                if (((this._tableE19TableAdapter != null) 
                            && (this._tableE19TableAdapter.Connection != null))) {
                    return this._tableE19TableAdapter.Connection;
                }
                if (((this._tableE03aTableAdapter != null) 
                            && (this._tableE03aTableAdapter.Connection != null))) {
                    return this._tableE03aTableAdapter.Connection;
                }
                if (((this._tableE03bTableAdapter != null) 
                            && (this._tableE03bTableAdapter.Connection != null))) {
                    return this._tableE03bTableAdapter.Connection;
                }
                if (((this._tableE22TableAdapter != null) 
                            && (this._tableE22TableAdapter.Connection != null))) {
                    return this._tableE22TableAdapter.Connection;
                }
                if (((this._tableE21TableAdapter != null) 
                            && (this._tableE21TableAdapter.Connection != null))) {
                    return this._tableE21TableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._iCNodeTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._mdl_SurfSC_acTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._ic_StreetTargetsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._ic_RoofTargetsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._ic_ParkingTargetsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._altRoofTargetsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._altParkingTargetsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._altStreetTargetsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._mdl_dirsc_acTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tableE18TableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tableE19TableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tableE03aTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tableE03bTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tableE22TableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tableE21TableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(StormwaterControlsDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._tableE18TableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TableE18.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tableE18TableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tableE19TableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TableE19.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tableE19TableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tableE22TableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TableE22.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tableE22TableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tableE21TableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TableE21.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tableE21TableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tableE03aTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TableE03a.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tableE03aTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tableE03bTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TableE03b.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tableE03bTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._mdl_dirsc_acTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.mdl_dirsc_ac.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._mdl_dirsc_acTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._ic_StreetTargetsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ic_StreetTargets.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._ic_StreetTargetsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._ic_RoofTargetsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ic_RoofTargets.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._ic_RoofTargetsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._iCNodeTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ICNode.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._iCNodeTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._mdl_SurfSC_acTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.mdl_SurfSC_ac.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._mdl_SurfSC_acTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._altParkingTargetsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.AltParkingTargets.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._altParkingTargetsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._altStreetTargetsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.AltStreetTargets.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._altStreetTargetsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._ic_ParkingTargetsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ic_ParkingTargets.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._ic_ParkingTargetsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._altRoofTargetsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.AltRoofTargets.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._altRoofTargetsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(StormwaterControlsDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._tableE18TableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TableE18.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tableE18TableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tableE19TableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TableE19.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tableE19TableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tableE22TableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TableE22.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tableE22TableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tableE21TableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TableE21.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tableE21TableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tableE03aTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TableE03a.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tableE03aTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tableE03bTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TableE03b.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tableE03bTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._mdl_dirsc_acTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.mdl_dirsc_ac.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._mdl_dirsc_acTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._ic_StreetTargetsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ic_StreetTargets.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._ic_StreetTargetsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._ic_RoofTargetsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ic_RoofTargets.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._ic_RoofTargetsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._iCNodeTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ICNode.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._iCNodeTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._mdl_SurfSC_acTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.mdl_SurfSC_ac.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._mdl_SurfSC_acTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._altParkingTargetsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.AltParkingTargets.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._altParkingTargetsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._altStreetTargetsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.AltStreetTargets.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._altStreetTargetsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._ic_ParkingTargetsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ic_ParkingTargets.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._ic_ParkingTargetsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._altRoofTargetsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.AltRoofTargets.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._altRoofTargetsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(StormwaterControlsDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._altRoofTargetsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.AltRoofTargets.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._altRoofTargetsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._ic_ParkingTargetsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ic_ParkingTargets.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._ic_ParkingTargetsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._altStreetTargetsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.AltStreetTargets.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._altStreetTargetsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._altParkingTargetsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.AltParkingTargets.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._altParkingTargetsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._mdl_SurfSC_acTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.mdl_SurfSC_ac.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._mdl_SurfSC_acTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._iCNodeTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ICNode.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._iCNodeTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._ic_RoofTargetsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ic_RoofTargets.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._ic_RoofTargetsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._ic_StreetTargetsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ic_StreetTargets.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._ic_StreetTargetsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._mdl_dirsc_acTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.mdl_dirsc_ac.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._mdl_dirsc_acTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tableE03bTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TableE03b.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tableE03bTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tableE03aTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TableE03a.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tableE03aTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tableE21TableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TableE21.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tableE21TableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tableE22TableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TableE22.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tableE22TableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tableE19TableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TableE19.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tableE19TableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tableE18TableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TableE18.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tableE18TableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(StormwaterControlsDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._iCNodeTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._iCNodeTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._mdl_SurfSC_acTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._mdl_SurfSC_acTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._ic_StreetTargetsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._ic_StreetTargetsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._ic_RoofTargetsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._ic_RoofTargetsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._ic_ParkingTargetsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._ic_ParkingTargetsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._altRoofTargetsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._altRoofTargetsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._altParkingTargetsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._altParkingTargetsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._altStreetTargetsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._altStreetTargetsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._mdl_dirsc_acTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._mdl_dirsc_acTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tableE18TableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tableE18TableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tableE19TableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tableE19TableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tableE03aTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tableE03aTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tableE03bTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tableE03bTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tableE22TableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tableE22TableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tableE21TableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tableE21TableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._iCNodeTableAdapter != null)) {
                    revertConnections.Add(this._iCNodeTableAdapter, this._iCNodeTableAdapter.Connection);
                    this._iCNodeTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(workConnection));
                    this._iCNodeTableAdapter.Transaction = ((global::System.Data.OleDb.OleDbTransaction)(workTransaction));
                    if (this._iCNodeTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._iCNodeTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._iCNodeTableAdapter.Adapter);
                    }
                }
                if ((this._mdl_SurfSC_acTableAdapter != null)) {
                    revertConnections.Add(this._mdl_SurfSC_acTableAdapter, this._mdl_SurfSC_acTableAdapter.Connection);
                    this._mdl_SurfSC_acTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(workConnection));
                    this._mdl_SurfSC_acTableAdapter.Transaction = ((global::System.Data.OleDb.OleDbTransaction)(workTransaction));
                    if (this._mdl_SurfSC_acTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._mdl_SurfSC_acTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._mdl_SurfSC_acTableAdapter.Adapter);
                    }
                }
                if ((this._ic_StreetTargetsTableAdapter != null)) {
                    revertConnections.Add(this._ic_StreetTargetsTableAdapter, this._ic_StreetTargetsTableAdapter.Connection);
                    this._ic_StreetTargetsTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(workConnection));
                    this._ic_StreetTargetsTableAdapter.Transaction = ((global::System.Data.OleDb.OleDbTransaction)(workTransaction));
                    if (this._ic_StreetTargetsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._ic_StreetTargetsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._ic_StreetTargetsTableAdapter.Adapter);
                    }
                }
                if ((this._ic_RoofTargetsTableAdapter != null)) {
                    revertConnections.Add(this._ic_RoofTargetsTableAdapter, this._ic_RoofTargetsTableAdapter.Connection);
                    this._ic_RoofTargetsTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(workConnection));
                    this._ic_RoofTargetsTableAdapter.Transaction = ((global::System.Data.OleDb.OleDbTransaction)(workTransaction));
                    if (this._ic_RoofTargetsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._ic_RoofTargetsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._ic_RoofTargetsTableAdapter.Adapter);
                    }
                }
                if ((this._ic_ParkingTargetsTableAdapter != null)) {
                    revertConnections.Add(this._ic_ParkingTargetsTableAdapter, this._ic_ParkingTargetsTableAdapter.Connection);
                    this._ic_ParkingTargetsTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(workConnection));
                    this._ic_ParkingTargetsTableAdapter.Transaction = ((global::System.Data.OleDb.OleDbTransaction)(workTransaction));
                    if (this._ic_ParkingTargetsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._ic_ParkingTargetsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._ic_ParkingTargetsTableAdapter.Adapter);
                    }
                }
                if ((this._altRoofTargetsTableAdapter != null)) {
                    revertConnections.Add(this._altRoofTargetsTableAdapter, this._altRoofTargetsTableAdapter.Connection);
                    this._altRoofTargetsTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(workConnection));
                    this._altRoofTargetsTableAdapter.Transaction = ((global::System.Data.OleDb.OleDbTransaction)(workTransaction));
                    if (this._altRoofTargetsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._altRoofTargetsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._altRoofTargetsTableAdapter.Adapter);
                    }
                }
                if ((this._altParkingTargetsTableAdapter != null)) {
                    revertConnections.Add(this._altParkingTargetsTableAdapter, this._altParkingTargetsTableAdapter.Connection);
                    this._altParkingTargetsTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(workConnection));
                    this._altParkingTargetsTableAdapter.Transaction = ((global::System.Data.OleDb.OleDbTransaction)(workTransaction));
                    if (this._altParkingTargetsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._altParkingTargetsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._altParkingTargetsTableAdapter.Adapter);
                    }
                }
                if ((this._altStreetTargetsTableAdapter != null)) {
                    revertConnections.Add(this._altStreetTargetsTableAdapter, this._altStreetTargetsTableAdapter.Connection);
                    this._altStreetTargetsTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(workConnection));
                    this._altStreetTargetsTableAdapter.Transaction = ((global::System.Data.OleDb.OleDbTransaction)(workTransaction));
                    if (this._altStreetTargetsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._altStreetTargetsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._altStreetTargetsTableAdapter.Adapter);
                    }
                }
                if ((this._mdl_dirsc_acTableAdapter != null)) {
                    revertConnections.Add(this._mdl_dirsc_acTableAdapter, this._mdl_dirsc_acTableAdapter.Connection);
                    this._mdl_dirsc_acTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(workConnection));
                    this._mdl_dirsc_acTableAdapter.Transaction = ((global::System.Data.OleDb.OleDbTransaction)(workTransaction));
                    if (this._mdl_dirsc_acTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._mdl_dirsc_acTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._mdl_dirsc_acTableAdapter.Adapter);
                    }
                }
                if ((this._tableE18TableAdapter != null)) {
                    revertConnections.Add(this._tableE18TableAdapter, this._tableE18TableAdapter.Connection);
                    this._tableE18TableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(workConnection));
                    this._tableE18TableAdapter.Transaction = ((global::System.Data.OleDb.OleDbTransaction)(workTransaction));
                    if (this._tableE18TableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tableE18TableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tableE18TableAdapter.Adapter);
                    }
                }
                if ((this._tableE19TableAdapter != null)) {
                    revertConnections.Add(this._tableE19TableAdapter, this._tableE19TableAdapter.Connection);
                    this._tableE19TableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(workConnection));
                    this._tableE19TableAdapter.Transaction = ((global::System.Data.OleDb.OleDbTransaction)(workTransaction));
                    if (this._tableE19TableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tableE19TableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tableE19TableAdapter.Adapter);
                    }
                }
                if ((this._tableE03aTableAdapter != null)) {
                    revertConnections.Add(this._tableE03aTableAdapter, this._tableE03aTableAdapter.Connection);
                    this._tableE03aTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(workConnection));
                    this._tableE03aTableAdapter.Transaction = ((global::System.Data.OleDb.OleDbTransaction)(workTransaction));
                    if (this._tableE03aTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tableE03aTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tableE03aTableAdapter.Adapter);
                    }
                }
                if ((this._tableE03bTableAdapter != null)) {
                    revertConnections.Add(this._tableE03bTableAdapter, this._tableE03bTableAdapter.Connection);
                    this._tableE03bTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(workConnection));
                    this._tableE03bTableAdapter.Transaction = ((global::System.Data.OleDb.OleDbTransaction)(workTransaction));
                    if (this._tableE03bTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tableE03bTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tableE03bTableAdapter.Adapter);
                    }
                }
                if ((this._tableE22TableAdapter != null)) {
                    revertConnections.Add(this._tableE22TableAdapter, this._tableE22TableAdapter.Connection);
                    this._tableE22TableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(workConnection));
                    this._tableE22TableAdapter.Transaction = ((global::System.Data.OleDb.OleDbTransaction)(workTransaction));
                    if (this._tableE22TableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tableE22TableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tableE22TableAdapter.Adapter);
                    }
                }
                if ((this._tableE21TableAdapter != null)) {
                    revertConnections.Add(this._tableE21TableAdapter, this._tableE21TableAdapter.Connection);
                    this._tableE21TableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(workConnection));
                    this._tableE21TableAdapter.Transaction = ((global::System.Data.OleDb.OleDbTransaction)(workTransaction));
                    if (this._tableE21TableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tableE21TableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tableE21TableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._iCNodeTableAdapter != null)) {
                    this._iCNodeTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(revertConnections[this._iCNodeTableAdapter]));
                    this._iCNodeTableAdapter.Transaction = null;
                }
                if ((this._mdl_SurfSC_acTableAdapter != null)) {
                    this._mdl_SurfSC_acTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(revertConnections[this._mdl_SurfSC_acTableAdapter]));
                    this._mdl_SurfSC_acTableAdapter.Transaction = null;
                }
                if ((this._ic_StreetTargetsTableAdapter != null)) {
                    this._ic_StreetTargetsTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(revertConnections[this._ic_StreetTargetsTableAdapter]));
                    this._ic_StreetTargetsTableAdapter.Transaction = null;
                }
                if ((this._ic_RoofTargetsTableAdapter != null)) {
                    this._ic_RoofTargetsTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(revertConnections[this._ic_RoofTargetsTableAdapter]));
                    this._ic_RoofTargetsTableAdapter.Transaction = null;
                }
                if ((this._ic_ParkingTargetsTableAdapter != null)) {
                    this._ic_ParkingTargetsTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(revertConnections[this._ic_ParkingTargetsTableAdapter]));
                    this._ic_ParkingTargetsTableAdapter.Transaction = null;
                }
                if ((this._altRoofTargetsTableAdapter != null)) {
                    this._altRoofTargetsTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(revertConnections[this._altRoofTargetsTableAdapter]));
                    this._altRoofTargetsTableAdapter.Transaction = null;
                }
                if ((this._altParkingTargetsTableAdapter != null)) {
                    this._altParkingTargetsTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(revertConnections[this._altParkingTargetsTableAdapter]));
                    this._altParkingTargetsTableAdapter.Transaction = null;
                }
                if ((this._altStreetTargetsTableAdapter != null)) {
                    this._altStreetTargetsTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(revertConnections[this._altStreetTargetsTableAdapter]));
                    this._altStreetTargetsTableAdapter.Transaction = null;
                }
                if ((this._mdl_dirsc_acTableAdapter != null)) {
                    this._mdl_dirsc_acTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(revertConnections[this._mdl_dirsc_acTableAdapter]));
                    this._mdl_dirsc_acTableAdapter.Transaction = null;
                }
                if ((this._tableE18TableAdapter != null)) {
                    this._tableE18TableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(revertConnections[this._tableE18TableAdapter]));
                    this._tableE18TableAdapter.Transaction = null;
                }
                if ((this._tableE19TableAdapter != null)) {
                    this._tableE19TableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(revertConnections[this._tableE19TableAdapter]));
                    this._tableE19TableAdapter.Transaction = null;
                }
                if ((this._tableE03aTableAdapter != null)) {
                    this._tableE03aTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(revertConnections[this._tableE03aTableAdapter]));
                    this._tableE03aTableAdapter.Transaction = null;
                }
                if ((this._tableE03bTableAdapter != null)) {
                    this._tableE03bTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(revertConnections[this._tableE03bTableAdapter]));
                    this._tableE03bTableAdapter.Transaction = null;
                }
                if ((this._tableE22TableAdapter != null)) {
                    this._tableE22TableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(revertConnections[this._tableE22TableAdapter]));
                    this._tableE22TableAdapter.Transaction = null;
                }
                if ((this._tableE21TableAdapter != null)) {
                    this._tableE21TableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(revertConnections[this._tableE21TableAdapter]));
                    this._tableE21TableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591
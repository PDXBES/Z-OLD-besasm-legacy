//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SystemsAnalysis.DataAccess {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("AltCompilerDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class AltCompilerDataSet : global::System.Data.DataSet {
        
        private SP_RP_BSBRDataTable tableSP_RP_BSBR;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AltCompilerDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected AltCompilerDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["SP_RP_BSBR"] != null)) {
                    base.Tables.Add(new SP_RP_BSBRDataTable(ds.Tables["SP_RP_BSBR"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SP_RP_BSBRDataTable SP_RP_BSBR {
            get {
                return this.tableSP_RP_BSBR;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            AltCompilerDataSet cln = ((AltCompilerDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SP_RP_BSBR"] != null)) {
                    base.Tables.Add(new SP_RP_BSBRDataTable(ds.Tables["SP_RP_BSBR"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSP_RP_BSBR = ((SP_RP_BSBRDataTable)(base.Tables["SP_RP_BSBR"]));
            if ((initTable == true)) {
                if ((this.tableSP_RP_BSBR != null)) {
                    this.tableSP_RP_BSBR.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "AltCompilerDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/AltCompilerDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSP_RP_BSBR = new SP_RP_BSBRDataTable();
            base.Tables.Add(this.tableSP_RP_BSBR);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSP_RP_BSBR() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            AltCompilerDataSet ds = new AltCompilerDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SP_RP_BSBRRowChangeEventHandler(object sender, SP_RP_BSBRRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SP_RP_BSBRDataTable : global::System.Data.TypedTableBase<SP_RP_BSBRRow> {
            
            private global::System.Data.DataColumn columndsc_id;
            
            private global::System.Data.DataColumn columnparcel_id;
            
            private global::System.Data.DataColumn columndivide_id;
            
            private global::System.Data.DataColumn columnus_jelev_ft;
            
            private global::System.Data.DataColumn columnds_jelev_ft;
            
            private global::System.Data.DataColumn columnfrac_2swr_beg;
            
            private global::System.Data.DataColumn columncalculated_hgl_ft;
            
            private global::System.Data.DataColumn columncalculated_dhgl_ft;
            
            private global::System.Data.DataColumn columnsurcharge_ft;
            
            private global::System.Data.DataColumn columnflood_ref_elev_ft;
            
            private global::System.Data.DataColumn columnsan_swr_crown_ft;
            
            private global::System.Data.DataColumn columnstorm;
            
            private global::System.Data.DataColumn columnbasin;
            
            private global::System.Data.DataColumn columnuse_flag;
            
            private global::System.Data.DataColumn columnfocus_area;
            
            private global::System.Data.DataColumn columnhgl_comp_rp_id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SP_RP_BSBRDataTable() {
                this.TableName = "SP_RP_BSBR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SP_RP_BSBRDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SP_RP_BSBRDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dsc_idColumn {
                get {
                    return this.columndsc_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn parcel_idColumn {
                get {
                    return this.columnparcel_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn divide_idColumn {
                get {
                    return this.columndivide_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn us_jelev_ftColumn {
                get {
                    return this.columnus_jelev_ft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ds_jelev_ftColumn {
                get {
                    return this.columnds_jelev_ft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn frac_2swr_begColumn {
                get {
                    return this.columnfrac_2swr_beg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn calculated_hgl_ftColumn {
                get {
                    return this.columncalculated_hgl_ft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn calculated_dhgl_ftColumn {
                get {
                    return this.columncalculated_dhgl_ft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn surcharge_ftColumn {
                get {
                    return this.columnsurcharge_ft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn flood_ref_elev_ftColumn {
                get {
                    return this.columnflood_ref_elev_ft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn san_swr_crown_ftColumn {
                get {
                    return this.columnsan_swr_crown_ft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stormColumn {
                get {
                    return this.columnstorm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn basinColumn {
                get {
                    return this.columnbasin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn use_flagColumn {
                get {
                    return this.columnuse_flag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn focus_areaColumn {
                get {
                    return this.columnfocus_area;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hgl_comp_rp_idColumn {
                get {
                    return this.columnhgl_comp_rp_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SP_RP_BSBRRow this[int index] {
                get {
                    return ((SP_RP_BSBRRow)(this.Rows[index]));
                }
            }
            
            public event SP_RP_BSBRRowChangeEventHandler SP_RP_BSBRRowChanging;
            
            public event SP_RP_BSBRRowChangeEventHandler SP_RP_BSBRRowChanged;
            
            public event SP_RP_BSBRRowChangeEventHandler SP_RP_BSBRRowDeleting;
            
            public event SP_RP_BSBRRowChangeEventHandler SP_RP_BSBRRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSP_RP_BSBRRow(SP_RP_BSBRRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SP_RP_BSBRRow AddSP_RP_BSBRRow(
                        int dsc_id, 
                        int parcel_id, 
                        int divide_id, 
                        decimal us_jelev_ft, 
                        decimal ds_jelev_ft, 
                        decimal frac_2swr_beg, 
                        decimal calculated_hgl_ft, 
                        decimal calculated_dhgl_ft, 
                        decimal surcharge_ft, 
                        decimal flood_ref_elev_ft, 
                        decimal san_swr_crown_ft, 
                        string storm, 
                        string basin, 
                        short use_flag, 
                        string focus_area, 
                        System.Guid hgl_comp_rp_id) {
                SP_RP_BSBRRow rowSP_RP_BSBRRow = ((SP_RP_BSBRRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        dsc_id,
                        parcel_id,
                        divide_id,
                        us_jelev_ft,
                        ds_jelev_ft,
                        frac_2swr_beg,
                        calculated_hgl_ft,
                        calculated_dhgl_ft,
                        surcharge_ft,
                        flood_ref_elev_ft,
                        san_swr_crown_ft,
                        storm,
                        basin,
                        use_flag,
                        focus_area,
                        hgl_comp_rp_id};
                rowSP_RP_BSBRRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSP_RP_BSBRRow);
                return rowSP_RP_BSBRRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SP_RP_BSBRDataTable cln = ((SP_RP_BSBRDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SP_RP_BSBRDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndsc_id = base.Columns["dsc_id"];
                this.columnparcel_id = base.Columns["parcel_id"];
                this.columndivide_id = base.Columns["divide_id"];
                this.columnus_jelev_ft = base.Columns["us_jelev_ft"];
                this.columnds_jelev_ft = base.Columns["ds_jelev_ft"];
                this.columnfrac_2swr_beg = base.Columns["frac_2swr_beg"];
                this.columncalculated_hgl_ft = base.Columns["calculated_hgl_ft"];
                this.columncalculated_dhgl_ft = base.Columns["calculated_dhgl_ft"];
                this.columnsurcharge_ft = base.Columns["surcharge_ft"];
                this.columnflood_ref_elev_ft = base.Columns["flood_ref_elev_ft"];
                this.columnsan_swr_crown_ft = base.Columns["san_swr_crown_ft"];
                this.columnstorm = base.Columns["storm"];
                this.columnbasin = base.Columns["basin"];
                this.columnuse_flag = base.Columns["use_flag"];
                this.columnfocus_area = base.Columns["focus_area"];
                this.columnhgl_comp_rp_id = base.Columns["hgl_comp_rp_id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndsc_id = new global::System.Data.DataColumn("dsc_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndsc_id);
                this.columnparcel_id = new global::System.Data.DataColumn("parcel_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparcel_id);
                this.columndivide_id = new global::System.Data.DataColumn("divide_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndivide_id);
                this.columnus_jelev_ft = new global::System.Data.DataColumn("us_jelev_ft", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnus_jelev_ft);
                this.columnds_jelev_ft = new global::System.Data.DataColumn("ds_jelev_ft", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnds_jelev_ft);
                this.columnfrac_2swr_beg = new global::System.Data.DataColumn("frac_2swr_beg", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfrac_2swr_beg);
                this.columncalculated_hgl_ft = new global::System.Data.DataColumn("calculated_hgl_ft", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncalculated_hgl_ft);
                this.columncalculated_dhgl_ft = new global::System.Data.DataColumn("calculated_dhgl_ft", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncalculated_dhgl_ft);
                this.columnsurcharge_ft = new global::System.Data.DataColumn("surcharge_ft", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsurcharge_ft);
                this.columnflood_ref_elev_ft = new global::System.Data.DataColumn("flood_ref_elev_ft", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnflood_ref_elev_ft);
                this.columnsan_swr_crown_ft = new global::System.Data.DataColumn("san_swr_crown_ft", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsan_swr_crown_ft);
                this.columnstorm = new global::System.Data.DataColumn("storm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstorm);
                this.columnbasin = new global::System.Data.DataColumn("basin", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbasin);
                this.columnuse_flag = new global::System.Data.DataColumn("use_flag", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuse_flag);
                this.columnfocus_area = new global::System.Data.DataColumn("focus_area", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfocus_area);
                this.columnhgl_comp_rp_id = new global::System.Data.DataColumn("hgl_comp_rp_id", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhgl_comp_rp_id);
                this.columnstorm.MaxLength = 255;
                this.columnbasin.MaxLength = 255;
                this.columnfocus_area.MaxLength = 25;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SP_RP_BSBRRow NewSP_RP_BSBRRow() {
                return ((SP_RP_BSBRRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SP_RP_BSBRRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SP_RP_BSBRRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SP_RP_BSBRRowChanged != null)) {
                    this.SP_RP_BSBRRowChanged(this, new SP_RP_BSBRRowChangeEvent(((SP_RP_BSBRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SP_RP_BSBRRowChanging != null)) {
                    this.SP_RP_BSBRRowChanging(this, new SP_RP_BSBRRowChangeEvent(((SP_RP_BSBRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SP_RP_BSBRRowDeleted != null)) {
                    this.SP_RP_BSBRRowDeleted(this, new SP_RP_BSBRRowChangeEvent(((SP_RP_BSBRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SP_RP_BSBRRowDeleting != null)) {
                    this.SP_RP_BSBRRowDeleting(this, new SP_RP_BSBRRowChangeEvent(((SP_RP_BSBRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSP_RP_BSBRRow(SP_RP_BSBRRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AltCompilerDataSet ds = new AltCompilerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SP_RP_BSBRDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SP_RP_BSBRRow : global::System.Data.DataRow {
            
            private SP_RP_BSBRDataTable tableSP_RP_BSBR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SP_RP_BSBRRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSP_RP_BSBR = ((SP_RP_BSBRDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dsc_id {
                get {
                    try {
                        return ((int)(this[this.tableSP_RP_BSBR.dsc_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dsc_id\' in table \'SP_RP_BSBR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_RP_BSBR.dsc_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int parcel_id {
                get {
                    try {
                        return ((int)(this[this.tableSP_RP_BSBR.parcel_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'parcel_id\' in table \'SP_RP_BSBR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_RP_BSBR.parcel_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int divide_id {
                get {
                    try {
                        return ((int)(this[this.tableSP_RP_BSBR.divide_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'divide_id\' in table \'SP_RP_BSBR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_RP_BSBR.divide_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal us_jelev_ft {
                get {
                    try {
                        return ((decimal)(this[this.tableSP_RP_BSBR.us_jelev_ftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'us_jelev_ft\' in table \'SP_RP_BSBR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_RP_BSBR.us_jelev_ftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ds_jelev_ft {
                get {
                    try {
                        return ((decimal)(this[this.tableSP_RP_BSBR.ds_jelev_ftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ds_jelev_ft\' in table \'SP_RP_BSBR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_RP_BSBR.ds_jelev_ftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal frac_2swr_beg {
                get {
                    try {
                        return ((decimal)(this[this.tableSP_RP_BSBR.frac_2swr_begColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'frac_2swr_beg\' in table \'SP_RP_BSBR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_RP_BSBR.frac_2swr_begColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal calculated_hgl_ft {
                get {
                    try {
                        return ((decimal)(this[this.tableSP_RP_BSBR.calculated_hgl_ftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'calculated_hgl_ft\' in table \'SP_RP_BSBR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_RP_BSBR.calculated_hgl_ftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal calculated_dhgl_ft {
                get {
                    try {
                        return ((decimal)(this[this.tableSP_RP_BSBR.calculated_dhgl_ftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'calculated_dhgl_ft\' in table \'SP_RP_BSBR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_RP_BSBR.calculated_dhgl_ftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal surcharge_ft {
                get {
                    try {
                        return ((decimal)(this[this.tableSP_RP_BSBR.surcharge_ftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'surcharge_ft\' in table \'SP_RP_BSBR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_RP_BSBR.surcharge_ftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal flood_ref_elev_ft {
                get {
                    try {
                        return ((decimal)(this[this.tableSP_RP_BSBR.flood_ref_elev_ftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'flood_ref_elev_ft\' in table \'SP_RP_BSBR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_RP_BSBR.flood_ref_elev_ftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal san_swr_crown_ft {
                get {
                    try {
                        return ((decimal)(this[this.tableSP_RP_BSBR.san_swr_crown_ftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'san_swr_crown_ft\' in table \'SP_RP_BSBR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_RP_BSBR.san_swr_crown_ftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string storm {
                get {
                    try {
                        return ((string)(this[this.tableSP_RP_BSBR.stormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'storm\' in table \'SP_RP_BSBR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_RP_BSBR.stormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string basin {
                get {
                    try {
                        return ((string)(this[this.tableSP_RP_BSBR.basinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'basin\' in table \'SP_RP_BSBR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_RP_BSBR.basinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short use_flag {
                get {
                    try {
                        return ((short)(this[this.tableSP_RP_BSBR.use_flagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'use_flag\' in table \'SP_RP_BSBR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_RP_BSBR.use_flagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string focus_area {
                get {
                    if (this.Isfocus_areaNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableSP_RP_BSBR.focus_areaColumn]));
                    }
                }
                set {
                    this[this.tableSP_RP_BSBR.focus_areaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid hgl_comp_rp_id {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableSP_RP_BSBR.hgl_comp_rp_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'hgl_comp_rp_id\' in table \'SP_RP_BSBR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSP_RP_BSBR.hgl_comp_rp_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdsc_idNull() {
                return this.IsNull(this.tableSP_RP_BSBR.dsc_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdsc_idNull() {
                this[this.tableSP_RP_BSBR.dsc_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isparcel_idNull() {
                return this.IsNull(this.tableSP_RP_BSBR.parcel_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setparcel_idNull() {
                this[this.tableSP_RP_BSBR.parcel_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdivide_idNull() {
                return this.IsNull(this.tableSP_RP_BSBR.divide_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdivide_idNull() {
                this[this.tableSP_RP_BSBR.divide_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isus_jelev_ftNull() {
                return this.IsNull(this.tableSP_RP_BSBR.us_jelev_ftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setus_jelev_ftNull() {
                this[this.tableSP_RP_BSBR.us_jelev_ftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isds_jelev_ftNull() {
                return this.IsNull(this.tableSP_RP_BSBR.ds_jelev_ftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setds_jelev_ftNull() {
                this[this.tableSP_RP_BSBR.ds_jelev_ftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfrac_2swr_begNull() {
                return this.IsNull(this.tableSP_RP_BSBR.frac_2swr_begColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfrac_2swr_begNull() {
                this[this.tableSP_RP_BSBR.frac_2swr_begColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscalculated_hgl_ftNull() {
                return this.IsNull(this.tableSP_RP_BSBR.calculated_hgl_ftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcalculated_hgl_ftNull() {
                this[this.tableSP_RP_BSBR.calculated_hgl_ftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscalculated_dhgl_ftNull() {
                return this.IsNull(this.tableSP_RP_BSBR.calculated_dhgl_ftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcalculated_dhgl_ftNull() {
                this[this.tableSP_RP_BSBR.calculated_dhgl_ftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issurcharge_ftNull() {
                return this.IsNull(this.tableSP_RP_BSBR.surcharge_ftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsurcharge_ftNull() {
                this[this.tableSP_RP_BSBR.surcharge_ftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isflood_ref_elev_ftNull() {
                return this.IsNull(this.tableSP_RP_BSBR.flood_ref_elev_ftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setflood_ref_elev_ftNull() {
                this[this.tableSP_RP_BSBR.flood_ref_elev_ftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issan_swr_crown_ftNull() {
                return this.IsNull(this.tableSP_RP_BSBR.san_swr_crown_ftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsan_swr_crown_ftNull() {
                this[this.tableSP_RP_BSBR.san_swr_crown_ftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstormNull() {
                return this.IsNull(this.tableSP_RP_BSBR.stormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstormNull() {
                this[this.tableSP_RP_BSBR.stormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbasinNull() {
                return this.IsNull(this.tableSP_RP_BSBR.basinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbasinNull() {
                this[this.tableSP_RP_BSBR.basinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isuse_flagNull() {
                return this.IsNull(this.tableSP_RP_BSBR.use_flagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setuse_flagNull() {
                this[this.tableSP_RP_BSBR.use_flagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfocus_areaNull() {
                return this.IsNull(this.tableSP_RP_BSBR.focus_areaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfocus_areaNull() {
                this[this.tableSP_RP_BSBR.focus_areaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ishgl_comp_rp_idNull() {
                return this.IsNull(this.tableSP_RP_BSBR.hgl_comp_rp_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sethgl_comp_rp_idNull() {
                this[this.tableSP_RP_BSBR.hgl_comp_rp_idColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SP_RP_BSBRRowChangeEvent : global::System.EventArgs {
            
            private SP_RP_BSBRRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SP_RP_BSBRRowChangeEvent(SP_RP_BSBRRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SP_RP_BSBRRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace SystemsAnalysis.DataAccess.AltCompilerDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SP_RP_BSBRTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SP_RP_BSBRTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SP_RP_BSBR";
            tableMapping.ColumnMappings.Add("dsc_id", "dsc_id");
            tableMapping.ColumnMappings.Add("parcel_id", "parcel_id");
            tableMapping.ColumnMappings.Add("divide_id", "divide_id");
            tableMapping.ColumnMappings.Add("us_jelev_ft", "us_jelev_ft");
            tableMapping.ColumnMappings.Add("ds_jelev_ft", "ds_jelev_ft");
            tableMapping.ColumnMappings.Add("frac_2swr_beg", "frac_2swr_beg");
            tableMapping.ColumnMappings.Add("calculated_hgl_ft", "calculated_hgl_ft");
            tableMapping.ColumnMappings.Add("calculated_dhgl_ft", "calculated_dhgl_ft");
            tableMapping.ColumnMappings.Add("surcharge_ft", "surcharge_ft");
            tableMapping.ColumnMappings.Add("flood_ref_elev_ft", "flood_ref_elev_ft");
            tableMapping.ColumnMappings.Add("san_swr_crown_ft", "san_swr_crown_ft");
            tableMapping.ColumnMappings.Add("storm", "storm");
            tableMapping.ColumnMappings.Add("basin", "basin");
            tableMapping.ColumnMappings.Add("use_flag", "use_flag");
            tableMapping.ColumnMappings.Add("focus_area", "focus_area");
            tableMapping.ColumnMappings.Add("hgl_comp_rp_id", "hgl_comp_rp_id");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.modeling_devConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT        dsc_id, parcel_id, divide_id, us_jelev_ft, ds_jelev_ft, frac_2swr_beg, calculated_hgl_ft, calculated_dhgl_ft, surcharge_ft, flood_ref_elev_ft, san_swr_crown_ft,
                          storm, basin, use_flag, hgl_comp_rp_id, focus_area
FROM            SP_RP_BSBR";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(AltCompilerDataSet.SP_RP_BSBRDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual AltCompilerDataSet.SP_RP_BSBRDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            AltCompilerDataSet.SP_RP_BSBRDataTable dataTable = new AltCompilerDataSet.SP_RP_BSBRDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(AltCompilerDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(AltCompilerDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(AltCompilerDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(AltCompilerDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SystemsAnalysis.DataAccess {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SAMasterDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SAMasterDataSet : global::System.Data.DataSet {
        
        private MstDscDataTable tableMstDsc;
        
        private MstNodesDataTable tableMstNodes;
        
        private MstLinksDataTable tableMstLinks;
        
        private MstSscDataTable tableMstSsc;
        
        private MstZoningToGenDataTable tableMstZoningToGen;
        
        private global::System.Data.DataRelation relationMstDsc_MstZoningToGen;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SAMasterDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SAMasterDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["MstDsc"] != null)) {
                    base.Tables.Add(new MstDscDataTable(ds.Tables["MstDsc"]));
                }
                if ((ds.Tables["MstNodes"] != null)) {
                    base.Tables.Add(new MstNodesDataTable(ds.Tables["MstNodes"]));
                }
                if ((ds.Tables["MstLinks"] != null)) {
                    base.Tables.Add(new MstLinksDataTable(ds.Tables["MstLinks"]));
                }
                if ((ds.Tables["MstSsc"] != null)) {
                    base.Tables.Add(new MstSscDataTable(ds.Tables["MstSsc"]));
                }
                if ((ds.Tables["MstZoningToGen"] != null)) {
                    base.Tables.Add(new MstZoningToGenDataTable(ds.Tables["MstZoningToGen"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MstDscDataTable MstDsc {
            get {
                return this.tableMstDsc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MstNodesDataTable MstNodes {
            get {
                return this.tableMstNodes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MstLinksDataTable MstLinks {
            get {
                return this.tableMstLinks;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MstSscDataTable MstSsc {
            get {
                return this.tableMstSsc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MstZoningToGenDataTable MstZoningToGen {
            get {
                return this.tableMstZoningToGen;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            SAMasterDataSet cln = ((SAMasterDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["MstDsc"] != null)) {
                    base.Tables.Add(new MstDscDataTable(ds.Tables["MstDsc"]));
                }
                if ((ds.Tables["MstNodes"] != null)) {
                    base.Tables.Add(new MstNodesDataTable(ds.Tables["MstNodes"]));
                }
                if ((ds.Tables["MstLinks"] != null)) {
                    base.Tables.Add(new MstLinksDataTable(ds.Tables["MstLinks"]));
                }
                if ((ds.Tables["MstSsc"] != null)) {
                    base.Tables.Add(new MstSscDataTable(ds.Tables["MstSsc"]));
                }
                if ((ds.Tables["MstZoningToGen"] != null)) {
                    base.Tables.Add(new MstZoningToGenDataTable(ds.Tables["MstZoningToGen"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableMstDsc = ((MstDscDataTable)(base.Tables["MstDsc"]));
            if ((initTable == true)) {
                if ((this.tableMstDsc != null)) {
                    this.tableMstDsc.InitVars();
                }
            }
            this.tableMstNodes = ((MstNodesDataTable)(base.Tables["MstNodes"]));
            if ((initTable == true)) {
                if ((this.tableMstNodes != null)) {
                    this.tableMstNodes.InitVars();
                }
            }
            this.tableMstLinks = ((MstLinksDataTable)(base.Tables["MstLinks"]));
            if ((initTable == true)) {
                if ((this.tableMstLinks != null)) {
                    this.tableMstLinks.InitVars();
                }
            }
            this.tableMstSsc = ((MstSscDataTable)(base.Tables["MstSsc"]));
            if ((initTable == true)) {
                if ((this.tableMstSsc != null)) {
                    this.tableMstSsc.InitVars();
                }
            }
            this.tableMstZoningToGen = ((MstZoningToGenDataTable)(base.Tables["MstZoningToGen"]));
            if ((initTable == true)) {
                if ((this.tableMstZoningToGen != null)) {
                    this.tableMstZoningToGen.InitVars();
                }
            }
            this.relationMstDsc_MstZoningToGen = this.Relations["MstDsc_MstZoningToGen"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SAMasterDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SAMasterDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableMstDsc = new MstDscDataTable();
            base.Tables.Add(this.tableMstDsc);
            this.tableMstNodes = new MstNodesDataTable();
            base.Tables.Add(this.tableMstNodes);
            this.tableMstLinks = new MstLinksDataTable();
            base.Tables.Add(this.tableMstLinks);
            this.tableMstSsc = new MstSscDataTable();
            base.Tables.Add(this.tableMstSsc);
            this.tableMstZoningToGen = new MstZoningToGenDataTable();
            base.Tables.Add(this.tableMstZoningToGen);
            this.relationMstDsc_MstZoningToGen = new global::System.Data.DataRelation("MstDsc_MstZoningToGen", new global::System.Data.DataColumn[] {
                        this.tableMstZoningToGen.GenZoneColumn}, new global::System.Data.DataColumn[] {
                        this.tableMstDsc.GenExColumn}, false);
            this.Relations.Add(this.relationMstDsc_MstZoningToGen);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMstDsc() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMstNodes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMstLinks() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMstSsc() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMstZoningToGen() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SAMasterDataSet ds = new SAMasterDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void MstDscRowChangeEventHandler(object sender, MstDscRowChangeEvent e);
        
        public delegate void MstNodesRowChangeEventHandler(object sender, MstNodesRowChangeEvent e);
        
        public delegate void MstLinksRowChangeEventHandler(object sender, MstLinksRowChangeEvent e);
        
        public delegate void MstSscRowChangeEventHandler(object sender, MstSscRowChangeEvent e);
        
        public delegate void MstZoningToGenRowChangeEventHandler(object sender, MstZoningToGenRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MstDscDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnObjectID;
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnDivideID;
            
            private global::System.Data.DataColumn columnDscID;
            
            private global::System.Data.DataColumn columnDiscoSiteID;
            
            private global::System.Data.DataColumn columnDiscoClass;
            
            private global::System.Data.DataColumn columnToMLinkSan;
            
            private global::System.Data.DataColumn columnToMLinkStorm;
            
            private global::System.Data.DataColumn columnPipeFlowTypeSan;
            
            private global::System.Data.DataColumn columnPipeFlowTypeStorm;
            
            private global::System.Data.DataColumn columnSanSwrCrown;
            
            private global::System.Data.DataColumn columnFrac2SwrBeg;
            
            private global::System.Data.DataColumn columnFloodRefElev;
            
            private global::System.Data.DataColumn columnFalseBFRisk;
            
            private global::System.Data.DataColumn columnRNo;
            
            private global::System.Data.DataColumn columnOwner1;
            
            private global::System.Data.DataColumn columnOwner2;
            
            private global::System.Data.DataColumn columnOwner3;
            
            private global::System.Data.DataColumn columnOwnerAddr;
            
            private global::System.Data.DataColumn columnOwnerCity;
            
            private global::System.Data.DataColumn columnOwnerState;
            
            private global::System.Data.DataColumn columnOwnerZip;
            
            private global::System.Data.DataColumn columnSiteAddr;
            
            private global::System.Data.DataColumn columnSiteCity;
            
            private global::System.Data.DataColumn columnSiteState;
            
            private global::System.Data.DataColumn columnSiteZip;
            
            private global::System.Data.DataColumn columnFloodRefElev2;
            
            private global::System.Data.DataColumn columnIsVacant;
            
            private global::System.Data.DataColumn columnZoneEx;
            
            private global::System.Data.DataColumn columnZoneCP;
            
            private global::System.Data.DataColumn columnGenEx;
            
            private global::System.Data.DataColumn columnGenCP;
            
            private global::System.Data.DataColumn columnPZSqFt;
            
            private global::System.Data.DataColumn columnImpFractEx;
            
            private global::System.Data.DataColumn columnImpFractCP;
            
            private global::System.Data.DataColumn columnImpFractFB;
            
            private global::System.Data.DataColumn columnAreaFt;
            
            private global::System.Data.DataColumn columnRfAreaFtEx;
            
            private global::System.Data.DataColumn columnRfAreaFtFB;
            
            private global::System.Data.DataColumn columnPkAreaFtEx;
            
            private global::System.Data.DataColumn columnPkAreaFtFB;
            
            private global::System.Data.DataColumn columnBaseflowExCfs;
            
            private global::System.Data.DataColumn columnBaseflowFBCfs;
            
            private global::System.Data.DataColumn columnBaseflowDMCfs;
            
            private global::System.Data.DataColumn columnGrowthState;
            
            private global::System.Data.DataColumn columnIncIA4FB;
            
            private global::System.Data.DataColumn columnGisBasin;
            
            private global::System.Data.DataColumn columnIcFtRoofEx;
            
            private global::System.Data.DataColumn columnIcFtRoofFB;
            
            private global::System.Data.DataColumn columnIcFtParkEx;
            
            private global::System.Data.DataColumn columnIcFtParkFB;
            
            private global::System.Data.DataColumn columnEicFtRoofEx;
            
            private global::System.Data.DataColumn columnEicFtParkEx;
            
            private global::System.Data.DataColumn columnEicFtRoofFB;
            
            private global::System.Data.DataColumn columnEicFtParkFB;
            
            private global::System.Data.DataColumn columnSewerable;
            
            private global::System.Data.DataColumn columnShape;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstDscDataTable() {
                this.TableName = "MstDsc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MstDscDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MstDscDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DivideIDColumn {
                get {
                    return this.columnDivideID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DscIDColumn {
                get {
                    return this.columnDscID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiscoSiteIDColumn {
                get {
                    return this.columnDiscoSiteID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiscoClassColumn {
                get {
                    return this.columnDiscoClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToMLinkSanColumn {
                get {
                    return this.columnToMLinkSan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToMLinkStormColumn {
                get {
                    return this.columnToMLinkStorm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeFlowTypeSanColumn {
                get {
                    return this.columnPipeFlowTypeSan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeFlowTypeStormColumn {
                get {
                    return this.columnPipeFlowTypeStorm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SanSwrCrownColumn {
                get {
                    return this.columnSanSwrCrown;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Frac2SwrBegColumn {
                get {
                    return this.columnFrac2SwrBeg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FloodRefElevColumn {
                get {
                    return this.columnFloodRefElev;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FalseBFRiskColumn {
                get {
                    return this.columnFalseBFRisk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RNoColumn {
                get {
                    return this.columnRNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Owner1Column {
                get {
                    return this.columnOwner1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Owner2Column {
                get {
                    return this.columnOwner2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Owner3Column {
                get {
                    return this.columnOwner3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerAddrColumn {
                get {
                    return this.columnOwnerAddr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerCityColumn {
                get {
                    return this.columnOwnerCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerStateColumn {
                get {
                    return this.columnOwnerState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerZipColumn {
                get {
                    return this.columnOwnerZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteAddrColumn {
                get {
                    return this.columnSiteAddr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteCityColumn {
                get {
                    return this.columnSiteCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteStateColumn {
                get {
                    return this.columnSiteState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteZipColumn {
                get {
                    return this.columnSiteZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FloodRefElev2Column {
                get {
                    return this.columnFloodRefElev2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsVacantColumn {
                get {
                    return this.columnIsVacant;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZoneExColumn {
                get {
                    return this.columnZoneEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZoneCPColumn {
                get {
                    return this.columnZoneCP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenExColumn {
                get {
                    return this.columnGenEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenCPColumn {
                get {
                    return this.columnGenCP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PZSqFtColumn {
                get {
                    return this.columnPZSqFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImpFractExColumn {
                get {
                    return this.columnImpFractEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImpFractCPColumn {
                get {
                    return this.columnImpFractCP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImpFractFBColumn {
                get {
                    return this.columnImpFractFB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AreaFtColumn {
                get {
                    return this.columnAreaFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RfAreaFtExColumn {
                get {
                    return this.columnRfAreaFtEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RfAreaFtFBColumn {
                get {
                    return this.columnRfAreaFtFB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PkAreaFtExColumn {
                get {
                    return this.columnPkAreaFtEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PkAreaFtFBColumn {
                get {
                    return this.columnPkAreaFtFB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseflowExCfsColumn {
                get {
                    return this.columnBaseflowExCfs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseflowFBCfsColumn {
                get {
                    return this.columnBaseflowFBCfs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseflowDMCfsColumn {
                get {
                    return this.columnBaseflowDMCfs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrowthStateColumn {
                get {
                    return this.columnGrowthState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IncIA4FBColumn {
                get {
                    return this.columnIncIA4FB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GisBasinColumn {
                get {
                    return this.columnGisBasin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IcFtRoofExColumn {
                get {
                    return this.columnIcFtRoofEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IcFtRoofFBColumn {
                get {
                    return this.columnIcFtRoofFB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IcFtParkExColumn {
                get {
                    return this.columnIcFtParkEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IcFtParkFBColumn {
                get {
                    return this.columnIcFtParkFB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EicFtRoofExColumn {
                get {
                    return this.columnEicFtRoofEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EicFtParkExColumn {
                get {
                    return this.columnEicFtParkEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EicFtRoofFBColumn {
                get {
                    return this.columnEicFtRoofFB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EicFtParkFBColumn {
                get {
                    return this.columnEicFtParkFB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SewerableColumn {
                get {
                    return this.columnSewerable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShapeColumn {
                get {
                    return this.columnShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstDscRow this[int index] {
                get {
                    return ((MstDscRow)(this.Rows[index]));
                }
            }
            
            public event MstDscRowChangeEventHandler MstDscRowChanging;
            
            public event MstDscRowChangeEventHandler MstDscRowChanged;
            
            public event MstDscRowChangeEventHandler MstDscRowDeleting;
            
            public event MstDscRowChangeEventHandler MstDscRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMstDscRow(MstDscRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstDscRow AddMstDscRow(
                        int ObjectID, 
                        int ParcelID, 
                        int DivideID, 
                        int DscID, 
                        int DiscoSiteID, 
                        string DiscoClass, 
                        int ToMLinkSan, 
                        int ToMLinkStorm, 
                        string PipeFlowTypeSan, 
                        string PipeFlowTypeStorm, 
                        double SanSwrCrown, 
                        double Frac2SwrBeg, 
                        double FloodRefElev, 
                        short FalseBFRisk, 
                        string RNo, 
                        string Owner1, 
                        string Owner2, 
                        string Owner3, 
                        string OwnerAddr, 
                        string OwnerCity, 
                        string OwnerState, 
                        string OwnerZip, 
                        string SiteAddr, 
                        string SiteCity, 
                        string SiteState, 
                        string SiteZip, 
                        double FloodRefElev2, 
                        short IsVacant, 
                        string ZoneEx, 
                        string ZoneCP, 
                        MstZoningToGenRow parentMstZoningToGenRowByMstDsc_MstZoningToGen, 
                        string GenCP, 
                        int PZSqFt, 
                        double ImpFractEx, 
                        double ImpFractCP, 
                        double ImpFractFB, 
                        int AreaFt, 
                        int RfAreaFtEx, 
                        int RfAreaFtFB, 
                        int PkAreaFtEx, 
                        int PkAreaFtFB, 
                        double BaseflowExCfs, 
                        double BaseflowFBCfs, 
                        double BaseflowDMCfs, 
                        int GrowthState, 
                        short IncIA4FB, 
                        string GisBasin, 
                        int IcFtRoofEx, 
                        int IcFtRoofFB, 
                        int IcFtParkEx, 
                        int IcFtParkFB, 
                        double EicFtRoofEx, 
                        double EicFtParkEx, 
                        double EicFtRoofFB, 
                        double EicFtParkFB, 
                        int Sewerable, 
                        int Shape) {
                MstDscRow rowMstDscRow = ((MstDscRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ObjectID,
                        ParcelID,
                        DivideID,
                        DscID,
                        DiscoSiteID,
                        DiscoClass,
                        ToMLinkSan,
                        ToMLinkStorm,
                        PipeFlowTypeSan,
                        PipeFlowTypeStorm,
                        SanSwrCrown,
                        Frac2SwrBeg,
                        FloodRefElev,
                        FalseBFRisk,
                        RNo,
                        Owner1,
                        Owner2,
                        Owner3,
                        OwnerAddr,
                        OwnerCity,
                        OwnerState,
                        OwnerZip,
                        SiteAddr,
                        SiteCity,
                        SiteState,
                        SiteZip,
                        FloodRefElev2,
                        IsVacant,
                        ZoneEx,
                        ZoneCP,
                        null,
                        GenCP,
                        PZSqFt,
                        ImpFractEx,
                        ImpFractCP,
                        ImpFractFB,
                        AreaFt,
                        RfAreaFtEx,
                        RfAreaFtFB,
                        PkAreaFtEx,
                        PkAreaFtFB,
                        BaseflowExCfs,
                        BaseflowFBCfs,
                        BaseflowDMCfs,
                        GrowthState,
                        IncIA4FB,
                        GisBasin,
                        IcFtRoofEx,
                        IcFtRoofFB,
                        IcFtParkEx,
                        IcFtParkFB,
                        EicFtRoofEx,
                        EicFtParkEx,
                        EicFtRoofFB,
                        EicFtParkFB,
                        Sewerable,
                        Shape};
                if ((parentMstZoningToGenRowByMstDsc_MstZoningToGen != null)) {
                    columnValuesArray[30] = parentMstZoningToGenRowByMstDsc_MstZoningToGen[1];
                }
                rowMstDscRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMstDscRow);
                return rowMstDscRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstDscRow FindByObjectID(int ObjectID) {
                return ((MstDscRow)(this.Rows.Find(new object[] {
                            ObjectID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MstDscDataTable cln = ((MstDscDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MstDscDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnObjectID = base.Columns["ObjectID"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnDivideID = base.Columns["DivideID"];
                this.columnDscID = base.Columns["DscID"];
                this.columnDiscoSiteID = base.Columns["DiscoSiteID"];
                this.columnDiscoClass = base.Columns["DiscoClass"];
                this.columnToMLinkSan = base.Columns["ToMLinkSan"];
                this.columnToMLinkStorm = base.Columns["ToMLinkStorm"];
                this.columnPipeFlowTypeSan = base.Columns["PipeFlowTypeSan"];
                this.columnPipeFlowTypeStorm = base.Columns["PipeFlowTypeStorm"];
                this.columnSanSwrCrown = base.Columns["SanSwrCrown"];
                this.columnFrac2SwrBeg = base.Columns["Frac2SwrBeg"];
                this.columnFloodRefElev = base.Columns["FloodRefElev"];
                this.columnFalseBFRisk = base.Columns["FalseBFRisk"];
                this.columnRNo = base.Columns["RNo"];
                this.columnOwner1 = base.Columns["Owner1"];
                this.columnOwner2 = base.Columns["Owner2"];
                this.columnOwner3 = base.Columns["Owner3"];
                this.columnOwnerAddr = base.Columns["OwnerAddr"];
                this.columnOwnerCity = base.Columns["OwnerCity"];
                this.columnOwnerState = base.Columns["OwnerState"];
                this.columnOwnerZip = base.Columns["OwnerZip"];
                this.columnSiteAddr = base.Columns["SiteAddr"];
                this.columnSiteCity = base.Columns["SiteCity"];
                this.columnSiteState = base.Columns["SiteState"];
                this.columnSiteZip = base.Columns["SiteZip"];
                this.columnFloodRefElev2 = base.Columns["FloodRefElev2"];
                this.columnIsVacant = base.Columns["IsVacant"];
                this.columnZoneEx = base.Columns["ZoneEx"];
                this.columnZoneCP = base.Columns["ZoneCP"];
                this.columnGenEx = base.Columns["GenEx"];
                this.columnGenCP = base.Columns["GenCP"];
                this.columnPZSqFt = base.Columns["PZSqFt"];
                this.columnImpFractEx = base.Columns["ImpFractEx"];
                this.columnImpFractCP = base.Columns["ImpFractCP"];
                this.columnImpFractFB = base.Columns["ImpFractFB"];
                this.columnAreaFt = base.Columns["AreaFt"];
                this.columnRfAreaFtEx = base.Columns["RfAreaFtEx"];
                this.columnRfAreaFtFB = base.Columns["RfAreaFtFB"];
                this.columnPkAreaFtEx = base.Columns["PkAreaFtEx"];
                this.columnPkAreaFtFB = base.Columns["PkAreaFtFB"];
                this.columnBaseflowExCfs = base.Columns["BaseflowExCfs"];
                this.columnBaseflowFBCfs = base.Columns["BaseflowFBCfs"];
                this.columnBaseflowDMCfs = base.Columns["BaseflowDMCfs"];
                this.columnGrowthState = base.Columns["GrowthState"];
                this.columnIncIA4FB = base.Columns["IncIA4FB"];
                this.columnGisBasin = base.Columns["GisBasin"];
                this.columnIcFtRoofEx = base.Columns["IcFtRoofEx"];
                this.columnIcFtRoofFB = base.Columns["IcFtRoofFB"];
                this.columnIcFtParkEx = base.Columns["IcFtParkEx"];
                this.columnIcFtParkFB = base.Columns["IcFtParkFB"];
                this.columnEicFtRoofEx = base.Columns["EicFtRoofEx"];
                this.columnEicFtParkEx = base.Columns["EicFtParkEx"];
                this.columnEicFtRoofFB = base.Columns["EicFtRoofFB"];
                this.columnEicFtParkFB = base.Columns["EicFtParkFB"];
                this.columnSewerable = base.Columns["Sewerable"];
                this.columnShape = base.Columns["Shape"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnObjectID = new global::System.Data.DataColumn("ObjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectID);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnDivideID = new global::System.Data.DataColumn("DivideID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDivideID);
                this.columnDscID = new global::System.Data.DataColumn("DscID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDscID);
                this.columnDiscoSiteID = new global::System.Data.DataColumn("DiscoSiteID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscoSiteID);
                this.columnDiscoClass = new global::System.Data.DataColumn("DiscoClass", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscoClass);
                this.columnToMLinkSan = new global::System.Data.DataColumn("ToMLinkSan", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToMLinkSan);
                this.columnToMLinkStorm = new global::System.Data.DataColumn("ToMLinkStorm", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToMLinkStorm);
                this.columnPipeFlowTypeSan = new global::System.Data.DataColumn("PipeFlowTypeSan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeFlowTypeSan);
                this.columnPipeFlowTypeStorm = new global::System.Data.DataColumn("PipeFlowTypeStorm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeFlowTypeStorm);
                this.columnSanSwrCrown = new global::System.Data.DataColumn("SanSwrCrown", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSanSwrCrown);
                this.columnFrac2SwrBeg = new global::System.Data.DataColumn("Frac2SwrBeg", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrac2SwrBeg);
                this.columnFloodRefElev = new global::System.Data.DataColumn("FloodRefElev", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFloodRefElev);
                this.columnFalseBFRisk = new global::System.Data.DataColumn("FalseBFRisk", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFalseBFRisk);
                this.columnRNo = new global::System.Data.DataColumn("RNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRNo);
                this.columnOwner1 = new global::System.Data.DataColumn("Owner1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwner1);
                this.columnOwner2 = new global::System.Data.DataColumn("Owner2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwner2);
                this.columnOwner3 = new global::System.Data.DataColumn("Owner3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwner3);
                this.columnOwnerAddr = new global::System.Data.DataColumn("OwnerAddr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerAddr);
                this.columnOwnerCity = new global::System.Data.DataColumn("OwnerCity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerCity);
                this.columnOwnerState = new global::System.Data.DataColumn("OwnerState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerState);
                this.columnOwnerZip = new global::System.Data.DataColumn("OwnerZip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerZip);
                this.columnSiteAddr = new global::System.Data.DataColumn("SiteAddr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteAddr);
                this.columnSiteCity = new global::System.Data.DataColumn("SiteCity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteCity);
                this.columnSiteState = new global::System.Data.DataColumn("SiteState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteState);
                this.columnSiteZip = new global::System.Data.DataColumn("SiteZip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteZip);
                this.columnFloodRefElev2 = new global::System.Data.DataColumn("FloodRefElev2", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFloodRefElev2);
                this.columnIsVacant = new global::System.Data.DataColumn("IsVacant", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsVacant);
                this.columnZoneEx = new global::System.Data.DataColumn("ZoneEx", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZoneEx);
                this.columnZoneCP = new global::System.Data.DataColumn("ZoneCP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZoneCP);
                this.columnGenEx = new global::System.Data.DataColumn("GenEx", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenEx);
                this.columnGenCP = new global::System.Data.DataColumn("GenCP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenCP);
                this.columnPZSqFt = new global::System.Data.DataColumn("PZSqFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPZSqFt);
                this.columnImpFractEx = new global::System.Data.DataColumn("ImpFractEx", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImpFractEx);
                this.columnImpFractCP = new global::System.Data.DataColumn("ImpFractCP", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImpFractCP);
                this.columnImpFractFB = new global::System.Data.DataColumn("ImpFractFB", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImpFractFB);
                this.columnAreaFt = new global::System.Data.DataColumn("AreaFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAreaFt);
                this.columnRfAreaFtEx = new global::System.Data.DataColumn("RfAreaFtEx", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRfAreaFtEx);
                this.columnRfAreaFtFB = new global::System.Data.DataColumn("RfAreaFtFB", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRfAreaFtFB);
                this.columnPkAreaFtEx = new global::System.Data.DataColumn("PkAreaFtEx", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPkAreaFtEx);
                this.columnPkAreaFtFB = new global::System.Data.DataColumn("PkAreaFtFB", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPkAreaFtFB);
                this.columnBaseflowExCfs = new global::System.Data.DataColumn("BaseflowExCfs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseflowExCfs);
                this.columnBaseflowFBCfs = new global::System.Data.DataColumn("BaseflowFBCfs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseflowFBCfs);
                this.columnBaseflowDMCfs = new global::System.Data.DataColumn("BaseflowDMCfs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseflowDMCfs);
                this.columnGrowthState = new global::System.Data.DataColumn("GrowthState", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrowthState);
                this.columnIncIA4FB = new global::System.Data.DataColumn("IncIA4FB", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncIA4FB);
                this.columnGisBasin = new global::System.Data.DataColumn("GisBasin", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGisBasin);
                this.columnIcFtRoofEx = new global::System.Data.DataColumn("IcFtRoofEx", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIcFtRoofEx);
                this.columnIcFtRoofFB = new global::System.Data.DataColumn("IcFtRoofFB", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIcFtRoofFB);
                this.columnIcFtParkEx = new global::System.Data.DataColumn("IcFtParkEx", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIcFtParkEx);
                this.columnIcFtParkFB = new global::System.Data.DataColumn("IcFtParkFB", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIcFtParkFB);
                this.columnEicFtRoofEx = new global::System.Data.DataColumn("EicFtRoofEx", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEicFtRoofEx);
                this.columnEicFtParkEx = new global::System.Data.DataColumn("EicFtParkEx", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEicFtParkEx);
                this.columnEicFtRoofFB = new global::System.Data.DataColumn("EicFtRoofFB", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEicFtRoofFB);
                this.columnEicFtParkFB = new global::System.Data.DataColumn("EicFtParkFB", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEicFtParkFB);
                this.columnSewerable = new global::System.Data.DataColumn("Sewerable", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSewerable);
                this.columnShape = new global::System.Data.DataColumn("Shape", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShape);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnObjectID}, true));
                this.columnObjectID.AllowDBNull = false;
                this.columnObjectID.Unique = true;
                this.columnParcelID.Caption = "PARCELID";
                this.columnDivideID.Caption = "DIVIDEID";
                this.columnDscID.Caption = "DSCID";
                this.columnDiscoSiteID.Caption = "DISCOSITEID";
                this.columnDiscoClass.Caption = "DISCOCLASS";
                this.columnDiscoClass.MaxLength = 1;
                this.columnToMLinkSan.Caption = "TOMLINKSAN";
                this.columnToMLinkStorm.Caption = "TOMLINKSTORM";
                this.columnPipeFlowTypeSan.Caption = "PIPEFLOWTYPESAN";
                this.columnPipeFlowTypeSan.MaxLength = 1;
                this.columnPipeFlowTypeStorm.Caption = "PIPEFLOWTYPESTORM";
                this.columnPipeFlowTypeStorm.MaxLength = 1;
                this.columnSanSwrCrown.Caption = "SANSWRCROWN";
                this.columnFrac2SwrBeg.Caption = "FRAC2SWRBEG";
                this.columnFloodRefElev.Caption = "FLOODREFELEV";
                this.columnFalseBFRisk.Caption = "FALSEBFRISK";
                this.columnRNo.Caption = "RNO";
                this.columnRNo.MaxLength = 35;
                this.columnOwner1.Caption = "OWNER1";
                this.columnOwner1.MaxLength = 35;
                this.columnOwner2.Caption = "OWNER2";
                this.columnOwner2.MaxLength = 35;
                this.columnOwner3.Caption = "OWNER3";
                this.columnOwner3.MaxLength = 35;
                this.columnOwnerAddr.Caption = "OWNERADDR";
                this.columnOwnerAddr.MaxLength = 35;
                this.columnOwnerCity.Caption = "OWNERCITY";
                this.columnOwnerCity.MaxLength = 28;
                this.columnOwnerState.Caption = "OWNERSTATE";
                this.columnOwnerState.MaxLength = 2;
                this.columnOwnerZip.Caption = "OWNERZIP";
                this.columnOwnerZip.MaxLength = 10;
                this.columnSiteAddr.Caption = "SITEADDR";
                this.columnSiteAddr.MaxLength = 37;
                this.columnSiteCity.Caption = "SITECITY";
                this.columnSiteCity.MaxLength = 30;
                this.columnSiteState.Caption = "SITE_STATE";
                this.columnSiteState.MaxLength = 6;
                this.columnSiteZip.Caption = "SITEZIP";
                this.columnSiteZip.MaxLength = 8;
                this.columnFloodRefElev2.Caption = "FLOODREFELEV_2";
                this.columnIsVacant.Caption = "ISVACANT";
                this.columnZoneEx.Caption = "ZONEEX";
                this.columnZoneEx.MaxLength = 5;
                this.columnZoneCP.Caption = "ZONECP";
                this.columnZoneCP.MaxLength = 5;
                this.columnGenEx.Caption = "GENEX";
                this.columnGenEx.MaxLength = 3;
                this.columnGenCP.Caption = "GENCP";
                this.columnGenCP.MaxLength = 3;
                this.columnPZSqFt.Caption = "PZSQFT";
                this.columnImpFractEx.Caption = "IMPFRACTEX";
                this.columnImpFractCP.Caption = "IMPFRACTCP";
                this.columnImpFractFB.Caption = "IMPFRACTFB";
                this.columnAreaFt.Caption = "AREAFT";
                this.columnRfAreaFtEx.Caption = "RFAREAFTEX";
                this.columnRfAreaFtFB.Caption = "RFAREAFTFB";
                this.columnPkAreaFtEx.Caption = "PKAREAFTEX";
                this.columnPkAreaFtFB.Caption = "PKAREAFTFB";
                this.columnBaseflowExCfs.Caption = "BASEFLOWEXCFS";
                this.columnBaseflowFBCfs.Caption = "BASEFLOWFBCFS";
                this.columnBaseflowDMCfs.Caption = "BASEFLOWDMCFS";
                this.columnGrowthState.Caption = "GROWTHSTATE";
                this.columnIncIA4FB.Caption = "INCIA4FB";
                this.columnGisBasin.Caption = "GISBASIN";
                this.columnGisBasin.MaxLength = 6;
                this.columnIcFtRoofEx.Caption = "ICFTROOFEX";
                this.columnIcFtRoofFB.Caption = "ICFTROOFFB";
                this.columnIcFtParkEx.Caption = "ICFTPARKEX";
                this.columnIcFtParkFB.Caption = "ICFTPARKFB";
                this.columnEicFtRoofEx.Caption = "EICFTROOFEX";
                this.columnEicFtParkEx.Caption = "EICFTPARKEX";
                this.columnEicFtRoofFB.Caption = "EICFTROOFFB";
                this.columnEicFtParkFB.Caption = "EICFTPARKFB";
                this.columnSewerable.Caption = "SEWERABLE";
                this.columnShape.Caption = "SHAPE";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstDscRow NewMstDscRow() {
                return ((MstDscRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MstDscRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MstDscRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MstDscRowChanged != null)) {
                    this.MstDscRowChanged(this, new MstDscRowChangeEvent(((MstDscRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MstDscRowChanging != null)) {
                    this.MstDscRowChanging(this, new MstDscRowChangeEvent(((MstDscRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MstDscRowDeleted != null)) {
                    this.MstDscRowDeleted(this, new MstDscRowChangeEvent(((MstDscRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MstDscRowDeleting != null)) {
                    this.MstDscRowDeleting(this, new MstDscRowChangeEvent(((MstDscRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMstDscRow(MstDscRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SAMasterDataSet ds = new SAMasterDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MstDscDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MstNodesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnObjectID;
            
            private global::System.Data.DataColumn columnNode;
            
            private global::System.Data.DataColumn columnXCoord;
            
            private global::System.Data.DataColumn columnYCoord;
            
            private global::System.Data.DataColumn columnNodeType;
            
            private global::System.Data.DataColumn columnGrndElev;
            
            private global::System.Data.DataColumn columnHasSpecNode;
            
            private global::System.Data.DataColumn columnHasSpecLink;
            
            private global::System.Data.DataColumn columnGageID;
            
            private global::System.Data.DataColumn columnShape;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstNodesDataTable() {
                this.TableName = "MstNodes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MstNodesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MstNodesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NodeColumn {
                get {
                    return this.columnNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XCoordColumn {
                get {
                    return this.columnXCoord;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YCoordColumn {
                get {
                    return this.columnYCoord;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NodeTypeColumn {
                get {
                    return this.columnNodeType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrndElevColumn {
                get {
                    return this.columnGrndElev;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasSpecNodeColumn {
                get {
                    return this.columnHasSpecNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasSpecLinkColumn {
                get {
                    return this.columnHasSpecLink;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GageIDColumn {
                get {
                    return this.columnGageID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShapeColumn {
                get {
                    return this.columnShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstNodesRow this[int index] {
                get {
                    return ((MstNodesRow)(this.Rows[index]));
                }
            }
            
            public event MstNodesRowChangeEventHandler MstNodesRowChanging;
            
            public event MstNodesRowChangeEventHandler MstNodesRowChanged;
            
            public event MstNodesRowChangeEventHandler MstNodesRowDeleting;
            
            public event MstNodesRowChangeEventHandler MstNodesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMstNodesRow(MstNodesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstNodesRow AddMstNodesRow(int ObjectID, string Node, decimal XCoord, decimal YCoord, string NodeType, double GrndElev, string HasSpecNode, string HasSpecLink, string GageID, int Shape) {
                MstNodesRow rowMstNodesRow = ((MstNodesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ObjectID,
                        Node,
                        XCoord,
                        YCoord,
                        NodeType,
                        GrndElev,
                        HasSpecNode,
                        HasSpecLink,
                        GageID,
                        Shape};
                rowMstNodesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMstNodesRow);
                return rowMstNodesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstNodesRow FindByObjectID(int ObjectID) {
                return ((MstNodesRow)(this.Rows.Find(new object[] {
                            ObjectID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MstNodesDataTable cln = ((MstNodesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MstNodesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnObjectID = base.Columns["ObjectID"];
                this.columnNode = base.Columns["Node"];
                this.columnXCoord = base.Columns["XCoord"];
                this.columnYCoord = base.Columns["YCoord"];
                this.columnNodeType = base.Columns["NodeType"];
                this.columnGrndElev = base.Columns["GrndElev"];
                this.columnHasSpecNode = base.Columns["HasSpecNode"];
                this.columnHasSpecLink = base.Columns["HasSpecLink"];
                this.columnGageID = base.Columns["GageID"];
                this.columnShape = base.Columns["Shape"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnObjectID = new global::System.Data.DataColumn("ObjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectID);
                this.columnNode = new global::System.Data.DataColumn("Node", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNode);
                this.columnXCoord = new global::System.Data.DataColumn("XCoord", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXCoord);
                this.columnYCoord = new global::System.Data.DataColumn("YCoord", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYCoord);
                this.columnNodeType = new global::System.Data.DataColumn("NodeType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNodeType);
                this.columnGrndElev = new global::System.Data.DataColumn("GrndElev", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrndElev);
                this.columnHasSpecNode = new global::System.Data.DataColumn("HasSpecNode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasSpecNode);
                this.columnHasSpecLink = new global::System.Data.DataColumn("HasSpecLink", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasSpecLink);
                this.columnGageID = new global::System.Data.DataColumn("GageID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGageID);
                this.columnShape = new global::System.Data.DataColumn("Shape", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShape);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnObjectID}, true));
                this.columnObjectID.AllowDBNull = false;
                this.columnObjectID.Unique = true;
                this.columnNode.Caption = "NODE";
                this.columnNode.MaxLength = 6;
                this.columnXCoord.Caption = "XCOORD";
                this.columnYCoord.Caption = "YCOORD";
                this.columnNodeType.Caption = "NODETYPE";
                this.columnNodeType.MaxLength = 4;
                this.columnGrndElev.Caption = "GRNDELEV";
                this.columnHasSpecNode.Caption = "HASSPECNODE";
                this.columnHasSpecNode.MaxLength = 1;
                this.columnHasSpecLink.Caption = "HASSPECLINK";
                this.columnHasSpecLink.MaxLength = 1;
                this.columnGageID.Caption = "GAGEID";
                this.columnGageID.MaxLength = 8;
                this.columnShape.Caption = "SHAPE";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstNodesRow NewMstNodesRow() {
                return ((MstNodesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MstNodesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MstNodesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MstNodesRowChanged != null)) {
                    this.MstNodesRowChanged(this, new MstNodesRowChangeEvent(((MstNodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MstNodesRowChanging != null)) {
                    this.MstNodesRowChanging(this, new MstNodesRowChangeEvent(((MstNodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MstNodesRowDeleted != null)) {
                    this.MstNodesRowDeleted(this, new MstNodesRowChangeEvent(((MstNodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MstNodesRowDeleting != null)) {
                    this.MstNodesRowDeleting(this, new MstNodesRowChangeEvent(((MstNodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMstNodesRow(MstNodesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SAMasterDataSet ds = new SAMasterDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MstNodesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MstLinksDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnObjectID;
            
            private global::System.Data.DataColumn columnMLinkID;
            
            private global::System.Data.DataColumn columnCompKey;
            
            private global::System.Data.DataColumn columnUsNode;
            
            private global::System.Data.DataColumn columnDsNode;
            
            private global::System.Data.DataColumn columnPipeShape;
            
            private global::System.Data.DataColumn columnLinkType;
            
            private global::System.Data.DataColumn columnPipeFlowType;
            
            private global::System.Data.DataColumn columnLength;
            
            private global::System.Data.DataColumn columnDiamWidth;
            
            private global::System.Data.DataColumn columnHeight;
            
            private global::System.Data.DataColumn columnMaterial;
            
            private global::System.Data.DataColumn columnUpsDpth;
            
            private global::System.Data.DataColumn columnDwnDpth;
            
            private global::System.Data.DataColumn columnUsIE;
            
            private global::System.Data.DataColumn columnDsIE;
            
            private global::System.Data.DataColumn columnAsBuilt;
            
            private global::System.Data.DataColumn columnInstDate;
            
            private global::System.Data.DataColumn columnFromX;
            
            private global::System.Data.DataColumn columnFromY;
            
            private global::System.Data.DataColumn columnToX;
            
            private global::System.Data.DataColumn columnToY;
            
            private global::System.Data.DataColumn columnRoughness;
            
            private global::System.Data.DataColumn columnTimeFrame;
            
            private global::System.Data.DataColumn columnDataFlagSynth;
            
            private global::System.Data.DataColumn columnDataQual;
            
            private global::System.Data.DataColumn columnHServStat;
            
            private global::System.Data.DataColumn columnValidFromDate;
            
            private global::System.Data.DataColumn columnValidToDate;
            
            private global::System.Data.DataColumn columnCadKey;
            
            private global::System.Data.DataColumn columnAuditNodeID;
            
            private global::System.Data.DataColumn columnAuditDups;
            
            private global::System.Data.DataColumn columnAuditSpatial;
            
            private global::System.Data.DataColumn columnAuditOK2Go;
            
            private global::System.Data.DataColumn columnAuditProcTimeStamp;
            
            private global::System.Data.DataColumn columnQDes;
            
            private global::System.Data.DataColumn columnShape;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstLinksDataTable() {
                this.TableName = "MstLinks";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MstLinksDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MstLinksDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MLinkIDColumn {
                get {
                    return this.columnMLinkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompKeyColumn {
                get {
                    return this.columnCompKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsNodeColumn {
                get {
                    return this.columnUsNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DsNodeColumn {
                get {
                    return this.columnDsNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeShapeColumn {
                get {
                    return this.columnPipeShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkTypeColumn {
                get {
                    return this.columnLinkType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeFlowTypeColumn {
                get {
                    return this.columnPipeFlowType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiamWidthColumn {
                get {
                    return this.columnDiamWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeightColumn {
                get {
                    return this.columnHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialColumn {
                get {
                    return this.columnMaterial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpsDpthColumn {
                get {
                    return this.columnUpsDpth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DwnDpthColumn {
                get {
                    return this.columnDwnDpth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsIEColumn {
                get {
                    return this.columnUsIE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DsIEColumn {
                get {
                    return this.columnDsIE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AsBuiltColumn {
                get {
                    return this.columnAsBuilt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstDateColumn {
                get {
                    return this.columnInstDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromXColumn {
                get {
                    return this.columnFromX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromYColumn {
                get {
                    return this.columnFromY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToXColumn {
                get {
                    return this.columnToX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToYColumn {
                get {
                    return this.columnToY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RoughnessColumn {
                get {
                    return this.columnRoughness;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeFrameColumn {
                get {
                    return this.columnTimeFrame;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataFlagSynthColumn {
                get {
                    return this.columnDataFlagSynth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataQualColumn {
                get {
                    return this.columnDataQual;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HServStatColumn {
                get {
                    return this.columnHServStat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidFromDateColumn {
                get {
                    return this.columnValidFromDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidToDateColumn {
                get {
                    return this.columnValidToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CadKeyColumn {
                get {
                    return this.columnCadKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AuditNodeIDColumn {
                get {
                    return this.columnAuditNodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AuditDupsColumn {
                get {
                    return this.columnAuditDups;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AuditSpatialColumn {
                get {
                    return this.columnAuditSpatial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AuditOK2GoColumn {
                get {
                    return this.columnAuditOK2Go;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AuditProcTimeStampColumn {
                get {
                    return this.columnAuditProcTimeStamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QDesColumn {
                get {
                    return this.columnQDes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShapeColumn {
                get {
                    return this.columnShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstLinksRow this[int index] {
                get {
                    return ((MstLinksRow)(this.Rows[index]));
                }
            }
            
            public event MstLinksRowChangeEventHandler MstLinksRowChanging;
            
            public event MstLinksRowChangeEventHandler MstLinksRowChanged;
            
            public event MstLinksRowChangeEventHandler MstLinksRowDeleting;
            
            public event MstLinksRowChangeEventHandler MstLinksRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMstLinksRow(MstLinksRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstLinksRow AddMstLinksRow(
                        int ObjectID, 
                        int MLinkID, 
                        int CompKey, 
                        string UsNode, 
                        string DsNode, 
                        string PipeShape, 
                        string LinkType, 
                        string PipeFlowType, 
                        double Length, 
                        double DiamWidth, 
                        double Height, 
                        string Material, 
                        double UpsDpth, 
                        double DwnDpth, 
                        double UsIE, 
                        double DsIE, 
                        string AsBuilt, 
                        System.DateTime InstDate, 
                        double FromX, 
                        double FromY, 
                        double ToX, 
                        double ToY, 
                        double Roughness, 
                        string TimeFrame, 
                        int DataFlagSynth, 
                        string DataQual, 
                        string HServStat, 
                        string ValidFromDate, 
                        string ValidToDate, 
                        string CadKey, 
                        string AuditNodeID, 
                        string AuditDups, 
                        string AuditSpatial, 
                        short AuditOK2Go, 
                        string AuditProcTimeStamp, 
                        double QDes, 
                        int Shape) {
                MstLinksRow rowMstLinksRow = ((MstLinksRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ObjectID,
                        MLinkID,
                        CompKey,
                        UsNode,
                        DsNode,
                        PipeShape,
                        LinkType,
                        PipeFlowType,
                        Length,
                        DiamWidth,
                        Height,
                        Material,
                        UpsDpth,
                        DwnDpth,
                        UsIE,
                        DsIE,
                        AsBuilt,
                        InstDate,
                        FromX,
                        FromY,
                        ToX,
                        ToY,
                        Roughness,
                        TimeFrame,
                        DataFlagSynth,
                        DataQual,
                        HServStat,
                        ValidFromDate,
                        ValidToDate,
                        CadKey,
                        AuditNodeID,
                        AuditDups,
                        AuditSpatial,
                        AuditOK2Go,
                        AuditProcTimeStamp,
                        QDes,
                        Shape};
                rowMstLinksRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMstLinksRow);
                return rowMstLinksRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstLinksRow FindByObjectID(int ObjectID) {
                return ((MstLinksRow)(this.Rows.Find(new object[] {
                            ObjectID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MstLinksDataTable cln = ((MstLinksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MstLinksDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnObjectID = base.Columns["ObjectID"];
                this.columnMLinkID = base.Columns["MLinkID"];
                this.columnCompKey = base.Columns["CompKey"];
                this.columnUsNode = base.Columns["UsNode"];
                this.columnDsNode = base.Columns["DsNode"];
                this.columnPipeShape = base.Columns["PipeShape"];
                this.columnLinkType = base.Columns["LinkType"];
                this.columnPipeFlowType = base.Columns["PipeFlowType"];
                this.columnLength = base.Columns["Length"];
                this.columnDiamWidth = base.Columns["DiamWidth"];
                this.columnHeight = base.Columns["Height"];
                this.columnMaterial = base.Columns["Material"];
                this.columnUpsDpth = base.Columns["UpsDpth"];
                this.columnDwnDpth = base.Columns["DwnDpth"];
                this.columnUsIE = base.Columns["UsIE"];
                this.columnDsIE = base.Columns["DsIE"];
                this.columnAsBuilt = base.Columns["AsBuilt"];
                this.columnInstDate = base.Columns["InstDate"];
                this.columnFromX = base.Columns["FromX"];
                this.columnFromY = base.Columns["FromY"];
                this.columnToX = base.Columns["ToX"];
                this.columnToY = base.Columns["ToY"];
                this.columnRoughness = base.Columns["Roughness"];
                this.columnTimeFrame = base.Columns["TimeFrame"];
                this.columnDataFlagSynth = base.Columns["DataFlagSynth"];
                this.columnDataQual = base.Columns["DataQual"];
                this.columnHServStat = base.Columns["HServStat"];
                this.columnValidFromDate = base.Columns["ValidFromDate"];
                this.columnValidToDate = base.Columns["ValidToDate"];
                this.columnCadKey = base.Columns["CadKey"];
                this.columnAuditNodeID = base.Columns["AuditNodeID"];
                this.columnAuditDups = base.Columns["AuditDups"];
                this.columnAuditSpatial = base.Columns["AuditSpatial"];
                this.columnAuditOK2Go = base.Columns["AuditOK2Go"];
                this.columnAuditProcTimeStamp = base.Columns["AuditProcTimeStamp"];
                this.columnQDes = base.Columns["QDes"];
                this.columnShape = base.Columns["Shape"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnObjectID = new global::System.Data.DataColumn("ObjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectID);
                this.columnMLinkID = new global::System.Data.DataColumn("MLinkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMLinkID);
                this.columnCompKey = new global::System.Data.DataColumn("CompKey", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompKey);
                this.columnUsNode = new global::System.Data.DataColumn("UsNode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsNode);
                this.columnDsNode = new global::System.Data.DataColumn("DsNode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDsNode);
                this.columnPipeShape = new global::System.Data.DataColumn("PipeShape", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeShape);
                this.columnLinkType = new global::System.Data.DataColumn("LinkType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkType);
                this.columnPipeFlowType = new global::System.Data.DataColumn("PipeFlowType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeFlowType);
                this.columnLength = new global::System.Data.DataColumn("Length", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLength);
                this.columnDiamWidth = new global::System.Data.DataColumn("DiamWidth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiamWidth);
                this.columnHeight = new global::System.Data.DataColumn("Height", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeight);
                this.columnMaterial = new global::System.Data.DataColumn("Material", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterial);
                this.columnUpsDpth = new global::System.Data.DataColumn("UpsDpth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpsDpth);
                this.columnDwnDpth = new global::System.Data.DataColumn("DwnDpth", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDwnDpth);
                this.columnUsIE = new global::System.Data.DataColumn("UsIE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsIE);
                this.columnDsIE = new global::System.Data.DataColumn("DsIE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDsIE);
                this.columnAsBuilt = new global::System.Data.DataColumn("AsBuilt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAsBuilt);
                this.columnInstDate = new global::System.Data.DataColumn("InstDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstDate);
                this.columnFromX = new global::System.Data.DataColumn("FromX", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromX);
                this.columnFromY = new global::System.Data.DataColumn("FromY", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromY);
                this.columnToX = new global::System.Data.DataColumn("ToX", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToX);
                this.columnToY = new global::System.Data.DataColumn("ToY", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToY);
                this.columnRoughness = new global::System.Data.DataColumn("Roughness", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoughness);
                this.columnTimeFrame = new global::System.Data.DataColumn("TimeFrame", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeFrame);
                this.columnDataFlagSynth = new global::System.Data.DataColumn("DataFlagSynth", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataFlagSynth);
                this.columnDataQual = new global::System.Data.DataColumn("DataQual", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataQual);
                this.columnHServStat = new global::System.Data.DataColumn("HServStat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHServStat);
                this.columnValidFromDate = new global::System.Data.DataColumn("ValidFromDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidFromDate);
                this.columnValidToDate = new global::System.Data.DataColumn("ValidToDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidToDate);
                this.columnCadKey = new global::System.Data.DataColumn("CadKey", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCadKey);
                this.columnAuditNodeID = new global::System.Data.DataColumn("AuditNodeID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuditNodeID);
                this.columnAuditDups = new global::System.Data.DataColumn("AuditDups", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuditDups);
                this.columnAuditSpatial = new global::System.Data.DataColumn("AuditSpatial", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuditSpatial);
                this.columnAuditOK2Go = new global::System.Data.DataColumn("AuditOK2Go", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuditOK2Go);
                this.columnAuditProcTimeStamp = new global::System.Data.DataColumn("AuditProcTimeStamp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuditProcTimeStamp);
                this.columnQDes = new global::System.Data.DataColumn("QDes", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQDes);
                this.columnShape = new global::System.Data.DataColumn("Shape", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShape);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnObjectID}, true));
                this.columnObjectID.AllowDBNull = false;
                this.columnObjectID.Unique = true;
                this.columnMLinkID.Caption = "MLINKID";
                this.columnCompKey.Caption = "COMPKEY";
                this.columnUsNode.Caption = "USNODE";
                this.columnUsNode.MaxLength = 6;
                this.columnDsNode.Caption = "DSNODE";
                this.columnDsNode.MaxLength = 6;
                this.columnPipeShape.Caption = "PIPESHAPE";
                this.columnPipeShape.MaxLength = 4;
                this.columnLinkType.Caption = "LINKTYPE";
                this.columnLinkType.MaxLength = 2;
                this.columnPipeFlowType.Caption = "PIPEFLOWTYPE";
                this.columnPipeFlowType.MaxLength = 1;
                this.columnLength.Caption = "LENGTH";
                this.columnDiamWidth.Caption = "DIAMWIDTH";
                this.columnHeight.Caption = "HEIGHT";
                this.columnMaterial.Caption = "MATERIAL";
                this.columnMaterial.MaxLength = 6;
                this.columnUpsDpth.Caption = "UPSDPTH";
                this.columnDwnDpth.Caption = "DWNDPTH";
                this.columnUsIE.Caption = "USIE";
                this.columnDsIE.Caption = "DSIE";
                this.columnAsBuilt.Caption = "ASBUILT";
                this.columnAsBuilt.MaxLength = 14;
                this.columnInstDate.Caption = "INSTDATE";
                this.columnFromX.Caption = "FROMX";
                this.columnFromY.Caption = "FROMY";
                this.columnToX.Caption = "TOX";
                this.columnToY.Caption = "TOY";
                this.columnRoughness.Caption = "ROUGHNESS";
                this.columnTimeFrame.Caption = "TIMEFRAME";
                this.columnTimeFrame.MaxLength = 2;
                this.columnDataFlagSynth.Caption = "DATAFLAGSYNTH";
                this.columnDataQual.Caption = "DATAQUAL";
                this.columnDataQual.MaxLength = 15;
                this.columnHServStat.Caption = "HSERVSTAT";
                this.columnHServStat.MaxLength = 4;
                this.columnValidFromDate.Caption = "VALIDFROMDATE";
                this.columnValidFromDate.MaxLength = 8;
                this.columnValidToDate.Caption = "VALIDTODATE";
                this.columnValidToDate.MaxLength = 8;
                this.columnCadKey.Caption = "CADKEY";
                this.columnCadKey.MaxLength = 14;
                this.columnAuditNodeID.Caption = "AUDITNODEID";
                this.columnAuditNodeID.MaxLength = 20;
                this.columnAuditDups.Caption = "AUDITDUPS";
                this.columnAuditDups.MaxLength = 30;
                this.columnAuditSpatial.Caption = "AUDITSPATIAL";
                this.columnAuditSpatial.MaxLength = 30;
                this.columnAuditOK2Go.Caption = "AUDITOK2GO";
                this.columnAuditProcTimeStamp.Caption = "AUDITPROCTIMESTAMP";
                this.columnAuditProcTimeStamp.MaxLength = 30;
                this.columnQDes.Caption = "QDES";
                this.columnShape.Caption = "SHAPE";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstLinksRow NewMstLinksRow() {
                return ((MstLinksRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MstLinksRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MstLinksRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MstLinksRowChanged != null)) {
                    this.MstLinksRowChanged(this, new MstLinksRowChangeEvent(((MstLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MstLinksRowChanging != null)) {
                    this.MstLinksRowChanging(this, new MstLinksRowChangeEvent(((MstLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MstLinksRowDeleted != null)) {
                    this.MstLinksRowDeleted(this, new MstLinksRowChangeEvent(((MstLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MstLinksRowDeleting != null)) {
                    this.MstLinksRowDeleting(this, new MstLinksRowChangeEvent(((MstLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMstLinksRow(MstLinksRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SAMasterDataSet ds = new SAMasterDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MstLinksDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MstSscDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnObjectID;
            
            private global::System.Data.DataColumn columnSscID;
            
            private global::System.Data.DataColumn columnNGToEx;
            
            private global::System.Data.DataColumn columnNGToFB;
            
            private global::System.Data.DataColumn columnAltTraceNode;
            
            private global::System.Data.DataColumn columnSlope;
            
            private global::System.Data.DataColumn columnFlowLength;
            
            private global::System.Data.DataColumn columnDh;
            
            private global::System.Data.DataColumn columnPerN;
            
            private global::System.Data.DataColumn columnImpN;
            
            private global::System.Data.DataColumn columnImpStorage;
            
            private global::System.Data.DataColumn columnPerStorage;
            
            private global::System.Data.DataColumn columnSuction;
            
            private global::System.Data.DataColumn columnHydCon;
            
            private global::System.Data.DataColumn columnSmdMax;
            
            private global::System.Data.DataColumn columnIsSumpedEx;
            
            private global::System.Data.DataColumn columnIsSumpedFB;
            
            private global::System.Data.DataColumn columnTotalGrossAcres;
            
            private global::System.Data.DataColumn columnPaveAcres;
            
            private global::System.Data.DataColumn columnPaveTreeAcres;
            
            private global::System.Data.DataColumn columnUpdateAtts;
            
            private global::System.Data.DataColumn columnSWAcresEx;
            
            private global::System.Data.DataColumn columnSWAcresOther;
            
            private global::System.Data.DataColumn columnSWFactor;
            
            private global::System.Data.DataColumn columnSWAcresFB;
            
            private global::System.Data.DataColumn columnSWAcresFBOther;
            
            private global::System.Data.DataColumn columnRowAcresFB;
            
            private global::System.Data.DataColumn columnRowAcresFBOther;
            
            private global::System.Data.DataColumn columnSscSource;
            
            private global::System.Data.DataColumn columnSscGDate;
            
            private global::System.Data.DataColumn columnShape;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstSscDataTable() {
                this.TableName = "MstSsc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MstSscDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MstSscDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SscIDColumn {
                get {
                    return this.columnSscID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NGToExColumn {
                get {
                    return this.columnNGToEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NGToFBColumn {
                get {
                    return this.columnNGToFB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AltTraceNodeColumn {
                get {
                    return this.columnAltTraceNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SlopeColumn {
                get {
                    return this.columnSlope;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowLengthColumn {
                get {
                    return this.columnFlowLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DhColumn {
                get {
                    return this.columnDh;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PerNColumn {
                get {
                    return this.columnPerN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImpNColumn {
                get {
                    return this.columnImpN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImpStorageColumn {
                get {
                    return this.columnImpStorage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PerStorageColumn {
                get {
                    return this.columnPerStorage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SuctionColumn {
                get {
                    return this.columnSuction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HydConColumn {
                get {
                    return this.columnHydCon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SmdMaxColumn {
                get {
                    return this.columnSmdMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSumpedExColumn {
                get {
                    return this.columnIsSumpedEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSumpedFBColumn {
                get {
                    return this.columnIsSumpedFB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalGrossAcresColumn {
                get {
                    return this.columnTotalGrossAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaveAcresColumn {
                get {
                    return this.columnPaveAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaveTreeAcresColumn {
                get {
                    return this.columnPaveTreeAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateAttsColumn {
                get {
                    return this.columnUpdateAtts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SWAcresExColumn {
                get {
                    return this.columnSWAcresEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SWAcresOtherColumn {
                get {
                    return this.columnSWAcresOther;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SWFactorColumn {
                get {
                    return this.columnSWFactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SWAcresFBColumn {
                get {
                    return this.columnSWAcresFB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SWAcresFBOtherColumn {
                get {
                    return this.columnSWAcresFBOther;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RowAcresFBColumn {
                get {
                    return this.columnRowAcresFB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RowAcresFBOtherColumn {
                get {
                    return this.columnRowAcresFBOther;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SscSourceColumn {
                get {
                    return this.columnSscSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SscGDateColumn {
                get {
                    return this.columnSscGDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShapeColumn {
                get {
                    return this.columnShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstSscRow this[int index] {
                get {
                    return ((MstSscRow)(this.Rows[index]));
                }
            }
            
            public event MstSscRowChangeEventHandler MstSscRowChanging;
            
            public event MstSscRowChangeEventHandler MstSscRowChanged;
            
            public event MstSscRowChangeEventHandler MstSscRowDeleting;
            
            public event MstSscRowChangeEventHandler MstSscRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMstSscRow(MstSscRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstSscRow AddMstSscRow(
                        int ObjectID, 
                        int SscID, 
                        string NGToEx, 
                        string NGToFB, 
                        string AltTraceNode, 
                        decimal Slope, 
                        decimal FlowLength, 
                        decimal Dh, 
                        decimal PerN, 
                        decimal ImpN, 
                        decimal ImpStorage, 
                        decimal PerStorage, 
                        decimal Suction, 
                        decimal HydCon, 
                        decimal SmdMax, 
                        short IsSumpedEx, 
                        short IsSumpedFB, 
                        decimal TotalGrossAcres, 
                        decimal PaveAcres, 
                        decimal PaveTreeAcres, 
                        short UpdateAtts, 
                        decimal SWAcresEx, 
                        decimal SWAcresOther, 
                        decimal SWFactor, 
                        decimal SWAcresFB, 
                        decimal SWAcresFBOther, 
                        decimal RowAcresFB, 
                        decimal RowAcresFBOther, 
                        string SscSource, 
                        string SscGDate, 
                        int Shape) {
                MstSscRow rowMstSscRow = ((MstSscRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ObjectID,
                        SscID,
                        NGToEx,
                        NGToFB,
                        AltTraceNode,
                        Slope,
                        FlowLength,
                        Dh,
                        PerN,
                        ImpN,
                        ImpStorage,
                        PerStorage,
                        Suction,
                        HydCon,
                        SmdMax,
                        IsSumpedEx,
                        IsSumpedFB,
                        TotalGrossAcres,
                        PaveAcres,
                        PaveTreeAcres,
                        UpdateAtts,
                        SWAcresEx,
                        SWAcresOther,
                        SWFactor,
                        SWAcresFB,
                        SWAcresFBOther,
                        RowAcresFB,
                        RowAcresFBOther,
                        SscSource,
                        SscGDate,
                        Shape};
                rowMstSscRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMstSscRow);
                return rowMstSscRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstSscRow FindByObjectID(int ObjectID) {
                return ((MstSscRow)(this.Rows.Find(new object[] {
                            ObjectID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MstSscDataTable cln = ((MstSscDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MstSscDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnObjectID = base.Columns["ObjectID"];
                this.columnSscID = base.Columns["SscID"];
                this.columnNGToEx = base.Columns["NGToEx"];
                this.columnNGToFB = base.Columns["NGToFB"];
                this.columnAltTraceNode = base.Columns["AltTraceNode"];
                this.columnSlope = base.Columns["Slope"];
                this.columnFlowLength = base.Columns["FlowLength"];
                this.columnDh = base.Columns["Dh"];
                this.columnPerN = base.Columns["PerN"];
                this.columnImpN = base.Columns["ImpN"];
                this.columnImpStorage = base.Columns["ImpStorage"];
                this.columnPerStorage = base.Columns["PerStorage"];
                this.columnSuction = base.Columns["Suction"];
                this.columnHydCon = base.Columns["HydCon"];
                this.columnSmdMax = base.Columns["SmdMax"];
                this.columnIsSumpedEx = base.Columns["IsSumpedEx"];
                this.columnIsSumpedFB = base.Columns["IsSumpedFB"];
                this.columnTotalGrossAcres = base.Columns["TotalGrossAcres"];
                this.columnPaveAcres = base.Columns["PaveAcres"];
                this.columnPaveTreeAcres = base.Columns["PaveTreeAcres"];
                this.columnUpdateAtts = base.Columns["UpdateAtts"];
                this.columnSWAcresEx = base.Columns["SWAcresEx"];
                this.columnSWAcresOther = base.Columns["SWAcresOther"];
                this.columnSWFactor = base.Columns["SWFactor"];
                this.columnSWAcresFB = base.Columns["SWAcresFB"];
                this.columnSWAcresFBOther = base.Columns["SWAcresFBOther"];
                this.columnRowAcresFB = base.Columns["RowAcresFB"];
                this.columnRowAcresFBOther = base.Columns["RowAcresFBOther"];
                this.columnSscSource = base.Columns["SscSource"];
                this.columnSscGDate = base.Columns["SscGDate"];
                this.columnShape = base.Columns["Shape"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnObjectID = new global::System.Data.DataColumn("ObjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectID);
                this.columnSscID = new global::System.Data.DataColumn("SscID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSscID);
                this.columnNGToEx = new global::System.Data.DataColumn("NGToEx", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGToEx);
                this.columnNGToFB = new global::System.Data.DataColumn("NGToFB", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNGToFB);
                this.columnAltTraceNode = new global::System.Data.DataColumn("AltTraceNode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAltTraceNode);
                this.columnSlope = new global::System.Data.DataColumn("Slope", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSlope);
                this.columnFlowLength = new global::System.Data.DataColumn("FlowLength", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowLength);
                this.columnDh = new global::System.Data.DataColumn("Dh", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDh);
                this.columnPerN = new global::System.Data.DataColumn("PerN", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPerN);
                this.columnImpN = new global::System.Data.DataColumn("ImpN", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImpN);
                this.columnImpStorage = new global::System.Data.DataColumn("ImpStorage", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImpStorage);
                this.columnPerStorage = new global::System.Data.DataColumn("PerStorage", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPerStorage);
                this.columnSuction = new global::System.Data.DataColumn("Suction", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSuction);
                this.columnHydCon = new global::System.Data.DataColumn("HydCon", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHydCon);
                this.columnSmdMax = new global::System.Data.DataColumn("SmdMax", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSmdMax);
                this.columnIsSumpedEx = new global::System.Data.DataColumn("IsSumpedEx", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSumpedEx);
                this.columnIsSumpedFB = new global::System.Data.DataColumn("IsSumpedFB", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSumpedFB);
                this.columnTotalGrossAcres = new global::System.Data.DataColumn("TotalGrossAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalGrossAcres);
                this.columnPaveAcres = new global::System.Data.DataColumn("PaveAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaveAcres);
                this.columnPaveTreeAcres = new global::System.Data.DataColumn("PaveTreeAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaveTreeAcres);
                this.columnUpdateAtts = new global::System.Data.DataColumn("UpdateAtts", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateAtts);
                this.columnSWAcresEx = new global::System.Data.DataColumn("SWAcresEx", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSWAcresEx);
                this.columnSWAcresOther = new global::System.Data.DataColumn("SWAcresOther", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSWAcresOther);
                this.columnSWFactor = new global::System.Data.DataColumn("SWFactor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSWFactor);
                this.columnSWAcresFB = new global::System.Data.DataColumn("SWAcresFB", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSWAcresFB);
                this.columnSWAcresFBOther = new global::System.Data.DataColumn("SWAcresFBOther", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSWAcresFBOther);
                this.columnRowAcresFB = new global::System.Data.DataColumn("RowAcresFB", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowAcresFB);
                this.columnRowAcresFBOther = new global::System.Data.DataColumn("RowAcresFBOther", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowAcresFBOther);
                this.columnSscSource = new global::System.Data.DataColumn("SscSource", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSscSource);
                this.columnSscGDate = new global::System.Data.DataColumn("SscGDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSscGDate);
                this.columnShape = new global::System.Data.DataColumn("Shape", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShape);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnObjectID}, true));
                this.columnObjectID.AllowDBNull = false;
                this.columnObjectID.Unique = true;
                this.columnObjectID.Caption = "OBJECTID";
                this.columnSscID.Caption = "SURFSCID";
                this.columnNGToEx.Caption = "NGTO_EX";
                this.columnNGToEx.MaxLength = 6;
                this.columnNGToFB.Caption = "NGTO_FB";
                this.columnNGToFB.MaxLength = 6;
                this.columnAltTraceNode.Caption = "ALT_TRACENODE";
                this.columnAltTraceNode.MaxLength = 6;
                this.columnSlope.Caption = "SLOPE";
                this.columnFlowLength.Caption = "FLOWLENGTHFT";
                this.columnDh.Caption = "DH";
                this.columnPerN.Caption = "PER_N";
                this.columnImpN.Caption = "IMP_N";
                this.columnImpStorage.Caption = "IMP_STO";
                this.columnPerStorage.Caption = "PER_STO";
                this.columnSuction.Caption = "SUCT";
                this.columnHydCon.Caption = "HYDCON";
                this.columnSmdMax.Caption = "SMDMAX";
                this.columnIsSumpedEx.Caption = "ISSUMPED_EX";
                this.columnIsSumpedFB.Caption = "ISSUMPED_FB";
                this.columnTotalGrossAcres.Caption = "TOTALGROSSACRES";
                this.columnPaveAcres.Caption = "PAVEACRES";
                this.columnPaveTreeAcres.Caption = "PAVETREEACRES";
                this.columnUpdateAtts.Caption = "UPDATEATTS";
                this.columnSWAcresEx.Caption = "SWACRESEX";
                this.columnSWAcresOther.Caption = "SWACRESEXOTHER";
                this.columnSWFactor.Caption = "SWFACTOR";
                this.columnSWAcresFB.Caption = "SWACRESFB";
                this.columnSWAcresFBOther.Caption = "SWACRESFBOTHER";
                this.columnRowAcresFB.Caption = "ROWACRESFB";
                this.columnRowAcresFBOther.Caption = "ROWACRESFBOTHER";
                this.columnSscSource.Caption = "SSCSOURCE";
                this.columnSscSource.MaxLength = 30;
                this.columnSscGDate.Caption = "SSCGDATE";
                this.columnSscGDate.MaxLength = 17;
                this.columnShape.Caption = "SHAPE";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstSscRow NewMstSscRow() {
                return ((MstSscRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MstSscRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MstSscRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MstSscRowChanged != null)) {
                    this.MstSscRowChanged(this, new MstSscRowChangeEvent(((MstSscRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MstSscRowChanging != null)) {
                    this.MstSscRowChanging(this, new MstSscRowChangeEvent(((MstSscRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MstSscRowDeleted != null)) {
                    this.MstSscRowDeleted(this, new MstSscRowChangeEvent(((MstSscRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MstSscRowDeleting != null)) {
                    this.MstSscRowDeleting(this, new MstSscRowChangeEvent(((MstSscRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMstSscRow(MstSscRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SAMasterDataSet ds = new SAMasterDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MstSscDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MstZoningToGenDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnZone;
            
            private global::System.Data.DataColumn columnGenZone;
            
            private global::System.Data.DataColumn columnImpFractDM;
            
            private global::System.Data.DataColumn columnObjectID;
            
            private global::System.Data.DataColumn columnSWinModel;
            
            private global::System.Data.DataColumn columnISBESzone;
            
            private global::System.Data.DataColumn columnSanBFPerNetAcre;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstZoningToGenDataTable() {
                this.TableName = "MstZoningToGen";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MstZoningToGenDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MstZoningToGenDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZoneColumn {
                get {
                    return this.columnZone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenZoneColumn {
                get {
                    return this.columnGenZone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImpFractDMColumn {
                get {
                    return this.columnImpFractDM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SWinModelColumn {
                get {
                    return this.columnSWinModel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ISBESzoneColumn {
                get {
                    return this.columnISBESzone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SanBFPerNetAcreColumn {
                get {
                    return this.columnSanBFPerNetAcre;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstZoningToGenRow this[int index] {
                get {
                    return ((MstZoningToGenRow)(this.Rows[index]));
                }
            }
            
            public event MstZoningToGenRowChangeEventHandler MstZoningToGenRowChanging;
            
            public event MstZoningToGenRowChangeEventHandler MstZoningToGenRowChanged;
            
            public event MstZoningToGenRowChangeEventHandler MstZoningToGenRowDeleting;
            
            public event MstZoningToGenRowChangeEventHandler MstZoningToGenRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMstZoningToGenRow(MstZoningToGenRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstZoningToGenRow AddMstZoningToGenRow(string Zone, string GenZone, decimal ImpFractDM, int ObjectID, short SWinModel, short ISBESzone, decimal SanBFPerNetAcre) {
                MstZoningToGenRow rowMstZoningToGenRow = ((MstZoningToGenRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Zone,
                        GenZone,
                        ImpFractDM,
                        ObjectID,
                        SWinModel,
                        ISBESzone,
                        SanBFPerNetAcre};
                rowMstZoningToGenRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMstZoningToGenRow);
                return rowMstZoningToGenRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstZoningToGenRow FindByZone(string Zone) {
                return ((MstZoningToGenRow)(this.Rows.Find(new object[] {
                            Zone})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MstZoningToGenDataTable cln = ((MstZoningToGenDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MstZoningToGenDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnZone = base.Columns["Zone"];
                this.columnGenZone = base.Columns["GenZone"];
                this.columnImpFractDM = base.Columns["ImpFractDM"];
                this.columnObjectID = base.Columns["ObjectID"];
                this.columnSWinModel = base.Columns["SWinModel"];
                this.columnISBESzone = base.Columns["ISBESzone"];
                this.columnSanBFPerNetAcre = base.Columns["SanBFPerNetAcre"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnZone = new global::System.Data.DataColumn("Zone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZone);
                this.columnGenZone = new global::System.Data.DataColumn("GenZone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenZone);
                this.columnImpFractDM = new global::System.Data.DataColumn("ImpFractDM", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImpFractDM);
                this.columnObjectID = new global::System.Data.DataColumn("ObjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectID);
                this.columnSWinModel = new global::System.Data.DataColumn("SWinModel", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSWinModel);
                this.columnISBESzone = new global::System.Data.DataColumn("ISBESzone", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnISBESzone);
                this.columnSanBFPerNetAcre = new global::System.Data.DataColumn("SanBFPerNetAcre", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSanBFPerNetAcre);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnZone}, true));
                this.columnZone.AllowDBNull = false;
                this.columnZone.Unique = true;
                this.columnZone.MaxLength = 14;
                this.columnGenZone.MaxLength = 3;
                this.columnObjectID.AllowDBNull = false;
                this.columnObjectID.Caption = "OBJECTID";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstZoningToGenRow NewMstZoningToGenRow() {
                return ((MstZoningToGenRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MstZoningToGenRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MstZoningToGenRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MstZoningToGenRowChanged != null)) {
                    this.MstZoningToGenRowChanged(this, new MstZoningToGenRowChangeEvent(((MstZoningToGenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MstZoningToGenRowChanging != null)) {
                    this.MstZoningToGenRowChanging(this, new MstZoningToGenRowChangeEvent(((MstZoningToGenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MstZoningToGenRowDeleted != null)) {
                    this.MstZoningToGenRowDeleted(this, new MstZoningToGenRowChangeEvent(((MstZoningToGenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MstZoningToGenRowDeleting != null)) {
                    this.MstZoningToGenRowDeleting(this, new MstZoningToGenRowChangeEvent(((MstZoningToGenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMstZoningToGenRow(MstZoningToGenRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SAMasterDataSet ds = new SAMasterDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MstZoningToGenDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MstDscRow : global::System.Data.DataRow {
            
            private MstDscDataTable tableMstDsc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MstDscRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMstDsc = ((MstDscDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ObjectID {
                get {
                    return ((int)(this[this.tableMstDsc.ObjectIDColumn]));
                }
                set {
                    this[this.tableMstDsc.ObjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DivideID {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.DivideIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DivideID\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.DivideIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DscID {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.DscIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DscID\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.DscIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DiscoSiteID {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.DiscoSiteIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DiscoSiteID\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.DiscoSiteIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiscoClass {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.DiscoClassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DiscoClass\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.DiscoClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToMLinkSan {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.ToMLinkSanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToMLinkSan\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.ToMLinkSanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToMLinkStorm {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.ToMLinkStormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToMLinkStorm\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.ToMLinkStormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PipeFlowTypeSan {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.PipeFlowTypeSanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeFlowTypeSan\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.PipeFlowTypeSanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PipeFlowTypeStorm {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.PipeFlowTypeStormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeFlowTypeStorm\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.PipeFlowTypeStormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SanSwrCrown {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.SanSwrCrownColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SanSwrCrown\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.SanSwrCrownColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Frac2SwrBeg {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.Frac2SwrBegColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Frac2SwrBeg\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.Frac2SwrBegColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FloodRefElev {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.FloodRefElevColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FloodRefElev\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.FloodRefElevColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short FalseBFRisk {
                get {
                    try {
                        return ((short)(this[this.tableMstDsc.FalseBFRiskColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FalseBFRisk\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.FalseBFRiskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RNo {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.RNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RNo\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.RNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Owner1 {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.Owner1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Owner1\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.Owner1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Owner2 {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.Owner2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Owner2\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.Owner2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Owner3 {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.Owner3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Owner3\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.Owner3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerAddr {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.OwnerAddrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerAddr\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.OwnerAddrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerCity {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.OwnerCityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerCity\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.OwnerCityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerState {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.OwnerStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerState\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.OwnerStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerZip {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.OwnerZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerZip\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.OwnerZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SiteAddr {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.SiteAddrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteAddr\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.SiteAddrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SiteCity {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.SiteCityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteCity\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.SiteCityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SiteState {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.SiteStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteState\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.SiteStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SiteZip {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.SiteZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteZip\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.SiteZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FloodRefElev2 {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.FloodRefElev2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FloodRefElev2\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.FloodRefElev2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IsVacant {
                get {
                    try {
                        return ((short)(this[this.tableMstDsc.IsVacantColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsVacant\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.IsVacantColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZoneEx {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.ZoneExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZoneEx\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.ZoneExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZoneCP {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.ZoneCPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZoneCP\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.ZoneCPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GenEx {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.GenExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GenEx\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.GenExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GenCP {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.GenCPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GenCP\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.GenCPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PZSqFt {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.PZSqFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PZSqFt\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.PZSqFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ImpFractEx {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.ImpFractExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImpFractEx\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.ImpFractExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ImpFractCP {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.ImpFractCPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImpFractCP\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.ImpFractCPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ImpFractFB {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.ImpFractFBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImpFractFB\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.ImpFractFBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AreaFt {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.AreaFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AreaFt\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.AreaFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RfAreaFtEx {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.RfAreaFtExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RfAreaFtEx\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.RfAreaFtExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RfAreaFtFB {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.RfAreaFtFBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RfAreaFtFB\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.RfAreaFtFBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PkAreaFtEx {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.PkAreaFtExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PkAreaFtEx\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.PkAreaFtExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PkAreaFtFB {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.PkAreaFtFBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PkAreaFtFB\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.PkAreaFtFBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BaseflowExCfs {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.BaseflowExCfsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseflowExCfs\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.BaseflowExCfsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BaseflowFBCfs {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.BaseflowFBCfsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseflowFBCfs\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.BaseflowFBCfsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BaseflowDMCfs {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.BaseflowDMCfsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseflowDMCfs\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.BaseflowDMCfsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GrowthState {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.GrowthStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrowthState\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.GrowthStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IncIA4FB {
                get {
                    try {
                        return ((short)(this[this.tableMstDsc.IncIA4FBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IncIA4FB\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.IncIA4FBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GisBasin {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.GisBasinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GisBasin\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.GisBasinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IcFtRoofEx {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.IcFtRoofExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IcFtRoofEx\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.IcFtRoofExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IcFtRoofFB {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.IcFtRoofFBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IcFtRoofFB\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.IcFtRoofFBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IcFtParkEx {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.IcFtParkExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IcFtParkEx\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.IcFtParkExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IcFtParkFB {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.IcFtParkFBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IcFtParkFB\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.IcFtParkFBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double EicFtRoofEx {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.EicFtRoofExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EicFtRoofEx\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.EicFtRoofExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double EicFtParkEx {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.EicFtParkExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EicFtParkEx\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.EicFtParkExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double EicFtRoofFB {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.EicFtRoofFBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EicFtRoofFB\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.EicFtRoofFBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double EicFtParkFB {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.EicFtParkFBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EicFtParkFB\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.EicFtParkFBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sewerable {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.SewerableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sewerable\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.SewerableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Shape {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.ShapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Shape\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.ShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstZoningToGenRow MstZoningToGenRow {
                get {
                    return ((MstZoningToGenRow)(this.GetParentRow(this.Table.ParentRelations["MstDsc_MstZoningToGen"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MstDsc_MstZoningToGen"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableMstDsc.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableMstDsc.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDivideIDNull() {
                return this.IsNull(this.tableMstDsc.DivideIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDivideIDNull() {
                this[this.tableMstDsc.DivideIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDscIDNull() {
                return this.IsNull(this.tableMstDsc.DscIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDscIDNull() {
                this[this.tableMstDsc.DscIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiscoSiteIDNull() {
                return this.IsNull(this.tableMstDsc.DiscoSiteIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiscoSiteIDNull() {
                this[this.tableMstDsc.DiscoSiteIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiscoClassNull() {
                return this.IsNull(this.tableMstDsc.DiscoClassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiscoClassNull() {
                this[this.tableMstDsc.DiscoClassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToMLinkSanNull() {
                return this.IsNull(this.tableMstDsc.ToMLinkSanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToMLinkSanNull() {
                this[this.tableMstDsc.ToMLinkSanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToMLinkStormNull() {
                return this.IsNull(this.tableMstDsc.ToMLinkStormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToMLinkStormNull() {
                this[this.tableMstDsc.ToMLinkStormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeFlowTypeSanNull() {
                return this.IsNull(this.tableMstDsc.PipeFlowTypeSanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeFlowTypeSanNull() {
                this[this.tableMstDsc.PipeFlowTypeSanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeFlowTypeStormNull() {
                return this.IsNull(this.tableMstDsc.PipeFlowTypeStormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeFlowTypeStormNull() {
                this[this.tableMstDsc.PipeFlowTypeStormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSanSwrCrownNull() {
                return this.IsNull(this.tableMstDsc.SanSwrCrownColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSanSwrCrownNull() {
                this[this.tableMstDsc.SanSwrCrownColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrac2SwrBegNull() {
                return this.IsNull(this.tableMstDsc.Frac2SwrBegColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrac2SwrBegNull() {
                this[this.tableMstDsc.Frac2SwrBegColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFloodRefElevNull() {
                return this.IsNull(this.tableMstDsc.FloodRefElevColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFloodRefElevNull() {
                this[this.tableMstDsc.FloodRefElevColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFalseBFRiskNull() {
                return this.IsNull(this.tableMstDsc.FalseBFRiskColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFalseBFRiskNull() {
                this[this.tableMstDsc.FalseBFRiskColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRNoNull() {
                return this.IsNull(this.tableMstDsc.RNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRNoNull() {
                this[this.tableMstDsc.RNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwner1Null() {
                return this.IsNull(this.tableMstDsc.Owner1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwner1Null() {
                this[this.tableMstDsc.Owner1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwner2Null() {
                return this.IsNull(this.tableMstDsc.Owner2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwner2Null() {
                this[this.tableMstDsc.Owner2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwner3Null() {
                return this.IsNull(this.tableMstDsc.Owner3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwner3Null() {
                this[this.tableMstDsc.Owner3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerAddrNull() {
                return this.IsNull(this.tableMstDsc.OwnerAddrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerAddrNull() {
                this[this.tableMstDsc.OwnerAddrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerCityNull() {
                return this.IsNull(this.tableMstDsc.OwnerCityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerCityNull() {
                this[this.tableMstDsc.OwnerCityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerStateNull() {
                return this.IsNull(this.tableMstDsc.OwnerStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerStateNull() {
                this[this.tableMstDsc.OwnerStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerZipNull() {
                return this.IsNull(this.tableMstDsc.OwnerZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerZipNull() {
                this[this.tableMstDsc.OwnerZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteAddrNull() {
                return this.IsNull(this.tableMstDsc.SiteAddrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteAddrNull() {
                this[this.tableMstDsc.SiteAddrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteCityNull() {
                return this.IsNull(this.tableMstDsc.SiteCityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteCityNull() {
                this[this.tableMstDsc.SiteCityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteStateNull() {
                return this.IsNull(this.tableMstDsc.SiteStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteStateNull() {
                this[this.tableMstDsc.SiteStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteZipNull() {
                return this.IsNull(this.tableMstDsc.SiteZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteZipNull() {
                this[this.tableMstDsc.SiteZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFloodRefElev2Null() {
                return this.IsNull(this.tableMstDsc.FloodRefElev2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFloodRefElev2Null() {
                this[this.tableMstDsc.FloodRefElev2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsVacantNull() {
                return this.IsNull(this.tableMstDsc.IsVacantColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsVacantNull() {
                this[this.tableMstDsc.IsVacantColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZoneExNull() {
                return this.IsNull(this.tableMstDsc.ZoneExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZoneExNull() {
                this[this.tableMstDsc.ZoneExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZoneCPNull() {
                return this.IsNull(this.tableMstDsc.ZoneCPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZoneCPNull() {
                this[this.tableMstDsc.ZoneCPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenExNull() {
                return this.IsNull(this.tableMstDsc.GenExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenExNull() {
                this[this.tableMstDsc.GenExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenCPNull() {
                return this.IsNull(this.tableMstDsc.GenCPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenCPNull() {
                this[this.tableMstDsc.GenCPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPZSqFtNull() {
                return this.IsNull(this.tableMstDsc.PZSqFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPZSqFtNull() {
                this[this.tableMstDsc.PZSqFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImpFractExNull() {
                return this.IsNull(this.tableMstDsc.ImpFractExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImpFractExNull() {
                this[this.tableMstDsc.ImpFractExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImpFractCPNull() {
                return this.IsNull(this.tableMstDsc.ImpFractCPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImpFractCPNull() {
                this[this.tableMstDsc.ImpFractCPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImpFractFBNull() {
                return this.IsNull(this.tableMstDsc.ImpFractFBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImpFractFBNull() {
                this[this.tableMstDsc.ImpFractFBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAreaFtNull() {
                return this.IsNull(this.tableMstDsc.AreaFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAreaFtNull() {
                this[this.tableMstDsc.AreaFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRfAreaFtExNull() {
                return this.IsNull(this.tableMstDsc.RfAreaFtExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRfAreaFtExNull() {
                this[this.tableMstDsc.RfAreaFtExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRfAreaFtFBNull() {
                return this.IsNull(this.tableMstDsc.RfAreaFtFBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRfAreaFtFBNull() {
                this[this.tableMstDsc.RfAreaFtFBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPkAreaFtExNull() {
                return this.IsNull(this.tableMstDsc.PkAreaFtExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPkAreaFtExNull() {
                this[this.tableMstDsc.PkAreaFtExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPkAreaFtFBNull() {
                return this.IsNull(this.tableMstDsc.PkAreaFtFBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPkAreaFtFBNull() {
                this[this.tableMstDsc.PkAreaFtFBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseflowExCfsNull() {
                return this.IsNull(this.tableMstDsc.BaseflowExCfsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseflowExCfsNull() {
                this[this.tableMstDsc.BaseflowExCfsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseflowFBCfsNull() {
                return this.IsNull(this.tableMstDsc.BaseflowFBCfsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseflowFBCfsNull() {
                this[this.tableMstDsc.BaseflowFBCfsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseflowDMCfsNull() {
                return this.IsNull(this.tableMstDsc.BaseflowDMCfsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseflowDMCfsNull() {
                this[this.tableMstDsc.BaseflowDMCfsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrowthStateNull() {
                return this.IsNull(this.tableMstDsc.GrowthStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrowthStateNull() {
                this[this.tableMstDsc.GrowthStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncIA4FBNull() {
                return this.IsNull(this.tableMstDsc.IncIA4FBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncIA4FBNull() {
                this[this.tableMstDsc.IncIA4FBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGisBasinNull() {
                return this.IsNull(this.tableMstDsc.GisBasinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGisBasinNull() {
                this[this.tableMstDsc.GisBasinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIcFtRoofExNull() {
                return this.IsNull(this.tableMstDsc.IcFtRoofExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIcFtRoofExNull() {
                this[this.tableMstDsc.IcFtRoofExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIcFtRoofFBNull() {
                return this.IsNull(this.tableMstDsc.IcFtRoofFBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIcFtRoofFBNull() {
                this[this.tableMstDsc.IcFtRoofFBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIcFtParkExNull() {
                return this.IsNull(this.tableMstDsc.IcFtParkExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIcFtParkExNull() {
                this[this.tableMstDsc.IcFtParkExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIcFtParkFBNull() {
                return this.IsNull(this.tableMstDsc.IcFtParkFBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIcFtParkFBNull() {
                this[this.tableMstDsc.IcFtParkFBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEicFtRoofExNull() {
                return this.IsNull(this.tableMstDsc.EicFtRoofExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEicFtRoofExNull() {
                this[this.tableMstDsc.EicFtRoofExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEicFtParkExNull() {
                return this.IsNull(this.tableMstDsc.EicFtParkExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEicFtParkExNull() {
                this[this.tableMstDsc.EicFtParkExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEicFtRoofFBNull() {
                return this.IsNull(this.tableMstDsc.EicFtRoofFBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEicFtRoofFBNull() {
                this[this.tableMstDsc.EicFtRoofFBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEicFtParkFBNull() {
                return this.IsNull(this.tableMstDsc.EicFtParkFBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEicFtParkFBNull() {
                this[this.tableMstDsc.EicFtParkFBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSewerableNull() {
                return this.IsNull(this.tableMstDsc.SewerableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSewerableNull() {
                this[this.tableMstDsc.SewerableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShapeNull() {
                return this.IsNull(this.tableMstDsc.ShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShapeNull() {
                this[this.tableMstDsc.ShapeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MstNodesRow : global::System.Data.DataRow {
            
            private MstNodesDataTable tableMstNodes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MstNodesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMstNodes = ((MstNodesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ObjectID {
                get {
                    return ((int)(this[this.tableMstNodes.ObjectIDColumn]));
                }
                set {
                    this[this.tableMstNodes.ObjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Node {
                get {
                    try {
                        return ((string)(this[this.tableMstNodes.NodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Node\' in table \'MstNodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstNodes.NodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal XCoord {
                get {
                    try {
                        return ((decimal)(this[this.tableMstNodes.XCoordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'XCoord\' in table \'MstNodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstNodes.XCoordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal YCoord {
                get {
                    try {
                        return ((decimal)(this[this.tableMstNodes.YCoordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YCoord\' in table \'MstNodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstNodes.YCoordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NodeType {
                get {
                    try {
                        return ((string)(this[this.tableMstNodes.NodeTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NodeType\' in table \'MstNodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstNodes.NodeTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double GrndElev {
                get {
                    try {
                        return ((double)(this[this.tableMstNodes.GrndElevColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrndElev\' in table \'MstNodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstNodes.GrndElevColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HasSpecNode {
                get {
                    try {
                        return ((string)(this[this.tableMstNodes.HasSpecNodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HasSpecNode\' in table \'MstNodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstNodes.HasSpecNodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HasSpecLink {
                get {
                    try {
                        return ((string)(this[this.tableMstNodes.HasSpecLinkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HasSpecLink\' in table \'MstNodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstNodes.HasSpecLinkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GageID {
                get {
                    try {
                        return ((string)(this[this.tableMstNodes.GageIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GageID\' in table \'MstNodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstNodes.GageIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Shape {
                get {
                    try {
                        return ((int)(this[this.tableMstNodes.ShapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Shape\' in table \'MstNodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstNodes.ShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNodeNull() {
                return this.IsNull(this.tableMstNodes.NodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNodeNull() {
                this[this.tableMstNodes.NodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXCoordNull() {
                return this.IsNull(this.tableMstNodes.XCoordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXCoordNull() {
                this[this.tableMstNodes.XCoordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYCoordNull() {
                return this.IsNull(this.tableMstNodes.YCoordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYCoordNull() {
                this[this.tableMstNodes.YCoordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNodeTypeNull() {
                return this.IsNull(this.tableMstNodes.NodeTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNodeTypeNull() {
                this[this.tableMstNodes.NodeTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrndElevNull() {
                return this.IsNull(this.tableMstNodes.GrndElevColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrndElevNull() {
                this[this.tableMstNodes.GrndElevColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasSpecNodeNull() {
                return this.IsNull(this.tableMstNodes.HasSpecNodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasSpecNodeNull() {
                this[this.tableMstNodes.HasSpecNodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasSpecLinkNull() {
                return this.IsNull(this.tableMstNodes.HasSpecLinkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasSpecLinkNull() {
                this[this.tableMstNodes.HasSpecLinkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGageIDNull() {
                return this.IsNull(this.tableMstNodes.GageIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGageIDNull() {
                this[this.tableMstNodes.GageIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShapeNull() {
                return this.IsNull(this.tableMstNodes.ShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShapeNull() {
                this[this.tableMstNodes.ShapeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MstLinksRow : global::System.Data.DataRow {
            
            private MstLinksDataTable tableMstLinks;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MstLinksRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMstLinks = ((MstLinksDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ObjectID {
                get {
                    return ((int)(this[this.tableMstLinks.ObjectIDColumn]));
                }
                set {
                    this[this.tableMstLinks.ObjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MLinkID {
                get {
                    try {
                        return ((int)(this[this.tableMstLinks.MLinkIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MLinkID\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.MLinkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CompKey {
                get {
                    try {
                        return ((int)(this[this.tableMstLinks.CompKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompKey\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.CompKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UsNode {
                get {
                    try {
                        return ((string)(this[this.tableMstLinks.UsNodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UsNode\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.UsNodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DsNode {
                get {
                    try {
                        return ((string)(this[this.tableMstLinks.DsNodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DsNode\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.DsNodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PipeShape {
                get {
                    try {
                        return ((string)(this[this.tableMstLinks.PipeShapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeShape\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.PipeShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkType {
                get {
                    try {
                        return ((string)(this[this.tableMstLinks.LinkTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinkType\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.LinkTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PipeFlowType {
                get {
                    try {
                        return ((string)(this[this.tableMstLinks.PipeFlowTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeFlowType\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.PipeFlowTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Length {
                get {
                    try {
                        return ((double)(this[this.tableMstLinks.LengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Length\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.LengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DiamWidth {
                get {
                    try {
                        return ((double)(this[this.tableMstLinks.DiamWidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DiamWidth\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.DiamWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Height {
                get {
                    try {
                        return ((double)(this[this.tableMstLinks.HeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Height\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.HeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Material {
                get {
                    try {
                        return ((string)(this[this.tableMstLinks.MaterialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Material\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.MaterialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UpsDpth {
                get {
                    try {
                        return ((double)(this[this.tableMstLinks.UpsDpthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpsDpth\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.UpsDpthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DwnDpth {
                get {
                    try {
                        return ((double)(this[this.tableMstLinks.DwnDpthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DwnDpth\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.DwnDpthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UsIE {
                get {
                    try {
                        return ((double)(this[this.tableMstLinks.UsIEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UsIE\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.UsIEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DsIE {
                get {
                    try {
                        return ((double)(this[this.tableMstLinks.DsIEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DsIE\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.DsIEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AsBuilt {
                get {
                    try {
                        return ((string)(this[this.tableMstLinks.AsBuiltColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AsBuilt\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.AsBuiltColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InstDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMstLinks.InstDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstDate\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.InstDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FromX {
                get {
                    try {
                        return ((double)(this[this.tableMstLinks.FromXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromX\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.FromXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FromY {
                get {
                    try {
                        return ((double)(this[this.tableMstLinks.FromYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromY\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.FromYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ToX {
                get {
                    try {
                        return ((double)(this[this.tableMstLinks.ToXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToX\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.ToXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ToY {
                get {
                    try {
                        return ((double)(this[this.tableMstLinks.ToYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToY\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.ToYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Roughness {
                get {
                    try {
                        return ((double)(this[this.tableMstLinks.RoughnessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Roughness\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.RoughnessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TimeFrame {
                get {
                    try {
                        return ((string)(this[this.tableMstLinks.TimeFrameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeFrame\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.TimeFrameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DataFlagSynth {
                get {
                    try {
                        return ((int)(this[this.tableMstLinks.DataFlagSynthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataFlagSynth\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.DataFlagSynthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataQual {
                get {
                    try {
                        return ((string)(this[this.tableMstLinks.DataQualColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataQual\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.DataQualColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HServStat {
                get {
                    try {
                        return ((string)(this[this.tableMstLinks.HServStatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HServStat\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.HServStatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ValidFromDate {
                get {
                    try {
                        return ((string)(this[this.tableMstLinks.ValidFromDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValidFromDate\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.ValidFromDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ValidToDate {
                get {
                    try {
                        return ((string)(this[this.tableMstLinks.ValidToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValidToDate\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.ValidToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CadKey {
                get {
                    try {
                        return ((string)(this[this.tableMstLinks.CadKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CadKey\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.CadKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuditNodeID {
                get {
                    try {
                        return ((string)(this[this.tableMstLinks.AuditNodeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AuditNodeID\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.AuditNodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuditDups {
                get {
                    try {
                        return ((string)(this[this.tableMstLinks.AuditDupsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AuditDups\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.AuditDupsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuditSpatial {
                get {
                    try {
                        return ((string)(this[this.tableMstLinks.AuditSpatialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AuditSpatial\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.AuditSpatialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short AuditOK2Go {
                get {
                    try {
                        return ((short)(this[this.tableMstLinks.AuditOK2GoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AuditOK2Go\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.AuditOK2GoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuditProcTimeStamp {
                get {
                    try {
                        return ((string)(this[this.tableMstLinks.AuditProcTimeStampColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AuditProcTimeStamp\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.AuditProcTimeStampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double QDes {
                get {
                    try {
                        return ((double)(this[this.tableMstLinks.QDesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QDes\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.QDesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Shape {
                get {
                    try {
                        return ((int)(this[this.tableMstLinks.ShapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Shape\' in table \'MstLinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstLinks.ShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMLinkIDNull() {
                return this.IsNull(this.tableMstLinks.MLinkIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMLinkIDNull() {
                this[this.tableMstLinks.MLinkIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompKeyNull() {
                return this.IsNull(this.tableMstLinks.CompKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompKeyNull() {
                this[this.tableMstLinks.CompKeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsNodeNull() {
                return this.IsNull(this.tableMstLinks.UsNodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsNodeNull() {
                this[this.tableMstLinks.UsNodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDsNodeNull() {
                return this.IsNull(this.tableMstLinks.DsNodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDsNodeNull() {
                this[this.tableMstLinks.DsNodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeShapeNull() {
                return this.IsNull(this.tableMstLinks.PipeShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeShapeNull() {
                this[this.tableMstLinks.PipeShapeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinkTypeNull() {
                return this.IsNull(this.tableMstLinks.LinkTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinkTypeNull() {
                this[this.tableMstLinks.LinkTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeFlowTypeNull() {
                return this.IsNull(this.tableMstLinks.PipeFlowTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeFlowTypeNull() {
                this[this.tableMstLinks.PipeFlowTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthNull() {
                return this.IsNull(this.tableMstLinks.LengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthNull() {
                this[this.tableMstLinks.LengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiamWidthNull() {
                return this.IsNull(this.tableMstLinks.DiamWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiamWidthNull() {
                this[this.tableMstLinks.DiamWidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeightNull() {
                return this.IsNull(this.tableMstLinks.HeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeightNull() {
                this[this.tableMstLinks.HeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialNull() {
                return this.IsNull(this.tableMstLinks.MaterialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialNull() {
                this[this.tableMstLinks.MaterialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpsDpthNull() {
                return this.IsNull(this.tableMstLinks.UpsDpthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpsDpthNull() {
                this[this.tableMstLinks.UpsDpthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDwnDpthNull() {
                return this.IsNull(this.tableMstLinks.DwnDpthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDwnDpthNull() {
                this[this.tableMstLinks.DwnDpthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsIENull() {
                return this.IsNull(this.tableMstLinks.UsIEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsIENull() {
                this[this.tableMstLinks.UsIEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDsIENull() {
                return this.IsNull(this.tableMstLinks.DsIEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDsIENull() {
                this[this.tableMstLinks.DsIEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAsBuiltNull() {
                return this.IsNull(this.tableMstLinks.AsBuiltColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAsBuiltNull() {
                this[this.tableMstLinks.AsBuiltColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstDateNull() {
                return this.IsNull(this.tableMstLinks.InstDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstDateNull() {
                this[this.tableMstLinks.InstDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromXNull() {
                return this.IsNull(this.tableMstLinks.FromXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromXNull() {
                this[this.tableMstLinks.FromXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromYNull() {
                return this.IsNull(this.tableMstLinks.FromYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromYNull() {
                this[this.tableMstLinks.FromYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToXNull() {
                return this.IsNull(this.tableMstLinks.ToXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToXNull() {
                this[this.tableMstLinks.ToXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToYNull() {
                return this.IsNull(this.tableMstLinks.ToYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToYNull() {
                this[this.tableMstLinks.ToYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoughnessNull() {
                return this.IsNull(this.tableMstLinks.RoughnessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRoughnessNull() {
                this[this.tableMstLinks.RoughnessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeFrameNull() {
                return this.IsNull(this.tableMstLinks.TimeFrameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeFrameNull() {
                this[this.tableMstLinks.TimeFrameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataFlagSynthNull() {
                return this.IsNull(this.tableMstLinks.DataFlagSynthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataFlagSynthNull() {
                this[this.tableMstLinks.DataFlagSynthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataQualNull() {
                return this.IsNull(this.tableMstLinks.DataQualColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataQualNull() {
                this[this.tableMstLinks.DataQualColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHServStatNull() {
                return this.IsNull(this.tableMstLinks.HServStatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHServStatNull() {
                this[this.tableMstLinks.HServStatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidFromDateNull() {
                return this.IsNull(this.tableMstLinks.ValidFromDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValidFromDateNull() {
                this[this.tableMstLinks.ValidFromDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidToDateNull() {
                return this.IsNull(this.tableMstLinks.ValidToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValidToDateNull() {
                this[this.tableMstLinks.ValidToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCadKeyNull() {
                return this.IsNull(this.tableMstLinks.CadKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCadKeyNull() {
                this[this.tableMstLinks.CadKeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuditNodeIDNull() {
                return this.IsNull(this.tableMstLinks.AuditNodeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuditNodeIDNull() {
                this[this.tableMstLinks.AuditNodeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuditDupsNull() {
                return this.IsNull(this.tableMstLinks.AuditDupsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuditDupsNull() {
                this[this.tableMstLinks.AuditDupsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuditSpatialNull() {
                return this.IsNull(this.tableMstLinks.AuditSpatialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuditSpatialNull() {
                this[this.tableMstLinks.AuditSpatialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuditOK2GoNull() {
                return this.IsNull(this.tableMstLinks.AuditOK2GoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuditOK2GoNull() {
                this[this.tableMstLinks.AuditOK2GoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuditProcTimeStampNull() {
                return this.IsNull(this.tableMstLinks.AuditProcTimeStampColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuditProcTimeStampNull() {
                this[this.tableMstLinks.AuditProcTimeStampColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQDesNull() {
                return this.IsNull(this.tableMstLinks.QDesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQDesNull() {
                this[this.tableMstLinks.QDesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShapeNull() {
                return this.IsNull(this.tableMstLinks.ShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShapeNull() {
                this[this.tableMstLinks.ShapeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MstSscRow : global::System.Data.DataRow {
            
            private MstSscDataTable tableMstSsc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MstSscRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMstSsc = ((MstSscDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ObjectID {
                get {
                    return ((int)(this[this.tableMstSsc.ObjectIDColumn]));
                }
                set {
                    this[this.tableMstSsc.ObjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SscID {
                get {
                    try {
                        return ((int)(this[this.tableMstSsc.SscIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SscID\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.SscIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NGToEx {
                get {
                    try {
                        return ((string)(this[this.tableMstSsc.NGToExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NGToEx\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.NGToExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NGToFB {
                get {
                    try {
                        return ((string)(this[this.tableMstSsc.NGToFBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NGToFB\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.NGToFBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AltTraceNode {
                get {
                    try {
                        return ((string)(this[this.tableMstSsc.AltTraceNodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AltTraceNode\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.AltTraceNodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Slope {
                get {
                    try {
                        return ((decimal)(this[this.tableMstSsc.SlopeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Slope\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.SlopeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FlowLength {
                get {
                    try {
                        return ((decimal)(this[this.tableMstSsc.FlowLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowLength\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.FlowLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Dh {
                get {
                    try {
                        return ((decimal)(this[this.tableMstSsc.DhColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Dh\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.DhColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PerN {
                get {
                    try {
                        return ((decimal)(this[this.tableMstSsc.PerNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PerN\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.PerNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ImpN {
                get {
                    try {
                        return ((decimal)(this[this.tableMstSsc.ImpNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImpN\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.ImpNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ImpStorage {
                get {
                    try {
                        return ((decimal)(this[this.tableMstSsc.ImpStorageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImpStorage\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.ImpStorageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PerStorage {
                get {
                    try {
                        return ((decimal)(this[this.tableMstSsc.PerStorageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PerStorage\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.PerStorageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Suction {
                get {
                    try {
                        return ((decimal)(this[this.tableMstSsc.SuctionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Suction\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.SuctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal HydCon {
                get {
                    try {
                        return ((decimal)(this[this.tableMstSsc.HydConColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HydCon\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.HydConColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SmdMax {
                get {
                    try {
                        return ((decimal)(this[this.tableMstSsc.SmdMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SmdMax\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.SmdMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IsSumpedEx {
                get {
                    try {
                        return ((short)(this[this.tableMstSsc.IsSumpedExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsSumpedEx\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.IsSumpedExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IsSumpedFB {
                get {
                    try {
                        return ((short)(this[this.tableMstSsc.IsSumpedFBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsSumpedFB\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.IsSumpedFBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalGrossAcres {
                get {
                    try {
                        return ((decimal)(this[this.tableMstSsc.TotalGrossAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalGrossAcres\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.TotalGrossAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PaveAcres {
                get {
                    try {
                        return ((decimal)(this[this.tableMstSsc.PaveAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaveAcres\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.PaveAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PaveTreeAcres {
                get {
                    try {
                        return ((decimal)(this[this.tableMstSsc.PaveTreeAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaveTreeAcres\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.PaveTreeAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short UpdateAtts {
                get {
                    try {
                        return ((short)(this[this.tableMstSsc.UpdateAttsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdateAtts\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.UpdateAttsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SWAcresEx {
                get {
                    try {
                        return ((decimal)(this[this.tableMstSsc.SWAcresExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SWAcresEx\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.SWAcresExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SWAcresOther {
                get {
                    try {
                        return ((decimal)(this[this.tableMstSsc.SWAcresOtherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SWAcresOther\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.SWAcresOtherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SWFactor {
                get {
                    try {
                        return ((decimal)(this[this.tableMstSsc.SWFactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SWFactor\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.SWFactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SWAcresFB {
                get {
                    try {
                        return ((decimal)(this[this.tableMstSsc.SWAcresFBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SWAcresFB\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.SWAcresFBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SWAcresFBOther {
                get {
                    try {
                        return ((decimal)(this[this.tableMstSsc.SWAcresFBOtherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SWAcresFBOther\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.SWAcresFBOtherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RowAcresFB {
                get {
                    try {
                        return ((decimal)(this[this.tableMstSsc.RowAcresFBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RowAcresFB\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.RowAcresFBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RowAcresFBOther {
                get {
                    try {
                        return ((decimal)(this[this.tableMstSsc.RowAcresFBOtherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RowAcresFBOther\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.RowAcresFBOtherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SscSource {
                get {
                    try {
                        return ((string)(this[this.tableMstSsc.SscSourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SscSource\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.SscSourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SscGDate {
                get {
                    try {
                        return ((string)(this[this.tableMstSsc.SscGDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SscGDate\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.SscGDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Shape {
                get {
                    try {
                        return ((int)(this[this.tableMstSsc.ShapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Shape\' in table \'MstSsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstSsc.ShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSscIDNull() {
                return this.IsNull(this.tableMstSsc.SscIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSscIDNull() {
                this[this.tableMstSsc.SscIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNGToExNull() {
                return this.IsNull(this.tableMstSsc.NGToExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNGToExNull() {
                this[this.tableMstSsc.NGToExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNGToFBNull() {
                return this.IsNull(this.tableMstSsc.NGToFBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNGToFBNull() {
                this[this.tableMstSsc.NGToFBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAltTraceNodeNull() {
                return this.IsNull(this.tableMstSsc.AltTraceNodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAltTraceNodeNull() {
                this[this.tableMstSsc.AltTraceNodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSlopeNull() {
                return this.IsNull(this.tableMstSsc.SlopeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSlopeNull() {
                this[this.tableMstSsc.SlopeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowLengthNull() {
                return this.IsNull(this.tableMstSsc.FlowLengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowLengthNull() {
                this[this.tableMstSsc.FlowLengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDhNull() {
                return this.IsNull(this.tableMstSsc.DhColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDhNull() {
                this[this.tableMstSsc.DhColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPerNNull() {
                return this.IsNull(this.tableMstSsc.PerNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPerNNull() {
                this[this.tableMstSsc.PerNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImpNNull() {
                return this.IsNull(this.tableMstSsc.ImpNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImpNNull() {
                this[this.tableMstSsc.ImpNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImpStorageNull() {
                return this.IsNull(this.tableMstSsc.ImpStorageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImpStorageNull() {
                this[this.tableMstSsc.ImpStorageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPerStorageNull() {
                return this.IsNull(this.tableMstSsc.PerStorageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPerStorageNull() {
                this[this.tableMstSsc.PerStorageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSuctionNull() {
                return this.IsNull(this.tableMstSsc.SuctionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSuctionNull() {
                this[this.tableMstSsc.SuctionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHydConNull() {
                return this.IsNull(this.tableMstSsc.HydConColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHydConNull() {
                this[this.tableMstSsc.HydConColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSmdMaxNull() {
                return this.IsNull(this.tableMstSsc.SmdMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSmdMaxNull() {
                this[this.tableMstSsc.SmdMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsSumpedExNull() {
                return this.IsNull(this.tableMstSsc.IsSumpedExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsSumpedExNull() {
                this[this.tableMstSsc.IsSumpedExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsSumpedFBNull() {
                return this.IsNull(this.tableMstSsc.IsSumpedFBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsSumpedFBNull() {
                this[this.tableMstSsc.IsSumpedFBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalGrossAcresNull() {
                return this.IsNull(this.tableMstSsc.TotalGrossAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalGrossAcresNull() {
                this[this.tableMstSsc.TotalGrossAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaveAcresNull() {
                return this.IsNull(this.tableMstSsc.PaveAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaveAcresNull() {
                this[this.tableMstSsc.PaveAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaveTreeAcresNull() {
                return this.IsNull(this.tableMstSsc.PaveTreeAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaveTreeAcresNull() {
                this[this.tableMstSsc.PaveTreeAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdateAttsNull() {
                return this.IsNull(this.tableMstSsc.UpdateAttsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdateAttsNull() {
                this[this.tableMstSsc.UpdateAttsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSWAcresExNull() {
                return this.IsNull(this.tableMstSsc.SWAcresExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSWAcresExNull() {
                this[this.tableMstSsc.SWAcresExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSWAcresOtherNull() {
                return this.IsNull(this.tableMstSsc.SWAcresOtherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSWAcresOtherNull() {
                this[this.tableMstSsc.SWAcresOtherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSWFactorNull() {
                return this.IsNull(this.tableMstSsc.SWFactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSWFactorNull() {
                this[this.tableMstSsc.SWFactorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSWAcresFBNull() {
                return this.IsNull(this.tableMstSsc.SWAcresFBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSWAcresFBNull() {
                this[this.tableMstSsc.SWAcresFBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSWAcresFBOtherNull() {
                return this.IsNull(this.tableMstSsc.SWAcresFBOtherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSWAcresFBOtherNull() {
                this[this.tableMstSsc.SWAcresFBOtherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowAcresFBNull() {
                return this.IsNull(this.tableMstSsc.RowAcresFBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowAcresFBNull() {
                this[this.tableMstSsc.RowAcresFBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowAcresFBOtherNull() {
                return this.IsNull(this.tableMstSsc.RowAcresFBOtherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowAcresFBOtherNull() {
                this[this.tableMstSsc.RowAcresFBOtherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSscSourceNull() {
                return this.IsNull(this.tableMstSsc.SscSourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSscSourceNull() {
                this[this.tableMstSsc.SscSourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSscGDateNull() {
                return this.IsNull(this.tableMstSsc.SscGDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSscGDateNull() {
                this[this.tableMstSsc.SscGDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShapeNull() {
                return this.IsNull(this.tableMstSsc.ShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShapeNull() {
                this[this.tableMstSsc.ShapeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MstZoningToGenRow : global::System.Data.DataRow {
            
            private MstZoningToGenDataTable tableMstZoningToGen;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MstZoningToGenRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMstZoningToGen = ((MstZoningToGenDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zone {
                get {
                    return ((string)(this[this.tableMstZoningToGen.ZoneColumn]));
                }
                set {
                    this[this.tableMstZoningToGen.ZoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GenZone {
                get {
                    try {
                        return ((string)(this[this.tableMstZoningToGen.GenZoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GenZone\' in table \'MstZoningToGen\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstZoningToGen.GenZoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ImpFractDM {
                get {
                    try {
                        return ((decimal)(this[this.tableMstZoningToGen.ImpFractDMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImpFractDM\' in table \'MstZoningToGen\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstZoningToGen.ImpFractDMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ObjectID {
                get {
                    return ((int)(this[this.tableMstZoningToGen.ObjectIDColumn]));
                }
                set {
                    this[this.tableMstZoningToGen.ObjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SWinModel {
                get {
                    try {
                        return ((short)(this[this.tableMstZoningToGen.SWinModelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SWinModel\' in table \'MstZoningToGen\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstZoningToGen.SWinModelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ISBESzone {
                get {
                    try {
                        return ((short)(this[this.tableMstZoningToGen.ISBESzoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ISBESzone\' in table \'MstZoningToGen\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstZoningToGen.ISBESzoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SanBFPerNetAcre {
                get {
                    try {
                        return ((decimal)(this[this.tableMstZoningToGen.SanBFPerNetAcreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SanBFPerNetAcre\' in table \'MstZoningToGen\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstZoningToGen.SanBFPerNetAcreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenZoneNull() {
                return this.IsNull(this.tableMstZoningToGen.GenZoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenZoneNull() {
                this[this.tableMstZoningToGen.GenZoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImpFractDMNull() {
                return this.IsNull(this.tableMstZoningToGen.ImpFractDMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImpFractDMNull() {
                this[this.tableMstZoningToGen.ImpFractDMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSWinModelNull() {
                return this.IsNull(this.tableMstZoningToGen.SWinModelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSWinModelNull() {
                this[this.tableMstZoningToGen.SWinModelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsISBESzoneNull() {
                return this.IsNull(this.tableMstZoningToGen.ISBESzoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetISBESzoneNull() {
                this[this.tableMstZoningToGen.ISBESzoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSanBFPerNetAcreNull() {
                return this.IsNull(this.tableMstZoningToGen.SanBFPerNetAcreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSanBFPerNetAcreNull() {
                this[this.tableMstZoningToGen.SanBFPerNetAcreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstDscRow[] GetMstDscRows() {
                if ((this.Table.ChildRelations["MstDsc_MstZoningToGen"] == null)) {
                    return new MstDscRow[0];
                }
                else {
                    return ((MstDscRow[])(base.GetChildRows(this.Table.ChildRelations["MstDsc_MstZoningToGen"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MstDscRowChangeEvent : global::System.EventArgs {
            
            private MstDscRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstDscRowChangeEvent(MstDscRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstDscRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MstNodesRowChangeEvent : global::System.EventArgs {
            
            private MstNodesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstNodesRowChangeEvent(MstNodesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstNodesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MstLinksRowChangeEvent : global::System.EventArgs {
            
            private MstLinksRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstLinksRowChangeEvent(MstLinksRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstLinksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MstSscRowChangeEvent : global::System.EventArgs {
            
            private MstSscRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstSscRowChangeEvent(MstSscRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstSscRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MstZoningToGenRowChangeEvent : global::System.EventArgs {
            
            private MstZoningToGenRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstZoningToGenRowChangeEvent(MstZoningToGenRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstZoningToGenRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace SystemsAnalysis.DataAccess.SAMasterDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MstDscTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MstDscTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MstDsc";
            tableMapping.ColumnMappings.Add("OBJECTID", "ObjectID");
            tableMapping.ColumnMappings.Add("PARCELID", "ParcelID");
            tableMapping.ColumnMappings.Add("DIVIDEID", "DivideID");
            tableMapping.ColumnMappings.Add("DSCID", "DscID");
            tableMapping.ColumnMappings.Add("DISCOSITEID", "DiscoSiteID");
            tableMapping.ColumnMappings.Add("DISCOCLASS", "DiscoClass");
            tableMapping.ColumnMappings.Add("TOMLINKSAN", "ToMLinkSan");
            tableMapping.ColumnMappings.Add("TOMLINKSTORM", "ToMLinkStorm");
            tableMapping.ColumnMappings.Add("PIPEFLOWTYPESAN", "PipeFlowTypeSan");
            tableMapping.ColumnMappings.Add("PIPEFLOWTYPESTORM", "PipeFlowTypeStorm");
            tableMapping.ColumnMappings.Add("SANSWRCROWN", "SanSwrCrown");
            tableMapping.ColumnMappings.Add("FRAC2SWRBEG", "Frac2SwrBeg");
            tableMapping.ColumnMappings.Add("FLOODREFELEV", "FloodRefElev");
            tableMapping.ColumnMappings.Add("FALSEBFRISK", "FalseBFRisk");
            tableMapping.ColumnMappings.Add("RNO", "RNo");
            tableMapping.ColumnMappings.Add("OWNER1", "Owner1");
            tableMapping.ColumnMappings.Add("OWNER2", "Owner2");
            tableMapping.ColumnMappings.Add("OWNER3", "Owner3");
            tableMapping.ColumnMappings.Add("OWNERADDR", "OwnerAddr");
            tableMapping.ColumnMappings.Add("OWNERCITY", "OwnerCity");
            tableMapping.ColumnMappings.Add("OWNERSTATE", "OwnerState");
            tableMapping.ColumnMappings.Add("OWNERZIP", "OwnerZip");
            tableMapping.ColumnMappings.Add("SITEADDR", "SiteAddr");
            tableMapping.ColumnMappings.Add("SITECITY", "SiteCity");
            tableMapping.ColumnMappings.Add("SITE_STATE", "SiteState");
            tableMapping.ColumnMappings.Add("SITEZIP", "SiteZip");
            tableMapping.ColumnMappings.Add("FLOODREFELEV_2", "FloodRefElev2");
            tableMapping.ColumnMappings.Add("ISVACANT", "IsVacant");
            tableMapping.ColumnMappings.Add("ZONEEX", "ZoneEx");
            tableMapping.ColumnMappings.Add("ZONECP", "ZoneCP");
            tableMapping.ColumnMappings.Add("GENEX", "GenEx");
            tableMapping.ColumnMappings.Add("GENCP", "GenCP");
            tableMapping.ColumnMappings.Add("PZSQFT", "PZSqFt");
            tableMapping.ColumnMappings.Add("IMPFRACTEX", "ImpFractEx");
            tableMapping.ColumnMappings.Add("IMPFRACTCP", "ImpFractCP");
            tableMapping.ColumnMappings.Add("IMPFRACTFB", "ImpFractFB");
            tableMapping.ColumnMappings.Add("AREAFT", "AreaFt");
            tableMapping.ColumnMappings.Add("RFAREAFTEX", "RfAreaFtEx");
            tableMapping.ColumnMappings.Add("RFAREAFTFB", "RfAreaFtFB");
            tableMapping.ColumnMappings.Add("PKAREAFTEX", "PkAreaFtEx");
            tableMapping.ColumnMappings.Add("PKAREAFTFB", "PkAreaFtFB");
            tableMapping.ColumnMappings.Add("BASEFLOWEXCFS", "BaseflowExCfs");
            tableMapping.ColumnMappings.Add("BASEFLOWFBCFS", "BaseflowFBCfs");
            tableMapping.ColumnMappings.Add("BASEFLOWDMCFS", "BaseflowDMCfs");
            tableMapping.ColumnMappings.Add("GROWTHSTATE", "GrowthState");
            tableMapping.ColumnMappings.Add("INCIA4FB", "IncIA4FB");
            tableMapping.ColumnMappings.Add("GISBASIN", "GisBasin");
            tableMapping.ColumnMappings.Add("ICFTROOFEX", "IcFtRoofEx");
            tableMapping.ColumnMappings.Add("ICFTROOFFB", "IcFtRoofFB");
            tableMapping.ColumnMappings.Add("ICFTPARKEX", "IcFtParkEx");
            tableMapping.ColumnMappings.Add("ICFTPARKFB", "IcFtParkFB");
            tableMapping.ColumnMappings.Add("EICFTROOFEX", "EicFtRoofEx");
            tableMapping.ColumnMappings.Add("EICFTPARKEX", "EicFtParkEx");
            tableMapping.ColumnMappings.Add("EICFTROOFFB", "EicFtRoofFB");
            tableMapping.ColumnMappings.Add("EICFTPARKFB", "EicFtParkFB");
            tableMapping.ColumnMappings.Add("SEWERABLE", "Sewerable");
            tableMapping.ColumnMappings.Add("SHAPE", "Shape");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [ModelAdmin].[MST_DSC] ([OBJECTID], [PARCELID], [DIVIDEID], [DSCID], [DISCOSITEID], [DISCOCLASS], [TOMLINKSAN], [TOMLINKSTORM], [PIPEFLOWTYPESAN], [PIPEFLOWTYPESTORM], [SANSWRCROWN], [FRAC2SWRBEG], [FLOODREFELEV], [FALSEBFRISK], [RNO], [OWNER1], [OWNER2], [OWNER3], [OWNERADDR], [OWNERCITY], [OWNERSTATE], [OWNERZIP], [SITEADDR], [SITECITY], [SITE_STATE], [SITEZIP], [FLOODREFELEV_2], [ISVACANT], [ZONEEX], [ZONECP], [GENEX], [GENCP], [PZSQFT], [IMPFRACTEX], [IMPFRACTCP], [IMPFRACTFB], [AREAFT], [RFAREAFTEX], [RFAREAFTFB], [PKAREAFTEX], [PKAREAFTFB], [BASEFLOWEXCFS], [BASEFLOWFBCFS], [BASEFLOWDMCFS], [GROWTHSTATE], [INCIA4FB], [GISBASIN], [ICFTROOFEX], [ICFTROOFFB], [ICFTPARKEX], [ICFTPARKFB], [EICFTROOFEX], [EICFTPARKEX], [EICFTROOFFB], [EICFTPARKFB], [SEWERABLE], [SHAPE]) VALUES (@OBJECTID, @PARCELID, @DIVIDEID, @DSCID, @DISCOSITEID, @DISCOCLASS, @TOMLINKSAN, @TOMLINKSTORM, @PIPEFLOWTYPESAN, @PIPEFLOWTYPESTORM, @SANSWRCROWN, @FRAC2SWRBEG, @FLOODREFELEV, @FALSEBFRISK, @RNO, @OWNER1, @OWNER2, @OWNER3, @OWNERADDR, @OWNERCITY, @OWNERSTATE, @OWNERZIP, @SITEADDR, @SITECITY, @SITE_STATE, @SITEZIP, @FLOODREFELEV_2, @ISVACANT, @ZONEEX, @ZONECP, @GENEX, @GENCP, @PZSQFT, @IMPFRACTEX, @IMPFRACTCP, @IMPFRACTFB, @AREAFT, @RFAREAFTEX, @RFAREAFTFB, @PKAREAFTEX, @PKAREAFTFB, @BASEFLOWEXCFS, @BASEFLOWFBCFS, @BASEFLOWDMCFS, @GROWTHSTATE, @INCIA4FB, @GISBASIN, @ICFTROOFEX, @ICFTROOFFB, @ICFTPARKEX, @ICFTPARKFB, @EICFTROOFEX, @EICFTPARKEX, @EICFTROOFFB, @EICFTPARKFB, @SEWERABLE, @SHAPE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OBJECTID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OBJECTID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PARCELID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PARCELID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DIVIDEID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DIVIDEID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DSCID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DSCID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DISCOSITEID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISCOSITEID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DISCOCLASS", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISCOCLASS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TOMLINKSAN", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TOMLINKSAN", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TOMLINKSTORM", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TOMLINKSTORM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PIPEFLOWTYPESAN", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PIPEFLOWTYPESAN", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PIPEFLOWTYPESTORM", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PIPEFLOWTYPESTORM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SANSWRCROWN", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "SANSWRCROWN", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FRAC2SWRBEG", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "FRAC2SWRBEG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FLOODREFELEV", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "FLOODREFELEV", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FALSEBFRISK", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FALSEBFRISK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RNO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RNO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OWNER1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OWNER1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OWNER2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OWNER2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OWNER3", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OWNER3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OWNERADDR", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OWNERADDR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OWNERCITY", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OWNERCITY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OWNERSTATE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OWNERSTATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OWNERZIP", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OWNERZIP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SITEADDR", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SITEADDR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SITECITY", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SITECITY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SITE_STATE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SITE_STATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SITEZIP", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SITEZIP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FLOODREFELEV_2", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "FLOODREFELEV_2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ISVACANT", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ISVACANT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ZONEEX", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZONEEX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ZONECP", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZONECP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GENEX", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GENEX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GENCP", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GENCP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PZSQFT", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PZSQFT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IMPFRACTEX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "IMPFRACTEX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IMPFRACTCP", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "IMPFRACTCP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IMPFRACTFB", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "IMPFRACTFB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AREAFT", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AREAFT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFAREAFTEX", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFAREAFTEX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RFAREAFTFB", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RFAREAFTFB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PKAREAFTEX", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PKAREAFTEX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PKAREAFTFB", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PKAREAFTFB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BASEFLOWEXCFS", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "BASEFLOWEXCFS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BASEFLOWFBCFS", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "BASEFLOWFBCFS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BASEFLOWDMCFS", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "BASEFLOWDMCFS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GROWTHSTATE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GROWTHSTATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@INCIA4FB", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "INCIA4FB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GISBASIN", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GISBASIN", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ICFTROOFEX", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ICFTROOFEX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ICFTROOFFB", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ICFTROOFFB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ICFTPARKEX", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ICFTPARKEX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ICFTPARKFB", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ICFTPARKFB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EICFTROOFEX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "EICFTROOFEX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EICFTPARKEX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "EICFTPARKEX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EICFTROOFFB", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "EICFTROOFFB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EICFTPARKFB", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "EICFTPARKFB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SEWERABLE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SEWERABLE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SHAPE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SHAPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.modeling_devConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT OBJECTID, PARCELID, DIVIDEID, DSCID, DISCOSITEID, DISCOCLASS, TOMLINKSAN, TOMLINKSTORM, PIPEFLOWTYPESAN, PIPEFLOWTYPESTORM, SANSWRCROWN, FRAC2SWRBEG, FLOODREFELEV, FALSEBFRISK, RNO, OWNER1, OWNER2, OWNER3, OWNERADDR, OWNERCITY, OWNERSTATE, OWNERZIP, SITEADDR, SITECITY, SITE_STATE, SITEZIP, FLOODREFELEV_2, ISVACANT, ZONEEX, ZONECP, GENEX, GENCP, PZSQFT, IMPFRACTEX, IMPFRACTCP, IMPFRACTFB, AREAFT, RFAREAFTEX, RFAREAFTFB, PKAREAFTEX, PKAREAFTFB, BASEFLOWEXCFS, BASEFLOWFBCFS, BASEFLOWDMCFS, GROWTHSTATE, INCIA4FB, GISBASIN, ICFTROOFEX, ICFTROOFFB, ICFTPARKEX, ICFTPARKFB, EICFTROOFEX, EICFTPARKEX, EICFTROOFFB, EICFTPARKFB, SEWERABLE, SHAPE FROM ModelAdmin.MST_DSC";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SAMasterDataSet.MstDscDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SAMasterDataSet.MstDscDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SAMasterDataSet.MstDscDataTable dataTable = new SAMasterDataSet.MstDscDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SAMasterDataSet.MstDscDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SAMasterDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MstDsc");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int OBJECTID, 
                    global::System.Nullable<int> PARCELID, 
                    global::System.Nullable<int> DIVIDEID, 
                    global::System.Nullable<int> DSCID, 
                    global::System.Nullable<int> DISCOSITEID, 
                    string DISCOCLASS, 
                    global::System.Nullable<int> TOMLINKSAN, 
                    global::System.Nullable<int> TOMLINKSTORM, 
                    string PIPEFLOWTYPESAN, 
                    string PIPEFLOWTYPESTORM, 
                    global::System.Nullable<decimal> SANSWRCROWN, 
                    global::System.Nullable<decimal> FRAC2SWRBEG, 
                    global::System.Nullable<decimal> FLOODREFELEV, 
                    global::System.Nullable<short> FALSEBFRISK, 
                    string RNO, 
                    string OWNER1, 
                    string OWNER2, 
                    string OWNER3, 
                    string OWNERADDR, 
                    string OWNERCITY, 
                    string OWNERSTATE, 
                    string OWNERZIP, 
                    string SITEADDR, 
                    string SITECITY, 
                    string SITE_STATE, 
                    string SITEZIP, 
                    global::System.Nullable<decimal> FLOODREFELEV_2, 
                    global::System.Nullable<short> ISVACANT, 
                    string ZONEEX, 
                    string ZONECP, 
                    string GENEX, 
                    string GENCP, 
                    global::System.Nullable<int> PZSQFT, 
                    global::System.Nullable<decimal> IMPFRACTEX, 
                    global::System.Nullable<decimal> IMPFRACTCP, 
                    global::System.Nullable<decimal> IMPFRACTFB, 
                    global::System.Nullable<int> AREAFT, 
                    global::System.Nullable<int> RFAREAFTEX, 
                    global::System.Nullable<int> RFAREAFTFB, 
                    global::System.Nullable<int> PKAREAFTEX, 
                    global::System.Nullable<int> PKAREAFTFB, 
                    global::System.Nullable<decimal> BASEFLOWEXCFS, 
                    global::System.Nullable<decimal> BASEFLOWFBCFS, 
                    global::System.Nullable<decimal> BASEFLOWDMCFS, 
                    global::System.Nullable<int> GROWTHSTATE, 
                    global::System.Nullable<short> INCIA4FB, 
                    string GISBASIN, 
                    global::System.Nullable<int> ICFTROOFEX, 
                    global::System.Nullable<int> ICFTROOFFB, 
                    global::System.Nullable<int> ICFTPARKEX, 
                    global::System.Nullable<int> ICFTPARKFB, 
                    global::System.Nullable<decimal> EICFTROOFEX, 
                    global::System.Nullable<decimal> EICFTPARKEX, 
                    global::System.Nullable<decimal> EICFTROOFFB, 
                    global::System.Nullable<decimal> EICFTPARKFB, 
                    global::System.Nullable<int> SEWERABLE, 
                    global::System.Nullable<int> SHAPE) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(OBJECTID));
            if ((PARCELID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(PARCELID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((DIVIDEID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(DIVIDEID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((DSCID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(DSCID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((DISCOSITEID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(DISCOSITEID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((DISCOCLASS == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(DISCOCLASS));
            }
            if ((TOMLINKSAN.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(TOMLINKSAN.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((TOMLINKSTORM.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(TOMLINKSTORM.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((PIPEFLOWTYPESAN == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(PIPEFLOWTYPESAN));
            }
            if ((PIPEFLOWTYPESTORM == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(PIPEFLOWTYPESTORM));
            }
            if ((SANSWRCROWN.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((decimal)(SANSWRCROWN.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((FRAC2SWRBEG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((decimal)(FRAC2SWRBEG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((FLOODREFELEV.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(FLOODREFELEV.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((FALSEBFRISK.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((short)(FALSEBFRISK.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((RNO == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(RNO));
            }
            if ((OWNER1 == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(OWNER1));
            }
            if ((OWNER2 == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(OWNER2));
            }
            if ((OWNER3 == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(OWNER3));
            }
            if ((OWNERADDR == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(OWNERADDR));
            }
            if ((OWNERCITY == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(OWNERCITY));
            }
            if ((OWNERSTATE == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(OWNERSTATE));
            }
            if ((OWNERZIP == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(OWNERZIP));
            }
            if ((SITEADDR == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(SITEADDR));
            }
            if ((SITECITY == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(SITECITY));
            }
            if ((SITE_STATE == null)) {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((string)(SITE_STATE));
            }
            if ((SITEZIP == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(SITEZIP));
            }
            if ((FLOODREFELEV_2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((decimal)(FLOODREFELEV_2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((ISVACANT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[27].Value = ((short)(ISVACANT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((ZONEEX == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(ZONEEX));
            }
            if ((ZONECP == null)) {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = ((string)(ZONECP));
            }
            if ((GENEX == null)) {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = ((string)(GENEX));
            }
            if ((GENCP == null)) {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = ((string)(GENCP));
            }
            if ((PZSQFT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[32].Value = ((int)(PZSQFT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((IMPFRACTEX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[33].Value = ((decimal)(IMPFRACTEX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((IMPFRACTCP.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[34].Value = ((decimal)(IMPFRACTCP.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((IMPFRACTFB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[35].Value = ((decimal)(IMPFRACTFB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((AREAFT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[36].Value = ((int)(AREAFT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((RFAREAFTEX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[37].Value = ((int)(RFAREAFTEX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((RFAREAFTFB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[38].Value = ((int)(RFAREAFTFB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((PKAREAFTEX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[39].Value = ((int)(PKAREAFTEX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((PKAREAFTFB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[40].Value = ((int)(PKAREAFTFB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((BASEFLOWEXCFS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[41].Value = ((decimal)(BASEFLOWEXCFS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((BASEFLOWFBCFS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[42].Value = ((decimal)(BASEFLOWFBCFS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((BASEFLOWDMCFS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[43].Value = ((decimal)(BASEFLOWDMCFS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((GROWTHSTATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[44].Value = ((int)(GROWTHSTATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((INCIA4FB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[45].Value = ((short)(INCIA4FB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((GISBASIN == null)) {
                this.Adapter.InsertCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[46].Value = ((string)(GISBASIN));
            }
            if ((ICFTROOFEX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[47].Value = ((int)(ICFTROOFEX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            if ((ICFTROOFFB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[48].Value = ((int)(ICFTROOFFB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((ICFTPARKEX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[49].Value = ((int)(ICFTPARKEX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            if ((ICFTPARKFB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[50].Value = ((int)(ICFTPARKFB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((EICFTROOFEX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[51].Value = ((decimal)(EICFTROOFEX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((EICFTPARKEX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[52].Value = ((decimal)(EICFTPARKEX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((EICFTROOFFB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[53].Value = ((decimal)(EICFTROOFFB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            if ((EICFTPARKFB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[54].Value = ((decimal)(EICFTPARKFB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((SEWERABLE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[55].Value = ((int)(SEWERABLE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            if ((SHAPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[56].Value = ((int)(SHAPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MstNodesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MstNodesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MstNodes";
            tableMapping.ColumnMappings.Add("OBJECTID", "ObjectID");
            tableMapping.ColumnMappings.Add("NODE", "Node");
            tableMapping.ColumnMappings.Add("XCOORD", "XCoord");
            tableMapping.ColumnMappings.Add("YCOORD", "YCoord");
            tableMapping.ColumnMappings.Add("NODETYPE", "NodeType");
            tableMapping.ColumnMappings.Add("GRNDELEV", "GrndElev");
            tableMapping.ColumnMappings.Add("HASSPECNODE", "HasSpecNode");
            tableMapping.ColumnMappings.Add("HASSPECLINK", "HasSpecLink");
            tableMapping.ColumnMappings.Add("GAGEID", "GageID");
            tableMapping.ColumnMappings.Add("SHAPE", "Shape");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [ModelAdmin].[MST_NODES] ([OBJECTID], [NODE], [XCOORD], [YCOORD], [NODETYPE], [GRNDELEV], [HASSPECNODE], [HASSPECLINK], [GAGEID], [SHAPE]) VALUES (@OBJECTID, @NODE, @XCOORD, @YCOORD, @NODETYPE, @GRNDELEV, @HASSPECNODE, @HASSPECLINK, @GAGEID, @SHAPE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OBJECTID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OBJECTID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NODE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@XCOORD", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "XCOORD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YCOORD", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "YCOORD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NODETYPE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NODETYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GRNDELEV", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "GRNDELEV", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HASSPECNODE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HASSPECNODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HASSPECLINK", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HASSPECLINK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GAGEID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GAGEID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SHAPE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SHAPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.modeling_devConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT OBJECTID, NODE, XCOORD, YCOORD, NODETYPE, GRNDELEV, HASSPECNODE, HASSPECLI" +
                "NK, GAGEID, SHAPE FROM ModelAdmin.MST_NODES";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SAMasterDataSet.MstNodesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SAMasterDataSet.MstNodesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SAMasterDataSet.MstNodesDataTable dataTable = new SAMasterDataSet.MstNodesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SAMasterDataSet.MstNodesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SAMasterDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MstNodes");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int OBJECTID, string NODE, global::System.Nullable<decimal> XCOORD, global::System.Nullable<decimal> YCOORD, string NODETYPE, global::System.Nullable<decimal> GRNDELEV, string HASSPECNODE, string HASSPECLINK, string GAGEID, global::System.Nullable<int> SHAPE) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(OBJECTID));
            if ((NODE == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NODE));
            }
            if ((XCOORD.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(XCOORD.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((YCOORD.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(YCOORD.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((NODETYPE == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(NODETYPE));
            }
            if ((GRNDELEV.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(GRNDELEV.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((HASSPECNODE == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(HASSPECNODE));
            }
            if ((HASSPECLINK == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(HASSPECLINK));
            }
            if ((GAGEID == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(GAGEID));
            }
            if ((SHAPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(SHAPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MstLinksTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MstLinksTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MstLinks";
            tableMapping.ColumnMappings.Add("OBJECTID", "ObjectID");
            tableMapping.ColumnMappings.Add("MLINKID", "MLinkID");
            tableMapping.ColumnMappings.Add("COMPKEY", "CompKey");
            tableMapping.ColumnMappings.Add("USNODE", "UsNode");
            tableMapping.ColumnMappings.Add("DSNODE", "DsNode");
            tableMapping.ColumnMappings.Add("PIPESHAPE", "PipeShape");
            tableMapping.ColumnMappings.Add("LINKTYPE", "LinkType");
            tableMapping.ColumnMappings.Add("PIPEFLOWTYPE", "PipeFlowType");
            tableMapping.ColumnMappings.Add("LENGTH", "Length");
            tableMapping.ColumnMappings.Add("DIAMWIDTH", "DiamWidth");
            tableMapping.ColumnMappings.Add("HEIGHT", "Height");
            tableMapping.ColumnMappings.Add("MATERIAL", "Material");
            tableMapping.ColumnMappings.Add("UPSDPTH", "UpsDpth");
            tableMapping.ColumnMappings.Add("DWNDPTH", "DwnDpth");
            tableMapping.ColumnMappings.Add("USIE", "UsIE");
            tableMapping.ColumnMappings.Add("DSIE", "DsIE");
            tableMapping.ColumnMappings.Add("ASBUILT", "AsBuilt");
            tableMapping.ColumnMappings.Add("INSTDATE", "InstDate");
            tableMapping.ColumnMappings.Add("FROMX", "FromX");
            tableMapping.ColumnMappings.Add("FROMY", "FromY");
            tableMapping.ColumnMappings.Add("TOX", "ToX");
            tableMapping.ColumnMappings.Add("TOY", "ToY");
            tableMapping.ColumnMappings.Add("ROUGHNESS", "Roughness");
            tableMapping.ColumnMappings.Add("TIMEFRAME", "TimeFrame");
            tableMapping.ColumnMappings.Add("DATAFLAGSYNTH", "DataFlagSynth");
            tableMapping.ColumnMappings.Add("DATAQUAL", "DataQual");
            tableMapping.ColumnMappings.Add("HSERVSTAT", "HServStat");
            tableMapping.ColumnMappings.Add("VALIDFROMDATE", "ValidFromDate");
            tableMapping.ColumnMappings.Add("VALIDTODATE", "ValidToDate");
            tableMapping.ColumnMappings.Add("CADKEY", "CadKey");
            tableMapping.ColumnMappings.Add("AUDITNODEID", "AuditNodeID");
            tableMapping.ColumnMappings.Add("AUDITDUPS", "AuditDups");
            tableMapping.ColumnMappings.Add("AUDITSPATIAL", "AuditSpatial");
            tableMapping.ColumnMappings.Add("AUDITOK2GO", "AuditOK2Go");
            tableMapping.ColumnMappings.Add("AUDITPROCTIMESTAMP", "AuditProcTimeStamp");
            tableMapping.ColumnMappings.Add("QDES", "QDes");
            tableMapping.ColumnMappings.Add("SHAPE", "Shape");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [ModelAdmin].[MST_LINKS] ([OBJECTID], [MLINKID], [COMPKEY], [USNODE], [DSNODE], [PIPESHAPE], [LINKTYPE], [PIPEFLOWTYPE], [LENGTH], [DIAMWIDTH], [HEIGHT], [MATERIAL], [UPSDPTH], [DWNDPTH], [USIE], [DSIE], [ASBUILT], [INSTDATE], [FROMX], [FROMY], [TOX], [TOY], [ROUGHNESS], [TIMEFRAME], [DATAFLAGSYNTH], [DATAQUAL], [HSERVSTAT], [VALIDFROMDATE], [VALIDTODATE], [CADKEY], [AUDITNODEID], [AUDITDUPS], [AUDITSPATIAL], [AUDITOK2GO], [AUDITPROCTIMESTAMP], [QDES], [SHAPE]) VALUES (@OBJECTID, @MLINKID, @COMPKEY, @USNODE, @DSNODE, @PIPESHAPE, @LINKTYPE, @PIPEFLOWTYPE, @LENGTH, @DIAMWIDTH, @HEIGHT, @MATERIAL, @UPSDPTH, @DWNDPTH, @USIE, @DSIE, @ASBUILT, @INSTDATE, @FROMX, @FROMY, @TOX, @TOY, @ROUGHNESS, @TIMEFRAME, @DATAFLAGSYNTH, @DATAQUAL, @HSERVSTAT, @VALIDFROMDATE, @VALIDTODATE, @CADKEY, @AUDITNODEID, @AUDITDUPS, @AUDITSPATIAL, @AUDITOK2GO, @AUDITPROCTIMESTAMP, @QDES, @SHAPE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OBJECTID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OBJECTID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MLINKID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MLINKID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPKEY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPKEY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USNODE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USNODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DSNODE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DSNODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PIPESHAPE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PIPESHAPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LINKTYPE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LINKTYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PIPEFLOWTYPE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PIPEFLOWTYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LENGTH", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "LENGTH", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DIAMWIDTH", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "DIAMWIDTH", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HEIGHT", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "HEIGHT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MATERIAL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MATERIAL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UPSDPTH", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "UPSDPTH", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DWNDPTH", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "DWNDPTH", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USIE", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "USIE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DSIE", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "DSIE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ASBUILT", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ASBUILT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@INSTDATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "INSTDATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FROMX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "FROMX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FROMY", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "FROMY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TOX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "TOX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TOY", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "TOY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ROUGHNESS", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "ROUGHNESS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TIMEFRAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TIMEFRAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DATAFLAGSYNTH", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DATAFLAGSYNTH", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DATAQUAL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DATAQUAL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HSERVSTAT", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HSERVSTAT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VALIDFROMDATE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VALIDFROMDATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VALIDTODATE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VALIDTODATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CADKEY", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CADKEY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AUDITNODEID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AUDITNODEID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AUDITDUPS", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AUDITDUPS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AUDITSPATIAL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AUDITSPATIAL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AUDITOK2GO", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AUDITOK2GO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AUDITPROCTIMESTAMP", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AUDITPROCTIMESTAMP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QDES", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "QDES", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SHAPE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SHAPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.modeling_devConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT OBJECTID, MLINKID, COMPKEY, USNODE, DSNODE, PIPESHAPE, LINKTYPE, PIPEFLOWTYPE, LENGTH, DIAMWIDTH, HEIGHT, MATERIAL, UPSDPTH, DWNDPTH, USIE, DSIE, ASBUILT, INSTDATE, FROMX, FROMY, TOX, TOY, ROUGHNESS, TIMEFRAME, DATAFLAGSYNTH, DATAQUAL, HSERVSTAT, VALIDFROMDATE, VALIDTODATE, CADKEY, AUDITNODEID, AUDITDUPS, AUDITSPATIAL, AUDITOK2GO, AUDITPROCTIMESTAMP, QDES, SHAPE FROM ModelAdmin.MST_LINKS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SAMasterDataSet.MstLinksDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SAMasterDataSet.MstLinksDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SAMasterDataSet.MstLinksDataTable dataTable = new SAMasterDataSet.MstLinksDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SAMasterDataSet.MstLinksDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SAMasterDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MstLinks");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int OBJECTID, 
                    global::System.Nullable<int> MLINKID, 
                    global::System.Nullable<int> COMPKEY, 
                    string USNODE, 
                    string DSNODE, 
                    string PIPESHAPE, 
                    string LINKTYPE, 
                    string PIPEFLOWTYPE, 
                    global::System.Nullable<decimal> LENGTH, 
                    global::System.Nullable<decimal> DIAMWIDTH, 
                    global::System.Nullable<decimal> HEIGHT, 
                    string MATERIAL, 
                    global::System.Nullable<decimal> UPSDPTH, 
                    global::System.Nullable<decimal> DWNDPTH, 
                    global::System.Nullable<decimal> USIE, 
                    global::System.Nullable<decimal> DSIE, 
                    string ASBUILT, 
                    global::System.Nullable<global::System.DateTime> INSTDATE, 
                    global::System.Nullable<decimal> FROMX, 
                    global::System.Nullable<decimal> FROMY, 
                    global::System.Nullable<decimal> TOX, 
                    global::System.Nullable<decimal> TOY, 
                    global::System.Nullable<decimal> ROUGHNESS, 
                    string TIMEFRAME, 
                    global::System.Nullable<int> DATAFLAGSYNTH, 
                    string DATAQUAL, 
                    string HSERVSTAT, 
                    string VALIDFROMDATE, 
                    string VALIDTODATE, 
                    string CADKEY, 
                    string AUDITNODEID, 
                    string AUDITDUPS, 
                    string AUDITSPATIAL, 
                    global::System.Nullable<short> AUDITOK2GO, 
                    string AUDITPROCTIMESTAMP, 
                    global::System.Nullable<decimal> QDES, 
                    global::System.Nullable<int> SHAPE) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(OBJECTID));
            if ((MLINKID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(MLINKID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((COMPKEY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(COMPKEY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((USNODE == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(USNODE));
            }
            if ((DSNODE == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(DSNODE));
            }
            if ((PIPESHAPE == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(PIPESHAPE));
            }
            if ((LINKTYPE == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(LINKTYPE));
            }
            if ((PIPEFLOWTYPE == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(PIPEFLOWTYPE));
            }
            if ((LENGTH.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(LENGTH.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((DIAMWIDTH.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(DIAMWIDTH.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((HEIGHT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((decimal)(HEIGHT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((MATERIAL == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(MATERIAL));
            }
            if ((UPSDPTH.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(UPSDPTH.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((DWNDPTH.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((decimal)(DWNDPTH.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((USIE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((decimal)(USIE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((DSIE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((decimal)(DSIE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((ASBUILT == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(ASBUILT));
            }
            if ((INSTDATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((System.DateTime)(INSTDATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((FROMX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((decimal)(FROMX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((FROMY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((decimal)(FROMY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((TOX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((decimal)(TOX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((TOY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((decimal)(TOY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((ROUGHNESS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((decimal)(ROUGHNESS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((TIMEFRAME == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(TIMEFRAME));
            }
            if ((DATAFLAGSYNTH.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((int)(DATAFLAGSYNTH.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((DATAQUAL == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(DATAQUAL));
            }
            if ((HSERVSTAT == null)) {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = ((string)(HSERVSTAT));
            }
            if ((VALIDFROMDATE == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(VALIDFROMDATE));
            }
            if ((VALIDTODATE == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(VALIDTODATE));
            }
            if ((CADKEY == null)) {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = ((string)(CADKEY));
            }
            if ((AUDITNODEID == null)) {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = ((string)(AUDITNODEID));
            }
            if ((AUDITDUPS == null)) {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = ((string)(AUDITDUPS));
            }
            if ((AUDITSPATIAL == null)) {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = ((string)(AUDITSPATIAL));
            }
            if ((AUDITOK2GO.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[33].Value = ((short)(AUDITOK2GO.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((AUDITPROCTIMESTAMP == null)) {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = ((string)(AUDITPROCTIMESTAMP));
            }
            if ((QDES.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[35].Value = ((decimal)(QDES.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((SHAPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[36].Value = ((int)(SHAPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MstSscTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MstSscTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MstSsc";
            tableMapping.ColumnMappings.Add("OBJECTID", "ObjectID");
            tableMapping.ColumnMappings.Add("SURFSCID", "SscID");
            tableMapping.ColumnMappings.Add("NGTO_EX", "NGToEx");
            tableMapping.ColumnMappings.Add("NGTO_FB", "NGToFB");
            tableMapping.ColumnMappings.Add("ALT_TRACENODE", "AltTraceNode");
            tableMapping.ColumnMappings.Add("SLOPE", "Slope");
            tableMapping.ColumnMappings.Add("FLOWLENGTHFT", "FlowLength");
            tableMapping.ColumnMappings.Add("DH", "Dh");
            tableMapping.ColumnMappings.Add("PER_N", "PerN");
            tableMapping.ColumnMappings.Add("IMP_N", "ImpN");
            tableMapping.ColumnMappings.Add("IMP_STO", "ImpStorage");
            tableMapping.ColumnMappings.Add("PER_STO", "PerStorage");
            tableMapping.ColumnMappings.Add("SUCT", "Suction");
            tableMapping.ColumnMappings.Add("HYDCON", "HydCon");
            tableMapping.ColumnMappings.Add("SMDMAX", "SmdMax");
            tableMapping.ColumnMappings.Add("ISSUMPED_EX", "IsSumpedEx");
            tableMapping.ColumnMappings.Add("ISSUMPED_FB", "IsSumpedFB");
            tableMapping.ColumnMappings.Add("TOTALGROSSACRES", "TotalGrossAcres");
            tableMapping.ColumnMappings.Add("PAVEACRES", "PaveAcres");
            tableMapping.ColumnMappings.Add("PAVETREEACRES", "PaveTreeAcres");
            tableMapping.ColumnMappings.Add("UPDATEATTS", "UpdateAtts");
            tableMapping.ColumnMappings.Add("SWACRESEX", "SWAcresEx");
            tableMapping.ColumnMappings.Add("SWACRESEXOTHER", "SWAcresOther");
            tableMapping.ColumnMappings.Add("SWFACTOR", "SWFactor");
            tableMapping.ColumnMappings.Add("SWACRESFB", "SWAcresFB");
            tableMapping.ColumnMappings.Add("SWACRESFBOTHER", "SWAcresFBOther");
            tableMapping.ColumnMappings.Add("ROWACRESFB", "RowAcresFB");
            tableMapping.ColumnMappings.Add("ROWACRESFBOTHER", "RowAcresFBOther");
            tableMapping.ColumnMappings.Add("SSCSOURCE", "SscSource");
            tableMapping.ColumnMappings.Add("SSCGDATE", "SscGDate");
            tableMapping.ColumnMappings.Add("SHAPE", "Shape");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [ModelAdmin].[MST_SURFSC] ([OBJECTID], [SURFSCID], [NGTO_EX], [NGTO_FB], [ALT_TRACENODE], [SLOPE], [FLOWLENGTHFT], [DH], [PER_N], [IMP_N], [IMP_STO], [PER_STO], [SUCT], [HYDCON], [SMDMAX], [ISSUMPED_EX], [ISSUMPED_FB], [TOTALGROSSACRES], [PAVEACRES], [PAVETREEACRES], [UPDATEATTS], [SWACRESEX], [SWACRESEXOTHER], [SWFACTOR], [SWACRESFB], [SWACRESFBOTHER], [ROWACRESFB], [ROWACRESFBOTHER], [SSCSOURCE], [SSCGDATE], [SHAPE]) VALUES (@OBJECTID, @SURFSCID, @NGTO_EX, @NGTO_FB, @ALT_TRACENODE, @SLOPE, @FLOWLENGTHFT, @DH, @PER_N, @IMP_N, @IMP_STO, @PER_STO, @SUCT, @HYDCON, @SMDMAX, @ISSUMPED_EX, @ISSUMPED_FB, @TOTALGROSSACRES, @PAVEACRES, @PAVETREEACRES, @UPDATEATTS, @SWACRESEX, @SWACRESEXOTHER, @SWFACTOR, @SWACRESFB, @SWACRESFBOTHER, @ROWACRESFB, @ROWACRESFBOTHER, @SSCSOURCE, @SSCGDATE, @SHAPE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OBJECTID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OBJECTID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SURFSCID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SURFSCID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NGTO_EX", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NGTO_EX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NGTO_FB", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NGTO_FB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ALT_TRACENODE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ALT_TRACENODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SLOPE", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "SLOPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FLOWLENGTHFT", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "FLOWLENGTHFT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DH", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "DH", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PER_N", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "PER_N", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IMP_N", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "IMP_N", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IMP_STO", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "IMP_STO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PER_STO", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "PER_STO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SUCT", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "SUCT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HYDCON", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "HYDCON", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SMDMAX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "SMDMAX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ISSUMPED_EX", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ISSUMPED_EX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ISSUMPED_FB", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ISSUMPED_FB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TOTALGROSSACRES", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "TOTALGROSSACRES", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PAVEACRES", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "PAVEACRES", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PAVETREEACRES", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "PAVETREEACRES", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UPDATEATTS", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UPDATEATTS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SWACRESEX", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "SWACRESEX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SWACRESEXOTHER", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "SWACRESEXOTHER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SWFACTOR", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "SWFACTOR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SWACRESFB", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "SWACRESFB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SWACRESFBOTHER", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "SWACRESFBOTHER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ROWACRESFB", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "ROWACRESFB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ROWACRESFBOTHER", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "ROWACRESFBOTHER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SSCSOURCE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SSCSOURCE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SSCGDATE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SSCGDATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SHAPE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SHAPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.modeling_devConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT OBJECTID, SURFSCID, NGTO_EX, NGTO_FB, ALT_TRACENODE, SLOPE, FLOWLENGTHFT, DH, PER_N, IMP_N, IMP_STO, PER_STO, SUCT, HYDCON, SMDMAX, ISSUMPED_EX, ISSUMPED_FB, TOTALGROSSACRES, PAVEACRES, PAVETREEACRES, UPDATEATTS, SWACRESEX, SWACRESEXOTHER, SWFACTOR, SWACRESFB, SWACRESFBOTHER, ROWACRESFB, ROWACRESFBOTHER, SSCSOURCE, SSCGDATE, SHAPE FROM ModelAdmin.MST_SURFSC";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SAMasterDataSet.MstSscDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SAMasterDataSet.MstSscDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SAMasterDataSet.MstSscDataTable dataTable = new SAMasterDataSet.MstSscDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SAMasterDataSet.MstSscDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SAMasterDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MstSsc");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int OBJECTID, 
                    global::System.Nullable<int> SURFSCID, 
                    string NGTO_EX, 
                    string NGTO_FB, 
                    string ALT_TRACENODE, 
                    global::System.Nullable<decimal> SLOPE, 
                    global::System.Nullable<decimal> FLOWLENGTHFT, 
                    global::System.Nullable<decimal> DH, 
                    global::System.Nullable<decimal> PER_N, 
                    global::System.Nullable<decimal> IMP_N, 
                    global::System.Nullable<decimal> IMP_STO, 
                    global::System.Nullable<decimal> PER_STO, 
                    global::System.Nullable<decimal> SUCT, 
                    global::System.Nullable<decimal> HYDCON, 
                    global::System.Nullable<decimal> SMDMAX, 
                    global::System.Nullable<short> ISSUMPED_EX, 
                    global::System.Nullable<short> ISSUMPED_FB, 
                    global::System.Nullable<decimal> TOTALGROSSACRES, 
                    global::System.Nullable<decimal> PAVEACRES, 
                    global::System.Nullable<decimal> PAVETREEACRES, 
                    global::System.Nullable<short> UPDATEATTS, 
                    global::System.Nullable<decimal> SWACRESEX, 
                    global::System.Nullable<decimal> SWACRESEXOTHER, 
                    global::System.Nullable<decimal> SWFACTOR, 
                    global::System.Nullable<decimal> SWACRESFB, 
                    global::System.Nullable<decimal> SWACRESFBOTHER, 
                    global::System.Nullable<decimal> ROWACRESFB, 
                    global::System.Nullable<decimal> ROWACRESFBOTHER, 
                    string SSCSOURCE, 
                    string SSCGDATE, 
                    global::System.Nullable<int> SHAPE) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(OBJECTID));
            if ((SURFSCID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(SURFSCID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((NGTO_EX == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(NGTO_EX));
            }
            if ((NGTO_FB == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(NGTO_FB));
            }
            if ((ALT_TRACENODE == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(ALT_TRACENODE));
            }
            if ((SLOPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(SLOPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((FLOWLENGTHFT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(FLOWLENGTHFT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((DH.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(DH.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((PER_N.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(PER_N.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((IMP_N.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(IMP_N.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((IMP_STO.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((decimal)(IMP_STO.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((PER_STO.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((decimal)(PER_STO.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((SUCT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(SUCT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((HYDCON.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((decimal)(HYDCON.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((SMDMAX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((decimal)(SMDMAX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((ISSUMPED_EX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((short)(ISSUMPED_EX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((ISSUMPED_FB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((short)(ISSUMPED_FB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((TOTALGROSSACRES.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((decimal)(TOTALGROSSACRES.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((PAVEACRES.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((decimal)(PAVEACRES.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((PAVETREEACRES.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((decimal)(PAVETREEACRES.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((UPDATEATTS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((short)(UPDATEATTS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((SWACRESEX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((decimal)(SWACRESEX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((SWACRESEXOTHER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((decimal)(SWACRESEXOTHER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((SWFACTOR.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((decimal)(SWFACTOR.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((SWACRESFB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((decimal)(SWACRESFB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((SWACRESFBOTHER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((decimal)(SWACRESFBOTHER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((ROWACRESFB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((decimal)(ROWACRESFB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((ROWACRESFBOTHER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[27].Value = ((decimal)(ROWACRESFBOTHER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((SSCSOURCE == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(SSCSOURCE));
            }
            if ((SSCGDATE == null)) {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = ((string)(SSCGDATE));
            }
            if ((SHAPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((int)(SHAPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MstZoningToGenTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MstZoningToGenTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MstZoningToGen";
            tableMapping.ColumnMappings.Add("Zone", "Zone");
            tableMapping.ColumnMappings.Add("GenZone", "GenZone");
            tableMapping.ColumnMappings.Add("ImpFractDM", "ImpFractDM");
            tableMapping.ColumnMappings.Add("OBJECTID", "ObjectID");
            tableMapping.ColumnMappings.Add("SWinModel", "SWinModel");
            tableMapping.ColumnMappings.Add("ISBESzone", "ISBESzone");
            tableMapping.ColumnMappings.Add("SanBFperNA", "SanBFPerNetAcre");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [ModelAdmin].[MST_ZONING2GEN] ([OBJECTID], [Zone], [GenZone], [SWinMo" +
                "del], [ISBESzone], [SanBFperNA], [ImpFractDM]) VALUES (@OBJECTID, @Zone, @GenZon" +
                "e, @SWinModel, @ISBESzone, @SanBFperNA, @ImpFractDM)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OBJECTID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OBJECTID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Zone", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Zone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GenZone", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GenZone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SWinModel", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SWinModel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ISBESzone", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ISBESzone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SanBFperNA", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "SanBFperNA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImpFractDM", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 38, 8, "ImpFractDM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.modeling_devConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT OBJECTID, Zone, GenZone, SWinModel, ISBESzone, SanBFperNA, ImpFractDM FROM" +
                " ModelAdmin.MST_ZONING2GEN";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SAMasterDataSet.MstZoningToGenDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SAMasterDataSet.MstZoningToGenDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SAMasterDataSet.MstZoningToGenDataTable dataTable = new SAMasterDataSet.MstZoningToGenDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SAMasterDataSet.MstZoningToGenDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SAMasterDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MstZoningToGen");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int OBJECTID, string Zone, string GenZone, global::System.Nullable<short> SWinModel, global::System.Nullable<short> ISBESzone, global::System.Nullable<decimal> SanBFperNA, global::System.Nullable<decimal> ImpFractDM) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(OBJECTID));
            if ((Zone == null)) {
                throw new global::System.ArgumentNullException("Zone");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Zone));
            }
            if ((GenZone == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(GenZone));
            }
            if ((SWinModel.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((short)(SWinModel.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((ISBESzone.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((short)(ISBESzone.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((SanBFperNA.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(SanBFperNA.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((ImpFractDM.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(ImpFractDM.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591
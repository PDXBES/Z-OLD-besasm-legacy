//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SystemsAnalysis.DataAccess {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("RetrofitsDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class RetrofitsDataSet : global::System.Data.DataSet {
        
        private FACILITY_TYPEDataTable tableFACILITY_TYPE;
        
        private ASSESSMENT_TYPEDataTable tableASSESSMENT_TYPE;
        
        private DESTINATIONDataTable tableDESTINATION;
        
        private IMPERVIOUS_AREA_TYPEDataTable tableIMPERVIOUS_AREA_TYPE;
        
        private OPPORTUNITY_FEASIBILITYDataTable tableOPPORTUNITY_FEASIBILITY;
        
        private PROJECTDataTable tablePROJECT;
        
        private PROJECT_STATUSDataTable tablePROJECT_STATUS;
        
        private SITE_ASSESSMENTDataTable tableSITE_ASSESSMENT;
        
        private SITE_OPPORTUNITYDataTable tableSITE_OPPORTUNITY;
        
        private SITEDataTable tableSITE;
        
        private RETRO_BASINDataTable tableRETRO_BASIN;
        
        private SEWER_BASINDataTable tableSEWER_BASIN;
        
        private global::System.Data.DataRelation relationFK_PROJECT_FACILITY_TYPE;
        
        private global::System.Data.DataRelation relationFK_PROJECT_PROJECT_STATUS;
        
        private global::System.Data.DataRelation relationFK_SITE_ASSESSMENT_ASSESSMENT_TYPE;
        
        private global::System.Data.DataRelation relationFK_SITE_ASSESSMENT_DESTINATION;
        
        private global::System.Data.DataRelation relationFK_SITE_ASSESSMENT_FACILITY_TYPE;
        
        private global::System.Data.DataRelation relationFK_SITE_ASSESSMENT_IMPERVIOUS_AREA_TYPE;
        
        private global::System.Data.DataRelation relationFK_SITE_ASSESSMENT_PROJECT;
        
        private global::System.Data.DataRelation relationFK_SITE_OPPORTUNITY_FACILITY_TYPE;
        
        private global::System.Data.DataRelation relationFK_SITE_ASSESSMENT_SITE;
        
        private global::System.Data.DataRelation relationFK_SITE_OPPORTUNITY_SITE;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RetrofitsDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected RetrofitsDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["FACILITY_TYPE"] != null)) {
                    base.Tables.Add(new FACILITY_TYPEDataTable(ds.Tables["FACILITY_TYPE"]));
                }
                if ((ds.Tables["ASSESSMENT_TYPE"] != null)) {
                    base.Tables.Add(new ASSESSMENT_TYPEDataTable(ds.Tables["ASSESSMENT_TYPE"]));
                }
                if ((ds.Tables["DESTINATION"] != null)) {
                    base.Tables.Add(new DESTINATIONDataTable(ds.Tables["DESTINATION"]));
                }
                if ((ds.Tables["IMPERVIOUS_AREA_TYPE"] != null)) {
                    base.Tables.Add(new IMPERVIOUS_AREA_TYPEDataTable(ds.Tables["IMPERVIOUS_AREA_TYPE"]));
                }
                if ((ds.Tables["OPPORTUNITY_FEASIBILITY"] != null)) {
                    base.Tables.Add(new OPPORTUNITY_FEASIBILITYDataTable(ds.Tables["OPPORTUNITY_FEASIBILITY"]));
                }
                if ((ds.Tables["PROJECT"] != null)) {
                    base.Tables.Add(new PROJECTDataTable(ds.Tables["PROJECT"]));
                }
                if ((ds.Tables["PROJECT_STATUS"] != null)) {
                    base.Tables.Add(new PROJECT_STATUSDataTable(ds.Tables["PROJECT_STATUS"]));
                }
                if ((ds.Tables["SITE_ASSESSMENT"] != null)) {
                    base.Tables.Add(new SITE_ASSESSMENTDataTable(ds.Tables["SITE_ASSESSMENT"]));
                }
                if ((ds.Tables["SITE_OPPORTUNITY"] != null)) {
                    base.Tables.Add(new SITE_OPPORTUNITYDataTable(ds.Tables["SITE_OPPORTUNITY"]));
                }
                if ((ds.Tables["SITE"] != null)) {
                    base.Tables.Add(new SITEDataTable(ds.Tables["SITE"]));
                }
                if ((ds.Tables["RETRO_BASIN"] != null)) {
                    base.Tables.Add(new RETRO_BASINDataTable(ds.Tables["RETRO_BASIN"]));
                }
                if ((ds.Tables["SEWER_BASIN"] != null)) {
                    base.Tables.Add(new SEWER_BASINDataTable(ds.Tables["SEWER_BASIN"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FACILITY_TYPEDataTable FACILITY_TYPE {
            get {
                return this.tableFACILITY_TYPE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ASSESSMENT_TYPEDataTable ASSESSMENT_TYPE {
            get {
                return this.tableASSESSMENT_TYPE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DESTINATIONDataTable DESTINATION {
            get {
                return this.tableDESTINATION;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IMPERVIOUS_AREA_TYPEDataTable IMPERVIOUS_AREA_TYPE {
            get {
                return this.tableIMPERVIOUS_AREA_TYPE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OPPORTUNITY_FEASIBILITYDataTable OPPORTUNITY_FEASIBILITY {
            get {
                return this.tableOPPORTUNITY_FEASIBILITY;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PROJECTDataTable PROJECT {
            get {
                return this.tablePROJECT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PROJECT_STATUSDataTable PROJECT_STATUS {
            get {
                return this.tablePROJECT_STATUS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SITE_ASSESSMENTDataTable SITE_ASSESSMENT {
            get {
                return this.tableSITE_ASSESSMENT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SITE_OPPORTUNITYDataTable SITE_OPPORTUNITY {
            get {
                return this.tableSITE_OPPORTUNITY;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SITEDataTable SITE {
            get {
                return this.tableSITE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RETRO_BASINDataTable RETRO_BASIN {
            get {
                return this.tableRETRO_BASIN;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SEWER_BASINDataTable SEWER_BASIN {
            get {
                return this.tableSEWER_BASIN;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            RetrofitsDataSet cln = ((RetrofitsDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["FACILITY_TYPE"] != null)) {
                    base.Tables.Add(new FACILITY_TYPEDataTable(ds.Tables["FACILITY_TYPE"]));
                }
                if ((ds.Tables["ASSESSMENT_TYPE"] != null)) {
                    base.Tables.Add(new ASSESSMENT_TYPEDataTable(ds.Tables["ASSESSMENT_TYPE"]));
                }
                if ((ds.Tables["DESTINATION"] != null)) {
                    base.Tables.Add(new DESTINATIONDataTable(ds.Tables["DESTINATION"]));
                }
                if ((ds.Tables["IMPERVIOUS_AREA_TYPE"] != null)) {
                    base.Tables.Add(new IMPERVIOUS_AREA_TYPEDataTable(ds.Tables["IMPERVIOUS_AREA_TYPE"]));
                }
                if ((ds.Tables["OPPORTUNITY_FEASIBILITY"] != null)) {
                    base.Tables.Add(new OPPORTUNITY_FEASIBILITYDataTable(ds.Tables["OPPORTUNITY_FEASIBILITY"]));
                }
                if ((ds.Tables["PROJECT"] != null)) {
                    base.Tables.Add(new PROJECTDataTable(ds.Tables["PROJECT"]));
                }
                if ((ds.Tables["PROJECT_STATUS"] != null)) {
                    base.Tables.Add(new PROJECT_STATUSDataTable(ds.Tables["PROJECT_STATUS"]));
                }
                if ((ds.Tables["SITE_ASSESSMENT"] != null)) {
                    base.Tables.Add(new SITE_ASSESSMENTDataTable(ds.Tables["SITE_ASSESSMENT"]));
                }
                if ((ds.Tables["SITE_OPPORTUNITY"] != null)) {
                    base.Tables.Add(new SITE_OPPORTUNITYDataTable(ds.Tables["SITE_OPPORTUNITY"]));
                }
                if ((ds.Tables["SITE"] != null)) {
                    base.Tables.Add(new SITEDataTable(ds.Tables["SITE"]));
                }
                if ((ds.Tables["RETRO_BASIN"] != null)) {
                    base.Tables.Add(new RETRO_BASINDataTable(ds.Tables["RETRO_BASIN"]));
                }
                if ((ds.Tables["SEWER_BASIN"] != null)) {
                    base.Tables.Add(new SEWER_BASINDataTable(ds.Tables["SEWER_BASIN"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableFACILITY_TYPE = ((FACILITY_TYPEDataTable)(base.Tables["FACILITY_TYPE"]));
            if ((initTable == true)) {
                if ((this.tableFACILITY_TYPE != null)) {
                    this.tableFACILITY_TYPE.InitVars();
                }
            }
            this.tableASSESSMENT_TYPE = ((ASSESSMENT_TYPEDataTable)(base.Tables["ASSESSMENT_TYPE"]));
            if ((initTable == true)) {
                if ((this.tableASSESSMENT_TYPE != null)) {
                    this.tableASSESSMENT_TYPE.InitVars();
                }
            }
            this.tableDESTINATION = ((DESTINATIONDataTable)(base.Tables["DESTINATION"]));
            if ((initTable == true)) {
                if ((this.tableDESTINATION != null)) {
                    this.tableDESTINATION.InitVars();
                }
            }
            this.tableIMPERVIOUS_AREA_TYPE = ((IMPERVIOUS_AREA_TYPEDataTable)(base.Tables["IMPERVIOUS_AREA_TYPE"]));
            if ((initTable == true)) {
                if ((this.tableIMPERVIOUS_AREA_TYPE != null)) {
                    this.tableIMPERVIOUS_AREA_TYPE.InitVars();
                }
            }
            this.tableOPPORTUNITY_FEASIBILITY = ((OPPORTUNITY_FEASIBILITYDataTable)(base.Tables["OPPORTUNITY_FEASIBILITY"]));
            if ((initTable == true)) {
                if ((this.tableOPPORTUNITY_FEASIBILITY != null)) {
                    this.tableOPPORTUNITY_FEASIBILITY.InitVars();
                }
            }
            this.tablePROJECT = ((PROJECTDataTable)(base.Tables["PROJECT"]));
            if ((initTable == true)) {
                if ((this.tablePROJECT != null)) {
                    this.tablePROJECT.InitVars();
                }
            }
            this.tablePROJECT_STATUS = ((PROJECT_STATUSDataTable)(base.Tables["PROJECT_STATUS"]));
            if ((initTable == true)) {
                if ((this.tablePROJECT_STATUS != null)) {
                    this.tablePROJECT_STATUS.InitVars();
                }
            }
            this.tableSITE_ASSESSMENT = ((SITE_ASSESSMENTDataTable)(base.Tables["SITE_ASSESSMENT"]));
            if ((initTable == true)) {
                if ((this.tableSITE_ASSESSMENT != null)) {
                    this.tableSITE_ASSESSMENT.InitVars();
                }
            }
            this.tableSITE_OPPORTUNITY = ((SITE_OPPORTUNITYDataTable)(base.Tables["SITE_OPPORTUNITY"]));
            if ((initTable == true)) {
                if ((this.tableSITE_OPPORTUNITY != null)) {
                    this.tableSITE_OPPORTUNITY.InitVars();
                }
            }
            this.tableSITE = ((SITEDataTable)(base.Tables["SITE"]));
            if ((initTable == true)) {
                if ((this.tableSITE != null)) {
                    this.tableSITE.InitVars();
                }
            }
            this.tableRETRO_BASIN = ((RETRO_BASINDataTable)(base.Tables["RETRO_BASIN"]));
            if ((initTable == true)) {
                if ((this.tableRETRO_BASIN != null)) {
                    this.tableRETRO_BASIN.InitVars();
                }
            }
            this.tableSEWER_BASIN = ((SEWER_BASINDataTable)(base.Tables["SEWER_BASIN"]));
            if ((initTable == true)) {
                if ((this.tableSEWER_BASIN != null)) {
                    this.tableSEWER_BASIN.InitVars();
                }
            }
            this.relationFK_PROJECT_FACILITY_TYPE = this.Relations["FK_PROJECT_FACILITY_TYPE"];
            this.relationFK_PROJECT_PROJECT_STATUS = this.Relations["FK_PROJECT_PROJECT_STATUS"];
            this.relationFK_SITE_ASSESSMENT_ASSESSMENT_TYPE = this.Relations["FK_SITE_ASSESSMENT_ASSESSMENT_TYPE"];
            this.relationFK_SITE_ASSESSMENT_DESTINATION = this.Relations["FK_SITE_ASSESSMENT_DESTINATION"];
            this.relationFK_SITE_ASSESSMENT_FACILITY_TYPE = this.Relations["FK_SITE_ASSESSMENT_FACILITY_TYPE"];
            this.relationFK_SITE_ASSESSMENT_IMPERVIOUS_AREA_TYPE = this.Relations["FK_SITE_ASSESSMENT_IMPERVIOUS_AREA_TYPE"];
            this.relationFK_SITE_ASSESSMENT_PROJECT = this.Relations["FK_SITE_ASSESSMENT_PROJECT"];
            this.relationFK_SITE_OPPORTUNITY_FACILITY_TYPE = this.Relations["FK_SITE_OPPORTUNITY_FACILITY_TYPE"];
            this.relationFK_SITE_ASSESSMENT_SITE = this.Relations["FK_SITE_ASSESSMENT_SITE"];
            this.relationFK_SITE_OPPORTUNITY_SITE = this.Relations["FK_SITE_OPPORTUNITY_SITE"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "RetrofitsDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/RetrofitsDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableFACILITY_TYPE = new FACILITY_TYPEDataTable();
            base.Tables.Add(this.tableFACILITY_TYPE);
            this.tableASSESSMENT_TYPE = new ASSESSMENT_TYPEDataTable();
            base.Tables.Add(this.tableASSESSMENT_TYPE);
            this.tableDESTINATION = new DESTINATIONDataTable();
            base.Tables.Add(this.tableDESTINATION);
            this.tableIMPERVIOUS_AREA_TYPE = new IMPERVIOUS_AREA_TYPEDataTable();
            base.Tables.Add(this.tableIMPERVIOUS_AREA_TYPE);
            this.tableOPPORTUNITY_FEASIBILITY = new OPPORTUNITY_FEASIBILITYDataTable();
            base.Tables.Add(this.tableOPPORTUNITY_FEASIBILITY);
            this.tablePROJECT = new PROJECTDataTable();
            base.Tables.Add(this.tablePROJECT);
            this.tablePROJECT_STATUS = new PROJECT_STATUSDataTable();
            base.Tables.Add(this.tablePROJECT_STATUS);
            this.tableSITE_ASSESSMENT = new SITE_ASSESSMENTDataTable();
            base.Tables.Add(this.tableSITE_ASSESSMENT);
            this.tableSITE_OPPORTUNITY = new SITE_OPPORTUNITYDataTable();
            base.Tables.Add(this.tableSITE_OPPORTUNITY);
            this.tableSITE = new SITEDataTable();
            base.Tables.Add(this.tableSITE);
            this.tableRETRO_BASIN = new RETRO_BASINDataTable();
            base.Tables.Add(this.tableRETRO_BASIN);
            this.tableSEWER_BASIN = new SEWER_BASINDataTable();
            base.Tables.Add(this.tableSEWER_BASIN);
            this.relationFK_PROJECT_FACILITY_TYPE = new global::System.Data.DataRelation("FK_PROJECT_FACILITY_TYPE", new global::System.Data.DataColumn[] {
                        this.tableFACILITY_TYPE.facility_type_idColumn}, new global::System.Data.DataColumn[] {
                        this.tablePROJECT.facility_type_idColumn}, false);
            this.Relations.Add(this.relationFK_PROJECT_FACILITY_TYPE);
            this.relationFK_PROJECT_PROJECT_STATUS = new global::System.Data.DataRelation("FK_PROJECT_PROJECT_STATUS", new global::System.Data.DataColumn[] {
                        this.tablePROJECT_STATUS.project_status_idColumn}, new global::System.Data.DataColumn[] {
                        this.tablePROJECT.project_status_idColumn}, false);
            this.Relations.Add(this.relationFK_PROJECT_PROJECT_STATUS);
            this.relationFK_SITE_ASSESSMENT_ASSESSMENT_TYPE = new global::System.Data.DataRelation("FK_SITE_ASSESSMENT_ASSESSMENT_TYPE", new global::System.Data.DataColumn[] {
                        this.tableASSESSMENT_TYPE.assessment_type_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSITE_ASSESSMENT.assessment_type_idColumn}, false);
            this.Relations.Add(this.relationFK_SITE_ASSESSMENT_ASSESSMENT_TYPE);
            this.relationFK_SITE_ASSESSMENT_DESTINATION = new global::System.Data.DataRelation("FK_SITE_ASSESSMENT_DESTINATION", new global::System.Data.DataColumn[] {
                        this.tableDESTINATION.destination_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSITE_ASSESSMENT.destination_idColumn}, false);
            this.Relations.Add(this.relationFK_SITE_ASSESSMENT_DESTINATION);
            this.relationFK_SITE_ASSESSMENT_FACILITY_TYPE = new global::System.Data.DataRelation("FK_SITE_ASSESSMENT_FACILITY_TYPE", new global::System.Data.DataColumn[] {
                        this.tableFACILITY_TYPE.facility_type_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSITE_ASSESSMENT.facility_type_idColumn}, false);
            this.Relations.Add(this.relationFK_SITE_ASSESSMENT_FACILITY_TYPE);
            this.relationFK_SITE_ASSESSMENT_IMPERVIOUS_AREA_TYPE = new global::System.Data.DataRelation("FK_SITE_ASSESSMENT_IMPERVIOUS_AREA_TYPE", new global::System.Data.DataColumn[] {
                        this.tableIMPERVIOUS_AREA_TYPE.ia_type_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSITE_ASSESSMENT.ia_type_idColumn}, false);
            this.Relations.Add(this.relationFK_SITE_ASSESSMENT_IMPERVIOUS_AREA_TYPE);
            this.relationFK_SITE_ASSESSMENT_PROJECT = new global::System.Data.DataRelation("FK_SITE_ASSESSMENT_PROJECT", new global::System.Data.DataColumn[] {
                        this.tablePROJECT.project_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSITE_ASSESSMENT.project_idColumn}, false);
            this.Relations.Add(this.relationFK_SITE_ASSESSMENT_PROJECT);
            this.relationFK_SITE_OPPORTUNITY_FACILITY_TYPE = new global::System.Data.DataRelation("FK_SITE_OPPORTUNITY_FACILITY_TYPE", new global::System.Data.DataColumn[] {
                        this.tableFACILITY_TYPE.facility_type_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSITE_OPPORTUNITY.facility_type_idColumn}, false);
            this.Relations.Add(this.relationFK_SITE_OPPORTUNITY_FACILITY_TYPE);
            this.relationFK_SITE_ASSESSMENT_SITE = new global::System.Data.DataRelation("FK_SITE_ASSESSMENT_SITE", new global::System.Data.DataColumn[] {
                        this.tableSITE.site_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSITE_ASSESSMENT.site_idColumn}, false);
            this.Relations.Add(this.relationFK_SITE_ASSESSMENT_SITE);
            this.relationFK_SITE_OPPORTUNITY_SITE = new global::System.Data.DataRelation("FK_SITE_OPPORTUNITY_SITE", new global::System.Data.DataColumn[] {
                        this.tableSITE.site_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableSITE_OPPORTUNITY.site_idColumn}, false);
            this.Relations.Add(this.relationFK_SITE_OPPORTUNITY_SITE);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFACILITY_TYPE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeASSESSMENT_TYPE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDESTINATION() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIMPERVIOUS_AREA_TYPE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOPPORTUNITY_FEASIBILITY() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePROJECT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePROJECT_STATUS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSITE_ASSESSMENT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSITE_OPPORTUNITY() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSITE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRETRO_BASIN() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSEWER_BASIN() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            RetrofitsDataSet ds = new RetrofitsDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void FACILITY_TYPERowChangeEventHandler(object sender, FACILITY_TYPERowChangeEvent e);
        
        public delegate void ASSESSMENT_TYPERowChangeEventHandler(object sender, ASSESSMENT_TYPERowChangeEvent e);
        
        public delegate void DESTINATIONRowChangeEventHandler(object sender, DESTINATIONRowChangeEvent e);
        
        public delegate void IMPERVIOUS_AREA_TYPERowChangeEventHandler(object sender, IMPERVIOUS_AREA_TYPERowChangeEvent e);
        
        public delegate void OPPORTUNITY_FEASIBILITYRowChangeEventHandler(object sender, OPPORTUNITY_FEASIBILITYRowChangeEvent e);
        
        public delegate void PROJECTRowChangeEventHandler(object sender, PROJECTRowChangeEvent e);
        
        public delegate void PROJECT_STATUSRowChangeEventHandler(object sender, PROJECT_STATUSRowChangeEvent e);
        
        public delegate void SITE_ASSESSMENTRowChangeEventHandler(object sender, SITE_ASSESSMENTRowChangeEvent e);
        
        public delegate void SITE_OPPORTUNITYRowChangeEventHandler(object sender, SITE_OPPORTUNITYRowChangeEvent e);
        
        public delegate void SITERowChangeEventHandler(object sender, SITERowChangeEvent e);
        
        public delegate void RETRO_BASINRowChangeEventHandler(object sender, RETRO_BASINRowChangeEvent e);
        
        public delegate void SEWER_BASINRowChangeEventHandler(object sender, SEWER_BASINRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FACILITY_TYPEDataTable : global::System.Data.TypedTableBase<FACILITY_TYPERow> {
            
            private global::System.Data.DataColumn columnfacility_type_id;
            
            private global::System.Data.DataColumn columnname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FACILITY_TYPEDataTable() {
                this.TableName = "FACILITY_TYPE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FACILITY_TYPEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FACILITY_TYPEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn facility_type_idColumn {
                get {
                    return this.columnfacility_type_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FACILITY_TYPERow this[int index] {
                get {
                    return ((FACILITY_TYPERow)(this.Rows[index]));
                }
            }
            
            public event FACILITY_TYPERowChangeEventHandler FACILITY_TYPERowChanging;
            
            public event FACILITY_TYPERowChangeEventHandler FACILITY_TYPERowChanged;
            
            public event FACILITY_TYPERowChangeEventHandler FACILITY_TYPERowDeleting;
            
            public event FACILITY_TYPERowChangeEventHandler FACILITY_TYPERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFACILITY_TYPERow(FACILITY_TYPERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FACILITY_TYPERow AddFACILITY_TYPERow(string name) {
                FACILITY_TYPERow rowFACILITY_TYPERow = ((FACILITY_TYPERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        name};
                rowFACILITY_TYPERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFACILITY_TYPERow);
                return rowFACILITY_TYPERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FACILITY_TYPERow FindByfacility_type_id(int facility_type_id) {
                return ((FACILITY_TYPERow)(this.Rows.Find(new object[] {
                            facility_type_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FACILITY_TYPEDataTable cln = ((FACILITY_TYPEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FACILITY_TYPEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnfacility_type_id = base.Columns["facility_type_id"];
                this.columnname = base.Columns["name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnfacility_type_id = new global::System.Data.DataColumn("facility_type_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfacility_type_id);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnfacility_type_id}, true));
                this.columnfacility_type_id.AutoIncrement = true;
                this.columnfacility_type_id.AutoIncrementSeed = -1;
                this.columnfacility_type_id.AutoIncrementStep = -1;
                this.columnfacility_type_id.AllowDBNull = false;
                this.columnfacility_type_id.ReadOnly = true;
                this.columnfacility_type_id.Unique = true;
                this.columnname.AllowDBNull = false;
                this.columnname.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FACILITY_TYPERow NewFACILITY_TYPERow() {
                return ((FACILITY_TYPERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FACILITY_TYPERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FACILITY_TYPERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FACILITY_TYPERowChanged != null)) {
                    this.FACILITY_TYPERowChanged(this, new FACILITY_TYPERowChangeEvent(((FACILITY_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FACILITY_TYPERowChanging != null)) {
                    this.FACILITY_TYPERowChanging(this, new FACILITY_TYPERowChangeEvent(((FACILITY_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FACILITY_TYPERowDeleted != null)) {
                    this.FACILITY_TYPERowDeleted(this, new FACILITY_TYPERowChangeEvent(((FACILITY_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FACILITY_TYPERowDeleting != null)) {
                    this.FACILITY_TYPERowDeleting(this, new FACILITY_TYPERowChangeEvent(((FACILITY_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFACILITY_TYPERow(FACILITY_TYPERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RetrofitsDataSet ds = new RetrofitsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FACILITY_TYPEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ASSESSMENT_TYPEDataTable : global::System.Data.TypedTableBase<ASSESSMENT_TYPERow> {
            
            private global::System.Data.DataColumn columnassessment_type_id;
            
            private global::System.Data.DataColumn columnname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ASSESSMENT_TYPEDataTable() {
                this.TableName = "ASSESSMENT_TYPE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ASSESSMENT_TYPEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ASSESSMENT_TYPEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assessment_type_idColumn {
                get {
                    return this.columnassessment_type_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ASSESSMENT_TYPERow this[int index] {
                get {
                    return ((ASSESSMENT_TYPERow)(this.Rows[index]));
                }
            }
            
            public event ASSESSMENT_TYPERowChangeEventHandler ASSESSMENT_TYPERowChanging;
            
            public event ASSESSMENT_TYPERowChangeEventHandler ASSESSMENT_TYPERowChanged;
            
            public event ASSESSMENT_TYPERowChangeEventHandler ASSESSMENT_TYPERowDeleting;
            
            public event ASSESSMENT_TYPERowChangeEventHandler ASSESSMENT_TYPERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddASSESSMENT_TYPERow(ASSESSMENT_TYPERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ASSESSMENT_TYPERow AddASSESSMENT_TYPERow(string name) {
                ASSESSMENT_TYPERow rowASSESSMENT_TYPERow = ((ASSESSMENT_TYPERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        name};
                rowASSESSMENT_TYPERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowASSESSMENT_TYPERow);
                return rowASSESSMENT_TYPERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ASSESSMENT_TYPERow FindByassessment_type_id(int assessment_type_id) {
                return ((ASSESSMENT_TYPERow)(this.Rows.Find(new object[] {
                            assessment_type_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ASSESSMENT_TYPEDataTable cln = ((ASSESSMENT_TYPEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ASSESSMENT_TYPEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnassessment_type_id = base.Columns["assessment_type_id"];
                this.columnname = base.Columns["name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnassessment_type_id = new global::System.Data.DataColumn("assessment_type_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassessment_type_id);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnassessment_type_id}, true));
                this.columnassessment_type_id.AutoIncrement = true;
                this.columnassessment_type_id.AutoIncrementSeed = -1;
                this.columnassessment_type_id.AutoIncrementStep = -1;
                this.columnassessment_type_id.AllowDBNull = false;
                this.columnassessment_type_id.ReadOnly = true;
                this.columnassessment_type_id.Unique = true;
                this.columnname.AllowDBNull = false;
                this.columnname.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ASSESSMENT_TYPERow NewASSESSMENT_TYPERow() {
                return ((ASSESSMENT_TYPERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ASSESSMENT_TYPERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ASSESSMENT_TYPERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ASSESSMENT_TYPERowChanged != null)) {
                    this.ASSESSMENT_TYPERowChanged(this, new ASSESSMENT_TYPERowChangeEvent(((ASSESSMENT_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ASSESSMENT_TYPERowChanging != null)) {
                    this.ASSESSMENT_TYPERowChanging(this, new ASSESSMENT_TYPERowChangeEvent(((ASSESSMENT_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ASSESSMENT_TYPERowDeleted != null)) {
                    this.ASSESSMENT_TYPERowDeleted(this, new ASSESSMENT_TYPERowChangeEvent(((ASSESSMENT_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ASSESSMENT_TYPERowDeleting != null)) {
                    this.ASSESSMENT_TYPERowDeleting(this, new ASSESSMENT_TYPERowChangeEvent(((ASSESSMENT_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveASSESSMENT_TYPERow(ASSESSMENT_TYPERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RetrofitsDataSet ds = new RetrofitsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ASSESSMENT_TYPEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DESTINATIONDataTable : global::System.Data.TypedTableBase<DESTINATIONRow> {
            
            private global::System.Data.DataColumn columndestination_id;
            
            private global::System.Data.DataColumn columnname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DESTINATIONDataTable() {
                this.TableName = "DESTINATION";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DESTINATIONDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DESTINATIONDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn destination_idColumn {
                get {
                    return this.columndestination_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DESTINATIONRow this[int index] {
                get {
                    return ((DESTINATIONRow)(this.Rows[index]));
                }
            }
            
            public event DESTINATIONRowChangeEventHandler DESTINATIONRowChanging;
            
            public event DESTINATIONRowChangeEventHandler DESTINATIONRowChanged;
            
            public event DESTINATIONRowChangeEventHandler DESTINATIONRowDeleting;
            
            public event DESTINATIONRowChangeEventHandler DESTINATIONRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDESTINATIONRow(DESTINATIONRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DESTINATIONRow AddDESTINATIONRow(string name) {
                DESTINATIONRow rowDESTINATIONRow = ((DESTINATIONRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        name};
                rowDESTINATIONRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDESTINATIONRow);
                return rowDESTINATIONRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DESTINATIONRow FindBydestination_id(int destination_id) {
                return ((DESTINATIONRow)(this.Rows.Find(new object[] {
                            destination_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DESTINATIONDataTable cln = ((DESTINATIONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DESTINATIONDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndestination_id = base.Columns["destination_id"];
                this.columnname = base.Columns["name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndestination_id = new global::System.Data.DataColumn("destination_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndestination_id);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndestination_id}, true));
                this.columndestination_id.AutoIncrement = true;
                this.columndestination_id.AutoIncrementSeed = -1;
                this.columndestination_id.AutoIncrementStep = -1;
                this.columndestination_id.AllowDBNull = false;
                this.columndestination_id.ReadOnly = true;
                this.columndestination_id.Unique = true;
                this.columnname.AllowDBNull = false;
                this.columnname.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DESTINATIONRow NewDESTINATIONRow() {
                return ((DESTINATIONRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DESTINATIONRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DESTINATIONRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DESTINATIONRowChanged != null)) {
                    this.DESTINATIONRowChanged(this, new DESTINATIONRowChangeEvent(((DESTINATIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DESTINATIONRowChanging != null)) {
                    this.DESTINATIONRowChanging(this, new DESTINATIONRowChangeEvent(((DESTINATIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DESTINATIONRowDeleted != null)) {
                    this.DESTINATIONRowDeleted(this, new DESTINATIONRowChangeEvent(((DESTINATIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DESTINATIONRowDeleting != null)) {
                    this.DESTINATIONRowDeleting(this, new DESTINATIONRowChangeEvent(((DESTINATIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDESTINATIONRow(DESTINATIONRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RetrofitsDataSet ds = new RetrofitsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DESTINATIONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IMPERVIOUS_AREA_TYPEDataTable : global::System.Data.TypedTableBase<IMPERVIOUS_AREA_TYPERow> {
            
            private global::System.Data.DataColumn columnia_type_id;
            
            private global::System.Data.DataColumn columnname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IMPERVIOUS_AREA_TYPEDataTable() {
                this.TableName = "IMPERVIOUS_AREA_TYPE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IMPERVIOUS_AREA_TYPEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IMPERVIOUS_AREA_TYPEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ia_type_idColumn {
                get {
                    return this.columnia_type_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IMPERVIOUS_AREA_TYPERow this[int index] {
                get {
                    return ((IMPERVIOUS_AREA_TYPERow)(this.Rows[index]));
                }
            }
            
            public event IMPERVIOUS_AREA_TYPERowChangeEventHandler IMPERVIOUS_AREA_TYPERowChanging;
            
            public event IMPERVIOUS_AREA_TYPERowChangeEventHandler IMPERVIOUS_AREA_TYPERowChanged;
            
            public event IMPERVIOUS_AREA_TYPERowChangeEventHandler IMPERVIOUS_AREA_TYPERowDeleting;
            
            public event IMPERVIOUS_AREA_TYPERowChangeEventHandler IMPERVIOUS_AREA_TYPERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIMPERVIOUS_AREA_TYPERow(IMPERVIOUS_AREA_TYPERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IMPERVIOUS_AREA_TYPERow AddIMPERVIOUS_AREA_TYPERow(string name) {
                IMPERVIOUS_AREA_TYPERow rowIMPERVIOUS_AREA_TYPERow = ((IMPERVIOUS_AREA_TYPERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        name};
                rowIMPERVIOUS_AREA_TYPERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowIMPERVIOUS_AREA_TYPERow);
                return rowIMPERVIOUS_AREA_TYPERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IMPERVIOUS_AREA_TYPERow FindByia_type_id(int ia_type_id) {
                return ((IMPERVIOUS_AREA_TYPERow)(this.Rows.Find(new object[] {
                            ia_type_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                IMPERVIOUS_AREA_TYPEDataTable cln = ((IMPERVIOUS_AREA_TYPEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new IMPERVIOUS_AREA_TYPEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnia_type_id = base.Columns["ia_type_id"];
                this.columnname = base.Columns["name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnia_type_id = new global::System.Data.DataColumn("ia_type_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnia_type_id);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnia_type_id}, true));
                this.columnia_type_id.AutoIncrement = true;
                this.columnia_type_id.AutoIncrementSeed = -1;
                this.columnia_type_id.AutoIncrementStep = -1;
                this.columnia_type_id.AllowDBNull = false;
                this.columnia_type_id.ReadOnly = true;
                this.columnia_type_id.Unique = true;
                this.columnname.AllowDBNull = false;
                this.columnname.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IMPERVIOUS_AREA_TYPERow NewIMPERVIOUS_AREA_TYPERow() {
                return ((IMPERVIOUS_AREA_TYPERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new IMPERVIOUS_AREA_TYPERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(IMPERVIOUS_AREA_TYPERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IMPERVIOUS_AREA_TYPERowChanged != null)) {
                    this.IMPERVIOUS_AREA_TYPERowChanged(this, new IMPERVIOUS_AREA_TYPERowChangeEvent(((IMPERVIOUS_AREA_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IMPERVIOUS_AREA_TYPERowChanging != null)) {
                    this.IMPERVIOUS_AREA_TYPERowChanging(this, new IMPERVIOUS_AREA_TYPERowChangeEvent(((IMPERVIOUS_AREA_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IMPERVIOUS_AREA_TYPERowDeleted != null)) {
                    this.IMPERVIOUS_AREA_TYPERowDeleted(this, new IMPERVIOUS_AREA_TYPERowChangeEvent(((IMPERVIOUS_AREA_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IMPERVIOUS_AREA_TYPERowDeleting != null)) {
                    this.IMPERVIOUS_AREA_TYPERowDeleting(this, new IMPERVIOUS_AREA_TYPERowChangeEvent(((IMPERVIOUS_AREA_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIMPERVIOUS_AREA_TYPERow(IMPERVIOUS_AREA_TYPERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RetrofitsDataSet ds = new RetrofitsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IMPERVIOUS_AREA_TYPEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OPPORTUNITY_FEASIBILITYDataTable : global::System.Data.TypedTableBase<OPPORTUNITY_FEASIBILITYRow> {
            
            private global::System.Data.DataColumn columnopportunity_feasibility_id;
            
            private global::System.Data.DataColumn columnrating_value;
            
            private global::System.Data.DataColumn columnmeaning;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OPPORTUNITY_FEASIBILITYDataTable() {
                this.TableName = "OPPORTUNITY_FEASIBILITY";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OPPORTUNITY_FEASIBILITYDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OPPORTUNITY_FEASIBILITYDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn opportunity_feasibility_idColumn {
                get {
                    return this.columnopportunity_feasibility_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rating_valueColumn {
                get {
                    return this.columnrating_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn meaningColumn {
                get {
                    return this.columnmeaning;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OPPORTUNITY_FEASIBILITYRow this[int index] {
                get {
                    return ((OPPORTUNITY_FEASIBILITYRow)(this.Rows[index]));
                }
            }
            
            public event OPPORTUNITY_FEASIBILITYRowChangeEventHandler OPPORTUNITY_FEASIBILITYRowChanging;
            
            public event OPPORTUNITY_FEASIBILITYRowChangeEventHandler OPPORTUNITY_FEASIBILITYRowChanged;
            
            public event OPPORTUNITY_FEASIBILITYRowChangeEventHandler OPPORTUNITY_FEASIBILITYRowDeleting;
            
            public event OPPORTUNITY_FEASIBILITYRowChangeEventHandler OPPORTUNITY_FEASIBILITYRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOPPORTUNITY_FEASIBILITYRow(OPPORTUNITY_FEASIBILITYRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OPPORTUNITY_FEASIBILITYRow AddOPPORTUNITY_FEASIBILITYRow(int rating_value, string meaning) {
                OPPORTUNITY_FEASIBILITYRow rowOPPORTUNITY_FEASIBILITYRow = ((OPPORTUNITY_FEASIBILITYRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        rating_value,
                        meaning};
                rowOPPORTUNITY_FEASIBILITYRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOPPORTUNITY_FEASIBILITYRow);
                return rowOPPORTUNITY_FEASIBILITYRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OPPORTUNITY_FEASIBILITYRow FindByrating_value(int rating_value) {
                return ((OPPORTUNITY_FEASIBILITYRow)(this.Rows.Find(new object[] {
                            rating_value})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OPPORTUNITY_FEASIBILITYDataTable cln = ((OPPORTUNITY_FEASIBILITYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OPPORTUNITY_FEASIBILITYDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnopportunity_feasibility_id = base.Columns["opportunity_feasibility_id"];
                this.columnrating_value = base.Columns["rating_value"];
                this.columnmeaning = base.Columns["meaning"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnopportunity_feasibility_id = new global::System.Data.DataColumn("opportunity_feasibility_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnopportunity_feasibility_id);
                this.columnrating_value = new global::System.Data.DataColumn("rating_value", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrating_value);
                this.columnmeaning = new global::System.Data.DataColumn("meaning", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmeaning);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnrating_value}, true));
                this.columnopportunity_feasibility_id.AutoIncrement = true;
                this.columnopportunity_feasibility_id.AutoIncrementSeed = -1;
                this.columnopportunity_feasibility_id.AutoIncrementStep = -1;
                this.columnopportunity_feasibility_id.AllowDBNull = false;
                this.columnopportunity_feasibility_id.ReadOnly = true;
                this.columnrating_value.AllowDBNull = false;
                this.columnrating_value.Unique = true;
                this.columnmeaning.AllowDBNull = false;
                this.columnmeaning.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OPPORTUNITY_FEASIBILITYRow NewOPPORTUNITY_FEASIBILITYRow() {
                return ((OPPORTUNITY_FEASIBILITYRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OPPORTUNITY_FEASIBILITYRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OPPORTUNITY_FEASIBILITYRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OPPORTUNITY_FEASIBILITYRowChanged != null)) {
                    this.OPPORTUNITY_FEASIBILITYRowChanged(this, new OPPORTUNITY_FEASIBILITYRowChangeEvent(((OPPORTUNITY_FEASIBILITYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OPPORTUNITY_FEASIBILITYRowChanging != null)) {
                    this.OPPORTUNITY_FEASIBILITYRowChanging(this, new OPPORTUNITY_FEASIBILITYRowChangeEvent(((OPPORTUNITY_FEASIBILITYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OPPORTUNITY_FEASIBILITYRowDeleted != null)) {
                    this.OPPORTUNITY_FEASIBILITYRowDeleted(this, new OPPORTUNITY_FEASIBILITYRowChangeEvent(((OPPORTUNITY_FEASIBILITYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OPPORTUNITY_FEASIBILITYRowDeleting != null)) {
                    this.OPPORTUNITY_FEASIBILITYRowDeleting(this, new OPPORTUNITY_FEASIBILITYRowChangeEvent(((OPPORTUNITY_FEASIBILITYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOPPORTUNITY_FEASIBILITYRow(OPPORTUNITY_FEASIBILITYRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RetrofitsDataSet ds = new RetrofitsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OPPORTUNITY_FEASIBILITYDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PROJECTDataTable : global::System.Data.TypedTableBase<PROJECTRow> {
            
            private global::System.Data.DataColumn columnproject_id;
            
            private global::System.Data.DataColumn columnsite_id;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnpartnership_type_id;
            
            private global::System.Data.DataColumn columnfacility_type_id;
            
            private global::System.Data.DataColumn columnia_managed_roof;
            
            private global::System.Data.DataColumn columnia_managed_paved;
            
            private global::System.Data.DataColumn columnfacility_size;
            
            private global::System.Data.DataColumn columnstorage_volume;
            
            private global::System.Data.DataColumn columninfiltration_test_id;
            
            private global::System.Data.DataColumn columninfiltration_rate;
            
            private global::System.Data.DataColumn columnproject_status_id;
            
            private global::System.Data.DataColumn columndesigner_id;
            
            private global::System.Data.DataColumn columnconstructor_id;
            
            private global::System.Data.DataColumn columncontractor_id;
            
            private global::System.Data.DataColumn columncity_cost;
            
            private global::System.Data.DataColumn columnprimary_contact_name;
            
            private global::System.Data.DataColumn columnprimary_contact_phone;
            
            private global::System.Data.DataColumn columnprimary_contact_email;
            
            private global::System.Data.DataColumn columnprimary_contact_type_id;
            
            private global::System.Data.DataColumn columnproject_manager_id;
            
            private global::System.Data.DataColumn columno_and_m_id;
            
            private global::System.Data.DataColumn columnpermit_status_id;
            
            private global::System.Data.DataColumn columnmanagement_id;
            
            private global::System.Data.DataColumn columncreate_by;
            
            private global::System.Data.DataColumn columncreate_date;
            
            private global::System.Data.DataColumn columnupdate_by;
            
            private global::System.Data.DataColumn columnupdate_date;
            
            private global::System.Data.DataColumn columnmodified_time;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECTDataTable() {
                this.TableName = "PROJECT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PROJECTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PROJECTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn project_idColumn {
                get {
                    return this.columnproject_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn site_idColumn {
                get {
                    return this.columnsite_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn partnership_type_idColumn {
                get {
                    return this.columnpartnership_type_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn facility_type_idColumn {
                get {
                    return this.columnfacility_type_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ia_managed_roofColumn {
                get {
                    return this.columnia_managed_roof;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ia_managed_pavedColumn {
                get {
                    return this.columnia_managed_paved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn facility_sizeColumn {
                get {
                    return this.columnfacility_size;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn storage_volumeColumn {
                get {
                    return this.columnstorage_volume;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn infiltration_test_idColumn {
                get {
                    return this.columninfiltration_test_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn infiltration_rateColumn {
                get {
                    return this.columninfiltration_rate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn project_status_idColumn {
                get {
                    return this.columnproject_status_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn designer_idColumn {
                get {
                    return this.columndesigner_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn constructor_idColumn {
                get {
                    return this.columnconstructor_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn contractor_idColumn {
                get {
                    return this.columncontractor_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn city_costColumn {
                get {
                    return this.columncity_cost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn primary_contact_nameColumn {
                get {
                    return this.columnprimary_contact_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn primary_contact_phoneColumn {
                get {
                    return this.columnprimary_contact_phone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn primary_contact_emailColumn {
                get {
                    return this.columnprimary_contact_email;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn primary_contact_type_idColumn {
                get {
                    return this.columnprimary_contact_type_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn project_manager_idColumn {
                get {
                    return this.columnproject_manager_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn o_and_m_idColumn {
                get {
                    return this.columno_and_m_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn permit_status_idColumn {
                get {
                    return this.columnpermit_status_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn management_idColumn {
                get {
                    return this.columnmanagement_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn create_byColumn {
                get {
                    return this.columncreate_by;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn create_dateColumn {
                get {
                    return this.columncreate_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn update_byColumn {
                get {
                    return this.columnupdate_by;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn update_dateColumn {
                get {
                    return this.columnupdate_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn modified_timeColumn {
                get {
                    return this.columnmodified_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECTRow this[int index] {
                get {
                    return ((PROJECTRow)(this.Rows[index]));
                }
            }
            
            public event PROJECTRowChangeEventHandler PROJECTRowChanging;
            
            public event PROJECTRowChangeEventHandler PROJECTRowChanged;
            
            public event PROJECTRowChangeEventHandler PROJECTRowDeleting;
            
            public event PROJECTRowChangeEventHandler PROJECTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPROJECTRow(PROJECTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECTRow AddPROJECTRow(
                        int site_id, 
                        string name, 
                        int partnership_type_id, 
                        FACILITY_TYPERow parentFACILITY_TYPERowByFK_PROJECT_FACILITY_TYPE, 
                        int ia_managed_roof, 
                        int ia_managed_paved, 
                        int facility_size, 
                        int storage_volume, 
                        int infiltration_test_id, 
                        decimal infiltration_rate, 
                        PROJECT_STATUSRow parentPROJECT_STATUSRowByFK_PROJECT_PROJECT_STATUS, 
                        int designer_id, 
                        int constructor_id, 
                        int contractor_id, 
                        decimal city_cost, 
                        string primary_contact_name, 
                        string primary_contact_phone, 
                        string primary_contact_email, 
                        int primary_contact_type_id, 
                        int project_manager_id, 
                        int o_and_m_id, 
                        int permit_status_id, 
                        int management_id, 
                        string create_by, 
                        System.DateTime create_date, 
                        string update_by, 
                        System.DateTime update_date, 
                        byte[] modified_time) {
                PROJECTRow rowPROJECTRow = ((PROJECTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        site_id,
                        name,
                        partnership_type_id,
                        null,
                        ia_managed_roof,
                        ia_managed_paved,
                        facility_size,
                        storage_volume,
                        infiltration_test_id,
                        infiltration_rate,
                        null,
                        designer_id,
                        constructor_id,
                        contractor_id,
                        city_cost,
                        primary_contact_name,
                        primary_contact_phone,
                        primary_contact_email,
                        primary_contact_type_id,
                        project_manager_id,
                        o_and_m_id,
                        permit_status_id,
                        management_id,
                        create_by,
                        create_date,
                        update_by,
                        update_date,
                        modified_time};
                if ((parentFACILITY_TYPERowByFK_PROJECT_FACILITY_TYPE != null)) {
                    columnValuesArray[4] = parentFACILITY_TYPERowByFK_PROJECT_FACILITY_TYPE[0];
                }
                if ((parentPROJECT_STATUSRowByFK_PROJECT_PROJECT_STATUS != null)) {
                    columnValuesArray[11] = parentPROJECT_STATUSRowByFK_PROJECT_PROJECT_STATUS[0];
                }
                rowPROJECTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPROJECTRow);
                return rowPROJECTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECTRow FindByproject_id(int project_id) {
                return ((PROJECTRow)(this.Rows.Find(new object[] {
                            project_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PROJECTDataTable cln = ((PROJECTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PROJECTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnproject_id = base.Columns["project_id"];
                this.columnsite_id = base.Columns["site_id"];
                this.columnname = base.Columns["name"];
                this.columnpartnership_type_id = base.Columns["partnership_type_id"];
                this.columnfacility_type_id = base.Columns["facility_type_id"];
                this.columnia_managed_roof = base.Columns["ia_managed_roof"];
                this.columnia_managed_paved = base.Columns["ia_managed_paved"];
                this.columnfacility_size = base.Columns["facility_size"];
                this.columnstorage_volume = base.Columns["storage_volume"];
                this.columninfiltration_test_id = base.Columns["infiltration_test_id"];
                this.columninfiltration_rate = base.Columns["infiltration_rate"];
                this.columnproject_status_id = base.Columns["project_status_id"];
                this.columndesigner_id = base.Columns["designer_id"];
                this.columnconstructor_id = base.Columns["constructor_id"];
                this.columncontractor_id = base.Columns["contractor_id"];
                this.columncity_cost = base.Columns["city_cost"];
                this.columnprimary_contact_name = base.Columns["primary_contact_name"];
                this.columnprimary_contact_phone = base.Columns["primary_contact_phone"];
                this.columnprimary_contact_email = base.Columns["primary_contact_email"];
                this.columnprimary_contact_type_id = base.Columns["primary_contact_type_id"];
                this.columnproject_manager_id = base.Columns["project_manager_id"];
                this.columno_and_m_id = base.Columns["o_and_m_id"];
                this.columnpermit_status_id = base.Columns["permit_status_id"];
                this.columnmanagement_id = base.Columns["management_id"];
                this.columncreate_by = base.Columns["create_by"];
                this.columncreate_date = base.Columns["create_date"];
                this.columnupdate_by = base.Columns["update_by"];
                this.columnupdate_date = base.Columns["update_date"];
                this.columnmodified_time = base.Columns["modified_time"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnproject_id = new global::System.Data.DataColumn("project_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnproject_id);
                this.columnsite_id = new global::System.Data.DataColumn("site_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsite_id);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnpartnership_type_id = new global::System.Data.DataColumn("partnership_type_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpartnership_type_id);
                this.columnfacility_type_id = new global::System.Data.DataColumn("facility_type_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfacility_type_id);
                this.columnia_managed_roof = new global::System.Data.DataColumn("ia_managed_roof", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnia_managed_roof);
                this.columnia_managed_paved = new global::System.Data.DataColumn("ia_managed_paved", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnia_managed_paved);
                this.columnfacility_size = new global::System.Data.DataColumn("facility_size", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfacility_size);
                this.columnstorage_volume = new global::System.Data.DataColumn("storage_volume", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstorage_volume);
                this.columninfiltration_test_id = new global::System.Data.DataColumn("infiltration_test_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninfiltration_test_id);
                this.columninfiltration_rate = new global::System.Data.DataColumn("infiltration_rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninfiltration_rate);
                this.columnproject_status_id = new global::System.Data.DataColumn("project_status_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnproject_status_id);
                this.columndesigner_id = new global::System.Data.DataColumn("designer_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndesigner_id);
                this.columnconstructor_id = new global::System.Data.DataColumn("constructor_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconstructor_id);
                this.columncontractor_id = new global::System.Data.DataColumn("contractor_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncontractor_id);
                this.columncity_cost = new global::System.Data.DataColumn("city_cost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncity_cost);
                this.columnprimary_contact_name = new global::System.Data.DataColumn("primary_contact_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprimary_contact_name);
                this.columnprimary_contact_phone = new global::System.Data.DataColumn("primary_contact_phone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprimary_contact_phone);
                this.columnprimary_contact_email = new global::System.Data.DataColumn("primary_contact_email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprimary_contact_email);
                this.columnprimary_contact_type_id = new global::System.Data.DataColumn("primary_contact_type_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprimary_contact_type_id);
                this.columnproject_manager_id = new global::System.Data.DataColumn("project_manager_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnproject_manager_id);
                this.columno_and_m_id = new global::System.Data.DataColumn("o_and_m_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columno_and_m_id);
                this.columnpermit_status_id = new global::System.Data.DataColumn("permit_status_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpermit_status_id);
                this.columnmanagement_id = new global::System.Data.DataColumn("management_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmanagement_id);
                this.columncreate_by = new global::System.Data.DataColumn("create_by", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncreate_by);
                this.columncreate_date = new global::System.Data.DataColumn("create_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncreate_date);
                this.columnupdate_by = new global::System.Data.DataColumn("update_by", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdate_by);
                this.columnupdate_date = new global::System.Data.DataColumn("update_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdate_date);
                this.columnmodified_time = new global::System.Data.DataColumn("modified_time", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodified_time);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnproject_id}, true));
                this.columnproject_id.AutoIncrement = true;
                this.columnproject_id.AutoIncrementSeed = -1;
                this.columnproject_id.AutoIncrementStep = -1;
                this.columnproject_id.AllowDBNull = false;
                this.columnproject_id.ReadOnly = true;
                this.columnproject_id.Unique = true;
                this.columnsite_id.AllowDBNull = false;
                this.columnname.AllowDBNull = false;
                this.columnname.MaxLength = 50;
                this.columnpartnership_type_id.AllowDBNull = false;
                this.columnfacility_type_id.AllowDBNull = false;
                this.columnia_managed_roof.AllowDBNull = false;
                this.columnia_managed_paved.AllowDBNull = false;
                this.columnfacility_size.AllowDBNull = false;
                this.columnstorage_volume.AllowDBNull = false;
                this.columninfiltration_test_id.AllowDBNull = false;
                this.columninfiltration_rate.AllowDBNull = false;
                this.columnproject_status_id.AllowDBNull = false;
                this.columndesigner_id.AllowDBNull = false;
                this.columnconstructor_id.AllowDBNull = false;
                this.columncontractor_id.AllowDBNull = false;
                this.columncity_cost.AllowDBNull = false;
                this.columnprimary_contact_name.AllowDBNull = false;
                this.columnprimary_contact_name.MaxLength = 250;
                this.columnprimary_contact_phone.AllowDBNull = false;
                this.columnprimary_contact_phone.MaxLength = 15;
                this.columnprimary_contact_email.MaxLength = 250;
                this.columnprimary_contact_type_id.AllowDBNull = false;
                this.columnproject_manager_id.AllowDBNull = false;
                this.columno_and_m_id.AllowDBNull = false;
                this.columnpermit_status_id.AllowDBNull = false;
                this.columnmanagement_id.AllowDBNull = false;
                this.columncreate_by.AllowDBNull = false;
                this.columncreate_by.MaxLength = 20;
                this.columncreate_date.AllowDBNull = false;
                this.columnupdate_by.AllowDBNull = false;
                this.columnupdate_by.MaxLength = 20;
                this.columnupdate_date.AllowDBNull = false;
                this.columnmodified_time.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECTRow NewPROJECTRow() {
                return ((PROJECTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PROJECTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PROJECTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PROJECTRowChanged != null)) {
                    this.PROJECTRowChanged(this, new PROJECTRowChangeEvent(((PROJECTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PROJECTRowChanging != null)) {
                    this.PROJECTRowChanging(this, new PROJECTRowChangeEvent(((PROJECTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PROJECTRowDeleted != null)) {
                    this.PROJECTRowDeleted(this, new PROJECTRowChangeEvent(((PROJECTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PROJECTRowDeleting != null)) {
                    this.PROJECTRowDeleting(this, new PROJECTRowChangeEvent(((PROJECTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePROJECTRow(PROJECTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RetrofitsDataSet ds = new RetrofitsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PROJECTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PROJECT_STATUSDataTable : global::System.Data.TypedTableBase<PROJECT_STATUSRow> {
            
            private global::System.Data.DataColumn columnproject_status_id;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columndisplay_order;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECT_STATUSDataTable() {
                this.TableName = "PROJECT_STATUS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PROJECT_STATUSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PROJECT_STATUSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn project_status_idColumn {
                get {
                    return this.columnproject_status_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn display_orderColumn {
                get {
                    return this.columndisplay_order;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECT_STATUSRow this[int index] {
                get {
                    return ((PROJECT_STATUSRow)(this.Rows[index]));
                }
            }
            
            public event PROJECT_STATUSRowChangeEventHandler PROJECT_STATUSRowChanging;
            
            public event PROJECT_STATUSRowChangeEventHandler PROJECT_STATUSRowChanged;
            
            public event PROJECT_STATUSRowChangeEventHandler PROJECT_STATUSRowDeleting;
            
            public event PROJECT_STATUSRowChangeEventHandler PROJECT_STATUSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPROJECT_STATUSRow(PROJECT_STATUSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECT_STATUSRow AddPROJECT_STATUSRow(string name, int display_order) {
                PROJECT_STATUSRow rowPROJECT_STATUSRow = ((PROJECT_STATUSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        name,
                        display_order};
                rowPROJECT_STATUSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPROJECT_STATUSRow);
                return rowPROJECT_STATUSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECT_STATUSRow FindByproject_status_id(int project_status_id) {
                return ((PROJECT_STATUSRow)(this.Rows.Find(new object[] {
                            project_status_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PROJECT_STATUSDataTable cln = ((PROJECT_STATUSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PROJECT_STATUSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnproject_status_id = base.Columns["project_status_id"];
                this.columnname = base.Columns["name"];
                this.columndisplay_order = base.Columns["display_order"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnproject_status_id = new global::System.Data.DataColumn("project_status_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnproject_status_id);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columndisplay_order = new global::System.Data.DataColumn("display_order", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndisplay_order);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnproject_status_id}, true));
                this.columnproject_status_id.AutoIncrement = true;
                this.columnproject_status_id.AutoIncrementSeed = -1;
                this.columnproject_status_id.AutoIncrementStep = -1;
                this.columnproject_status_id.AllowDBNull = false;
                this.columnproject_status_id.ReadOnly = true;
                this.columnproject_status_id.Unique = true;
                this.columnname.AllowDBNull = false;
                this.columnname.MaxLength = 50;
                this.columndisplay_order.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECT_STATUSRow NewPROJECT_STATUSRow() {
                return ((PROJECT_STATUSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PROJECT_STATUSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PROJECT_STATUSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PROJECT_STATUSRowChanged != null)) {
                    this.PROJECT_STATUSRowChanged(this, new PROJECT_STATUSRowChangeEvent(((PROJECT_STATUSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PROJECT_STATUSRowChanging != null)) {
                    this.PROJECT_STATUSRowChanging(this, new PROJECT_STATUSRowChangeEvent(((PROJECT_STATUSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PROJECT_STATUSRowDeleted != null)) {
                    this.PROJECT_STATUSRowDeleted(this, new PROJECT_STATUSRowChangeEvent(((PROJECT_STATUSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PROJECT_STATUSRowDeleting != null)) {
                    this.PROJECT_STATUSRowDeleting(this, new PROJECT_STATUSRowChangeEvent(((PROJECT_STATUSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePROJECT_STATUSRow(PROJECT_STATUSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RetrofitsDataSet ds = new RetrofitsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PROJECT_STATUSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SITE_ASSESSMENTDataTable : global::System.Data.TypedTableBase<SITE_ASSESSMENTRow> {
            
            private global::System.Data.DataColumn columnsite_assessment_id;
            
            private global::System.Data.DataColumn columnsite_id;
            
            private global::System.Data.DataColumn columnassessment_date;
            
            private global::System.Data.DataColumn columnstaff_id;
            
            private global::System.Data.DataColumn columninformation_source_id;
            
            private global::System.Data.DataColumn columnia_type_id;
            
            private global::System.Data.DataColumn columnia_sqft;
            
            private global::System.Data.DataColumn columndestination_id;
            
            private global::System.Data.DataColumn columnmanagement_id;
            
            private global::System.Data.DataColumn columnfacility_type_id;
            
            private global::System.Data.DataColumn columnhansen_id;
            
            private global::System.Data.DataColumn columnassessment_type_id;
            
            private global::System.Data.DataColumn columngis_uniqueid;
            
            private global::System.Data.DataColumn columnproject_id;
            
            private global::System.Data.DataColumn columncreate_by;
            
            private global::System.Data.DataColumn columncreate_date;
            
            private global::System.Data.DataColumn columnupdate_by;
            
            private global::System.Data.DataColumn columnupdate_date;
            
            private global::System.Data.DataColumn columnmodified_time;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITE_ASSESSMENTDataTable() {
                this.TableName = "SITE_ASSESSMENT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SITE_ASSESSMENTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SITE_ASSESSMENTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn site_assessment_idColumn {
                get {
                    return this.columnsite_assessment_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn site_idColumn {
                get {
                    return this.columnsite_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assessment_dateColumn {
                get {
                    return this.columnassessment_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn staff_idColumn {
                get {
                    return this.columnstaff_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn information_source_idColumn {
                get {
                    return this.columninformation_source_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ia_type_idColumn {
                get {
                    return this.columnia_type_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ia_sqftColumn {
                get {
                    return this.columnia_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn destination_idColumn {
                get {
                    return this.columndestination_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn management_idColumn {
                get {
                    return this.columnmanagement_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn facility_type_idColumn {
                get {
                    return this.columnfacility_type_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hansen_idColumn {
                get {
                    return this.columnhansen_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assessment_type_idColumn {
                get {
                    return this.columnassessment_type_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gis_uniqueidColumn {
                get {
                    return this.columngis_uniqueid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn project_idColumn {
                get {
                    return this.columnproject_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn create_byColumn {
                get {
                    return this.columncreate_by;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn create_dateColumn {
                get {
                    return this.columncreate_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn update_byColumn {
                get {
                    return this.columnupdate_by;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn update_dateColumn {
                get {
                    return this.columnupdate_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn modified_timeColumn {
                get {
                    return this.columnmodified_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITE_ASSESSMENTRow this[int index] {
                get {
                    return ((SITE_ASSESSMENTRow)(this.Rows[index]));
                }
            }
            
            public event SITE_ASSESSMENTRowChangeEventHandler SITE_ASSESSMENTRowChanging;
            
            public event SITE_ASSESSMENTRowChangeEventHandler SITE_ASSESSMENTRowChanged;
            
            public event SITE_ASSESSMENTRowChangeEventHandler SITE_ASSESSMENTRowDeleting;
            
            public event SITE_ASSESSMENTRowChangeEventHandler SITE_ASSESSMENTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSITE_ASSESSMENTRow(SITE_ASSESSMENTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITE_ASSESSMENTRow AddSITE_ASSESSMENTRow(
                        SITERow parentSITERowByFK_SITE_ASSESSMENT_SITE, 
                        System.DateTime assessment_date, 
                        int staff_id, 
                        int information_source_id, 
                        IMPERVIOUS_AREA_TYPERow parentIMPERVIOUS_AREA_TYPERowByFK_SITE_ASSESSMENT_IMPERVIOUS_AREA_TYPE, 
                        int ia_sqft, 
                        DESTINATIONRow parentDESTINATIONRowByFK_SITE_ASSESSMENT_DESTINATION, 
                        int management_id, 
                        FACILITY_TYPERow parentFACILITY_TYPERowByFK_SITE_ASSESSMENT_FACILITY_TYPE, 
                        string hansen_id, 
                        ASSESSMENT_TYPERow parentASSESSMENT_TYPERowByFK_SITE_ASSESSMENT_ASSESSMENT_TYPE, 
                        System.Guid gis_uniqueid, 
                        PROJECTRow parentPROJECTRowByFK_SITE_ASSESSMENT_PROJECT, 
                        string create_by, 
                        System.DateTime create_date, 
                        string update_by, 
                        System.DateTime update_date, 
                        byte[] modified_time) {
                SITE_ASSESSMENTRow rowSITE_ASSESSMENTRow = ((SITE_ASSESSMENTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        assessment_date,
                        staff_id,
                        information_source_id,
                        null,
                        ia_sqft,
                        null,
                        management_id,
                        null,
                        hansen_id,
                        null,
                        gis_uniqueid,
                        null,
                        create_by,
                        create_date,
                        update_by,
                        update_date,
                        modified_time};
                if ((parentSITERowByFK_SITE_ASSESSMENT_SITE != null)) {
                    columnValuesArray[1] = parentSITERowByFK_SITE_ASSESSMENT_SITE[0];
                }
                if ((parentIMPERVIOUS_AREA_TYPERowByFK_SITE_ASSESSMENT_IMPERVIOUS_AREA_TYPE != null)) {
                    columnValuesArray[5] = parentIMPERVIOUS_AREA_TYPERowByFK_SITE_ASSESSMENT_IMPERVIOUS_AREA_TYPE[0];
                }
                if ((parentDESTINATIONRowByFK_SITE_ASSESSMENT_DESTINATION != null)) {
                    columnValuesArray[7] = parentDESTINATIONRowByFK_SITE_ASSESSMENT_DESTINATION[0];
                }
                if ((parentFACILITY_TYPERowByFK_SITE_ASSESSMENT_FACILITY_TYPE != null)) {
                    columnValuesArray[9] = parentFACILITY_TYPERowByFK_SITE_ASSESSMENT_FACILITY_TYPE[0];
                }
                if ((parentASSESSMENT_TYPERowByFK_SITE_ASSESSMENT_ASSESSMENT_TYPE != null)) {
                    columnValuesArray[11] = parentASSESSMENT_TYPERowByFK_SITE_ASSESSMENT_ASSESSMENT_TYPE[0];
                }
                if ((parentPROJECTRowByFK_SITE_ASSESSMENT_PROJECT != null)) {
                    columnValuesArray[13] = parentPROJECTRowByFK_SITE_ASSESSMENT_PROJECT[0];
                }
                rowSITE_ASSESSMENTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSITE_ASSESSMENTRow);
                return rowSITE_ASSESSMENTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITE_ASSESSMENTRow FindBysite_assessment_id(int site_assessment_id) {
                return ((SITE_ASSESSMENTRow)(this.Rows.Find(new object[] {
                            site_assessment_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SITE_ASSESSMENTDataTable cln = ((SITE_ASSESSMENTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SITE_ASSESSMENTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsite_assessment_id = base.Columns["site_assessment_id"];
                this.columnsite_id = base.Columns["site_id"];
                this.columnassessment_date = base.Columns["assessment_date"];
                this.columnstaff_id = base.Columns["staff_id"];
                this.columninformation_source_id = base.Columns["information_source_id"];
                this.columnia_type_id = base.Columns["ia_type_id"];
                this.columnia_sqft = base.Columns["ia_sqft"];
                this.columndestination_id = base.Columns["destination_id"];
                this.columnmanagement_id = base.Columns["management_id"];
                this.columnfacility_type_id = base.Columns["facility_type_id"];
                this.columnhansen_id = base.Columns["hansen_id"];
                this.columnassessment_type_id = base.Columns["assessment_type_id"];
                this.columngis_uniqueid = base.Columns["gis_uniqueid"];
                this.columnproject_id = base.Columns["project_id"];
                this.columncreate_by = base.Columns["create_by"];
                this.columncreate_date = base.Columns["create_date"];
                this.columnupdate_by = base.Columns["update_by"];
                this.columnupdate_date = base.Columns["update_date"];
                this.columnmodified_time = base.Columns["modified_time"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsite_assessment_id = new global::System.Data.DataColumn("site_assessment_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsite_assessment_id);
                this.columnsite_id = new global::System.Data.DataColumn("site_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsite_id);
                this.columnassessment_date = new global::System.Data.DataColumn("assessment_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassessment_date);
                this.columnstaff_id = new global::System.Data.DataColumn("staff_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstaff_id);
                this.columninformation_source_id = new global::System.Data.DataColumn("information_source_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninformation_source_id);
                this.columnia_type_id = new global::System.Data.DataColumn("ia_type_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnia_type_id);
                this.columnia_sqft = new global::System.Data.DataColumn("ia_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnia_sqft);
                this.columndestination_id = new global::System.Data.DataColumn("destination_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndestination_id);
                this.columnmanagement_id = new global::System.Data.DataColumn("management_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmanagement_id);
                this.columnfacility_type_id = new global::System.Data.DataColumn("facility_type_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfacility_type_id);
                this.columnhansen_id = new global::System.Data.DataColumn("hansen_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhansen_id);
                this.columnassessment_type_id = new global::System.Data.DataColumn("assessment_type_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassessment_type_id);
                this.columngis_uniqueid = new global::System.Data.DataColumn("gis_uniqueid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngis_uniqueid);
                this.columnproject_id = new global::System.Data.DataColumn("project_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnproject_id);
                this.columncreate_by = new global::System.Data.DataColumn("create_by", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncreate_by);
                this.columncreate_date = new global::System.Data.DataColumn("create_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncreate_date);
                this.columnupdate_by = new global::System.Data.DataColumn("update_by", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdate_by);
                this.columnupdate_date = new global::System.Data.DataColumn("update_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdate_date);
                this.columnmodified_time = new global::System.Data.DataColumn("modified_time", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodified_time);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsite_assessment_id}, true));
                this.columnsite_assessment_id.AutoIncrement = true;
                this.columnsite_assessment_id.AutoIncrementSeed = -1;
                this.columnsite_assessment_id.AutoIncrementStep = -1;
                this.columnsite_assessment_id.AllowDBNull = false;
                this.columnsite_assessment_id.ReadOnly = true;
                this.columnsite_assessment_id.Unique = true;
                this.columnsite_id.AllowDBNull = false;
                this.columnassessment_date.AllowDBNull = false;
                this.columnstaff_id.AllowDBNull = false;
                this.columninformation_source_id.AllowDBNull = false;
                this.columnia_type_id.AllowDBNull = false;
                this.columndestination_id.AllowDBNull = false;
                this.columnhansen_id.MaxLength = 10;
                this.columnassessment_type_id.AllowDBNull = false;
                this.columncreate_by.AllowDBNull = false;
                this.columncreate_by.MaxLength = 20;
                this.columncreate_date.AllowDBNull = false;
                this.columnupdate_by.AllowDBNull = false;
                this.columnupdate_by.MaxLength = 20;
                this.columnupdate_date.AllowDBNull = false;
                this.columnmodified_time.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITE_ASSESSMENTRow NewSITE_ASSESSMENTRow() {
                return ((SITE_ASSESSMENTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SITE_ASSESSMENTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SITE_ASSESSMENTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SITE_ASSESSMENTRowChanged != null)) {
                    this.SITE_ASSESSMENTRowChanged(this, new SITE_ASSESSMENTRowChangeEvent(((SITE_ASSESSMENTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SITE_ASSESSMENTRowChanging != null)) {
                    this.SITE_ASSESSMENTRowChanging(this, new SITE_ASSESSMENTRowChangeEvent(((SITE_ASSESSMENTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SITE_ASSESSMENTRowDeleted != null)) {
                    this.SITE_ASSESSMENTRowDeleted(this, new SITE_ASSESSMENTRowChangeEvent(((SITE_ASSESSMENTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SITE_ASSESSMENTRowDeleting != null)) {
                    this.SITE_ASSESSMENTRowDeleting(this, new SITE_ASSESSMENTRowChangeEvent(((SITE_ASSESSMENTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSITE_ASSESSMENTRow(SITE_ASSESSMENTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RetrofitsDataSet ds = new RetrofitsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SITE_ASSESSMENTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SITE_OPPORTUNITYDataTable : global::System.Data.TypedTableBase<SITE_OPPORTUNITYRow> {
            
            private global::System.Data.DataColumn columnsite_opportunity_id;
            
            private global::System.Data.DataColumn columnsite_id;
            
            private global::System.Data.DataColumn columnia_sqft;
            
            private global::System.Data.DataColumn columnmanagement_id;
            
            private global::System.Data.DataColumn columnfacility_type_id;
            
            private global::System.Data.DataColumn columnopportunity_feasibility;
            
            private global::System.Data.DataColumn columncreate_by;
            
            private global::System.Data.DataColumn columncreate_date;
            
            private global::System.Data.DataColumn columnupdate_by;
            
            private global::System.Data.DataColumn columnupdate_date;
            
            private global::System.Data.DataColumn columnmodified_time;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITE_OPPORTUNITYDataTable() {
                this.TableName = "SITE_OPPORTUNITY";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SITE_OPPORTUNITYDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SITE_OPPORTUNITYDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn site_opportunity_idColumn {
                get {
                    return this.columnsite_opportunity_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn site_idColumn {
                get {
                    return this.columnsite_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ia_sqftColumn {
                get {
                    return this.columnia_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn management_idColumn {
                get {
                    return this.columnmanagement_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn facility_type_idColumn {
                get {
                    return this.columnfacility_type_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn opportunity_feasibilityColumn {
                get {
                    return this.columnopportunity_feasibility;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn create_byColumn {
                get {
                    return this.columncreate_by;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn create_dateColumn {
                get {
                    return this.columncreate_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn update_byColumn {
                get {
                    return this.columnupdate_by;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn update_dateColumn {
                get {
                    return this.columnupdate_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn modified_timeColumn {
                get {
                    return this.columnmodified_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITE_OPPORTUNITYRow this[int index] {
                get {
                    return ((SITE_OPPORTUNITYRow)(this.Rows[index]));
                }
            }
            
            public event SITE_OPPORTUNITYRowChangeEventHandler SITE_OPPORTUNITYRowChanging;
            
            public event SITE_OPPORTUNITYRowChangeEventHandler SITE_OPPORTUNITYRowChanged;
            
            public event SITE_OPPORTUNITYRowChangeEventHandler SITE_OPPORTUNITYRowDeleting;
            
            public event SITE_OPPORTUNITYRowChangeEventHandler SITE_OPPORTUNITYRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSITE_OPPORTUNITYRow(SITE_OPPORTUNITYRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITE_OPPORTUNITYRow AddSITE_OPPORTUNITYRow(SITERow parentSITERowByFK_SITE_OPPORTUNITY_SITE, int ia_sqft, int management_id, FACILITY_TYPERow parentFACILITY_TYPERowByFK_SITE_OPPORTUNITY_FACILITY_TYPE, int opportunity_feasibility, string create_by, System.DateTime create_date, string update_by, System.DateTime update_date, byte[] modified_time) {
                SITE_OPPORTUNITYRow rowSITE_OPPORTUNITYRow = ((SITE_OPPORTUNITYRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        ia_sqft,
                        management_id,
                        null,
                        opportunity_feasibility,
                        create_by,
                        create_date,
                        update_by,
                        update_date,
                        modified_time};
                if ((parentSITERowByFK_SITE_OPPORTUNITY_SITE != null)) {
                    columnValuesArray[1] = parentSITERowByFK_SITE_OPPORTUNITY_SITE[0];
                }
                if ((parentFACILITY_TYPERowByFK_SITE_OPPORTUNITY_FACILITY_TYPE != null)) {
                    columnValuesArray[4] = parentFACILITY_TYPERowByFK_SITE_OPPORTUNITY_FACILITY_TYPE[0];
                }
                rowSITE_OPPORTUNITYRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSITE_OPPORTUNITYRow);
                return rowSITE_OPPORTUNITYRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITE_OPPORTUNITYRow FindBysite_opportunity_id(int site_opportunity_id) {
                return ((SITE_OPPORTUNITYRow)(this.Rows.Find(new object[] {
                            site_opportunity_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SITE_OPPORTUNITYDataTable cln = ((SITE_OPPORTUNITYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SITE_OPPORTUNITYDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsite_opportunity_id = base.Columns["site_opportunity_id"];
                this.columnsite_id = base.Columns["site_id"];
                this.columnia_sqft = base.Columns["ia_sqft"];
                this.columnmanagement_id = base.Columns["management_id"];
                this.columnfacility_type_id = base.Columns["facility_type_id"];
                this.columnopportunity_feasibility = base.Columns["opportunity_feasibility"];
                this.columncreate_by = base.Columns["create_by"];
                this.columncreate_date = base.Columns["create_date"];
                this.columnupdate_by = base.Columns["update_by"];
                this.columnupdate_date = base.Columns["update_date"];
                this.columnmodified_time = base.Columns["modified_time"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsite_opportunity_id = new global::System.Data.DataColumn("site_opportunity_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsite_opportunity_id);
                this.columnsite_id = new global::System.Data.DataColumn("site_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsite_id);
                this.columnia_sqft = new global::System.Data.DataColumn("ia_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnia_sqft);
                this.columnmanagement_id = new global::System.Data.DataColumn("management_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmanagement_id);
                this.columnfacility_type_id = new global::System.Data.DataColumn("facility_type_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfacility_type_id);
                this.columnopportunity_feasibility = new global::System.Data.DataColumn("opportunity_feasibility", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnopportunity_feasibility);
                this.columncreate_by = new global::System.Data.DataColumn("create_by", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncreate_by);
                this.columncreate_date = new global::System.Data.DataColumn("create_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncreate_date);
                this.columnupdate_by = new global::System.Data.DataColumn("update_by", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdate_by);
                this.columnupdate_date = new global::System.Data.DataColumn("update_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdate_date);
                this.columnmodified_time = new global::System.Data.DataColumn("modified_time", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodified_time);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsite_opportunity_id}, true));
                this.columnsite_opportunity_id.AutoIncrement = true;
                this.columnsite_opportunity_id.AutoIncrementSeed = -1;
                this.columnsite_opportunity_id.AutoIncrementStep = -1;
                this.columnsite_opportunity_id.AllowDBNull = false;
                this.columnsite_opportunity_id.ReadOnly = true;
                this.columnsite_opportunity_id.Unique = true;
                this.columnsite_id.AllowDBNull = false;
                this.columnia_sqft.AllowDBNull = false;
                this.columnmanagement_id.AllowDBNull = false;
                this.columnfacility_type_id.AllowDBNull = false;
                this.columnopportunity_feasibility.AllowDBNull = false;
                this.columncreate_by.AllowDBNull = false;
                this.columncreate_by.MaxLength = 20;
                this.columncreate_date.AllowDBNull = false;
                this.columnupdate_by.AllowDBNull = false;
                this.columnupdate_by.MaxLength = 20;
                this.columnupdate_date.AllowDBNull = false;
                this.columnmodified_time.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITE_OPPORTUNITYRow NewSITE_OPPORTUNITYRow() {
                return ((SITE_OPPORTUNITYRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SITE_OPPORTUNITYRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SITE_OPPORTUNITYRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SITE_OPPORTUNITYRowChanged != null)) {
                    this.SITE_OPPORTUNITYRowChanged(this, new SITE_OPPORTUNITYRowChangeEvent(((SITE_OPPORTUNITYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SITE_OPPORTUNITYRowChanging != null)) {
                    this.SITE_OPPORTUNITYRowChanging(this, new SITE_OPPORTUNITYRowChangeEvent(((SITE_OPPORTUNITYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SITE_OPPORTUNITYRowDeleted != null)) {
                    this.SITE_OPPORTUNITYRowDeleted(this, new SITE_OPPORTUNITYRowChangeEvent(((SITE_OPPORTUNITYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SITE_OPPORTUNITYRowDeleting != null)) {
                    this.SITE_OPPORTUNITYRowDeleting(this, new SITE_OPPORTUNITYRowChangeEvent(((SITE_OPPORTUNITYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSITE_OPPORTUNITYRow(SITE_OPPORTUNITYRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RetrofitsDataSet ds = new RetrofitsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SITE_OPPORTUNITYDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SITEDataTable : global::System.Data.TypedTableBase<SITERow> {
            
            private global::System.Data.DataColumn columnsite_id;
            
            private global::System.Data.DataColumn columnproperty_id;
            
            private global::System.Data.DataColumn columnsite_use;
            
            private global::System.Data.DataColumn columnsite_use_description;
            
            private global::System.Data.DataColumn columnneighborhood;
            
            private global::System.Data.DataColumn columnsewer_basin;
            
            private global::System.Data.DataColumn columnretro_basin;
            
            private global::System.Data.DataColumn columncreate_by;
            
            private global::System.Data.DataColumn columncreate_date;
            
            private global::System.Data.DataColumn columnupdate_by;
            
            private global::System.Data.DataColumn columnupdate_date;
            
            private global::System.Data.DataColumn columnmodified_time;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITEDataTable() {
                this.TableName = "SITE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SITEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SITEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn site_idColumn {
                get {
                    return this.columnsite_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn property_idColumn {
                get {
                    return this.columnproperty_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn site_useColumn {
                get {
                    return this.columnsite_use;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn site_use_descriptionColumn {
                get {
                    return this.columnsite_use_description;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn neighborhoodColumn {
                get {
                    return this.columnneighborhood;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sewer_basinColumn {
                get {
                    return this.columnsewer_basin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn retro_basinColumn {
                get {
                    return this.columnretro_basin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn create_byColumn {
                get {
                    return this.columncreate_by;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn create_dateColumn {
                get {
                    return this.columncreate_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn update_byColumn {
                get {
                    return this.columnupdate_by;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn update_dateColumn {
                get {
                    return this.columnupdate_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn modified_timeColumn {
                get {
                    return this.columnmodified_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITERow this[int index] {
                get {
                    return ((SITERow)(this.Rows[index]));
                }
            }
            
            public event SITERowChangeEventHandler SITERowChanging;
            
            public event SITERowChangeEventHandler SITERowChanged;
            
            public event SITERowChangeEventHandler SITERowDeleting;
            
            public event SITERowChangeEventHandler SITERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSITERow(SITERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITERow AddSITERow(string property_id, string site_use, string site_use_description, string neighborhood, string sewer_basin, string retro_basin, string create_by, System.DateTime create_date, string update_by, System.DateTime update_date, byte[] modified_time) {
                SITERow rowSITERow = ((SITERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        property_id,
                        site_use,
                        site_use_description,
                        neighborhood,
                        sewer_basin,
                        retro_basin,
                        create_by,
                        create_date,
                        update_by,
                        update_date,
                        modified_time};
                rowSITERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSITERow);
                return rowSITERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITERow FindBysite_id(int site_id) {
                return ((SITERow)(this.Rows.Find(new object[] {
                            site_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SITEDataTable cln = ((SITEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SITEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsite_id = base.Columns["site_id"];
                this.columnproperty_id = base.Columns["property_id"];
                this.columnsite_use = base.Columns["site_use"];
                this.columnsite_use_description = base.Columns["site_use_description"];
                this.columnneighborhood = base.Columns["neighborhood"];
                this.columnsewer_basin = base.Columns["sewer_basin"];
                this.columnretro_basin = base.Columns["retro_basin"];
                this.columncreate_by = base.Columns["create_by"];
                this.columncreate_date = base.Columns["create_date"];
                this.columnupdate_by = base.Columns["update_by"];
                this.columnupdate_date = base.Columns["update_date"];
                this.columnmodified_time = base.Columns["modified_time"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsite_id = new global::System.Data.DataColumn("site_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsite_id);
                this.columnproperty_id = new global::System.Data.DataColumn("property_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnproperty_id);
                this.columnsite_use = new global::System.Data.DataColumn("site_use", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsite_use);
                this.columnsite_use_description = new global::System.Data.DataColumn("site_use_description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsite_use_description);
                this.columnneighborhood = new global::System.Data.DataColumn("neighborhood", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnneighborhood);
                this.columnsewer_basin = new global::System.Data.DataColumn("sewer_basin", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsewer_basin);
                this.columnretro_basin = new global::System.Data.DataColumn("retro_basin", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnretro_basin);
                this.columncreate_by = new global::System.Data.DataColumn("create_by", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncreate_by);
                this.columncreate_date = new global::System.Data.DataColumn("create_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncreate_date);
                this.columnupdate_by = new global::System.Data.DataColumn("update_by", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdate_by);
                this.columnupdate_date = new global::System.Data.DataColumn("update_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdate_date);
                this.columnmodified_time = new global::System.Data.DataColumn("modified_time", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodified_time);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsite_id}, true));
                this.columnsite_id.AutoIncrement = true;
                this.columnsite_id.AutoIncrementSeed = -1;
                this.columnsite_id.AutoIncrementStep = -1;
                this.columnsite_id.AllowDBNull = false;
                this.columnsite_id.ReadOnly = true;
                this.columnsite_id.Unique = true;
                this.columnproperty_id.AllowDBNull = false;
                this.columnproperty_id.MaxLength = 7;
                this.columnsite_use.MaxLength = 50;
                this.columnsite_use_description.MaxLength = 50;
                this.columnneighborhood.AllowDBNull = false;
                this.columnneighborhood.MaxLength = 50;
                this.columnsewer_basin.AllowDBNull = false;
                this.columnsewer_basin.MaxLength = 50;
                this.columnretro_basin.AllowDBNull = false;
                this.columnretro_basin.MaxLength = 50;
                this.columncreate_by.AllowDBNull = false;
                this.columncreate_by.MaxLength = 20;
                this.columncreate_date.AllowDBNull = false;
                this.columnupdate_by.AllowDBNull = false;
                this.columnupdate_by.MaxLength = 20;
                this.columnupdate_date.AllowDBNull = false;
                this.columnmodified_time.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITERow NewSITERow() {
                return ((SITERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SITERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SITERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SITERowChanged != null)) {
                    this.SITERowChanged(this, new SITERowChangeEvent(((SITERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SITERowChanging != null)) {
                    this.SITERowChanging(this, new SITERowChangeEvent(((SITERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SITERowDeleted != null)) {
                    this.SITERowDeleted(this, new SITERowChangeEvent(((SITERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SITERowDeleting != null)) {
                    this.SITERowDeleting(this, new SITERowChangeEvent(((SITERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSITERow(SITERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RetrofitsDataSet ds = new RetrofitsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SITEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RETRO_BASINDataTable : global::System.Data.TypedTableBase<RETRO_BASINRow> {
            
            private global::System.Data.DataColumn columnretro_basin_id;
            
            private global::System.Data.DataColumn columnname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RETRO_BASINDataTable() {
                this.TableName = "RETRO_BASIN";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RETRO_BASINDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RETRO_BASINDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn retro_basin_idColumn {
                get {
                    return this.columnretro_basin_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RETRO_BASINRow this[int index] {
                get {
                    return ((RETRO_BASINRow)(this.Rows[index]));
                }
            }
            
            public event RETRO_BASINRowChangeEventHandler RETRO_BASINRowChanging;
            
            public event RETRO_BASINRowChangeEventHandler RETRO_BASINRowChanged;
            
            public event RETRO_BASINRowChangeEventHandler RETRO_BASINRowDeleting;
            
            public event RETRO_BASINRowChangeEventHandler RETRO_BASINRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRETRO_BASINRow(RETRO_BASINRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RETRO_BASINRow AddRETRO_BASINRow(string name) {
                RETRO_BASINRow rowRETRO_BASINRow = ((RETRO_BASINRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        name};
                rowRETRO_BASINRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRETRO_BASINRow);
                return rowRETRO_BASINRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RETRO_BASINRow FindByretro_basin_id(int retro_basin_id) {
                return ((RETRO_BASINRow)(this.Rows.Find(new object[] {
                            retro_basin_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RETRO_BASINDataTable cln = ((RETRO_BASINDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RETRO_BASINDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnretro_basin_id = base.Columns["retro_basin_id"];
                this.columnname = base.Columns["name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnretro_basin_id = new global::System.Data.DataColumn("retro_basin_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnretro_basin_id);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnretro_basin_id}, true));
                this.columnretro_basin_id.AutoIncrement = true;
                this.columnretro_basin_id.AutoIncrementSeed = -1;
                this.columnretro_basin_id.AutoIncrementStep = -1;
                this.columnretro_basin_id.AllowDBNull = false;
                this.columnretro_basin_id.ReadOnly = true;
                this.columnretro_basin_id.Unique = true;
                this.columnname.AllowDBNull = false;
                this.columnname.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RETRO_BASINRow NewRETRO_BASINRow() {
                return ((RETRO_BASINRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RETRO_BASINRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RETRO_BASINRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RETRO_BASINRowChanged != null)) {
                    this.RETRO_BASINRowChanged(this, new RETRO_BASINRowChangeEvent(((RETRO_BASINRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RETRO_BASINRowChanging != null)) {
                    this.RETRO_BASINRowChanging(this, new RETRO_BASINRowChangeEvent(((RETRO_BASINRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RETRO_BASINRowDeleted != null)) {
                    this.RETRO_BASINRowDeleted(this, new RETRO_BASINRowChangeEvent(((RETRO_BASINRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RETRO_BASINRowDeleting != null)) {
                    this.RETRO_BASINRowDeleting(this, new RETRO_BASINRowChangeEvent(((RETRO_BASINRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRETRO_BASINRow(RETRO_BASINRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RetrofitsDataSet ds = new RetrofitsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RETRO_BASINDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SEWER_BASINDataTable : global::System.Data.TypedTableBase<SEWER_BASINRow> {
            
            private global::System.Data.DataColumn columnsewer_basin_id;
            
            private global::System.Data.DataColumn columnname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SEWER_BASINDataTable() {
                this.TableName = "SEWER_BASIN";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SEWER_BASINDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SEWER_BASINDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sewer_basin_idColumn {
                get {
                    return this.columnsewer_basin_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SEWER_BASINRow this[int index] {
                get {
                    return ((SEWER_BASINRow)(this.Rows[index]));
                }
            }
            
            public event SEWER_BASINRowChangeEventHandler SEWER_BASINRowChanging;
            
            public event SEWER_BASINRowChangeEventHandler SEWER_BASINRowChanged;
            
            public event SEWER_BASINRowChangeEventHandler SEWER_BASINRowDeleting;
            
            public event SEWER_BASINRowChangeEventHandler SEWER_BASINRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSEWER_BASINRow(SEWER_BASINRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SEWER_BASINRow AddSEWER_BASINRow(string name) {
                SEWER_BASINRow rowSEWER_BASINRow = ((SEWER_BASINRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        name};
                rowSEWER_BASINRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSEWER_BASINRow);
                return rowSEWER_BASINRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SEWER_BASINRow FindBysewer_basin_id(int sewer_basin_id) {
                return ((SEWER_BASINRow)(this.Rows.Find(new object[] {
                            sewer_basin_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SEWER_BASINDataTable cln = ((SEWER_BASINDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SEWER_BASINDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsewer_basin_id = base.Columns["sewer_basin_id"];
                this.columnname = base.Columns["name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsewer_basin_id = new global::System.Data.DataColumn("sewer_basin_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsewer_basin_id);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsewer_basin_id}, true));
                this.columnsewer_basin_id.AutoIncrement = true;
                this.columnsewer_basin_id.AutoIncrementSeed = -1;
                this.columnsewer_basin_id.AutoIncrementStep = -1;
                this.columnsewer_basin_id.AllowDBNull = false;
                this.columnsewer_basin_id.ReadOnly = true;
                this.columnsewer_basin_id.Unique = true;
                this.columnname.AllowDBNull = false;
                this.columnname.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SEWER_BASINRow NewSEWER_BASINRow() {
                return ((SEWER_BASINRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SEWER_BASINRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SEWER_BASINRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SEWER_BASINRowChanged != null)) {
                    this.SEWER_BASINRowChanged(this, new SEWER_BASINRowChangeEvent(((SEWER_BASINRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SEWER_BASINRowChanging != null)) {
                    this.SEWER_BASINRowChanging(this, new SEWER_BASINRowChangeEvent(((SEWER_BASINRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SEWER_BASINRowDeleted != null)) {
                    this.SEWER_BASINRowDeleted(this, new SEWER_BASINRowChangeEvent(((SEWER_BASINRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SEWER_BASINRowDeleting != null)) {
                    this.SEWER_BASINRowDeleting(this, new SEWER_BASINRowChangeEvent(((SEWER_BASINRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSEWER_BASINRow(SEWER_BASINRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RetrofitsDataSet ds = new RetrofitsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SEWER_BASINDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FACILITY_TYPERow : global::System.Data.DataRow {
            
            private FACILITY_TYPEDataTable tableFACILITY_TYPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FACILITY_TYPERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFACILITY_TYPE = ((FACILITY_TYPEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int facility_type_id {
                get {
                    return ((int)(this[this.tableFACILITY_TYPE.facility_type_idColumn]));
                }
                set {
                    this[this.tableFACILITY_TYPE.facility_type_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableFACILITY_TYPE.nameColumn]));
                }
                set {
                    this[this.tableFACILITY_TYPE.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECTRow[] GetPROJECTRows() {
                if ((this.Table.ChildRelations["FK_PROJECT_FACILITY_TYPE"] == null)) {
                    return new PROJECTRow[0];
                }
                else {
                    return ((PROJECTRow[])(base.GetChildRows(this.Table.ChildRelations["FK_PROJECT_FACILITY_TYPE"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITE_ASSESSMENTRow[] GetSITE_ASSESSMENTRows() {
                if ((this.Table.ChildRelations["FK_SITE_ASSESSMENT_FACILITY_TYPE"] == null)) {
                    return new SITE_ASSESSMENTRow[0];
                }
                else {
                    return ((SITE_ASSESSMENTRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SITE_ASSESSMENT_FACILITY_TYPE"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITE_OPPORTUNITYRow[] GetSITE_OPPORTUNITYRows() {
                if ((this.Table.ChildRelations["FK_SITE_OPPORTUNITY_FACILITY_TYPE"] == null)) {
                    return new SITE_OPPORTUNITYRow[0];
                }
                else {
                    return ((SITE_OPPORTUNITYRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SITE_OPPORTUNITY_FACILITY_TYPE"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ASSESSMENT_TYPERow : global::System.Data.DataRow {
            
            private ASSESSMENT_TYPEDataTable tableASSESSMENT_TYPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ASSESSMENT_TYPERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableASSESSMENT_TYPE = ((ASSESSMENT_TYPEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int assessment_type_id {
                get {
                    return ((int)(this[this.tableASSESSMENT_TYPE.assessment_type_idColumn]));
                }
                set {
                    this[this.tableASSESSMENT_TYPE.assessment_type_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableASSESSMENT_TYPE.nameColumn]));
                }
                set {
                    this[this.tableASSESSMENT_TYPE.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITE_ASSESSMENTRow[] GetSITE_ASSESSMENTRows() {
                if ((this.Table.ChildRelations["FK_SITE_ASSESSMENT_ASSESSMENT_TYPE"] == null)) {
                    return new SITE_ASSESSMENTRow[0];
                }
                else {
                    return ((SITE_ASSESSMENTRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SITE_ASSESSMENT_ASSESSMENT_TYPE"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DESTINATIONRow : global::System.Data.DataRow {
            
            private DESTINATIONDataTable tableDESTINATION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DESTINATIONRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDESTINATION = ((DESTINATIONDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int destination_id {
                get {
                    return ((int)(this[this.tableDESTINATION.destination_idColumn]));
                }
                set {
                    this[this.tableDESTINATION.destination_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableDESTINATION.nameColumn]));
                }
                set {
                    this[this.tableDESTINATION.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITE_ASSESSMENTRow[] GetSITE_ASSESSMENTRows() {
                if ((this.Table.ChildRelations["FK_SITE_ASSESSMENT_DESTINATION"] == null)) {
                    return new SITE_ASSESSMENTRow[0];
                }
                else {
                    return ((SITE_ASSESSMENTRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SITE_ASSESSMENT_DESTINATION"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IMPERVIOUS_AREA_TYPERow : global::System.Data.DataRow {
            
            private IMPERVIOUS_AREA_TYPEDataTable tableIMPERVIOUS_AREA_TYPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IMPERVIOUS_AREA_TYPERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIMPERVIOUS_AREA_TYPE = ((IMPERVIOUS_AREA_TYPEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ia_type_id {
                get {
                    return ((int)(this[this.tableIMPERVIOUS_AREA_TYPE.ia_type_idColumn]));
                }
                set {
                    this[this.tableIMPERVIOUS_AREA_TYPE.ia_type_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableIMPERVIOUS_AREA_TYPE.nameColumn]));
                }
                set {
                    this[this.tableIMPERVIOUS_AREA_TYPE.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITE_ASSESSMENTRow[] GetSITE_ASSESSMENTRows() {
                if ((this.Table.ChildRelations["FK_SITE_ASSESSMENT_IMPERVIOUS_AREA_TYPE"] == null)) {
                    return new SITE_ASSESSMENTRow[0];
                }
                else {
                    return ((SITE_ASSESSMENTRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SITE_ASSESSMENT_IMPERVIOUS_AREA_TYPE"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OPPORTUNITY_FEASIBILITYRow : global::System.Data.DataRow {
            
            private OPPORTUNITY_FEASIBILITYDataTable tableOPPORTUNITY_FEASIBILITY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OPPORTUNITY_FEASIBILITYRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOPPORTUNITY_FEASIBILITY = ((OPPORTUNITY_FEASIBILITYDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int opportunity_feasibility_id {
                get {
                    return ((int)(this[this.tableOPPORTUNITY_FEASIBILITY.opportunity_feasibility_idColumn]));
                }
                set {
                    this[this.tableOPPORTUNITY_FEASIBILITY.opportunity_feasibility_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int rating_value {
                get {
                    return ((int)(this[this.tableOPPORTUNITY_FEASIBILITY.rating_valueColumn]));
                }
                set {
                    this[this.tableOPPORTUNITY_FEASIBILITY.rating_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string meaning {
                get {
                    return ((string)(this[this.tableOPPORTUNITY_FEASIBILITY.meaningColumn]));
                }
                set {
                    this[this.tableOPPORTUNITY_FEASIBILITY.meaningColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PROJECTRow : global::System.Data.DataRow {
            
            private PROJECTDataTable tablePROJECT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PROJECTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePROJECT = ((PROJECTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int project_id {
                get {
                    return ((int)(this[this.tablePROJECT.project_idColumn]));
                }
                set {
                    this[this.tablePROJECT.project_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int site_id {
                get {
                    return ((int)(this[this.tablePROJECT.site_idColumn]));
                }
                set {
                    this[this.tablePROJECT.site_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tablePROJECT.nameColumn]));
                }
                set {
                    this[this.tablePROJECT.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int partnership_type_id {
                get {
                    return ((int)(this[this.tablePROJECT.partnership_type_idColumn]));
                }
                set {
                    this[this.tablePROJECT.partnership_type_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int facility_type_id {
                get {
                    return ((int)(this[this.tablePROJECT.facility_type_idColumn]));
                }
                set {
                    this[this.tablePROJECT.facility_type_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ia_managed_roof {
                get {
                    return ((int)(this[this.tablePROJECT.ia_managed_roofColumn]));
                }
                set {
                    this[this.tablePROJECT.ia_managed_roofColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ia_managed_paved {
                get {
                    return ((int)(this[this.tablePROJECT.ia_managed_pavedColumn]));
                }
                set {
                    this[this.tablePROJECT.ia_managed_pavedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int facility_size {
                get {
                    return ((int)(this[this.tablePROJECT.facility_sizeColumn]));
                }
                set {
                    this[this.tablePROJECT.facility_sizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int storage_volume {
                get {
                    return ((int)(this[this.tablePROJECT.storage_volumeColumn]));
                }
                set {
                    this[this.tablePROJECT.storage_volumeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int infiltration_test_id {
                get {
                    return ((int)(this[this.tablePROJECT.infiltration_test_idColumn]));
                }
                set {
                    this[this.tablePROJECT.infiltration_test_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal infiltration_rate {
                get {
                    return ((decimal)(this[this.tablePROJECT.infiltration_rateColumn]));
                }
                set {
                    this[this.tablePROJECT.infiltration_rateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int project_status_id {
                get {
                    return ((int)(this[this.tablePROJECT.project_status_idColumn]));
                }
                set {
                    this[this.tablePROJECT.project_status_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int designer_id {
                get {
                    return ((int)(this[this.tablePROJECT.designer_idColumn]));
                }
                set {
                    this[this.tablePROJECT.designer_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int constructor_id {
                get {
                    return ((int)(this[this.tablePROJECT.constructor_idColumn]));
                }
                set {
                    this[this.tablePROJECT.constructor_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int contractor_id {
                get {
                    return ((int)(this[this.tablePROJECT.contractor_idColumn]));
                }
                set {
                    this[this.tablePROJECT.contractor_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal city_cost {
                get {
                    return ((decimal)(this[this.tablePROJECT.city_costColumn]));
                }
                set {
                    this[this.tablePROJECT.city_costColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string primary_contact_name {
                get {
                    return ((string)(this[this.tablePROJECT.primary_contact_nameColumn]));
                }
                set {
                    this[this.tablePROJECT.primary_contact_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string primary_contact_phone {
                get {
                    return ((string)(this[this.tablePROJECT.primary_contact_phoneColumn]));
                }
                set {
                    this[this.tablePROJECT.primary_contact_phoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string primary_contact_email {
                get {
                    try {
                        return ((string)(this[this.tablePROJECT.primary_contact_emailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'primary_contact_email\' in table \'PROJECT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJECT.primary_contact_emailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int primary_contact_type_id {
                get {
                    return ((int)(this[this.tablePROJECT.primary_contact_type_idColumn]));
                }
                set {
                    this[this.tablePROJECT.primary_contact_type_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int project_manager_id {
                get {
                    return ((int)(this[this.tablePROJECT.project_manager_idColumn]));
                }
                set {
                    this[this.tablePROJECT.project_manager_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int o_and_m_id {
                get {
                    return ((int)(this[this.tablePROJECT.o_and_m_idColumn]));
                }
                set {
                    this[this.tablePROJECT.o_and_m_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int permit_status_id {
                get {
                    return ((int)(this[this.tablePROJECT.permit_status_idColumn]));
                }
                set {
                    this[this.tablePROJECT.permit_status_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int management_id {
                get {
                    return ((int)(this[this.tablePROJECT.management_idColumn]));
                }
                set {
                    this[this.tablePROJECT.management_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string create_by {
                get {
                    return ((string)(this[this.tablePROJECT.create_byColumn]));
                }
                set {
                    this[this.tablePROJECT.create_byColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime create_date {
                get {
                    return ((global::System.DateTime)(this[this.tablePROJECT.create_dateColumn]));
                }
                set {
                    this[this.tablePROJECT.create_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string update_by {
                get {
                    return ((string)(this[this.tablePROJECT.update_byColumn]));
                }
                set {
                    this[this.tablePROJECT.update_byColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime update_date {
                get {
                    return ((global::System.DateTime)(this[this.tablePROJECT.update_dateColumn]));
                }
                set {
                    this[this.tablePROJECT.update_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] modified_time {
                get {
                    try {
                        return ((byte[])(this[this.tablePROJECT.modified_timeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'modified_time\' in table \'PROJECT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJECT.modified_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FACILITY_TYPERow FACILITY_TYPERow {
                get {
                    return ((FACILITY_TYPERow)(this.GetParentRow(this.Table.ParentRelations["FK_PROJECT_FACILITY_TYPE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_PROJECT_FACILITY_TYPE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECT_STATUSRow PROJECT_STATUSRow {
                get {
                    return ((PROJECT_STATUSRow)(this.GetParentRow(this.Table.ParentRelations["FK_PROJECT_PROJECT_STATUS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_PROJECT_PROJECT_STATUS"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprimary_contact_emailNull() {
                return this.IsNull(this.tablePROJECT.primary_contact_emailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprimary_contact_emailNull() {
                this[this.tablePROJECT.primary_contact_emailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismodified_timeNull() {
                return this.IsNull(this.tablePROJECT.modified_timeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmodified_timeNull() {
                this[this.tablePROJECT.modified_timeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITE_ASSESSMENTRow[] GetSITE_ASSESSMENTRows() {
                if ((this.Table.ChildRelations["FK_SITE_ASSESSMENT_PROJECT"] == null)) {
                    return new SITE_ASSESSMENTRow[0];
                }
                else {
                    return ((SITE_ASSESSMENTRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SITE_ASSESSMENT_PROJECT"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PROJECT_STATUSRow : global::System.Data.DataRow {
            
            private PROJECT_STATUSDataTable tablePROJECT_STATUS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PROJECT_STATUSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePROJECT_STATUS = ((PROJECT_STATUSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int project_status_id {
                get {
                    return ((int)(this[this.tablePROJECT_STATUS.project_status_idColumn]));
                }
                set {
                    this[this.tablePROJECT_STATUS.project_status_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tablePROJECT_STATUS.nameColumn]));
                }
                set {
                    this[this.tablePROJECT_STATUS.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int display_order {
                get {
                    return ((int)(this[this.tablePROJECT_STATUS.display_orderColumn]));
                }
                set {
                    this[this.tablePROJECT_STATUS.display_orderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECTRow[] GetPROJECTRows() {
                if ((this.Table.ChildRelations["FK_PROJECT_PROJECT_STATUS"] == null)) {
                    return new PROJECTRow[0];
                }
                else {
                    return ((PROJECTRow[])(base.GetChildRows(this.Table.ChildRelations["FK_PROJECT_PROJECT_STATUS"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SITE_ASSESSMENTRow : global::System.Data.DataRow {
            
            private SITE_ASSESSMENTDataTable tableSITE_ASSESSMENT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SITE_ASSESSMENTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSITE_ASSESSMENT = ((SITE_ASSESSMENTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int site_assessment_id {
                get {
                    return ((int)(this[this.tableSITE_ASSESSMENT.site_assessment_idColumn]));
                }
                set {
                    this[this.tableSITE_ASSESSMENT.site_assessment_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int site_id {
                get {
                    return ((int)(this[this.tableSITE_ASSESSMENT.site_idColumn]));
                }
                set {
                    this[this.tableSITE_ASSESSMENT.site_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime assessment_date {
                get {
                    return ((global::System.DateTime)(this[this.tableSITE_ASSESSMENT.assessment_dateColumn]));
                }
                set {
                    this[this.tableSITE_ASSESSMENT.assessment_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int staff_id {
                get {
                    return ((int)(this[this.tableSITE_ASSESSMENT.staff_idColumn]));
                }
                set {
                    this[this.tableSITE_ASSESSMENT.staff_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int information_source_id {
                get {
                    return ((int)(this[this.tableSITE_ASSESSMENT.information_source_idColumn]));
                }
                set {
                    this[this.tableSITE_ASSESSMENT.information_source_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ia_type_id {
                get {
                    return ((int)(this[this.tableSITE_ASSESSMENT.ia_type_idColumn]));
                }
                set {
                    this[this.tableSITE_ASSESSMENT.ia_type_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ia_sqft {
                get {
                    try {
                        return ((int)(this[this.tableSITE_ASSESSMENT.ia_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ia_sqft\' in table \'SITE_ASSESSMENT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSITE_ASSESSMENT.ia_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int destination_id {
                get {
                    return ((int)(this[this.tableSITE_ASSESSMENT.destination_idColumn]));
                }
                set {
                    this[this.tableSITE_ASSESSMENT.destination_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int management_id {
                get {
                    try {
                        return ((int)(this[this.tableSITE_ASSESSMENT.management_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'management_id\' in table \'SITE_ASSESSMENT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSITE_ASSESSMENT.management_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int facility_type_id {
                get {
                    try {
                        return ((int)(this[this.tableSITE_ASSESSMENT.facility_type_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'facility_type_id\' in table \'SITE_ASSESSMENT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSITE_ASSESSMENT.facility_type_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string hansen_id {
                get {
                    try {
                        return ((string)(this[this.tableSITE_ASSESSMENT.hansen_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'hansen_id\' in table \'SITE_ASSESSMENT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSITE_ASSESSMENT.hansen_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int assessment_type_id {
                get {
                    return ((int)(this[this.tableSITE_ASSESSMENT.assessment_type_idColumn]));
                }
                set {
                    this[this.tableSITE_ASSESSMENT.assessment_type_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid gis_uniqueid {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableSITE_ASSESSMENT.gis_uniqueidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gis_uniqueid\' in table \'SITE_ASSESSMENT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSITE_ASSESSMENT.gis_uniqueidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int project_id {
                get {
                    try {
                        return ((int)(this[this.tableSITE_ASSESSMENT.project_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'project_id\' in table \'SITE_ASSESSMENT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSITE_ASSESSMENT.project_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string create_by {
                get {
                    return ((string)(this[this.tableSITE_ASSESSMENT.create_byColumn]));
                }
                set {
                    this[this.tableSITE_ASSESSMENT.create_byColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime create_date {
                get {
                    return ((global::System.DateTime)(this[this.tableSITE_ASSESSMENT.create_dateColumn]));
                }
                set {
                    this[this.tableSITE_ASSESSMENT.create_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string update_by {
                get {
                    return ((string)(this[this.tableSITE_ASSESSMENT.update_byColumn]));
                }
                set {
                    this[this.tableSITE_ASSESSMENT.update_byColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime update_date {
                get {
                    return ((global::System.DateTime)(this[this.tableSITE_ASSESSMENT.update_dateColumn]));
                }
                set {
                    this[this.tableSITE_ASSESSMENT.update_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] modified_time {
                get {
                    try {
                        return ((byte[])(this[this.tableSITE_ASSESSMENT.modified_timeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'modified_time\' in table \'SITE_ASSESSMENT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSITE_ASSESSMENT.modified_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ASSESSMENT_TYPERow ASSESSMENT_TYPERow {
                get {
                    return ((ASSESSMENT_TYPERow)(this.GetParentRow(this.Table.ParentRelations["FK_SITE_ASSESSMENT_ASSESSMENT_TYPE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SITE_ASSESSMENT_ASSESSMENT_TYPE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DESTINATIONRow DESTINATIONRow {
                get {
                    return ((DESTINATIONRow)(this.GetParentRow(this.Table.ParentRelations["FK_SITE_ASSESSMENT_DESTINATION"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SITE_ASSESSMENT_DESTINATION"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FACILITY_TYPERow FACILITY_TYPERow {
                get {
                    return ((FACILITY_TYPERow)(this.GetParentRow(this.Table.ParentRelations["FK_SITE_ASSESSMENT_FACILITY_TYPE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SITE_ASSESSMENT_FACILITY_TYPE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IMPERVIOUS_AREA_TYPERow IMPERVIOUS_AREA_TYPERow {
                get {
                    return ((IMPERVIOUS_AREA_TYPERow)(this.GetParentRow(this.Table.ParentRelations["FK_SITE_ASSESSMENT_IMPERVIOUS_AREA_TYPE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SITE_ASSESSMENT_IMPERVIOUS_AREA_TYPE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECTRow PROJECTRow {
                get {
                    return ((PROJECTRow)(this.GetParentRow(this.Table.ParentRelations["FK_SITE_ASSESSMENT_PROJECT"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SITE_ASSESSMENT_PROJECT"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITERow SITERow {
                get {
                    return ((SITERow)(this.GetParentRow(this.Table.ParentRelations["FK_SITE_ASSESSMENT_SITE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SITE_ASSESSMENT_SITE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isia_sqftNull() {
                return this.IsNull(this.tableSITE_ASSESSMENT.ia_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setia_sqftNull() {
                this[this.tableSITE_ASSESSMENT.ia_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismanagement_idNull() {
                return this.IsNull(this.tableSITE_ASSESSMENT.management_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmanagement_idNull() {
                this[this.tableSITE_ASSESSMENT.management_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfacility_type_idNull() {
                return this.IsNull(this.tableSITE_ASSESSMENT.facility_type_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfacility_type_idNull() {
                this[this.tableSITE_ASSESSMENT.facility_type_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ishansen_idNull() {
                return this.IsNull(this.tableSITE_ASSESSMENT.hansen_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sethansen_idNull() {
                this[this.tableSITE_ASSESSMENT.hansen_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isgis_uniqueidNull() {
                return this.IsNull(this.tableSITE_ASSESSMENT.gis_uniqueidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setgis_uniqueidNull() {
                this[this.tableSITE_ASSESSMENT.gis_uniqueidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isproject_idNull() {
                return this.IsNull(this.tableSITE_ASSESSMENT.project_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setproject_idNull() {
                this[this.tableSITE_ASSESSMENT.project_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismodified_timeNull() {
                return this.IsNull(this.tableSITE_ASSESSMENT.modified_timeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmodified_timeNull() {
                this[this.tableSITE_ASSESSMENT.modified_timeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SITE_OPPORTUNITYRow : global::System.Data.DataRow {
            
            private SITE_OPPORTUNITYDataTable tableSITE_OPPORTUNITY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SITE_OPPORTUNITYRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSITE_OPPORTUNITY = ((SITE_OPPORTUNITYDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int site_opportunity_id {
                get {
                    return ((int)(this[this.tableSITE_OPPORTUNITY.site_opportunity_idColumn]));
                }
                set {
                    this[this.tableSITE_OPPORTUNITY.site_opportunity_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int site_id {
                get {
                    return ((int)(this[this.tableSITE_OPPORTUNITY.site_idColumn]));
                }
                set {
                    this[this.tableSITE_OPPORTUNITY.site_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ia_sqft {
                get {
                    return ((int)(this[this.tableSITE_OPPORTUNITY.ia_sqftColumn]));
                }
                set {
                    this[this.tableSITE_OPPORTUNITY.ia_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int management_id {
                get {
                    return ((int)(this[this.tableSITE_OPPORTUNITY.management_idColumn]));
                }
                set {
                    this[this.tableSITE_OPPORTUNITY.management_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int facility_type_id {
                get {
                    return ((int)(this[this.tableSITE_OPPORTUNITY.facility_type_idColumn]));
                }
                set {
                    this[this.tableSITE_OPPORTUNITY.facility_type_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int opportunity_feasibility {
                get {
                    return ((int)(this[this.tableSITE_OPPORTUNITY.opportunity_feasibilityColumn]));
                }
                set {
                    this[this.tableSITE_OPPORTUNITY.opportunity_feasibilityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string create_by {
                get {
                    return ((string)(this[this.tableSITE_OPPORTUNITY.create_byColumn]));
                }
                set {
                    this[this.tableSITE_OPPORTUNITY.create_byColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime create_date {
                get {
                    return ((global::System.DateTime)(this[this.tableSITE_OPPORTUNITY.create_dateColumn]));
                }
                set {
                    this[this.tableSITE_OPPORTUNITY.create_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string update_by {
                get {
                    return ((string)(this[this.tableSITE_OPPORTUNITY.update_byColumn]));
                }
                set {
                    this[this.tableSITE_OPPORTUNITY.update_byColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime update_date {
                get {
                    return ((global::System.DateTime)(this[this.tableSITE_OPPORTUNITY.update_dateColumn]));
                }
                set {
                    this[this.tableSITE_OPPORTUNITY.update_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] modified_time {
                get {
                    try {
                        return ((byte[])(this[this.tableSITE_OPPORTUNITY.modified_timeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'modified_time\' in table \'SITE_OPPORTUNITY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSITE_OPPORTUNITY.modified_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FACILITY_TYPERow FACILITY_TYPERow {
                get {
                    return ((FACILITY_TYPERow)(this.GetParentRow(this.Table.ParentRelations["FK_SITE_OPPORTUNITY_FACILITY_TYPE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SITE_OPPORTUNITY_FACILITY_TYPE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITERow SITERow {
                get {
                    return ((SITERow)(this.GetParentRow(this.Table.ParentRelations["FK_SITE_OPPORTUNITY_SITE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SITE_OPPORTUNITY_SITE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismodified_timeNull() {
                return this.IsNull(this.tableSITE_OPPORTUNITY.modified_timeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmodified_timeNull() {
                this[this.tableSITE_OPPORTUNITY.modified_timeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SITERow : global::System.Data.DataRow {
            
            private SITEDataTable tableSITE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SITERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSITE = ((SITEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int site_id {
                get {
                    return ((int)(this[this.tableSITE.site_idColumn]));
                }
                set {
                    this[this.tableSITE.site_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string property_id {
                get {
                    return ((string)(this[this.tableSITE.property_idColumn]));
                }
                set {
                    this[this.tableSITE.property_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string site_use {
                get {
                    try {
                        return ((string)(this[this.tableSITE.site_useColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'site_use\' in table \'SITE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSITE.site_useColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string site_use_description {
                get {
                    try {
                        return ((string)(this[this.tableSITE.site_use_descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'site_use_description\' in table \'SITE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSITE.site_use_descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string neighborhood {
                get {
                    return ((string)(this[this.tableSITE.neighborhoodColumn]));
                }
                set {
                    this[this.tableSITE.neighborhoodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sewer_basin {
                get {
                    return ((string)(this[this.tableSITE.sewer_basinColumn]));
                }
                set {
                    this[this.tableSITE.sewer_basinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string retro_basin {
                get {
                    return ((string)(this[this.tableSITE.retro_basinColumn]));
                }
                set {
                    this[this.tableSITE.retro_basinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string create_by {
                get {
                    return ((string)(this[this.tableSITE.create_byColumn]));
                }
                set {
                    this[this.tableSITE.create_byColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime create_date {
                get {
                    return ((global::System.DateTime)(this[this.tableSITE.create_dateColumn]));
                }
                set {
                    this[this.tableSITE.create_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string update_by {
                get {
                    return ((string)(this[this.tableSITE.update_byColumn]));
                }
                set {
                    this[this.tableSITE.update_byColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime update_date {
                get {
                    return ((global::System.DateTime)(this[this.tableSITE.update_dateColumn]));
                }
                set {
                    this[this.tableSITE.update_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] modified_time {
                get {
                    try {
                        return ((byte[])(this[this.tableSITE.modified_timeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'modified_time\' in table \'SITE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSITE.modified_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issite_useNull() {
                return this.IsNull(this.tableSITE.site_useColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsite_useNull() {
                this[this.tableSITE.site_useColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issite_use_descriptionNull() {
                return this.IsNull(this.tableSITE.site_use_descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsite_use_descriptionNull() {
                this[this.tableSITE.site_use_descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismodified_timeNull() {
                return this.IsNull(this.tableSITE.modified_timeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmodified_timeNull() {
                this[this.tableSITE.modified_timeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITE_ASSESSMENTRow[] GetSITE_ASSESSMENTRows() {
                if ((this.Table.ChildRelations["FK_SITE_ASSESSMENT_SITE"] == null)) {
                    return new SITE_ASSESSMENTRow[0];
                }
                else {
                    return ((SITE_ASSESSMENTRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SITE_ASSESSMENT_SITE"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITE_OPPORTUNITYRow[] GetSITE_OPPORTUNITYRows() {
                if ((this.Table.ChildRelations["FK_SITE_OPPORTUNITY_SITE"] == null)) {
                    return new SITE_OPPORTUNITYRow[0];
                }
                else {
                    return ((SITE_OPPORTUNITYRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SITE_OPPORTUNITY_SITE"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RETRO_BASINRow : global::System.Data.DataRow {
            
            private RETRO_BASINDataTable tableRETRO_BASIN;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RETRO_BASINRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRETRO_BASIN = ((RETRO_BASINDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int retro_basin_id {
                get {
                    return ((int)(this[this.tableRETRO_BASIN.retro_basin_idColumn]));
                }
                set {
                    this[this.tableRETRO_BASIN.retro_basin_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableRETRO_BASIN.nameColumn]));
                }
                set {
                    this[this.tableRETRO_BASIN.nameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SEWER_BASINRow : global::System.Data.DataRow {
            
            private SEWER_BASINDataTable tableSEWER_BASIN;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SEWER_BASINRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSEWER_BASIN = ((SEWER_BASINDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sewer_basin_id {
                get {
                    return ((int)(this[this.tableSEWER_BASIN.sewer_basin_idColumn]));
                }
                set {
                    this[this.tableSEWER_BASIN.sewer_basin_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableSEWER_BASIN.nameColumn]));
                }
                set {
                    this[this.tableSEWER_BASIN.nameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FACILITY_TYPERowChangeEvent : global::System.EventArgs {
            
            private FACILITY_TYPERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FACILITY_TYPERowChangeEvent(FACILITY_TYPERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FACILITY_TYPERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ASSESSMENT_TYPERowChangeEvent : global::System.EventArgs {
            
            private ASSESSMENT_TYPERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ASSESSMENT_TYPERowChangeEvent(ASSESSMENT_TYPERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ASSESSMENT_TYPERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DESTINATIONRowChangeEvent : global::System.EventArgs {
            
            private DESTINATIONRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DESTINATIONRowChangeEvent(DESTINATIONRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DESTINATIONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IMPERVIOUS_AREA_TYPERowChangeEvent : global::System.EventArgs {
            
            private IMPERVIOUS_AREA_TYPERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IMPERVIOUS_AREA_TYPERowChangeEvent(IMPERVIOUS_AREA_TYPERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IMPERVIOUS_AREA_TYPERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OPPORTUNITY_FEASIBILITYRowChangeEvent : global::System.EventArgs {
            
            private OPPORTUNITY_FEASIBILITYRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OPPORTUNITY_FEASIBILITYRowChangeEvent(OPPORTUNITY_FEASIBILITYRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OPPORTUNITY_FEASIBILITYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PROJECTRowChangeEvent : global::System.EventArgs {
            
            private PROJECTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECTRowChangeEvent(PROJECTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PROJECT_STATUSRowChangeEvent : global::System.EventArgs {
            
            private PROJECT_STATUSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECT_STATUSRowChangeEvent(PROJECT_STATUSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECT_STATUSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SITE_ASSESSMENTRowChangeEvent : global::System.EventArgs {
            
            private SITE_ASSESSMENTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITE_ASSESSMENTRowChangeEvent(SITE_ASSESSMENTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITE_ASSESSMENTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SITE_OPPORTUNITYRowChangeEvent : global::System.EventArgs {
            
            private SITE_OPPORTUNITYRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITE_OPPORTUNITYRowChangeEvent(SITE_OPPORTUNITYRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITE_OPPORTUNITYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SITERowChangeEvent : global::System.EventArgs {
            
            private SITERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITERowChangeEvent(SITERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SITERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RETRO_BASINRowChangeEvent : global::System.EventArgs {
            
            private RETRO_BASINRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RETRO_BASINRowChangeEvent(RETRO_BASINRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RETRO_BASINRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SEWER_BASINRowChangeEvent : global::System.EventArgs {
            
            private SEWER_BASINRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SEWER_BASINRowChangeEvent(SEWER_BASINRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SEWER_BASINRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace SystemsAnalysis.DataAccess.RetrofitsDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FACILITY_TYPETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FACILITY_TYPETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FACILITY_TYPE";
            tableMapping.ColumnMappings.Add("facility_type_id", "facility_type_id");
            tableMapping.ColumnMappings.Add("name", "name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[FACILITY_TYPE] WHERE (([facility_type_id] = @Original_facility" +
                "_type_id) AND ([name] = @Original_name))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_facility_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facility_type_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[FACILITY_TYPE] ([name]) VALUES (@name);\r\nSELECT facility_type_" +
                "id, name FROM dbo.FACILITY_TYPE WHERE (facility_type_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[FACILITY_TYPE] SET [name] = @name WHERE (([facility_type_id] = @Ori" +
                "ginal_facility_type_id) AND ([name] = @Original_name));\r\nSELECT facility_type_id" +
                ", name FROM dbo.FACILITY_TYPE WHERE (facility_type_id = @facility_type_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_facility_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facility_type_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@facility_type_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "facility_type_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.RETRO_RGConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     dbo.FACILITY_TYPE.*\r\nFROM         dbo.FACILITY_TYPE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RetrofitsDataSet.FACILITY_TYPEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RetrofitsDataSet.FACILITY_TYPEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RetrofitsDataSet.FACILITY_TYPEDataTable dataTable = new RetrofitsDataSet.FACILITY_TYPEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet.FACILITY_TYPEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FACILITY_TYPE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_facility_type_id, string Original_name) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_facility_type_id));
            if ((Original_name == null)) {
                throw new global::System.ArgumentNullException("Original_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string name) {
            if ((name == null)) {
                throw new global::System.ArgumentNullException("name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string name, int Original_facility_type_id, string Original_name, int facility_type_id) {
            if ((name == null)) {
                throw new global::System.ArgumentNullException("name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(name));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_facility_type_id));
            if ((Original_name == null)) {
                throw new global::System.ArgumentNullException("Original_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_name));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(facility_type_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string name, int Original_facility_type_id, string Original_name) {
            return this.Update(name, Original_facility_type_id, Original_name, Original_facility_type_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ASSESSMENT_TYPETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ASSESSMENT_TYPETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ASSESSMENT_TYPE";
            tableMapping.ColumnMappings.Add("assessment_type_id", "assessment_type_id");
            tableMapping.ColumnMappings.Add("name", "name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ASSESSMENT_TYPE] WHERE (([assessment_type_id] = @Original_asse" +
                "ssment_type_id) AND ([name] = @Original_name))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assessment_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assessment_type_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ASSESSMENT_TYPE] ([name]) VALUES (@name);\r\nSELECT assessment_t" +
                "ype_id, name FROM dbo.ASSESSMENT_TYPE WHERE (assessment_type_id = SCOPE_IDENTITY" +
                "())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ASSESSMENT_TYPE] SET [name] = @name WHERE (([assessment_type_id] = " +
                "@Original_assessment_type_id) AND ([name] = @Original_name));\r\nSELECT assessment" +
                "_type_id, name FROM dbo.ASSESSMENT_TYPE WHERE (assessment_type_id = @assessment_" +
                "type_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_assessment_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assessment_type_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assessment_type_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "assessment_type_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.RETRO_RGConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     dbo.ASSESSMENT_TYPE.*\r\nFROM         dbo.ASSESSMENT_TYPE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RetrofitsDataSet.ASSESSMENT_TYPEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RetrofitsDataSet.ASSESSMENT_TYPEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RetrofitsDataSet.ASSESSMENT_TYPEDataTable dataTable = new RetrofitsDataSet.ASSESSMENT_TYPEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet.ASSESSMENT_TYPEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ASSESSMENT_TYPE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_assessment_type_id, string Original_name) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_assessment_type_id));
            if ((Original_name == null)) {
                throw new global::System.ArgumentNullException("Original_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string name) {
            if ((name == null)) {
                throw new global::System.ArgumentNullException("name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string name, int Original_assessment_type_id, string Original_name, int assessment_type_id) {
            if ((name == null)) {
                throw new global::System.ArgumentNullException("name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(name));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_assessment_type_id));
            if ((Original_name == null)) {
                throw new global::System.ArgumentNullException("Original_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_name));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(assessment_type_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string name, int Original_assessment_type_id, string Original_name) {
            return this.Update(name, Original_assessment_type_id, Original_name, Original_assessment_type_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DESTINATIONTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DESTINATIONTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DESTINATION";
            tableMapping.ColumnMappings.Add("destination_id", "destination_id");
            tableMapping.ColumnMappings.Add("name", "name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DESTINATION] WHERE (([destination_id] = @Original_destination_" +
                "id) AND ([name] = @Original_name))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_destination_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "destination_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DESTINATION] ([name]) VALUES (@name);\r\nSELECT destination_id, " +
                "name FROM dbo.DESTINATION WHERE (destination_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DESTINATION] SET [name] = @name WHERE (([destination_id] = @Origina" +
                "l_destination_id) AND ([name] = @Original_name));\r\nSELECT destination_id, name F" +
                "ROM dbo.DESTINATION WHERE (destination_id = @destination_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_destination_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "destination_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@destination_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "destination_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.RETRO_RGConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     dbo.DESTINATION.*\r\nFROM         dbo.DESTINATION";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RetrofitsDataSet.DESTINATIONDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RetrofitsDataSet.DESTINATIONDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RetrofitsDataSet.DESTINATIONDataTable dataTable = new RetrofitsDataSet.DESTINATIONDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet.DESTINATIONDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DESTINATION");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_destination_id, string Original_name) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_destination_id));
            if ((Original_name == null)) {
                throw new global::System.ArgumentNullException("Original_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string name) {
            if ((name == null)) {
                throw new global::System.ArgumentNullException("name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string name, int Original_destination_id, string Original_name, int destination_id) {
            if ((name == null)) {
                throw new global::System.ArgumentNullException("name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(name));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_destination_id));
            if ((Original_name == null)) {
                throw new global::System.ArgumentNullException("Original_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_name));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(destination_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string name, int Original_destination_id, string Original_name) {
            return this.Update(name, Original_destination_id, Original_name, Original_destination_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class IMPERVIOUS_AREA_TYPETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IMPERVIOUS_AREA_TYPETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "IMPERVIOUS_AREA_TYPE";
            tableMapping.ColumnMappings.Add("ia_type_id", "ia_type_id");
            tableMapping.ColumnMappings.Add("name", "name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[IMPERVIOUS_AREA_TYPE] WHERE (([ia_type_id] = @Original_ia_type" +
                "_id) AND ([name] = @Original_name))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ia_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ia_type_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[IMPERVIOUS_AREA_TYPE] ([name]) VALUES (@name);\r\nSELECT ia_type" +
                "_id, name FROM dbo.IMPERVIOUS_AREA_TYPE WHERE (ia_type_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[IMPERVIOUS_AREA_TYPE] SET [name] = @name WHERE (([ia_type_id] = @Or" +
                "iginal_ia_type_id) AND ([name] = @Original_name));\r\nSELECT ia_type_id, name FROM" +
                " dbo.IMPERVIOUS_AREA_TYPE WHERE (ia_type_id = @ia_type_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ia_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ia_type_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ia_type_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ia_type_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.RETRO_RGConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     dbo.IMPERVIOUS_AREA_TYPE.*\r\nFROM         dbo.IMPERVIOUS_AREA_TYPE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RetrofitsDataSet.IMPERVIOUS_AREA_TYPEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RetrofitsDataSet.IMPERVIOUS_AREA_TYPEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RetrofitsDataSet.IMPERVIOUS_AREA_TYPEDataTable dataTable = new RetrofitsDataSet.IMPERVIOUS_AREA_TYPEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet.IMPERVIOUS_AREA_TYPEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "IMPERVIOUS_AREA_TYPE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ia_type_id, string Original_name) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ia_type_id));
            if ((Original_name == null)) {
                throw new global::System.ArgumentNullException("Original_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string name) {
            if ((name == null)) {
                throw new global::System.ArgumentNullException("name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string name, int Original_ia_type_id, string Original_name, int ia_type_id) {
            if ((name == null)) {
                throw new global::System.ArgumentNullException("name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(name));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_ia_type_id));
            if ((Original_name == null)) {
                throw new global::System.ArgumentNullException("Original_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_name));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(ia_type_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string name, int Original_ia_type_id, string Original_name) {
            return this.Update(name, Original_ia_type_id, Original_name, Original_ia_type_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OPPORTUNITY_FEASIBILITYTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OPPORTUNITY_FEASIBILITYTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OPPORTUNITY_FEASIBILITY";
            tableMapping.ColumnMappings.Add("opportunity_feasibility_id", "opportunity_feasibility_id");
            tableMapping.ColumnMappings.Add("rating_value", "rating_value");
            tableMapping.ColumnMappings.Add("meaning", "meaning");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[OPPORTUNITY_FEASIBILITY] WHERE (([opportunity_feasibility_id] " +
                "= @Original_opportunity_feasibility_id) AND ([rating_value] = @Original_rating_v" +
                "alue) AND ([meaning] = @Original_meaning))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_opportunity_feasibility_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "opportunity_feasibility_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_rating_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "rating_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_meaning", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "meaning", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OPPORTUNITY_FEASIBILITY] ([rating_value], [meaning]) VALUES (@" +
                "rating_value, @meaning);\r\nSELECT opportunity_feasibility_id, rating_value, meani" +
                "ng FROM dbo.OPPORTUNITY_FEASIBILITY WHERE (rating_value = @rating_value)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rating_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "rating_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@meaning", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "meaning", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[OPPORTUNITY_FEASIBILITY] SET [rating_value] = @rating_value, [meaning] = @meaning WHERE (([opportunity_feasibility_id] = @Original_opportunity_feasibility_id) AND ([rating_value] = @Original_rating_value) AND ([meaning] = @Original_meaning));
SELECT opportunity_feasibility_id, rating_value, meaning FROM dbo.OPPORTUNITY_FEASIBILITY WHERE (rating_value = @rating_value)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rating_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "rating_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@meaning", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "meaning", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_opportunity_feasibility_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "opportunity_feasibility_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_rating_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "rating_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_meaning", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "meaning", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.RETRO_RGConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     dbo.OPPORTUNITY_FEASIBILITY.*\r\nFROM         dbo.OPPORTUNITY_FEASIBILIT" +
                "Y";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RetrofitsDataSet.OPPORTUNITY_FEASIBILITYDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RetrofitsDataSet.OPPORTUNITY_FEASIBILITYDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RetrofitsDataSet.OPPORTUNITY_FEASIBILITYDataTable dataTable = new RetrofitsDataSet.OPPORTUNITY_FEASIBILITYDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet.OPPORTUNITY_FEASIBILITYDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "OPPORTUNITY_FEASIBILITY");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_opportunity_feasibility_id, int Original_rating_value, string Original_meaning) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_opportunity_feasibility_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_rating_value));
            if ((Original_meaning == null)) {
                throw new global::System.ArgumentNullException("Original_meaning");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_meaning));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int rating_value, string meaning) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(rating_value));
            if ((meaning == null)) {
                throw new global::System.ArgumentNullException("meaning");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(meaning));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int rating_value, string meaning, int Original_opportunity_feasibility_id, int Original_rating_value, string Original_meaning) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(rating_value));
            if ((meaning == null)) {
                throw new global::System.ArgumentNullException("meaning");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(meaning));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_opportunity_feasibility_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_rating_value));
            if ((Original_meaning == null)) {
                throw new global::System.ArgumentNullException("Original_meaning");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_meaning));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string meaning, int Original_opportunity_feasibility_id, int Original_rating_value, string Original_meaning) {
            return this.Update(Original_rating_value, meaning, Original_opportunity_feasibility_id, Original_rating_value, Original_meaning);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PROJECTTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PROJECTTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PROJECT";
            tableMapping.ColumnMappings.Add("project_id", "project_id");
            tableMapping.ColumnMappings.Add("site_id", "site_id");
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("partnership_type_id", "partnership_type_id");
            tableMapping.ColumnMappings.Add("facility_type_id", "facility_type_id");
            tableMapping.ColumnMappings.Add("ia_managed_roof", "ia_managed_roof");
            tableMapping.ColumnMappings.Add("ia_managed_paved", "ia_managed_paved");
            tableMapping.ColumnMappings.Add("facility_size", "facility_size");
            tableMapping.ColumnMappings.Add("storage_volume", "storage_volume");
            tableMapping.ColumnMappings.Add("infiltration_test_id", "infiltration_test_id");
            tableMapping.ColumnMappings.Add("infiltration_rate", "infiltration_rate");
            tableMapping.ColumnMappings.Add("project_status_id", "project_status_id");
            tableMapping.ColumnMappings.Add("designer_id", "designer_id");
            tableMapping.ColumnMappings.Add("constructor_id", "constructor_id");
            tableMapping.ColumnMappings.Add("contractor_id", "contractor_id");
            tableMapping.ColumnMappings.Add("city_cost", "city_cost");
            tableMapping.ColumnMappings.Add("primary_contact_name", "primary_contact_name");
            tableMapping.ColumnMappings.Add("primary_contact_phone", "primary_contact_phone");
            tableMapping.ColumnMappings.Add("primary_contact_email", "primary_contact_email");
            tableMapping.ColumnMappings.Add("primary_contact_type_id", "primary_contact_type_id");
            tableMapping.ColumnMappings.Add("project_manager_id", "project_manager_id");
            tableMapping.ColumnMappings.Add("o_and_m_id", "o_and_m_id");
            tableMapping.ColumnMappings.Add("permit_status_id", "permit_status_id");
            tableMapping.ColumnMappings.Add("management_id", "management_id");
            tableMapping.ColumnMappings.Add("create_by", "create_by");
            tableMapping.ColumnMappings.Add("create_date", "create_date");
            tableMapping.ColumnMappings.Add("update_by", "update_by");
            tableMapping.ColumnMappings.Add("update_date", "update_date");
            tableMapping.ColumnMappings.Add("modified_time", "modified_time");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[PROJECT] WHERE (([project_id] = @Original_project_id) AND ([mo" +
                "dified_time] = @Original_modified_time))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_project_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "project_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_modified_time", global::System.Data.SqlDbType.Timestamp, 0, global::System.Data.ParameterDirection.Input, 0, 0, "modified_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PROJECT] ([site_id], [name], [partnership_type_id], [facility_" +
                "type_id], [ia_managed_roof], [ia_managed_paved], [facility_size], [storage_volum" +
                "e], [infiltration_test_id], [infiltration_rate], [project_status_id], [designer_" +
                "id], [constructor_id], [contractor_id], [city_cost], [primary_contact_name], [pr" +
                "imary_contact_phone], [primary_contact_email], [primary_contact_type_id], [proje" +
                "ct_manager_id], [o_and_m_id], [permit_status_id], [management_id], [create_by], " +
                "[create_date], [update_by], [update_date]) VALUES (@site_id, @name, @partnership" +
                "_type_id, @facility_type_id, @ia_managed_roof, @ia_managed_paved, @facility_size" +
                ", @storage_volume, @infiltration_test_id, @infiltration_rate, @project_status_id" +
                ", @designer_id, @constructor_id, @contractor_id, @city_cost, @primary_contact_na" +
                "me, @primary_contact_phone, @primary_contact_email, @primary_contact_type_id, @p" +
                "roject_manager_id, @o_and_m_id, @permit_status_id, @management_id, @create_by, @" +
                "create_date, @update_by, @update_date);\r\nSELECT project_id, site_id, name, partn" +
                "ership_type_id, facility_type_id, ia_managed_roof, ia_managed_paved, facility_si" +
                "ze, storage_volume, infiltration_test_id, infiltration_rate, project_status_id, " +
                "designer_id, constructor_id, contractor_id, city_cost, primary_contact_name, pri" +
                "mary_contact_phone, primary_contact_email, primary_contact_type_id, project_mana" +
                "ger_id, o_and_m_id, permit_status_id, management_id, create_by, create_date, upd" +
                "ate_by, update_date, modified_time FROM dbo.PROJECT WHERE (project_id = SCOPE_ID" +
                "ENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@site_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "site_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@partnership_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "partnership_type_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@facility_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facility_type_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ia_managed_roof", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ia_managed_roof", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ia_managed_paved", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ia_managed_paved", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@facility_size", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facility_size", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@storage_volume", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "storage_volume", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@infiltration_test_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "infiltration_test_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@infiltration_rate", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "infiltration_rate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@project_status_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "project_status_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@designer_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "designer_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@constructor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "constructor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@contractor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "contractor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@city_cost", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "city_cost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@primary_contact_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "primary_contact_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@primary_contact_phone", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "primary_contact_phone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@primary_contact_email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "primary_contact_email", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@primary_contact_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "primary_contact_type_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@project_manager_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "project_manager_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@o_and_m_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "o_and_m_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@permit_status_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "permit_status_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@management_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "management_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@create_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "create_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@create_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "create_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@update_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@update_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[PROJECT] SET [site_id] = @site_id, [name] = @name, [partnership_typ" +
                "e_id] = @partnership_type_id, [facility_type_id] = @facility_type_id, [ia_manage" +
                "d_roof] = @ia_managed_roof, [ia_managed_paved] = @ia_managed_paved, [facility_si" +
                "ze] = @facility_size, [storage_volume] = @storage_volume, [infiltration_test_id]" +
                " = @infiltration_test_id, [infiltration_rate] = @infiltration_rate, [project_sta" +
                "tus_id] = @project_status_id, [designer_id] = @designer_id, [constructor_id] = @" +
                "constructor_id, [contractor_id] = @contractor_id, [city_cost] = @city_cost, [pri" +
                "mary_contact_name] = @primary_contact_name, [primary_contact_phone] = @primary_c" +
                "ontact_phone, [primary_contact_email] = @primary_contact_email, [primary_contact" +
                "_type_id] = @primary_contact_type_id, [project_manager_id] = @project_manager_id" +
                ", [o_and_m_id] = @o_and_m_id, [permit_status_id] = @permit_status_id, [managemen" +
                "t_id] = @management_id, [create_by] = @create_by, [create_date] = @create_date, " +
                "[update_by] = @update_by, [update_date] = @update_date WHERE (([project_id] = @O" +
                "riginal_project_id) AND ([modified_time] = @Original_modified_time));\r\nSELECT pr" +
                "oject_id, site_id, name, partnership_type_id, facility_type_id, ia_managed_roof," +
                " ia_managed_paved, facility_size, storage_volume, infiltration_test_id, infiltra" +
                "tion_rate, project_status_id, designer_id, constructor_id, contractor_id, city_c" +
                "ost, primary_contact_name, primary_contact_phone, primary_contact_email, primary" +
                "_contact_type_id, project_manager_id, o_and_m_id, permit_status_id, management_i" +
                "d, create_by, create_date, update_by, update_date, modified_time FROM dbo.PROJEC" +
                "T WHERE (project_id = @project_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@site_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "site_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@partnership_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "partnership_type_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@facility_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facility_type_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ia_managed_roof", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ia_managed_roof", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ia_managed_paved", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ia_managed_paved", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@facility_size", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facility_size", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@storage_volume", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "storage_volume", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@infiltration_test_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "infiltration_test_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@infiltration_rate", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "infiltration_rate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@project_status_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "project_status_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@designer_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "designer_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@constructor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "constructor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@contractor_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "contractor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@city_cost", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "city_cost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@primary_contact_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "primary_contact_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@primary_contact_phone", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "primary_contact_phone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@primary_contact_email", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "primary_contact_email", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@primary_contact_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "primary_contact_type_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@project_manager_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "project_manager_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@o_and_m_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "o_and_m_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@permit_status_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "permit_status_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@management_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "management_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@create_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "create_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@create_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "create_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@update_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@update_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_project_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "project_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_modified_time", global::System.Data.SqlDbType.Timestamp, 0, global::System.Data.ParameterDirection.Input, 0, 0, "modified_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@project_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "project_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.RETRO_RGConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     dbo.PROJECT.*\r\nFROM         dbo.PROJECT";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RetrofitsDataSet.PROJECTDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RetrofitsDataSet.PROJECTDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RetrofitsDataSet.PROJECTDataTable dataTable = new RetrofitsDataSet.PROJECTDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet.PROJECTDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PROJECT");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_project_id, byte[] Original_modified_time) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_project_id));
            if ((Original_modified_time == null)) {
                throw new global::System.ArgumentNullException("Original_modified_time");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_modified_time));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int site_id, 
                    string name, 
                    int partnership_type_id, 
                    int facility_type_id, 
                    int ia_managed_roof, 
                    int ia_managed_paved, 
                    int facility_size, 
                    int storage_volume, 
                    int infiltration_test_id, 
                    decimal infiltration_rate, 
                    int project_status_id, 
                    int designer_id, 
                    int constructor_id, 
                    int contractor_id, 
                    decimal city_cost, 
                    string primary_contact_name, 
                    string primary_contact_phone, 
                    string primary_contact_email, 
                    int primary_contact_type_id, 
                    int project_manager_id, 
                    int o_and_m_id, 
                    int permit_status_id, 
                    int management_id, 
                    string create_by, 
                    System.DateTime create_date, 
                    string update_by, 
                    System.DateTime update_date) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(site_id));
            if ((name == null)) {
                throw new global::System.ArgumentNullException("name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(name));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(partnership_type_id));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(facility_type_id));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(ia_managed_roof));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(ia_managed_paved));
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(facility_size));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(storage_volume));
            this.Adapter.InsertCommand.Parameters[8].Value = ((int)(infiltration_test_id));
            this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(infiltration_rate));
            this.Adapter.InsertCommand.Parameters[10].Value = ((int)(project_status_id));
            this.Adapter.InsertCommand.Parameters[11].Value = ((int)(designer_id));
            this.Adapter.InsertCommand.Parameters[12].Value = ((int)(constructor_id));
            this.Adapter.InsertCommand.Parameters[13].Value = ((int)(contractor_id));
            this.Adapter.InsertCommand.Parameters[14].Value = ((decimal)(city_cost));
            if ((primary_contact_name == null)) {
                throw new global::System.ArgumentNullException("primary_contact_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(primary_contact_name));
            }
            if ((primary_contact_phone == null)) {
                throw new global::System.ArgumentNullException("primary_contact_phone");
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(primary_contact_phone));
            }
            if ((primary_contact_email == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(primary_contact_email));
            }
            this.Adapter.InsertCommand.Parameters[18].Value = ((int)(primary_contact_type_id));
            this.Adapter.InsertCommand.Parameters[19].Value = ((int)(project_manager_id));
            this.Adapter.InsertCommand.Parameters[20].Value = ((int)(o_and_m_id));
            this.Adapter.InsertCommand.Parameters[21].Value = ((int)(permit_status_id));
            this.Adapter.InsertCommand.Parameters[22].Value = ((int)(management_id));
            if ((create_by == null)) {
                throw new global::System.ArgumentNullException("create_by");
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(create_by));
            }
            this.Adapter.InsertCommand.Parameters[24].Value = ((System.DateTime)(create_date));
            if ((update_by == null)) {
                throw new global::System.ArgumentNullException("update_by");
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(update_by));
            }
            this.Adapter.InsertCommand.Parameters[26].Value = ((System.DateTime)(update_date));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int site_id, 
                    string name, 
                    int partnership_type_id, 
                    int facility_type_id, 
                    int ia_managed_roof, 
                    int ia_managed_paved, 
                    int facility_size, 
                    int storage_volume, 
                    int infiltration_test_id, 
                    decimal infiltration_rate, 
                    int project_status_id, 
                    int designer_id, 
                    int constructor_id, 
                    int contractor_id, 
                    decimal city_cost, 
                    string primary_contact_name, 
                    string primary_contact_phone, 
                    string primary_contact_email, 
                    int primary_contact_type_id, 
                    int project_manager_id, 
                    int o_and_m_id, 
                    int permit_status_id, 
                    int management_id, 
                    string create_by, 
                    System.DateTime create_date, 
                    string update_by, 
                    System.DateTime update_date, 
                    int Original_project_id, 
                    byte[] Original_modified_time, 
                    int project_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(site_id));
            if ((name == null)) {
                throw new global::System.ArgumentNullException("name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(partnership_type_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(facility_type_id));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(ia_managed_roof));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(ia_managed_paved));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(facility_size));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(storage_volume));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(infiltration_test_id));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(infiltration_rate));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(project_status_id));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(designer_id));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(constructor_id));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(contractor_id));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(city_cost));
            if ((primary_contact_name == null)) {
                throw new global::System.ArgumentNullException("primary_contact_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(primary_contact_name));
            }
            if ((primary_contact_phone == null)) {
                throw new global::System.ArgumentNullException("primary_contact_phone");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(primary_contact_phone));
            }
            if ((primary_contact_email == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(primary_contact_email));
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(primary_contact_type_id));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(project_manager_id));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(o_and_m_id));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(permit_status_id));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(management_id));
            if ((create_by == null)) {
                throw new global::System.ArgumentNullException("create_by");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(create_by));
            }
            this.Adapter.UpdateCommand.Parameters[24].Value = ((System.DateTime)(create_date));
            if ((update_by == null)) {
                throw new global::System.ArgumentNullException("update_by");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(update_by));
            }
            this.Adapter.UpdateCommand.Parameters[26].Value = ((System.DateTime)(update_date));
            this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(Original_project_id));
            if ((Original_modified_time == null)) {
                throw new global::System.ArgumentNullException("Original_modified_time");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((byte[])(Original_modified_time));
            }
            this.Adapter.UpdateCommand.Parameters[29].Value = ((int)(project_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int site_id, 
                    string name, 
                    int partnership_type_id, 
                    int facility_type_id, 
                    int ia_managed_roof, 
                    int ia_managed_paved, 
                    int facility_size, 
                    int storage_volume, 
                    int infiltration_test_id, 
                    decimal infiltration_rate, 
                    int project_status_id, 
                    int designer_id, 
                    int constructor_id, 
                    int contractor_id, 
                    decimal city_cost, 
                    string primary_contact_name, 
                    string primary_contact_phone, 
                    string primary_contact_email, 
                    int primary_contact_type_id, 
                    int project_manager_id, 
                    int o_and_m_id, 
                    int permit_status_id, 
                    int management_id, 
                    string create_by, 
                    System.DateTime create_date, 
                    string update_by, 
                    System.DateTime update_date, 
                    int Original_project_id, 
                    byte[] Original_modified_time) {
            return this.Update(site_id, name, partnership_type_id, facility_type_id, ia_managed_roof, ia_managed_paved, facility_size, storage_volume, infiltration_test_id, infiltration_rate, project_status_id, designer_id, constructor_id, contractor_id, city_cost, primary_contact_name, primary_contact_phone, primary_contact_email, primary_contact_type_id, project_manager_id, o_and_m_id, permit_status_id, management_id, create_by, create_date, update_by, update_date, Original_project_id, Original_modified_time, Original_project_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PROJECT_STATUSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PROJECT_STATUSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PROJECT_STATUS";
            tableMapping.ColumnMappings.Add("project_status_id", "project_status_id");
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("display_order", "display_order");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[PROJECT_STATUS] WHERE (([project_status_id] = @Original_projec" +
                "t_status_id) AND ([name] = @Original_name) AND ([display_order] = @Original_disp" +
                "lay_order))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_project_status_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "project_status_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_display_order", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "display_order", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PROJECT_STATUS] ([name], [display_order]) VALUES (@name, @disp" +
                "lay_order);\r\nSELECT project_status_id, name, display_order FROM dbo.PROJECT_STAT" +
                "US WHERE (project_status_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@display_order", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "display_order", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[PROJECT_STATUS] SET [name] = @name, [display_order] = @display_order WHERE (([project_status_id] = @Original_project_status_id) AND ([name] = @Original_name) AND ([display_order] = @Original_display_order));
SELECT project_status_id, name, display_order FROM dbo.PROJECT_STATUS WHERE (project_status_id = @project_status_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@display_order", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "display_order", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_project_status_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "project_status_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_display_order", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "display_order", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@project_status_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "project_status_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.RETRO_RGConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     dbo.PROJECT_STATUS.*\r\nFROM         dbo.PROJECT_STATUS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RetrofitsDataSet.PROJECT_STATUSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RetrofitsDataSet.PROJECT_STATUSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RetrofitsDataSet.PROJECT_STATUSDataTable dataTable = new RetrofitsDataSet.PROJECT_STATUSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet.PROJECT_STATUSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PROJECT_STATUS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_project_status_id, string Original_name, int Original_display_order) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_project_status_id));
            if ((Original_name == null)) {
                throw new global::System.ArgumentNullException("Original_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_name));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_display_order));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string name, int display_order) {
            if ((name == null)) {
                throw new global::System.ArgumentNullException("name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(name));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(display_order));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string name, int display_order, int Original_project_status_id, string Original_name, int Original_display_order, int project_status_id) {
            if ((name == null)) {
                throw new global::System.ArgumentNullException("name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(name));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(display_order));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_project_status_id));
            if ((Original_name == null)) {
                throw new global::System.ArgumentNullException("Original_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_name));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_display_order));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(project_status_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string name, int display_order, int Original_project_status_id, string Original_name, int Original_display_order) {
            return this.Update(name, display_order, Original_project_status_id, Original_name, Original_display_order, Original_project_status_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SITE_ASSESSMENTTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SITE_ASSESSMENTTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SITE_ASSESSMENT";
            tableMapping.ColumnMappings.Add("site_assessment_id", "site_assessment_id");
            tableMapping.ColumnMappings.Add("site_id", "site_id");
            tableMapping.ColumnMappings.Add("assessment_date", "assessment_date");
            tableMapping.ColumnMappings.Add("staff_id", "staff_id");
            tableMapping.ColumnMappings.Add("information_source_id", "information_source_id");
            tableMapping.ColumnMappings.Add("ia_type_id", "ia_type_id");
            tableMapping.ColumnMappings.Add("ia_sqft", "ia_sqft");
            tableMapping.ColumnMappings.Add("destination_id", "destination_id");
            tableMapping.ColumnMappings.Add("management_id", "management_id");
            tableMapping.ColumnMappings.Add("facility_type_id", "facility_type_id");
            tableMapping.ColumnMappings.Add("hansen_id", "hansen_id");
            tableMapping.ColumnMappings.Add("assessment_type_id", "assessment_type_id");
            tableMapping.ColumnMappings.Add("gis_uniqueid", "gis_uniqueid");
            tableMapping.ColumnMappings.Add("project_id", "project_id");
            tableMapping.ColumnMappings.Add("create_by", "create_by");
            tableMapping.ColumnMappings.Add("create_date", "create_date");
            tableMapping.ColumnMappings.Add("update_by", "update_by");
            tableMapping.ColumnMappings.Add("update_date", "update_date");
            tableMapping.ColumnMappings.Add("modified_time", "modified_time");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SITE_ASSESSMENT] WHERE (([site_assessment_id] = @Original_site" +
                "_assessment_id) AND ([modified_time] = @Original_modified_time))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_site_assessment_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "site_assessment_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_modified_time", global::System.Data.SqlDbType.Timestamp, 0, global::System.Data.ParameterDirection.Input, 0, 0, "modified_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[SITE_ASSESSMENT] ([site_id], [assessment_date], [staff_id], [information_source_id], [ia_type_id], [ia_sqft], [destination_id], [management_id], [facility_type_id], [hansen_id], [assessment_type_id], [gis_uniqueid], [project_id], [create_by], [create_date], [update_by], [update_date]) VALUES (@site_id, @assessment_date, @staff_id, @information_source_id, @ia_type_id, @ia_sqft, @destination_id, @management_id, @facility_type_id, @hansen_id, @assessment_type_id, @gis_uniqueid, @project_id, @create_by, @create_date, @update_by, @update_date);
SELECT site_assessment_id, site_id, assessment_date, staff_id, information_source_id, ia_type_id, ia_sqft, destination_id, management_id, facility_type_id, hansen_id, assessment_type_id, gis_uniqueid, project_id, create_by, create_date, update_by, update_date, modified_time FROM dbo.SITE_ASSESSMENT WHERE (site_assessment_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@site_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "site_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assessment_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assessment_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@staff_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "staff_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@information_source_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "information_source_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ia_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ia_type_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ia_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ia_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@destination_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "destination_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@management_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "management_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@facility_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facility_type_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@hansen_id", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "hansen_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assessment_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assessment_type_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gis_uniqueid", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gis_uniqueid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@project_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "project_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@create_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "create_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@create_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "create_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@update_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@update_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[SITE_ASSESSMENT] SET [site_id] = @site_id, [assessment_date] = @assessment_date, [staff_id] = @staff_id, [information_source_id] = @information_source_id, [ia_type_id] = @ia_type_id, [ia_sqft] = @ia_sqft, [destination_id] = @destination_id, [management_id] = @management_id, [facility_type_id] = @facility_type_id, [hansen_id] = @hansen_id, [assessment_type_id] = @assessment_type_id, [gis_uniqueid] = @gis_uniqueid, [project_id] = @project_id, [create_by] = @create_by, [create_date] = @create_date, [update_by] = @update_by, [update_date] = @update_date WHERE (([site_assessment_id] = @Original_site_assessment_id) AND ([modified_time] = @Original_modified_time));
SELECT site_assessment_id, site_id, assessment_date, staff_id, information_source_id, ia_type_id, ia_sqft, destination_id, management_id, facility_type_id, hansen_id, assessment_type_id, gis_uniqueid, project_id, create_by, create_date, update_by, update_date, modified_time FROM dbo.SITE_ASSESSMENT WHERE (site_assessment_id = @site_assessment_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@site_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "site_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assessment_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assessment_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@staff_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "staff_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@information_source_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "information_source_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ia_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ia_type_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ia_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ia_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@destination_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "destination_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@management_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "management_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@facility_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facility_type_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@hansen_id", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "hansen_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assessment_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "assessment_type_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gis_uniqueid", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "gis_uniqueid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@project_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "project_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@create_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "create_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@create_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "create_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@update_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@update_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_site_assessment_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "site_assessment_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_modified_time", global::System.Data.SqlDbType.Timestamp, 0, global::System.Data.ParameterDirection.Input, 0, 0, "modified_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@site_assessment_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "site_assessment_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.RETRO_RGConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     dbo.SITE_ASSESSMENT.*\r\nFROM         dbo.SITE_ASSESSMENT";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RetrofitsDataSet.SITE_ASSESSMENTDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RetrofitsDataSet.SITE_ASSESSMENTDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RetrofitsDataSet.SITE_ASSESSMENTDataTable dataTable = new RetrofitsDataSet.SITE_ASSESSMENTDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet.SITE_ASSESSMENTDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SITE_ASSESSMENT");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_site_assessment_id, byte[] Original_modified_time) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_site_assessment_id));
            if ((Original_modified_time == null)) {
                throw new global::System.ArgumentNullException("Original_modified_time");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_modified_time));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int site_id, 
                    System.DateTime assessment_date, 
                    int staff_id, 
                    int information_source_id, 
                    int ia_type_id, 
                    global::System.Nullable<int> ia_sqft, 
                    int destination_id, 
                    global::System.Nullable<int> management_id, 
                    global::System.Nullable<int> facility_type_id, 
                    string hansen_id, 
                    int assessment_type_id, 
                    global::System.Nullable<global::System.Guid> gis_uniqueid, 
                    global::System.Nullable<int> project_id, 
                    string create_by, 
                    System.DateTime create_date, 
                    string update_by, 
                    System.DateTime update_date) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(site_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(assessment_date));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(staff_id));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(information_source_id));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(ia_type_id));
            if ((ia_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(ia_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(destination_id));
            if ((management_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(management_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((facility_type_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(facility_type_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((hansen_id == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(hansen_id));
            }
            this.Adapter.InsertCommand.Parameters[10].Value = ((int)(assessment_type_id));
            if ((gis_uniqueid.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((System.Guid)(gis_uniqueid.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((project_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((int)(project_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((create_by == null)) {
                throw new global::System.ArgumentNullException("create_by");
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(create_by));
            }
            this.Adapter.InsertCommand.Parameters[14].Value = ((System.DateTime)(create_date));
            if ((update_by == null)) {
                throw new global::System.ArgumentNullException("update_by");
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(update_by));
            }
            this.Adapter.InsertCommand.Parameters[16].Value = ((System.DateTime)(update_date));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int site_id, 
                    System.DateTime assessment_date, 
                    int staff_id, 
                    int information_source_id, 
                    int ia_type_id, 
                    global::System.Nullable<int> ia_sqft, 
                    int destination_id, 
                    global::System.Nullable<int> management_id, 
                    global::System.Nullable<int> facility_type_id, 
                    string hansen_id, 
                    int assessment_type_id, 
                    global::System.Nullable<global::System.Guid> gis_uniqueid, 
                    global::System.Nullable<int> project_id, 
                    string create_by, 
                    System.DateTime create_date, 
                    string update_by, 
                    System.DateTime update_date, 
                    int Original_site_assessment_id, 
                    byte[] Original_modified_time, 
                    int site_assessment_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(site_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(assessment_date));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(staff_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(information_source_id));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(ia_type_id));
            if ((ia_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(ia_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(destination_id));
            if ((management_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(management_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((facility_type_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(facility_type_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((hansen_id == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(hansen_id));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(assessment_type_id));
            if ((gis_uniqueid.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((System.Guid)(gis_uniqueid.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((project_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(project_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((create_by == null)) {
                throw new global::System.ArgumentNullException("create_by");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(create_by));
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(create_date));
            if ((update_by == null)) {
                throw new global::System.ArgumentNullException("update_by");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(update_by));
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((System.DateTime)(update_date));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_site_assessment_id));
            if ((Original_modified_time == null)) {
                throw new global::System.ArgumentNullException("Original_modified_time");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((byte[])(Original_modified_time));
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(site_assessment_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int site_id, 
                    System.DateTime assessment_date, 
                    int staff_id, 
                    int information_source_id, 
                    int ia_type_id, 
                    global::System.Nullable<int> ia_sqft, 
                    int destination_id, 
                    global::System.Nullable<int> management_id, 
                    global::System.Nullable<int> facility_type_id, 
                    string hansen_id, 
                    int assessment_type_id, 
                    global::System.Nullable<global::System.Guid> gis_uniqueid, 
                    global::System.Nullable<int> project_id, 
                    string create_by, 
                    System.DateTime create_date, 
                    string update_by, 
                    System.DateTime update_date, 
                    int Original_site_assessment_id, 
                    byte[] Original_modified_time) {
            return this.Update(site_id, assessment_date, staff_id, information_source_id, ia_type_id, ia_sqft, destination_id, management_id, facility_type_id, hansen_id, assessment_type_id, gis_uniqueid, project_id, create_by, create_date, update_by, update_date, Original_site_assessment_id, Original_modified_time, Original_site_assessment_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SITE_OPPORTUNITYTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SITE_OPPORTUNITYTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SITE_OPPORTUNITY";
            tableMapping.ColumnMappings.Add("site_opportunity_id", "site_opportunity_id");
            tableMapping.ColumnMappings.Add("site_id", "site_id");
            tableMapping.ColumnMappings.Add("ia_sqft", "ia_sqft");
            tableMapping.ColumnMappings.Add("management_id", "management_id");
            tableMapping.ColumnMappings.Add("facility_type_id", "facility_type_id");
            tableMapping.ColumnMappings.Add("opportunity_feasibility", "opportunity_feasibility");
            tableMapping.ColumnMappings.Add("create_by", "create_by");
            tableMapping.ColumnMappings.Add("create_date", "create_date");
            tableMapping.ColumnMappings.Add("update_by", "update_by");
            tableMapping.ColumnMappings.Add("update_date", "update_date");
            tableMapping.ColumnMappings.Add("modified_time", "modified_time");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SITE_OPPORTUNITY] WHERE (([site_opportunity_id] = @Original_si" +
                "te_opportunity_id) AND ([modified_time] = @Original_modified_time))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_site_opportunity_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "site_opportunity_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_modified_time", global::System.Data.SqlDbType.Timestamp, 0, global::System.Data.ParameterDirection.Input, 0, 0, "modified_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[SITE_OPPORTUNITY] ([site_id], [ia_sqft], [management_id], [facility_type_id], [opportunity_feasibility], [create_by], [create_date], [update_by], [update_date]) VALUES (@site_id, @ia_sqft, @management_id, @facility_type_id, @opportunity_feasibility, @create_by, @create_date, @update_by, @update_date);
SELECT site_opportunity_id, site_id, ia_sqft, management_id, facility_type_id, opportunity_feasibility, create_by, create_date, update_by, update_date, modified_time FROM dbo.SITE_OPPORTUNITY WHERE (site_opportunity_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@site_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "site_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ia_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ia_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@management_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "management_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@facility_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facility_type_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@opportunity_feasibility", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "opportunity_feasibility", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@create_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "create_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@create_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "create_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@update_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@update_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[SITE_OPPORTUNITY] SET [site_id] = @site_id, [ia_sqft] = @ia_sqft, [management_id] = @management_id, [facility_type_id] = @facility_type_id, [opportunity_feasibility] = @opportunity_feasibility, [create_by] = @create_by, [create_date] = @create_date, [update_by] = @update_by, [update_date] = @update_date WHERE (([site_opportunity_id] = @Original_site_opportunity_id) AND ([modified_time] = @Original_modified_time));
SELECT site_opportunity_id, site_id, ia_sqft, management_id, facility_type_id, opportunity_feasibility, create_by, create_date, update_by, update_date, modified_time FROM dbo.SITE_OPPORTUNITY WHERE (site_opportunity_id = @site_opportunity_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@site_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "site_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ia_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ia_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@management_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "management_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@facility_type_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "facility_type_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@opportunity_feasibility", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "opportunity_feasibility", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@create_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "create_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@create_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "create_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@update_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@update_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_site_opportunity_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "site_opportunity_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_modified_time", global::System.Data.SqlDbType.Timestamp, 0, global::System.Data.ParameterDirection.Input, 0, 0, "modified_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@site_opportunity_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "site_opportunity_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.RETRO_RGConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     dbo.SITE_OPPORTUNITY.*\r\nFROM         dbo.SITE_OPPORTUNITY";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RetrofitsDataSet.SITE_OPPORTUNITYDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RetrofitsDataSet.SITE_OPPORTUNITYDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RetrofitsDataSet.SITE_OPPORTUNITYDataTable dataTable = new RetrofitsDataSet.SITE_OPPORTUNITYDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet.SITE_OPPORTUNITYDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SITE_OPPORTUNITY");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_site_opportunity_id, byte[] Original_modified_time) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_site_opportunity_id));
            if ((Original_modified_time == null)) {
                throw new global::System.ArgumentNullException("Original_modified_time");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_modified_time));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int site_id, int ia_sqft, int management_id, int facility_type_id, int opportunity_feasibility, string create_by, System.DateTime create_date, string update_by, System.DateTime update_date) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(site_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ia_sqft));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(management_id));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(facility_type_id));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(opportunity_feasibility));
            if ((create_by == null)) {
                throw new global::System.ArgumentNullException("create_by");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(create_by));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(create_date));
            if ((update_by == null)) {
                throw new global::System.ArgumentNullException("update_by");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(update_by));
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((System.DateTime)(update_date));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int site_id, int ia_sqft, int management_id, int facility_type_id, int opportunity_feasibility, string create_by, System.DateTime create_date, string update_by, System.DateTime update_date, int Original_site_opportunity_id, byte[] Original_modified_time, int site_opportunity_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(site_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ia_sqft));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(management_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(facility_type_id));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(opportunity_feasibility));
            if ((create_by == null)) {
                throw new global::System.ArgumentNullException("create_by");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(create_by));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(create_date));
            if ((update_by == null)) {
                throw new global::System.ArgumentNullException("update_by");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(update_by));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(update_date));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_site_opportunity_id));
            if ((Original_modified_time == null)) {
                throw new global::System.ArgumentNullException("Original_modified_time");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((byte[])(Original_modified_time));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(site_opportunity_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int site_id, int ia_sqft, int management_id, int facility_type_id, int opportunity_feasibility, string create_by, System.DateTime create_date, string update_by, System.DateTime update_date, int Original_site_opportunity_id, byte[] Original_modified_time) {
            return this.Update(site_id, ia_sqft, management_id, facility_type_id, opportunity_feasibility, create_by, create_date, update_by, update_date, Original_site_opportunity_id, Original_modified_time, Original_site_opportunity_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SITETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SITETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SITE";
            tableMapping.ColumnMappings.Add("site_id", "site_id");
            tableMapping.ColumnMappings.Add("property_id", "property_id");
            tableMapping.ColumnMappings.Add("site_use", "site_use");
            tableMapping.ColumnMappings.Add("site_use_description", "site_use_description");
            tableMapping.ColumnMappings.Add("neighborhood", "neighborhood");
            tableMapping.ColumnMappings.Add("sewer_basin", "sewer_basin");
            tableMapping.ColumnMappings.Add("retro_basin", "retro_basin");
            tableMapping.ColumnMappings.Add("create_by", "create_by");
            tableMapping.ColumnMappings.Add("create_date", "create_date");
            tableMapping.ColumnMappings.Add("update_by", "update_by");
            tableMapping.ColumnMappings.Add("update_date", "update_date");
            tableMapping.ColumnMappings.Add("modified_time", "modified_time");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SITE] WHERE (([site_id] = @Original_site_id) AND ([modified_ti" +
                "me] = @Original_modified_time))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_site_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "site_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_modified_time", global::System.Data.SqlDbType.Timestamp, 0, global::System.Data.ParameterDirection.Input, 0, 0, "modified_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[SITE] ([property_id], [site_use], [site_use_description], [neighborhood], [sewer_basin], [retro_basin], [create_by], [create_date], [update_by], [update_date]) VALUES (@property_id, @site_use, @site_use_description, @neighborhood, @sewer_basin, @retro_basin, @create_by, @create_date, @update_by, @update_date);
SELECT site_id, property_id, site_use, site_use_description, neighborhood, sewer_basin, retro_basin, create_by, create_date, update_by, update_date, modified_time FROM dbo.SITE WHERE (site_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@property_id", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "property_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@site_use", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "site_use", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@site_use_description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "site_use_description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@neighborhood", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "neighborhood", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sewer_basin", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sewer_basin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@retro_basin", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "retro_basin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@create_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "create_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@create_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "create_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@update_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@update_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[SITE] SET [property_id] = @property_id, [site_use] = @site_use, [site_use_description] = @site_use_description, [neighborhood] = @neighborhood, [sewer_basin] = @sewer_basin, [retro_basin] = @retro_basin, [create_by] = @create_by, [create_date] = @create_date, [update_by] = @update_by, [update_date] = @update_date WHERE (([site_id] = @Original_site_id) AND ([modified_time] = @Original_modified_time));
SELECT site_id, property_id, site_use, site_use_description, neighborhood, sewer_basin, retro_basin, create_by, create_date, update_by, update_date, modified_time FROM dbo.SITE WHERE (site_id = @site_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@property_id", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "property_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@site_use", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "site_use", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@site_use_description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "site_use_description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@neighborhood", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "neighborhood", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sewer_basin", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sewer_basin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@retro_basin", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "retro_basin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@create_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "create_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@create_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "create_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@update_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@update_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_site_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "site_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_modified_time", global::System.Data.SqlDbType.Timestamp, 0, global::System.Data.ParameterDirection.Input, 0, 0, "modified_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@site_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "site_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.RETRO_RGConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     dbo.SITE.*\r\nFROM         dbo.SITE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RetrofitsDataSet.SITEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RetrofitsDataSet.SITEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RetrofitsDataSet.SITEDataTable dataTable = new RetrofitsDataSet.SITEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet.SITEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SITE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_site_id, byte[] Original_modified_time) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_site_id));
            if ((Original_modified_time == null)) {
                throw new global::System.ArgumentNullException("Original_modified_time");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_modified_time));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string property_id, string site_use, string site_use_description, string neighborhood, string sewer_basin, string retro_basin, string create_by, System.DateTime create_date, string update_by, System.DateTime update_date) {
            if ((property_id == null)) {
                throw new global::System.ArgumentNullException("property_id");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(property_id));
            }
            if ((site_use == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(site_use));
            }
            if ((site_use_description == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(site_use_description));
            }
            if ((neighborhood == null)) {
                throw new global::System.ArgumentNullException("neighborhood");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(neighborhood));
            }
            if ((sewer_basin == null)) {
                throw new global::System.ArgumentNullException("sewer_basin");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(sewer_basin));
            }
            if ((retro_basin == null)) {
                throw new global::System.ArgumentNullException("retro_basin");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(retro_basin));
            }
            if ((create_by == null)) {
                throw new global::System.ArgumentNullException("create_by");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(create_by));
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((System.DateTime)(create_date));
            if ((update_by == null)) {
                throw new global::System.ArgumentNullException("update_by");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(update_by));
            }
            this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(update_date));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string property_id, string site_use, string site_use_description, string neighborhood, string sewer_basin, string retro_basin, string create_by, System.DateTime create_date, string update_by, System.DateTime update_date, int Original_site_id, byte[] Original_modified_time, int site_id) {
            if ((property_id == null)) {
                throw new global::System.ArgumentNullException("property_id");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(property_id));
            }
            if ((site_use == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(site_use));
            }
            if ((site_use_description == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(site_use_description));
            }
            if ((neighborhood == null)) {
                throw new global::System.ArgumentNullException("neighborhood");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(neighborhood));
            }
            if ((sewer_basin == null)) {
                throw new global::System.ArgumentNullException("sewer_basin");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(sewer_basin));
            }
            if ((retro_basin == null)) {
                throw new global::System.ArgumentNullException("retro_basin");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(retro_basin));
            }
            if ((create_by == null)) {
                throw new global::System.ArgumentNullException("create_by");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(create_by));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((System.DateTime)(create_date));
            if ((update_by == null)) {
                throw new global::System.ArgumentNullException("update_by");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(update_by));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(update_date));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_site_id));
            if ((Original_modified_time == null)) {
                throw new global::System.ArgumentNullException("Original_modified_time");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((byte[])(Original_modified_time));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(site_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string property_id, string site_use, string site_use_description, string neighborhood, string sewer_basin, string retro_basin, string create_by, System.DateTime create_date, string update_by, System.DateTime update_date, int Original_site_id, byte[] Original_modified_time) {
            return this.Update(property_id, site_use, site_use_description, neighborhood, sewer_basin, retro_basin, create_by, create_date, update_by, update_date, Original_site_id, Original_modified_time, Original_site_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class RETRO_BASINTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RETRO_BASINTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "RETRO_BASIN";
            tableMapping.ColumnMappings.Add("retro_basin_id", "retro_basin_id");
            tableMapping.ColumnMappings.Add("name", "name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [RETRO_BASIN] WHERE (([retro_basin_id] = @Original_retro_basin_id) AN" +
                "D ([name] = @Original_name))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_retro_basin_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "retro_basin_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [RETRO_BASIN] ([name]) VALUES (@name);\r\nSELECT retro_basin_id, name F" +
                "ROM RETRO_BASIN WHERE (retro_basin_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [RETRO_BASIN] SET [name] = @name WHERE (([retro_basin_id] = @Original_retr" +
                "o_basin_id) AND ([name] = @Original_name));\r\nSELECT retro_basin_id, name FROM RE" +
                "TRO_BASIN WHERE (retro_basin_id = @retro_basin_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_retro_basin_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "retro_basin_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@retro_basin_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "retro_basin_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.RETRO_RGConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     retro_basin_id, name\r\nFROM         RETRO_BASIN";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RetrofitsDataSet.RETRO_BASINDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RetrofitsDataSet.RETRO_BASINDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RetrofitsDataSet.RETRO_BASINDataTable dataTable = new RetrofitsDataSet.RETRO_BASINDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet.RETRO_BASINDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "RETRO_BASIN");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_retro_basin_id, string Original_name) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_retro_basin_id));
            if ((Original_name == null)) {
                throw new global::System.ArgumentNullException("Original_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string name) {
            if ((name == null)) {
                throw new global::System.ArgumentNullException("name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string name, int Original_retro_basin_id, string Original_name, int retro_basin_id) {
            if ((name == null)) {
                throw new global::System.ArgumentNullException("name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(name));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_retro_basin_id));
            if ((Original_name == null)) {
                throw new global::System.ArgumentNullException("Original_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_name));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(retro_basin_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string name, int Original_retro_basin_id, string Original_name) {
            return this.Update(name, Original_retro_basin_id, Original_name, Original_retro_basin_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SEWER_BASINTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SEWER_BASINTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SEWER_BASIN";
            tableMapping.ColumnMappings.Add("sewer_basin_id", "sewer_basin_id");
            tableMapping.ColumnMappings.Add("name", "name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [SEWER_BASIN] WHERE (([sewer_basin_id] = @Original_sewer_basin_id) AN" +
                "D ([name] = @Original_name))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_sewer_basin_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sewer_basin_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [SEWER_BASIN] ([name]) VALUES (@name);\r\nSELECT sewer_basin_id, name F" +
                "ROM SEWER_BASIN WHERE (sewer_basin_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [SEWER_BASIN] SET [name] = @name WHERE (([sewer_basin_id] = @Original_sewe" +
                "r_basin_id) AND ([name] = @Original_name));\r\nSELECT sewer_basin_id, name FROM SE" +
                "WER_BASIN WHERE (sewer_basin_id = @sewer_basin_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_sewer_basin_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sewer_basin_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sewer_basin_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "sewer_basin_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.RETRO_RGConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     sewer_basin_id, name\r\nFROM         SEWER_BASIN";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RetrofitsDataSet.SEWER_BASINDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RetrofitsDataSet.SEWER_BASINDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RetrofitsDataSet.SEWER_BASINDataTable dataTable = new RetrofitsDataSet.SEWER_BASINDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet.SEWER_BASINDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RetrofitsDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SEWER_BASIN");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_sewer_basin_id, string Original_name) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_sewer_basin_id));
            if ((Original_name == null)) {
                throw new global::System.ArgumentNullException("Original_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string name) {
            if ((name == null)) {
                throw new global::System.ArgumentNullException("name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string name, int Original_sewer_basin_id, string Original_name, int sewer_basin_id) {
            if ((name == null)) {
                throw new global::System.ArgumentNullException("name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(name));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_sewer_basin_id));
            if ((Original_name == null)) {
                throw new global::System.ArgumentNullException("Original_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_name));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(sewer_basin_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string name, int Original_sewer_basin_id, string Original_name) {
            return this.Update(name, Original_sewer_basin_id, Original_name, Original_sewer_basin_id);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private FACILITY_TYPETableAdapter _fACILITY_TYPETableAdapter;
        
        private ASSESSMENT_TYPETableAdapter _aSSESSMENT_TYPETableAdapter;
        
        private DESTINATIONTableAdapter _dESTINATIONTableAdapter;
        
        private IMPERVIOUS_AREA_TYPETableAdapter _iMPERVIOUS_AREA_TYPETableAdapter;
        
        private OPPORTUNITY_FEASIBILITYTableAdapter _oPPORTUNITY_FEASIBILITYTableAdapter;
        
        private PROJECTTableAdapter _pROJECTTableAdapter;
        
        private PROJECT_STATUSTableAdapter _pROJECT_STATUSTableAdapter;
        
        private SITE_ASSESSMENTTableAdapter _sITE_ASSESSMENTTableAdapter;
        
        private SITE_OPPORTUNITYTableAdapter _sITE_OPPORTUNITYTableAdapter;
        
        private SITETableAdapter _sITETableAdapter;
        
        private RETRO_BASINTableAdapter _rETRO_BASINTableAdapter;
        
        private SEWER_BASINTableAdapter _sEWER_BASINTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public FACILITY_TYPETableAdapter FACILITY_TYPETableAdapter {
            get {
                return this._fACILITY_TYPETableAdapter;
            }
            set {
                this._fACILITY_TYPETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ASSESSMENT_TYPETableAdapter ASSESSMENT_TYPETableAdapter {
            get {
                return this._aSSESSMENT_TYPETableAdapter;
            }
            set {
                this._aSSESSMENT_TYPETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public DESTINATIONTableAdapter DESTINATIONTableAdapter {
            get {
                return this._dESTINATIONTableAdapter;
            }
            set {
                this._dESTINATIONTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public IMPERVIOUS_AREA_TYPETableAdapter IMPERVIOUS_AREA_TYPETableAdapter {
            get {
                return this._iMPERVIOUS_AREA_TYPETableAdapter;
            }
            set {
                this._iMPERVIOUS_AREA_TYPETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public OPPORTUNITY_FEASIBILITYTableAdapter OPPORTUNITY_FEASIBILITYTableAdapter {
            get {
                return this._oPPORTUNITY_FEASIBILITYTableAdapter;
            }
            set {
                this._oPPORTUNITY_FEASIBILITYTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public PROJECTTableAdapter PROJECTTableAdapter {
            get {
                return this._pROJECTTableAdapter;
            }
            set {
                this._pROJECTTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public PROJECT_STATUSTableAdapter PROJECT_STATUSTableAdapter {
            get {
                return this._pROJECT_STATUSTableAdapter;
            }
            set {
                this._pROJECT_STATUSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SITE_ASSESSMENTTableAdapter SITE_ASSESSMENTTableAdapter {
            get {
                return this._sITE_ASSESSMENTTableAdapter;
            }
            set {
                this._sITE_ASSESSMENTTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SITE_OPPORTUNITYTableAdapter SITE_OPPORTUNITYTableAdapter {
            get {
                return this._sITE_OPPORTUNITYTableAdapter;
            }
            set {
                this._sITE_OPPORTUNITYTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SITETableAdapter SITETableAdapter {
            get {
                return this._sITETableAdapter;
            }
            set {
                this._sITETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public RETRO_BASINTableAdapter RETRO_BASINTableAdapter {
            get {
                return this._rETRO_BASINTableAdapter;
            }
            set {
                this._rETRO_BASINTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SEWER_BASINTableAdapter SEWER_BASINTableAdapter {
            get {
                return this._sEWER_BASINTableAdapter;
            }
            set {
                this._sEWER_BASINTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._fACILITY_TYPETableAdapter != null) 
                            && (this._fACILITY_TYPETableAdapter.Connection != null))) {
                    return this._fACILITY_TYPETableAdapter.Connection;
                }
                if (((this._aSSESSMENT_TYPETableAdapter != null) 
                            && (this._aSSESSMENT_TYPETableAdapter.Connection != null))) {
                    return this._aSSESSMENT_TYPETableAdapter.Connection;
                }
                if (((this._dESTINATIONTableAdapter != null) 
                            && (this._dESTINATIONTableAdapter.Connection != null))) {
                    return this._dESTINATIONTableAdapter.Connection;
                }
                if (((this._iMPERVIOUS_AREA_TYPETableAdapter != null) 
                            && (this._iMPERVIOUS_AREA_TYPETableAdapter.Connection != null))) {
                    return this._iMPERVIOUS_AREA_TYPETableAdapter.Connection;
                }
                if (((this._oPPORTUNITY_FEASIBILITYTableAdapter != null) 
                            && (this._oPPORTUNITY_FEASIBILITYTableAdapter.Connection != null))) {
                    return this._oPPORTUNITY_FEASIBILITYTableAdapter.Connection;
                }
                if (((this._pROJECTTableAdapter != null) 
                            && (this._pROJECTTableAdapter.Connection != null))) {
                    return this._pROJECTTableAdapter.Connection;
                }
                if (((this._pROJECT_STATUSTableAdapter != null) 
                            && (this._pROJECT_STATUSTableAdapter.Connection != null))) {
                    return this._pROJECT_STATUSTableAdapter.Connection;
                }
                if (((this._sITE_ASSESSMENTTableAdapter != null) 
                            && (this._sITE_ASSESSMENTTableAdapter.Connection != null))) {
                    return this._sITE_ASSESSMENTTableAdapter.Connection;
                }
                if (((this._sITE_OPPORTUNITYTableAdapter != null) 
                            && (this._sITE_OPPORTUNITYTableAdapter.Connection != null))) {
                    return this._sITE_OPPORTUNITYTableAdapter.Connection;
                }
                if (((this._sITETableAdapter != null) 
                            && (this._sITETableAdapter.Connection != null))) {
                    return this._sITETableAdapter.Connection;
                }
                if (((this._rETRO_BASINTableAdapter != null) 
                            && (this._rETRO_BASINTableAdapter.Connection != null))) {
                    return this._rETRO_BASINTableAdapter.Connection;
                }
                if (((this._sEWER_BASINTableAdapter != null) 
                            && (this._sEWER_BASINTableAdapter.Connection != null))) {
                    return this._sEWER_BASINTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._fACILITY_TYPETableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._aSSESSMENT_TYPETableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._dESTINATIONTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._iMPERVIOUS_AREA_TYPETableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._oPPORTUNITY_FEASIBILITYTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._pROJECTTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._pROJECT_STATUSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sITE_ASSESSMENTTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sITE_OPPORTUNITYTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sITETableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._rETRO_BASINTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sEWER_BASINTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(RetrofitsDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._pROJECT_STATUSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PROJECT_STATUS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._pROJECT_STATUSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._fACILITY_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.FACILITY_TYPE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._fACILITY_TYPETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._pROJECTTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PROJECT.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._pROJECTTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sITETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SITE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sITETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._aSSESSMENT_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ASSESSMENT_TYPE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._aSSESSMENT_TYPETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._iMPERVIOUS_AREA_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.IMPERVIOUS_AREA_TYPE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._iMPERVIOUS_AREA_TYPETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._dESTINATIONTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.DESTINATION.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._dESTINATIONTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sEWER_BASINTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SEWER_BASIN.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sEWER_BASINTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._rETRO_BASINTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.RETRO_BASIN.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._rETRO_BASINTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._oPPORTUNITY_FEASIBILITYTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.OPPORTUNITY_FEASIBILITY.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._oPPORTUNITY_FEASIBILITYTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sITE_ASSESSMENTTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SITE_ASSESSMENT.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sITE_ASSESSMENTTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sITE_OPPORTUNITYTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SITE_OPPORTUNITY.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sITE_OPPORTUNITYTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(RetrofitsDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._pROJECT_STATUSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PROJECT_STATUS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._pROJECT_STATUSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._fACILITY_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.FACILITY_TYPE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._fACILITY_TYPETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._pROJECTTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PROJECT.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._pROJECTTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sITETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SITE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sITETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._aSSESSMENT_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ASSESSMENT_TYPE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._aSSESSMENT_TYPETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._iMPERVIOUS_AREA_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.IMPERVIOUS_AREA_TYPE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._iMPERVIOUS_AREA_TYPETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._dESTINATIONTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.DESTINATION.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._dESTINATIONTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sEWER_BASINTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SEWER_BASIN.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sEWER_BASINTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._rETRO_BASINTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.RETRO_BASIN.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._rETRO_BASINTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._oPPORTUNITY_FEASIBILITYTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.OPPORTUNITY_FEASIBILITY.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._oPPORTUNITY_FEASIBILITYTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sITE_ASSESSMENTTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SITE_ASSESSMENT.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sITE_ASSESSMENTTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sITE_OPPORTUNITYTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SITE_OPPORTUNITY.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sITE_OPPORTUNITYTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(RetrofitsDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._sITE_OPPORTUNITYTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SITE_OPPORTUNITY.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sITE_OPPORTUNITYTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sITE_ASSESSMENTTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SITE_ASSESSMENT.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sITE_ASSESSMENTTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._oPPORTUNITY_FEASIBILITYTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.OPPORTUNITY_FEASIBILITY.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._oPPORTUNITY_FEASIBILITYTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._rETRO_BASINTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.RETRO_BASIN.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._rETRO_BASINTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sEWER_BASINTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SEWER_BASIN.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sEWER_BASINTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._dESTINATIONTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.DESTINATION.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._dESTINATIONTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._iMPERVIOUS_AREA_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.IMPERVIOUS_AREA_TYPE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._iMPERVIOUS_AREA_TYPETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._aSSESSMENT_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ASSESSMENT_TYPE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._aSSESSMENT_TYPETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sITETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SITE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sITETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._pROJECTTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PROJECT.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._pROJECTTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._fACILITY_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.FACILITY_TYPE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._fACILITY_TYPETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._pROJECT_STATUSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PROJECT_STATUS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._pROJECT_STATUSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(RetrofitsDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._fACILITY_TYPETableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._fACILITY_TYPETableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._aSSESSMENT_TYPETableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._aSSESSMENT_TYPETableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._dESTINATIONTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._dESTINATIONTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._iMPERVIOUS_AREA_TYPETableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._iMPERVIOUS_AREA_TYPETableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._oPPORTUNITY_FEASIBILITYTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._oPPORTUNITY_FEASIBILITYTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._pROJECTTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._pROJECTTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._pROJECT_STATUSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._pROJECT_STATUSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sITE_ASSESSMENTTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sITE_ASSESSMENTTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sITE_OPPORTUNITYTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sITE_OPPORTUNITYTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sITETableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sITETableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._rETRO_BASINTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._rETRO_BASINTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sEWER_BASINTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sEWER_BASINTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._fACILITY_TYPETableAdapter != null)) {
                    revertConnections.Add(this._fACILITY_TYPETableAdapter, this._fACILITY_TYPETableAdapter.Connection);
                    this._fACILITY_TYPETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._fACILITY_TYPETableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._fACILITY_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._fACILITY_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._fACILITY_TYPETableAdapter.Adapter);
                    }
                }
                if ((this._aSSESSMENT_TYPETableAdapter != null)) {
                    revertConnections.Add(this._aSSESSMENT_TYPETableAdapter, this._aSSESSMENT_TYPETableAdapter.Connection);
                    this._aSSESSMENT_TYPETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._aSSESSMENT_TYPETableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._aSSESSMENT_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._aSSESSMENT_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._aSSESSMENT_TYPETableAdapter.Adapter);
                    }
                }
                if ((this._dESTINATIONTableAdapter != null)) {
                    revertConnections.Add(this._dESTINATIONTableAdapter, this._dESTINATIONTableAdapter.Connection);
                    this._dESTINATIONTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._dESTINATIONTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._dESTINATIONTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._dESTINATIONTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._dESTINATIONTableAdapter.Adapter);
                    }
                }
                if ((this._iMPERVIOUS_AREA_TYPETableAdapter != null)) {
                    revertConnections.Add(this._iMPERVIOUS_AREA_TYPETableAdapter, this._iMPERVIOUS_AREA_TYPETableAdapter.Connection);
                    this._iMPERVIOUS_AREA_TYPETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._iMPERVIOUS_AREA_TYPETableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._iMPERVIOUS_AREA_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._iMPERVIOUS_AREA_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._iMPERVIOUS_AREA_TYPETableAdapter.Adapter);
                    }
                }
                if ((this._oPPORTUNITY_FEASIBILITYTableAdapter != null)) {
                    revertConnections.Add(this._oPPORTUNITY_FEASIBILITYTableAdapter, this._oPPORTUNITY_FEASIBILITYTableAdapter.Connection);
                    this._oPPORTUNITY_FEASIBILITYTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._oPPORTUNITY_FEASIBILITYTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._oPPORTUNITY_FEASIBILITYTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._oPPORTUNITY_FEASIBILITYTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._oPPORTUNITY_FEASIBILITYTableAdapter.Adapter);
                    }
                }
                if ((this._pROJECTTableAdapter != null)) {
                    revertConnections.Add(this._pROJECTTableAdapter, this._pROJECTTableAdapter.Connection);
                    this._pROJECTTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._pROJECTTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._pROJECTTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._pROJECTTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._pROJECTTableAdapter.Adapter);
                    }
                }
                if ((this._pROJECT_STATUSTableAdapter != null)) {
                    revertConnections.Add(this._pROJECT_STATUSTableAdapter, this._pROJECT_STATUSTableAdapter.Connection);
                    this._pROJECT_STATUSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._pROJECT_STATUSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._pROJECT_STATUSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._pROJECT_STATUSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._pROJECT_STATUSTableAdapter.Adapter);
                    }
                }
                if ((this._sITE_ASSESSMENTTableAdapter != null)) {
                    revertConnections.Add(this._sITE_ASSESSMENTTableAdapter, this._sITE_ASSESSMENTTableAdapter.Connection);
                    this._sITE_ASSESSMENTTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sITE_ASSESSMENTTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sITE_ASSESSMENTTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sITE_ASSESSMENTTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sITE_ASSESSMENTTableAdapter.Adapter);
                    }
                }
                if ((this._sITE_OPPORTUNITYTableAdapter != null)) {
                    revertConnections.Add(this._sITE_OPPORTUNITYTableAdapter, this._sITE_OPPORTUNITYTableAdapter.Connection);
                    this._sITE_OPPORTUNITYTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sITE_OPPORTUNITYTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sITE_OPPORTUNITYTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sITE_OPPORTUNITYTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sITE_OPPORTUNITYTableAdapter.Adapter);
                    }
                }
                if ((this._sITETableAdapter != null)) {
                    revertConnections.Add(this._sITETableAdapter, this._sITETableAdapter.Connection);
                    this._sITETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sITETableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sITETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sITETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sITETableAdapter.Adapter);
                    }
                }
                if ((this._rETRO_BASINTableAdapter != null)) {
                    revertConnections.Add(this._rETRO_BASINTableAdapter, this._rETRO_BASINTableAdapter.Connection);
                    this._rETRO_BASINTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._rETRO_BASINTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._rETRO_BASINTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._rETRO_BASINTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._rETRO_BASINTableAdapter.Adapter);
                    }
                }
                if ((this._sEWER_BASINTableAdapter != null)) {
                    revertConnections.Add(this._sEWER_BASINTableAdapter, this._sEWER_BASINTableAdapter.Connection);
                    this._sEWER_BASINTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sEWER_BASINTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sEWER_BASINTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sEWER_BASINTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sEWER_BASINTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._fACILITY_TYPETableAdapter != null)) {
                    this._fACILITY_TYPETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._fACILITY_TYPETableAdapter]));
                    this._fACILITY_TYPETableAdapter.Transaction = null;
                }
                if ((this._aSSESSMENT_TYPETableAdapter != null)) {
                    this._aSSESSMENT_TYPETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._aSSESSMENT_TYPETableAdapter]));
                    this._aSSESSMENT_TYPETableAdapter.Transaction = null;
                }
                if ((this._dESTINATIONTableAdapter != null)) {
                    this._dESTINATIONTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._dESTINATIONTableAdapter]));
                    this._dESTINATIONTableAdapter.Transaction = null;
                }
                if ((this._iMPERVIOUS_AREA_TYPETableAdapter != null)) {
                    this._iMPERVIOUS_AREA_TYPETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._iMPERVIOUS_AREA_TYPETableAdapter]));
                    this._iMPERVIOUS_AREA_TYPETableAdapter.Transaction = null;
                }
                if ((this._oPPORTUNITY_FEASIBILITYTableAdapter != null)) {
                    this._oPPORTUNITY_FEASIBILITYTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._oPPORTUNITY_FEASIBILITYTableAdapter]));
                    this._oPPORTUNITY_FEASIBILITYTableAdapter.Transaction = null;
                }
                if ((this._pROJECTTableAdapter != null)) {
                    this._pROJECTTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._pROJECTTableAdapter]));
                    this._pROJECTTableAdapter.Transaction = null;
                }
                if ((this._pROJECT_STATUSTableAdapter != null)) {
                    this._pROJECT_STATUSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._pROJECT_STATUSTableAdapter]));
                    this._pROJECT_STATUSTableAdapter.Transaction = null;
                }
                if ((this._sITE_ASSESSMENTTableAdapter != null)) {
                    this._sITE_ASSESSMENTTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sITE_ASSESSMENTTableAdapter]));
                    this._sITE_ASSESSMENTTableAdapter.Transaction = null;
                }
                if ((this._sITE_OPPORTUNITYTableAdapter != null)) {
                    this._sITE_OPPORTUNITYTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sITE_OPPORTUNITYTableAdapter]));
                    this._sITE_OPPORTUNITYTableAdapter.Transaction = null;
                }
                if ((this._sITETableAdapter != null)) {
                    this._sITETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sITETableAdapter]));
                    this._sITETableAdapter.Transaction = null;
                }
                if ((this._rETRO_BASINTableAdapter != null)) {
                    this._rETRO_BASINTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._rETRO_BASINTableAdapter]));
                    this._rETRO_BASINTableAdapter.Transaction = null;
                }
                if ((this._sEWER_BASINTableAdapter != null)) {
                    this._sEWER_BASINTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sEWER_BASINTableAdapter]));
                    this._sEWER_BASINTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591
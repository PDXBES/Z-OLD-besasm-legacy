//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SystemsAnalysis.DataAccess {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DiversionStructureDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DiversionStructureDataSet : global::System.Data.DataSet {
        
        private StructuresDataTable tableStructures;
        
        private SurveysDataTable tableSurveys;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DiversionStructureDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DiversionStructureDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Structures"] != null)) {
                    base.Tables.Add(new StructuresDataTable(ds.Tables["Structures"]));
                }
                if ((ds.Tables["Surveys"] != null)) {
                    base.Tables.Add(new SurveysDataTable(ds.Tables["Surveys"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StructuresDataTable Structures {
            get {
                return this.tableStructures;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SurveysDataTable Surveys {
            get {
                return this.tableSurveys;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DiversionStructureDataSet cln = ((DiversionStructureDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Structures"] != null)) {
                    base.Tables.Add(new StructuresDataTable(ds.Tables["Structures"]));
                }
                if ((ds.Tables["Surveys"] != null)) {
                    base.Tables.Add(new SurveysDataTable(ds.Tables["Surveys"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableStructures = ((StructuresDataTable)(base.Tables["Structures"]));
            if ((initTable == true)) {
                if ((this.tableStructures != null)) {
                    this.tableStructures.InitVars();
                }
            }
            this.tableSurveys = ((SurveysDataTable)(base.Tables["Surveys"]));
            if ((initTable == true)) {
                if ((this.tableSurveys != null)) {
                    this.tableSurveys.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DiversionStructureDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DiversionStructureDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableStructures = new StructuresDataTable();
            base.Tables.Add(this.tableStructures);
            this.tableSurveys = new SurveysDataTable();
            base.Tables.Add(this.tableSurveys);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStructures() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSurveys() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DiversionStructureDataSet ds = new DiversionStructureDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void StructuresRowChangeEventHandler(object sender, StructuresRowChangeEvent e);
        
        public delegate void SurveysRowChangeEventHandler(object sender, SurveysRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StructuresDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnStructureNum;
            
            private global::System.Data.DataColumn columnCompKey;
            
            private global::System.Data.DataColumn columnHansenUnitID;
            
            private global::System.Data.DataColumn columnLocation;
            
            private global::System.Data.DataColumn columnBaseDir;
            
            private global::System.Data.DataColumn columnCadFileName;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnBasinID;
            
            private global::System.Data.DataColumn columnInspectionFrequency;
            
            private global::System.Data.DataColumn columnOutfallID;
            
            private global::System.Data.DataColumn columnOtherDiversions;
            
            private global::System.Data.DataColumn columnOrderNum;
            
            private global::System.Data.DataColumn columnFloodOrderNum;
            
            private global::System.Data.DataColumn columnYearFloodInpsOrderNum;
            
            private global::System.Data.DataColumn columnArea;
            
            private global::System.Data.DataColumn columnWCMSID;
            
            private global::System.Data.DataColumn columnCheckMethod;
            
            private global::System.Data.DataColumn columnInspectionComments;
            
            private global::System.Data.DataColumn columnFloodControlAlts;
            
            private global::System.Data.DataColumn columnOrificeElevation;
            
            private global::System.Data.DataColumn columnSpecialNeeds;
            
            private global::System.Data.DataColumn columnRiverElevation;
            
            private global::System.Data.DataColumn columnPlugDiameter;
            
            private global::System.Data.DataColumn columnLidColor;
            
            private global::System.Data.DataColumn columnPDOTRimElevation;
            
            private global::System.Data.DataColumn columnSurveyDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StructuresDataTable() {
                this.TableName = "Structures";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StructuresDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StructuresDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StructureNumColumn {
                get {
                    return this.columnStructureNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompKeyColumn {
                get {
                    return this.columnCompKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HansenUnitIDColumn {
                get {
                    return this.columnHansenUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseDirColumn {
                get {
                    return this.columnBaseDir;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CadFileNameColumn {
                get {
                    return this.columnCadFileName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BasinIDColumn {
                get {
                    return this.columnBasinID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectionFrequencyColumn {
                get {
                    return this.columnInspectionFrequency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OutfallIDColumn {
                get {
                    return this.columnOutfallID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherDiversionsColumn {
                get {
                    return this.columnOtherDiversions;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderNumColumn {
                get {
                    return this.columnOrderNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FloodOrderNumColumn {
                get {
                    return this.columnFloodOrderNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearFloodInpsOrderNumColumn {
                get {
                    return this.columnYearFloodInpsOrderNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AreaColumn {
                get {
                    return this.columnArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WCMSIDColumn {
                get {
                    return this.columnWCMSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckMethodColumn {
                get {
                    return this.columnCheckMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectionCommentsColumn {
                get {
                    return this.columnInspectionComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FloodControlAltsColumn {
                get {
                    return this.columnFloodControlAlts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrificeElevationColumn {
                get {
                    return this.columnOrificeElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpecialNeedsColumn {
                get {
                    return this.columnSpecialNeeds;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RiverElevationColumn {
                get {
                    return this.columnRiverElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlugDiameterColumn {
                get {
                    return this.columnPlugDiameter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LidColorColumn {
                get {
                    return this.columnLidColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PDOTRimElevationColumn {
                get {
                    return this.columnPDOTRimElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyDateColumn {
                get {
                    return this.columnSurveyDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StructuresRow this[int index] {
                get {
                    return ((StructuresRow)(this.Rows[index]));
                }
            }
            
            public event StructuresRowChangeEventHandler StructuresRowChanging;
            
            public event StructuresRowChangeEventHandler StructuresRowChanged;
            
            public event StructuresRowChangeEventHandler StructuresRowDeleting;
            
            public event StructuresRowChangeEventHandler StructuresRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStructuresRow(StructuresRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StructuresRow AddStructuresRow(
                        string StructureNum, 
                        string CompKey, 
                        string HansenUnitID, 
                        string Location, 
                        string BaseDir, 
                        string CadFileName, 
                        string Status, 
                        string BasinID, 
                        string InspectionFrequency, 
                        string OutfallID, 
                        string OtherDiversions, 
                        decimal OrderNum, 
                        decimal FloodOrderNum, 
                        decimal YearFloodInpsOrderNum, 
                        string Area, 
                        string WCMSID, 
                        string CheckMethod, 
                        string InspectionComments, 
                        string FloodControlAlts, 
                        float OrificeElevation, 
                        string SpecialNeeds, 
                        float RiverElevation, 
                        float PlugDiameter, 
                        string LidColor, 
                        float PDOTRimElevation, 
                        System.DateTime SurveyDate) {
                StructuresRow rowStructuresRow = ((StructuresRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StructureNum,
                        CompKey,
                        HansenUnitID,
                        Location,
                        BaseDir,
                        CadFileName,
                        Status,
                        BasinID,
                        InspectionFrequency,
                        OutfallID,
                        OtherDiversions,
                        OrderNum,
                        FloodOrderNum,
                        YearFloodInpsOrderNum,
                        Area,
                        WCMSID,
                        CheckMethod,
                        InspectionComments,
                        FloodControlAlts,
                        OrificeElevation,
                        SpecialNeeds,
                        RiverElevation,
                        PlugDiameter,
                        LidColor,
                        PDOTRimElevation,
                        SurveyDate};
                rowStructuresRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStructuresRow);
                return rowStructuresRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StructuresDataTable cln = ((StructuresDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StructuresDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStructureNum = base.Columns["StructureNum"];
                this.columnCompKey = base.Columns["CompKey"];
                this.columnHansenUnitID = base.Columns["HansenUnitID"];
                this.columnLocation = base.Columns["Location"];
                this.columnBaseDir = base.Columns["BaseDir"];
                this.columnCadFileName = base.Columns["CadFileName"];
                this.columnStatus = base.Columns["Status"];
                this.columnBasinID = base.Columns["BasinID"];
                this.columnInspectionFrequency = base.Columns["InspectionFrequency"];
                this.columnOutfallID = base.Columns["OutfallID"];
                this.columnOtherDiversions = base.Columns["OtherDiversions"];
                this.columnOrderNum = base.Columns["OrderNum"];
                this.columnFloodOrderNum = base.Columns["FloodOrderNum"];
                this.columnYearFloodInpsOrderNum = base.Columns["YearFloodInpsOrderNum"];
                this.columnArea = base.Columns["Area"];
                this.columnWCMSID = base.Columns["WCMSID"];
                this.columnCheckMethod = base.Columns["CheckMethod"];
                this.columnInspectionComments = base.Columns["InspectionComments"];
                this.columnFloodControlAlts = base.Columns["FloodControlAlts"];
                this.columnOrificeElevation = base.Columns["OrificeElevation"];
                this.columnSpecialNeeds = base.Columns["SpecialNeeds"];
                this.columnRiverElevation = base.Columns["RiverElevation"];
                this.columnPlugDiameter = base.Columns["PlugDiameter"];
                this.columnLidColor = base.Columns["LidColor"];
                this.columnPDOTRimElevation = base.Columns["PDOTRimElevation"];
                this.columnSurveyDate = base.Columns["SurveyDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStructureNum = new global::System.Data.DataColumn("StructureNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStructureNum);
                this.columnCompKey = new global::System.Data.DataColumn("CompKey", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompKey);
                this.columnHansenUnitID = new global::System.Data.DataColumn("HansenUnitID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHansenUnitID);
                this.columnLocation = new global::System.Data.DataColumn("Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnBaseDir = new global::System.Data.DataColumn("BaseDir", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseDir);
                this.columnCadFileName = new global::System.Data.DataColumn("CadFileName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCadFileName);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnBasinID = new global::System.Data.DataColumn("BasinID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBasinID);
                this.columnInspectionFrequency = new global::System.Data.DataColumn("InspectionFrequency", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectionFrequency);
                this.columnOutfallID = new global::System.Data.DataColumn("OutfallID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutfallID);
                this.columnOtherDiversions = new global::System.Data.DataColumn("OtherDiversions", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherDiversions);
                this.columnOrderNum = new global::System.Data.DataColumn("OrderNum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderNum);
                this.columnFloodOrderNum = new global::System.Data.DataColumn("FloodOrderNum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFloodOrderNum);
                this.columnYearFloodInpsOrderNum = new global::System.Data.DataColumn("YearFloodInpsOrderNum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYearFloodInpsOrderNum);
                this.columnArea = new global::System.Data.DataColumn("Area", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArea);
                this.columnWCMSID = new global::System.Data.DataColumn("WCMSID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWCMSID);
                this.columnCheckMethod = new global::System.Data.DataColumn("CheckMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckMethod);
                this.columnInspectionComments = new global::System.Data.DataColumn("InspectionComments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectionComments);
                this.columnFloodControlAlts = new global::System.Data.DataColumn("FloodControlAlts", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFloodControlAlts);
                this.columnOrificeElevation = new global::System.Data.DataColumn("OrificeElevation", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrificeElevation);
                this.columnSpecialNeeds = new global::System.Data.DataColumn("SpecialNeeds", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecialNeeds);
                this.columnRiverElevation = new global::System.Data.DataColumn("RiverElevation", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRiverElevation);
                this.columnPlugDiameter = new global::System.Data.DataColumn("PlugDiameter", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlugDiameter);
                this.columnLidColor = new global::System.Data.DataColumn("LidColor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLidColor);
                this.columnPDOTRimElevation = new global::System.Data.DataColumn("PDOTRimElevation", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPDOTRimElevation);
                this.columnSurveyDate = new global::System.Data.DataColumn("SurveyDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyDate);
                this.columnStructureNum.AllowDBNull = false;
                this.columnStructureNum.Caption = "structure_num";
                this.columnStructureNum.MaxLength = 50;
                this.columnCompKey.Caption = "compkey";
                this.columnCompKey.MaxLength = 50;
                this.columnHansenUnitID.Caption = "hansen_unitid";
                this.columnHansenUnitID.MaxLength = 50;
                this.columnLocation.Caption = "location";
                this.columnLocation.MaxLength = 255;
                this.columnBaseDir.Caption = "basedir";
                this.columnBaseDir.MaxLength = 1073741823;
                this.columnCadFileName.Caption = "cadfilename";
                this.columnCadFileName.MaxLength = 255;
                this.columnStatus.Caption = "status";
                this.columnStatus.MaxLength = 10;
                this.columnBasinID.Caption = "basin_id";
                this.columnBasinID.MaxLength = 2;
                this.columnInspectionFrequency.Caption = "inspection_frequency";
                this.columnInspectionFrequency.MaxLength = 50;
                this.columnOutfallID.Caption = "outfall_id";
                this.columnOutfallID.MaxLength = 6;
                this.columnOtherDiversions.Caption = "other_diversions";
                this.columnOtherDiversions.MaxLength = 50;
                this.columnOrderNum.Caption = "order_num";
                this.columnFloodOrderNum.Caption = "flood_order_num";
                this.columnYearFloodInpsOrderNum.Caption = "year_flood_inps_order_num";
                this.columnArea.Caption = "area";
                this.columnArea.MaxLength = 4;
                this.columnWCMSID.Caption = "wcms_id";
                this.columnWCMSID.MaxLength = 12;
                this.columnCheckMethod.Caption = "check_method";
                this.columnCheckMethod.MaxLength = 4;
                this.columnInspectionComments.Caption = "inspection_comments";
                this.columnInspectionComments.MaxLength = 75;
                this.columnFloodControlAlts.Caption = "flood_control_alts";
                this.columnFloodControlAlts.MaxLength = 255;
                this.columnOrificeElevation.Caption = "orifice_el";
                this.columnSpecialNeeds.Caption = "special_needs";
                this.columnSpecialNeeds.MaxLength = 255;
                this.columnRiverElevation.Caption = "river_el";
                this.columnPlugDiameter.Caption = "plug_dia";
                this.columnLidColor.Caption = "lid_color";
                this.columnLidColor.MaxLength = 2;
                this.columnPDOTRimElevation.Caption = "pdot_rim_el";
                this.columnSurveyDate.Caption = "survey_date";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StructuresRow NewStructuresRow() {
                return ((StructuresRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StructuresRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StructuresRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StructuresRowChanged != null)) {
                    this.StructuresRowChanged(this, new StructuresRowChangeEvent(((StructuresRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StructuresRowChanging != null)) {
                    this.StructuresRowChanging(this, new StructuresRowChangeEvent(((StructuresRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StructuresRowDeleted != null)) {
                    this.StructuresRowDeleted(this, new StructuresRowChangeEvent(((StructuresRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StructuresRowDeleting != null)) {
                    this.StructuresRowDeleting(this, new StructuresRowChangeEvent(((StructuresRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStructuresRow(StructuresRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DiversionStructureDataSet ds = new DiversionStructureDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StructuresDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SurveysDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSurveyID;
            
            private global::System.Data.DataColumn columnUpdateTime;
            
            private global::System.Data.DataColumn columnSurveyDate;
            
            private global::System.Data.DataColumn columnSurveyTime;
            
            private global::System.Data.DataColumn columnCrew;
            
            private global::System.Data.DataColumn columnWeather;
            
            private global::System.Data.DataColumn columnStructureNum;
            
            private global::System.Data.DataColumn columnLocation;
            
            private global::System.Data.DataColumn columnHansenOrificeElevation;
            
            private global::System.Data.DataColumn columnLaserToRim;
            
            private global::System.Data.DataColumn columnWeir;
            
            private global::System.Data.DataColumn columnLaserToTopOfWeir;
            
            private global::System.Data.DataColumn columnOrificePlateOrBaffle;
            
            private global::System.Data.DataColumn columnOrificePlateOrBaffleType;
            
            private global::System.Data.DataColumn columnOrificeBaffleDiameter;
            
            private global::System.Data.DataColumn columnLaserToOrifice;
            
            private global::System.Data.DataColumn columnUnderflowPipeType;
            
            private global::System.Data.DataColumn columnUnderflowPIpeHeight;
            
            private global::System.Data.DataColumn columnUnderflowPIpeWidth;
            
            private global::System.Data.DataColumn columnInflowPipeInvert;
            
            private global::System.Data.DataColumn columnInflowPipeType;
            
            private global::System.Data.DataColumn columnInflowPipeShape;
            
            private global::System.Data.DataColumn columnInflowMeasure;
            
            private global::System.Data.DataColumn columnInflowDiamWidth;
            
            private global::System.Data.DataColumn columnInflowDiamHeight;
            
            private global::System.Data.DataColumn columnInflowNotes;
            
            private global::System.Data.DataColumn columnInflow2PipeInvert;
            
            private global::System.Data.DataColumn columnInflow2PipeType;
            
            private global::System.Data.DataColumn columnInflow2PipeShape;
            
            private global::System.Data.DataColumn columnInflow2DiamWidth;
            
            private global::System.Data.DataColumn columnInflow2DiamHeight;
            
            private global::System.Data.DataColumn columnStormOutflowMeasure;
            
            private global::System.Data.DataColumn columnStormOutflowPipeType;
            
            private global::System.Data.DataColumn columnStormOutflowPipeShape;
            
            private global::System.Data.DataColumn columnStormOutflowDiamWidth;
            
            private global::System.Data.DataColumn columnStormOutflowDiamHeight;
            
            private global::System.Data.DataColumn columnStormOutflowNotes;
            
            private global::System.Data.DataColumn columnChamberShape;
            
            private global::System.Data.DataColumn columnChamberHeight;
            
            private global::System.Data.DataColumn columnChamberLength;
            
            private global::System.Data.DataColumn columnChamberWidth;
            
            private global::System.Data.DataColumn columnDamMeasureComments;
            
            private global::System.Data.DataColumn columnLaserToTopOfDam;
            
            private global::System.Data.DataColumn columnDamLength;
            
            private global::System.Data.DataColumn columnDamFaceShape;
            
            private global::System.Data.DataColumn columnDamPosition;
            
            private global::System.Data.DataColumn columnDamMaterial;
            
            private global::System.Data.DataColumn columnFreeboard;
            
            private global::System.Data.DataColumn columnDiversionType;
            
            private global::System.Data.DataColumn columnDiversionOtherType;
            
            private global::System.Data.DataColumn columnFollowUp;
            
            private global::System.Data.DataColumn columnPhotoLink;
            
            private global::System.Data.DataColumn columnDistanceToUpsInflowInvertFlowMeasure;
            
            private global::System.Data.DataColumn columnDistanceToDwnOutflowInvertFlowMeasure;
            
            private global::System.Data.DataColumn columnSpecialNeeds;
            
            private global::System.Data.DataColumn columnLidColor;
            
            private global::System.Data.DataColumn columnComments;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveysDataTable() {
                this.TableName = "Surveys";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SurveysDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SurveysDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyIDColumn {
                get {
                    return this.columnSurveyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateTimeColumn {
                get {
                    return this.columnUpdateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyDateColumn {
                get {
                    return this.columnSurveyDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyTimeColumn {
                get {
                    return this.columnSurveyTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CrewColumn {
                get {
                    return this.columnCrew;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeatherColumn {
                get {
                    return this.columnWeather;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StructureNumColumn {
                get {
                    return this.columnStructureNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HansenOrificeElevationColumn {
                get {
                    return this.columnHansenOrificeElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LaserToRimColumn {
                get {
                    return this.columnLaserToRim;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeirColumn {
                get {
                    return this.columnWeir;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LaserToTopOfWeirColumn {
                get {
                    return this.columnLaserToTopOfWeir;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrificePlateOrBaffleColumn {
                get {
                    return this.columnOrificePlateOrBaffle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrificePlateOrBaffleTypeColumn {
                get {
                    return this.columnOrificePlateOrBaffleType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrificeBaffleDiameterColumn {
                get {
                    return this.columnOrificeBaffleDiameter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LaserToOrificeColumn {
                get {
                    return this.columnLaserToOrifice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnderflowPipeTypeColumn {
                get {
                    return this.columnUnderflowPipeType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnderflowPIpeHeightColumn {
                get {
                    return this.columnUnderflowPIpeHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnderflowPIpeWidthColumn {
                get {
                    return this.columnUnderflowPIpeWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InflowPipeInvertColumn {
                get {
                    return this.columnInflowPipeInvert;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InflowPipeTypeColumn {
                get {
                    return this.columnInflowPipeType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InflowPipeShapeColumn {
                get {
                    return this.columnInflowPipeShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InflowMeasureColumn {
                get {
                    return this.columnInflowMeasure;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InflowDiamWidthColumn {
                get {
                    return this.columnInflowDiamWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InflowDiamHeightColumn {
                get {
                    return this.columnInflowDiamHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InflowNotesColumn {
                get {
                    return this.columnInflowNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Inflow2PipeInvertColumn {
                get {
                    return this.columnInflow2PipeInvert;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Inflow2PipeTypeColumn {
                get {
                    return this.columnInflow2PipeType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Inflow2PipeShapeColumn {
                get {
                    return this.columnInflow2PipeShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Inflow2DiamWidthColumn {
                get {
                    return this.columnInflow2DiamWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Inflow2DiamHeightColumn {
                get {
                    return this.columnInflow2DiamHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StormOutflowMeasureColumn {
                get {
                    return this.columnStormOutflowMeasure;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StormOutflowPipeTypeColumn {
                get {
                    return this.columnStormOutflowPipeType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StormOutflowPipeShapeColumn {
                get {
                    return this.columnStormOutflowPipeShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StormOutflowDiamWidthColumn {
                get {
                    return this.columnStormOutflowDiamWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StormOutflowDiamHeightColumn {
                get {
                    return this.columnStormOutflowDiamHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StormOutflowNotesColumn {
                get {
                    return this.columnStormOutflowNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChamberShapeColumn {
                get {
                    return this.columnChamberShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChamberHeightColumn {
                get {
                    return this.columnChamberHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChamberLengthColumn {
                get {
                    return this.columnChamberLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChamberWidthColumn {
                get {
                    return this.columnChamberWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DamMeasureCommentsColumn {
                get {
                    return this.columnDamMeasureComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LaserToTopOfDamColumn {
                get {
                    return this.columnLaserToTopOfDam;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DamLengthColumn {
                get {
                    return this.columnDamLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DamFaceShapeColumn {
                get {
                    return this.columnDamFaceShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DamPositionColumn {
                get {
                    return this.columnDamPosition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DamMaterialColumn {
                get {
                    return this.columnDamMaterial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FreeboardColumn {
                get {
                    return this.columnFreeboard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiversionTypeColumn {
                get {
                    return this.columnDiversionType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiversionOtherTypeColumn {
                get {
                    return this.columnDiversionOtherType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FollowUpColumn {
                get {
                    return this.columnFollowUp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhotoLinkColumn {
                get {
                    return this.columnPhotoLink;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceToUpsInflowInvertFlowMeasureColumn {
                get {
                    return this.columnDistanceToUpsInflowInvertFlowMeasure;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceToDwnOutflowInvertFlowMeasureColumn {
                get {
                    return this.columnDistanceToDwnOutflowInvertFlowMeasure;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpecialNeedsColumn {
                get {
                    return this.columnSpecialNeeds;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LidColorColumn {
                get {
                    return this.columnLidColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveysRow this[int index] {
                get {
                    return ((SurveysRow)(this.Rows[index]));
                }
            }
            
            public event SurveysRowChangeEventHandler SurveysRowChanging;
            
            public event SurveysRowChangeEventHandler SurveysRowChanged;
            
            public event SurveysRowChangeEventHandler SurveysRowDeleting;
            
            public event SurveysRowChangeEventHandler SurveysRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSurveysRow(SurveysRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveysRow AddSurveysRow(
                        int SurveyID, 
                        System.DateTime UpdateTime, 
                        System.DateTime SurveyDate, 
                        string SurveyTime, 
                        string Crew, 
                        string Weather, 
                        string StructureNum, 
                        string Location, 
                        float HansenOrificeElevation, 
                        decimal LaserToRim, 
                        bool Weir, 
                        decimal LaserToTopOfWeir, 
                        bool OrificePlateOrBaffle, 
                        string OrificePlateOrBaffleType, 
                        decimal OrificeBaffleDiameter, 
                        decimal LaserToOrifice, 
                        string UnderflowPipeType, 
                        decimal UnderflowPIpeHeight, 
                        decimal UnderflowPIpeWidth, 
                        decimal InflowPipeInvert, 
                        string InflowPipeType, 
                        string InflowPipeShape, 
                        decimal InflowMeasure, 
                        decimal InflowDiamWidth, 
                        decimal InflowDiamHeight, 
                        string InflowNotes, 
                        decimal Inflow2PipeInvert, 
                        string Inflow2PipeType, 
                        string Inflow2PipeShape, 
                        decimal Inflow2DiamWidth, 
                        decimal Inflow2DiamHeight, 
                        decimal StormOutflowMeasure, 
                        string StormOutflowPipeType, 
                        string StormOutflowPipeShape, 
                        decimal StormOutflowDiamWidth, 
                        decimal StormOutflowDiamHeight, 
                        string StormOutflowNotes, 
                        string ChamberShape, 
                        decimal ChamberHeight, 
                        decimal ChamberLength, 
                        decimal ChamberWidth, 
                        string DamMeasureComments, 
                        decimal LaserToTopOfDam, 
                        decimal DamLength, 
                        string DamFaceShape, 
                        string DamPosition, 
                        string DamMaterial, 
                        decimal Freeboard, 
                        string DiversionType, 
                        string DiversionOtherType, 
                        string FollowUp, 
                        string PhotoLink, 
                        decimal DistanceToUpsInflowInvertFlowMeasure, 
                        decimal DistanceToDwnOutflowInvertFlowMeasure, 
                        string SpecialNeeds, 
                        string LidColor, 
                        string Comments) {
                SurveysRow rowSurveysRow = ((SurveysRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SurveyID,
                        UpdateTime,
                        SurveyDate,
                        SurveyTime,
                        Crew,
                        Weather,
                        StructureNum,
                        Location,
                        HansenOrificeElevation,
                        LaserToRim,
                        Weir,
                        LaserToTopOfWeir,
                        OrificePlateOrBaffle,
                        OrificePlateOrBaffleType,
                        OrificeBaffleDiameter,
                        LaserToOrifice,
                        UnderflowPipeType,
                        UnderflowPIpeHeight,
                        UnderflowPIpeWidth,
                        InflowPipeInvert,
                        InflowPipeType,
                        InflowPipeShape,
                        InflowMeasure,
                        InflowDiamWidth,
                        InflowDiamHeight,
                        InflowNotes,
                        Inflow2PipeInvert,
                        Inflow2PipeType,
                        Inflow2PipeShape,
                        Inflow2DiamWidth,
                        Inflow2DiamHeight,
                        StormOutflowMeasure,
                        StormOutflowPipeType,
                        StormOutflowPipeShape,
                        StormOutflowDiamWidth,
                        StormOutflowDiamHeight,
                        StormOutflowNotes,
                        ChamberShape,
                        ChamberHeight,
                        ChamberLength,
                        ChamberWidth,
                        DamMeasureComments,
                        LaserToTopOfDam,
                        DamLength,
                        DamFaceShape,
                        DamPosition,
                        DamMaterial,
                        Freeboard,
                        DiversionType,
                        DiversionOtherType,
                        FollowUp,
                        PhotoLink,
                        DistanceToUpsInflowInvertFlowMeasure,
                        DistanceToDwnOutflowInvertFlowMeasure,
                        SpecialNeeds,
                        LidColor,
                        Comments};
                rowSurveysRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSurveysRow);
                return rowSurveysRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SurveysDataTable cln = ((SurveysDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SurveysDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSurveyID = base.Columns["SurveyID"];
                this.columnUpdateTime = base.Columns["UpdateTime"];
                this.columnSurveyDate = base.Columns["SurveyDate"];
                this.columnSurveyTime = base.Columns["SurveyTime"];
                this.columnCrew = base.Columns["Crew"];
                this.columnWeather = base.Columns["Weather"];
                this.columnStructureNum = base.Columns["StructureNum"];
                this.columnLocation = base.Columns["Location"];
                this.columnHansenOrificeElevation = base.Columns["HansenOrificeElevation"];
                this.columnLaserToRim = base.Columns["LaserToRim"];
                this.columnWeir = base.Columns["Weir"];
                this.columnLaserToTopOfWeir = base.Columns["LaserToTopOfWeir"];
                this.columnOrificePlateOrBaffle = base.Columns["OrificePlateOrBaffle"];
                this.columnOrificePlateOrBaffleType = base.Columns["OrificePlateOrBaffleType"];
                this.columnOrificeBaffleDiameter = base.Columns["OrificeBaffleDiameter"];
                this.columnLaserToOrifice = base.Columns["LaserToOrifice"];
                this.columnUnderflowPipeType = base.Columns["UnderflowPipeType"];
                this.columnUnderflowPIpeHeight = base.Columns["UnderflowPIpeHeight"];
                this.columnUnderflowPIpeWidth = base.Columns["UnderflowPIpeWidth"];
                this.columnInflowPipeInvert = base.Columns["InflowPipeInvert"];
                this.columnInflowPipeType = base.Columns["InflowPipeType"];
                this.columnInflowPipeShape = base.Columns["InflowPipeShape"];
                this.columnInflowMeasure = base.Columns["InflowMeasure"];
                this.columnInflowDiamWidth = base.Columns["InflowDiamWidth"];
                this.columnInflowDiamHeight = base.Columns["InflowDiamHeight"];
                this.columnInflowNotes = base.Columns["InflowNotes"];
                this.columnInflow2PipeInvert = base.Columns["Inflow2PipeInvert"];
                this.columnInflow2PipeType = base.Columns["Inflow2PipeType"];
                this.columnInflow2PipeShape = base.Columns["Inflow2PipeShape"];
                this.columnInflow2DiamWidth = base.Columns["Inflow2DiamWidth"];
                this.columnInflow2DiamHeight = base.Columns["Inflow2DiamHeight"];
                this.columnStormOutflowMeasure = base.Columns["StormOutflowMeasure"];
                this.columnStormOutflowPipeType = base.Columns["StormOutflowPipeType"];
                this.columnStormOutflowPipeShape = base.Columns["StormOutflowPipeShape"];
                this.columnStormOutflowDiamWidth = base.Columns["StormOutflowDiamWidth"];
                this.columnStormOutflowDiamHeight = base.Columns["StormOutflowDiamHeight"];
                this.columnStormOutflowNotes = base.Columns["StormOutflowNotes"];
                this.columnChamberShape = base.Columns["ChamberShape"];
                this.columnChamberHeight = base.Columns["ChamberHeight"];
                this.columnChamberLength = base.Columns["ChamberLength"];
                this.columnChamberWidth = base.Columns["ChamberWidth"];
                this.columnDamMeasureComments = base.Columns["DamMeasureComments"];
                this.columnLaserToTopOfDam = base.Columns["LaserToTopOfDam"];
                this.columnDamLength = base.Columns["DamLength"];
                this.columnDamFaceShape = base.Columns["DamFaceShape"];
                this.columnDamPosition = base.Columns["DamPosition"];
                this.columnDamMaterial = base.Columns["DamMaterial"];
                this.columnFreeboard = base.Columns["Freeboard"];
                this.columnDiversionType = base.Columns["DiversionType"];
                this.columnDiversionOtherType = base.Columns["DiversionOtherType"];
                this.columnFollowUp = base.Columns["FollowUp"];
                this.columnPhotoLink = base.Columns["PhotoLink"];
                this.columnDistanceToUpsInflowInvertFlowMeasure = base.Columns["DistanceToUpsInflowInvertFlowMeasure"];
                this.columnDistanceToDwnOutflowInvertFlowMeasure = base.Columns["DistanceToDwnOutflowInvertFlowMeasure"];
                this.columnSpecialNeeds = base.Columns["SpecialNeeds"];
                this.columnLidColor = base.Columns["LidColor"];
                this.columnComments = base.Columns["Comments"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSurveyID = new global::System.Data.DataColumn("SurveyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyID);
                this.columnUpdateTime = new global::System.Data.DataColumn("UpdateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateTime);
                this.columnSurveyDate = new global::System.Data.DataColumn("SurveyDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyDate);
                this.columnSurveyTime = new global::System.Data.DataColumn("SurveyTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyTime);
                this.columnCrew = new global::System.Data.DataColumn("Crew", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCrew);
                this.columnWeather = new global::System.Data.DataColumn("Weather", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeather);
                this.columnStructureNum = new global::System.Data.DataColumn("StructureNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStructureNum);
                this.columnLocation = new global::System.Data.DataColumn("Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnHansenOrificeElevation = new global::System.Data.DataColumn("HansenOrificeElevation", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHansenOrificeElevation);
                this.columnLaserToRim = new global::System.Data.DataColumn("LaserToRim", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLaserToRim);
                this.columnWeir = new global::System.Data.DataColumn("Weir", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeir);
                this.columnLaserToTopOfWeir = new global::System.Data.DataColumn("LaserToTopOfWeir", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLaserToTopOfWeir);
                this.columnOrificePlateOrBaffle = new global::System.Data.DataColumn("OrificePlateOrBaffle", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrificePlateOrBaffle);
                this.columnOrificePlateOrBaffleType = new global::System.Data.DataColumn("OrificePlateOrBaffleType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrificePlateOrBaffleType);
                this.columnOrificeBaffleDiameter = new global::System.Data.DataColumn("OrificeBaffleDiameter", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrificeBaffleDiameter);
                this.columnLaserToOrifice = new global::System.Data.DataColumn("LaserToOrifice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLaserToOrifice);
                this.columnUnderflowPipeType = new global::System.Data.DataColumn("UnderflowPipeType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnderflowPipeType);
                this.columnUnderflowPIpeHeight = new global::System.Data.DataColumn("UnderflowPIpeHeight", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnderflowPIpeHeight);
                this.columnUnderflowPIpeWidth = new global::System.Data.DataColumn("UnderflowPIpeWidth", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnderflowPIpeWidth);
                this.columnInflowPipeInvert = new global::System.Data.DataColumn("InflowPipeInvert", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInflowPipeInvert);
                this.columnInflowPipeType = new global::System.Data.DataColumn("InflowPipeType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInflowPipeType);
                this.columnInflowPipeShape = new global::System.Data.DataColumn("InflowPipeShape", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInflowPipeShape);
                this.columnInflowMeasure = new global::System.Data.DataColumn("InflowMeasure", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInflowMeasure);
                this.columnInflowDiamWidth = new global::System.Data.DataColumn("InflowDiamWidth", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInflowDiamWidth);
                this.columnInflowDiamHeight = new global::System.Data.DataColumn("InflowDiamHeight", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInflowDiamHeight);
                this.columnInflowNotes = new global::System.Data.DataColumn("InflowNotes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInflowNotes);
                this.columnInflow2PipeInvert = new global::System.Data.DataColumn("Inflow2PipeInvert", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInflow2PipeInvert);
                this.columnInflow2PipeType = new global::System.Data.DataColumn("Inflow2PipeType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInflow2PipeType);
                this.columnInflow2PipeShape = new global::System.Data.DataColumn("Inflow2PipeShape", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInflow2PipeShape);
                this.columnInflow2DiamWidth = new global::System.Data.DataColumn("Inflow2DiamWidth", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInflow2DiamWidth);
                this.columnInflow2DiamHeight = new global::System.Data.DataColumn("Inflow2DiamHeight", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInflow2DiamHeight);
                this.columnStormOutflowMeasure = new global::System.Data.DataColumn("StormOutflowMeasure", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStormOutflowMeasure);
                this.columnStormOutflowPipeType = new global::System.Data.DataColumn("StormOutflowPipeType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStormOutflowPipeType);
                this.columnStormOutflowPipeShape = new global::System.Data.DataColumn("StormOutflowPipeShape", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStormOutflowPipeShape);
                this.columnStormOutflowDiamWidth = new global::System.Data.DataColumn("StormOutflowDiamWidth", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStormOutflowDiamWidth);
                this.columnStormOutflowDiamHeight = new global::System.Data.DataColumn("StormOutflowDiamHeight", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStormOutflowDiamHeight);
                this.columnStormOutflowNotes = new global::System.Data.DataColumn("StormOutflowNotes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStormOutflowNotes);
                this.columnChamberShape = new global::System.Data.DataColumn("ChamberShape", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChamberShape);
                this.columnChamberHeight = new global::System.Data.DataColumn("ChamberHeight", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChamberHeight);
                this.columnChamberLength = new global::System.Data.DataColumn("ChamberLength", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChamberLength);
                this.columnChamberWidth = new global::System.Data.DataColumn("ChamberWidth", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChamberWidth);
                this.columnDamMeasureComments = new global::System.Data.DataColumn("DamMeasureComments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDamMeasureComments);
                this.columnLaserToTopOfDam = new global::System.Data.DataColumn("LaserToTopOfDam", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLaserToTopOfDam);
                this.columnDamLength = new global::System.Data.DataColumn("DamLength", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDamLength);
                this.columnDamFaceShape = new global::System.Data.DataColumn("DamFaceShape", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDamFaceShape);
                this.columnDamPosition = new global::System.Data.DataColumn("DamPosition", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDamPosition);
                this.columnDamMaterial = new global::System.Data.DataColumn("DamMaterial", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDamMaterial);
                this.columnFreeboard = new global::System.Data.DataColumn("Freeboard", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFreeboard);
                this.columnDiversionType = new global::System.Data.DataColumn("DiversionType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiversionType);
                this.columnDiversionOtherType = new global::System.Data.DataColumn("DiversionOtherType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiversionOtherType);
                this.columnFollowUp = new global::System.Data.DataColumn("FollowUp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFollowUp);
                this.columnPhotoLink = new global::System.Data.DataColumn("PhotoLink", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhotoLink);
                this.columnDistanceToUpsInflowInvertFlowMeasure = new global::System.Data.DataColumn("DistanceToUpsInflowInvertFlowMeasure", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceToUpsInflowInvertFlowMeasure);
                this.columnDistanceToDwnOutflowInvertFlowMeasure = new global::System.Data.DataColumn("DistanceToDwnOutflowInvertFlowMeasure", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceToDwnOutflowInvertFlowMeasure);
                this.columnSpecialNeeds = new global::System.Data.DataColumn("SpecialNeeds", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecialNeeds);
                this.columnLidColor = new global::System.Data.DataColumn("LidColor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLidColor);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnSurveyID.AllowDBNull = false;
                this.columnSurveyID.Caption = "survey_id";
                this.columnUpdateTime.Caption = "update_time";
                this.columnSurveyDate.Caption = "survey_date";
                this.columnSurveyTime.Caption = "survey_time";
                this.columnSurveyTime.MaxLength = 12;
                this.columnCrew.Caption = "crew";
                this.columnCrew.MaxLength = 50;
                this.columnWeather.Caption = "weather";
                this.columnWeather.MaxLength = 50;
                this.columnStructureNum.Caption = "structure_num";
                this.columnStructureNum.MaxLength = 50;
                this.columnLocation.Caption = "location";
                this.columnLocation.MaxLength = 255;
                this.columnHansenOrificeElevation.Caption = "hansen_orifice_el";
                this.columnLaserToRim.Caption = "laser_to_rim_measure";
                this.columnWeir.Caption = "weir";
                this.columnLaserToTopOfWeir.Caption = "laser_to_top_of_weir";
                this.columnOrificePlateOrBaffle.Caption = "orifice_plate_or_baffle";
                this.columnOrificePlateOrBaffleType.Caption = "orifice_plate_or_baffle_type_and_measure";
                this.columnOrificePlateOrBaffleType.MaxLength = 250;
                this.columnOrificeBaffleDiameter.Caption = "orifice_baffle_dia";
                this.columnLaserToOrifice.Caption = "laser_to_orifice";
                this.columnUnderflowPipeType.Caption = "underflow_pipe_type";
                this.columnUnderflowPipeType.MaxLength = 50;
                this.columnUnderflowPIpeHeight.Caption = "underflow_pipe_height";
                this.columnUnderflowPIpeWidth.Caption = "underflow_pipe_width";
                this.columnInflowPipeInvert.Caption = "inflow_pipe_invert_measure";
                this.columnInflowPipeType.Caption = "inflow_pipe_type";
                this.columnInflowPipeType.MaxLength = 50;
                this.columnInflowPipeShape.Caption = "inflow_shape";
                this.columnInflowPipeShape.MaxLength = 50;
                this.columnInflowMeasure.Caption = "inflow_measure";
                this.columnInflowDiamWidth.Caption = "inflow_dia_width";
                this.columnInflowDiamHeight.Caption = "inflow_dia_height";
                this.columnInflowNotes.Caption = "inflow_notes";
                this.columnInflowNotes.MaxLength = 255;
                this.columnInflow2PipeInvert.Caption = "2nd_inflow_pipe_invert_measure";
                this.columnInflow2PipeType.Caption = "2nd_inflow_pipe_type";
                this.columnInflow2PipeType.MaxLength = 50;
                this.columnInflow2PipeShape.Caption = "2nd_inflow_shape";
                this.columnInflow2PipeShape.MaxLength = 50;
                this.columnInflow2DiamWidth.Caption = "2nd_inflow_dia_width";
                this.columnInflow2DiamHeight.Caption = "2nd_inflow_dia_height";
                this.columnStormOutflowMeasure.Caption = "storm_outflow_measure";
                this.columnStormOutflowPipeType.Caption = "storm_outflow_pipe_type";
                this.columnStormOutflowPipeType.MaxLength = 50;
                this.columnStormOutflowPipeShape.Caption = "storm_outflow_shape";
                this.columnStormOutflowPipeShape.MaxLength = 50;
                this.columnStormOutflowDiamWidth.Caption = "storm_outflow_dia_width";
                this.columnStormOutflowDiamHeight.Caption = "storm_outflow_dia_height";
                this.columnStormOutflowNotes.Caption = "storm_outflow_notes";
                this.columnStormOutflowNotes.MaxLength = 255;
                this.columnChamberShape.Caption = "chamber_shape";
                this.columnChamberShape.MaxLength = 50;
                this.columnChamberHeight.Caption = "chamber_height";
                this.columnChamberLength.Caption = "chamber_length";
                this.columnChamberWidth.Caption = "chamber_width";
                this.columnDamMeasureComments.Caption = "dam_measure_comments";
                this.columnDamMeasureComments.MaxLength = 250;
                this.columnLaserToTopOfDam.Caption = "laser_to_top_of_dam";
                this.columnDamLength.Caption = "dam_length";
                this.columnDamFaceShape.Caption = "dam_face_shape";
                this.columnDamFaceShape.MaxLength = 50;
                this.columnDamPosition.Caption = "dam_position";
                this.columnDamPosition.MaxLength = 255;
                this.columnDamMaterial.Caption = "dam_material";
                this.columnDamMaterial.MaxLength = 50;
                this.columnFreeboard.Caption = "freeboard";
                this.columnDiversionType.Caption = "diversion_type";
                this.columnDiversionType.MaxLength = 250;
                this.columnDiversionOtherType.Caption = "diversion_other_type";
                this.columnDiversionOtherType.MaxLength = 250;
                this.columnFollowUp.Caption = "followup";
                this.columnFollowUp.MaxLength = 255;
                this.columnPhotoLink.Caption = "Photolink";
                this.columnPhotoLink.MaxLength = 1073741823;
                this.columnDistanceToUpsInflowInvertFlowMeasure.Caption = "dist_ups_inflow_invert_ measure";
                this.columnDistanceToDwnOutflowInvertFlowMeasure.Caption = "dist_dwn_outflow_ measure";
                this.columnSpecialNeeds.Caption = "special_needs";
                this.columnSpecialNeeds.MaxLength = 255;
                this.columnLidColor.Caption = "lid_color";
                this.columnLidColor.MaxLength = 2;
                this.columnComments.Caption = "comments";
                this.columnComments.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveysRow NewSurveysRow() {
                return ((SurveysRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SurveysRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SurveysRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SurveysRowChanged != null)) {
                    this.SurveysRowChanged(this, new SurveysRowChangeEvent(((SurveysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SurveysRowChanging != null)) {
                    this.SurveysRowChanging(this, new SurveysRowChangeEvent(((SurveysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SurveysRowDeleted != null)) {
                    this.SurveysRowDeleted(this, new SurveysRowChangeEvent(((SurveysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SurveysRowDeleting != null)) {
                    this.SurveysRowDeleting(this, new SurveysRowChangeEvent(((SurveysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSurveysRow(SurveysRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DiversionStructureDataSet ds = new DiversionStructureDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SurveysDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StructuresRow : global::System.Data.DataRow {
            
            private StructuresDataTable tableStructures;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StructuresRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStructures = ((StructuresDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StructureNum {
                get {
                    return ((string)(this[this.tableStructures.StructureNumColumn]));
                }
                set {
                    this[this.tableStructures.StructureNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompKey {
                get {
                    try {
                        return ((string)(this[this.tableStructures.CompKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompKey\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.CompKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HansenUnitID {
                get {
                    try {
                        return ((string)(this[this.tableStructures.HansenUnitIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HansenUnitID\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.HansenUnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tableStructures.LocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Location\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BaseDir {
                get {
                    try {
                        return ((string)(this[this.tableStructures.BaseDirColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseDir\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.BaseDirColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CadFileName {
                get {
                    try {
                        return ((string)(this[this.tableStructures.CadFileNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CadFileName\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.CadFileNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableStructures.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BasinID {
                get {
                    try {
                        return ((string)(this[this.tableStructures.BasinIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BasinID\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.BasinIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InspectionFrequency {
                get {
                    try {
                        return ((string)(this[this.tableStructures.InspectionFrequencyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InspectionFrequency\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.InspectionFrequencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OutfallID {
                get {
                    try {
                        return ((string)(this[this.tableStructures.OutfallIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OutfallID\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.OutfallIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OtherDiversions {
                get {
                    try {
                        return ((string)(this[this.tableStructures.OtherDiversionsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherDiversions\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.OtherDiversionsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OrderNum {
                get {
                    try {
                        return ((decimal)(this[this.tableStructures.OrderNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrderNum\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.OrderNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FloodOrderNum {
                get {
                    try {
                        return ((decimal)(this[this.tableStructures.FloodOrderNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FloodOrderNum\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.FloodOrderNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal YearFloodInpsOrderNum {
                get {
                    try {
                        return ((decimal)(this[this.tableStructures.YearFloodInpsOrderNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YearFloodInpsOrderNum\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.YearFloodInpsOrderNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Area {
                get {
                    try {
                        return ((string)(this[this.tableStructures.AreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Area\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.AreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WCMSID {
                get {
                    try {
                        return ((string)(this[this.tableStructures.WCMSIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WCMSID\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.WCMSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CheckMethod {
                get {
                    try {
                        return ((string)(this[this.tableStructures.CheckMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CheckMethod\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.CheckMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InspectionComments {
                get {
                    try {
                        return ((string)(this[this.tableStructures.InspectionCommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InspectionComments\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.InspectionCommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FloodControlAlts {
                get {
                    try {
                        return ((string)(this[this.tableStructures.FloodControlAltsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FloodControlAlts\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.FloodControlAltsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float OrificeElevation {
                get {
                    try {
                        return ((float)(this[this.tableStructures.OrificeElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrificeElevation\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.OrificeElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SpecialNeeds {
                get {
                    try {
                        return ((string)(this[this.tableStructures.SpecialNeedsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpecialNeeds\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.SpecialNeedsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float RiverElevation {
                get {
                    try {
                        return ((float)(this[this.tableStructures.RiverElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RiverElevation\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.RiverElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float PlugDiameter {
                get {
                    try {
                        return ((float)(this[this.tableStructures.PlugDiameterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlugDiameter\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.PlugDiameterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LidColor {
                get {
                    try {
                        return ((string)(this[this.tableStructures.LidColorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LidColor\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.LidColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float PDOTRimElevation {
                get {
                    try {
                        return ((float)(this[this.tableStructures.PDOTRimElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PDOTRimElevation\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.PDOTRimElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SurveyDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableStructures.SurveyDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurveyDate\' in table \'Structures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStructures.SurveyDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompKeyNull() {
                return this.IsNull(this.tableStructures.CompKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompKeyNull() {
                this[this.tableStructures.CompKeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHansenUnitIDNull() {
                return this.IsNull(this.tableStructures.HansenUnitIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHansenUnitIDNull() {
                this[this.tableStructures.HansenUnitIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNull() {
                return this.IsNull(this.tableStructures.LocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNull() {
                this[this.tableStructures.LocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseDirNull() {
                return this.IsNull(this.tableStructures.BaseDirColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseDirNull() {
                this[this.tableStructures.BaseDirColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCadFileNameNull() {
                return this.IsNull(this.tableStructures.CadFileNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCadFileNameNull() {
                this[this.tableStructures.CadFileNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableStructures.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableStructures.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBasinIDNull() {
                return this.IsNull(this.tableStructures.BasinIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBasinIDNull() {
                this[this.tableStructures.BasinIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspectionFrequencyNull() {
                return this.IsNull(this.tableStructures.InspectionFrequencyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspectionFrequencyNull() {
                this[this.tableStructures.InspectionFrequencyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOutfallIDNull() {
                return this.IsNull(this.tableStructures.OutfallIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOutfallIDNull() {
                this[this.tableStructures.OutfallIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherDiversionsNull() {
                return this.IsNull(this.tableStructures.OtherDiversionsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherDiversionsNull() {
                this[this.tableStructures.OtherDiversionsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderNumNull() {
                return this.IsNull(this.tableStructures.OrderNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderNumNull() {
                this[this.tableStructures.OrderNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFloodOrderNumNull() {
                return this.IsNull(this.tableStructures.FloodOrderNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFloodOrderNumNull() {
                this[this.tableStructures.FloodOrderNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearFloodInpsOrderNumNull() {
                return this.IsNull(this.tableStructures.YearFloodInpsOrderNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearFloodInpsOrderNumNull() {
                this[this.tableStructures.YearFloodInpsOrderNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAreaNull() {
                return this.IsNull(this.tableStructures.AreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAreaNull() {
                this[this.tableStructures.AreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWCMSIDNull() {
                return this.IsNull(this.tableStructures.WCMSIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWCMSIDNull() {
                this[this.tableStructures.WCMSIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckMethodNull() {
                return this.IsNull(this.tableStructures.CheckMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckMethodNull() {
                this[this.tableStructures.CheckMethodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspectionCommentsNull() {
                return this.IsNull(this.tableStructures.InspectionCommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspectionCommentsNull() {
                this[this.tableStructures.InspectionCommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFloodControlAltsNull() {
                return this.IsNull(this.tableStructures.FloodControlAltsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFloodControlAltsNull() {
                this[this.tableStructures.FloodControlAltsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrificeElevationNull() {
                return this.IsNull(this.tableStructures.OrificeElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrificeElevationNull() {
                this[this.tableStructures.OrificeElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpecialNeedsNull() {
                return this.IsNull(this.tableStructures.SpecialNeedsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpecialNeedsNull() {
                this[this.tableStructures.SpecialNeedsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRiverElevationNull() {
                return this.IsNull(this.tableStructures.RiverElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRiverElevationNull() {
                this[this.tableStructures.RiverElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlugDiameterNull() {
                return this.IsNull(this.tableStructures.PlugDiameterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlugDiameterNull() {
                this[this.tableStructures.PlugDiameterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLidColorNull() {
                return this.IsNull(this.tableStructures.LidColorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLidColorNull() {
                this[this.tableStructures.LidColorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPDOTRimElevationNull() {
                return this.IsNull(this.tableStructures.PDOTRimElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPDOTRimElevationNull() {
                this[this.tableStructures.PDOTRimElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurveyDateNull() {
                return this.IsNull(this.tableStructures.SurveyDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurveyDateNull() {
                this[this.tableStructures.SurveyDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SurveysRow : global::System.Data.DataRow {
            
            private SurveysDataTable tableSurveys;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SurveysRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSurveys = ((SurveysDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurveyID {
                get {
                    return ((int)(this[this.tableSurveys.SurveyIDColumn]));
                }
                set {
                    this[this.tableSurveys.SurveyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UpdateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSurveys.UpdateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdateTime\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.UpdateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SurveyDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSurveys.SurveyDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurveyDate\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.SurveyDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SurveyTime {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.SurveyTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurveyTime\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.SurveyTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Crew {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.CrewColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Crew\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.CrewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Weather {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.WeatherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Weather\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.WeatherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StructureNum {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.StructureNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StructureNum\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.StructureNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.LocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Location\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float HansenOrificeElevation {
                get {
                    try {
                        return ((float)(this[this.tableSurveys.HansenOrificeElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HansenOrificeElevation\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.HansenOrificeElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LaserToRim {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.LaserToRimColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LaserToRim\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.LaserToRimColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Weir {
                get {
                    try {
                        return ((bool)(this[this.tableSurveys.WeirColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Weir\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.WeirColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LaserToTopOfWeir {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.LaserToTopOfWeirColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LaserToTopOfWeir\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.LaserToTopOfWeirColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool OrificePlateOrBaffle {
                get {
                    try {
                        return ((bool)(this[this.tableSurveys.OrificePlateOrBaffleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrificePlateOrBaffle\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.OrificePlateOrBaffleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrificePlateOrBaffleType {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.OrificePlateOrBaffleTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrificePlateOrBaffleType\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.OrificePlateOrBaffleTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OrificeBaffleDiameter {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.OrificeBaffleDiameterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrificeBaffleDiameter\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.OrificeBaffleDiameterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LaserToOrifice {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.LaserToOrificeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LaserToOrifice\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.LaserToOrificeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnderflowPipeType {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.UnderflowPipeTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnderflowPipeType\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.UnderflowPipeTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UnderflowPIpeHeight {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.UnderflowPIpeHeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnderflowPIpeHeight\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.UnderflowPIpeHeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UnderflowPIpeWidth {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.UnderflowPIpeWidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnderflowPIpeWidth\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.UnderflowPIpeWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal InflowPipeInvert {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.InflowPipeInvertColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InflowPipeInvert\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.InflowPipeInvertColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InflowPipeType {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.InflowPipeTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InflowPipeType\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.InflowPipeTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InflowPipeShape {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.InflowPipeShapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InflowPipeShape\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.InflowPipeShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal InflowMeasure {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.InflowMeasureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InflowMeasure\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.InflowMeasureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal InflowDiamWidth {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.InflowDiamWidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InflowDiamWidth\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.InflowDiamWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal InflowDiamHeight {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.InflowDiamHeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InflowDiamHeight\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.InflowDiamHeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InflowNotes {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.InflowNotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InflowNotes\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.InflowNotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Inflow2PipeInvert {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.Inflow2PipeInvertColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Inflow2PipeInvert\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.Inflow2PipeInvertColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Inflow2PipeType {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.Inflow2PipeTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Inflow2PipeType\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.Inflow2PipeTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Inflow2PipeShape {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.Inflow2PipeShapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Inflow2PipeShape\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.Inflow2PipeShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Inflow2DiamWidth {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.Inflow2DiamWidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Inflow2DiamWidth\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.Inflow2DiamWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Inflow2DiamHeight {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.Inflow2DiamHeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Inflow2DiamHeight\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.Inflow2DiamHeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal StormOutflowMeasure {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.StormOutflowMeasureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StormOutflowMeasure\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.StormOutflowMeasureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StormOutflowPipeType {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.StormOutflowPipeTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StormOutflowPipeType\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.StormOutflowPipeTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StormOutflowPipeShape {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.StormOutflowPipeShapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StormOutflowPipeShape\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.StormOutflowPipeShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal StormOutflowDiamWidth {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.StormOutflowDiamWidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StormOutflowDiamWidth\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.StormOutflowDiamWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal StormOutflowDiamHeight {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.StormOutflowDiamHeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StormOutflowDiamHeight\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.StormOutflowDiamHeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StormOutflowNotes {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.StormOutflowNotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StormOutflowNotes\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.StormOutflowNotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChamberShape {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.ChamberShapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChamberShape\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.ChamberShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ChamberHeight {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.ChamberHeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChamberHeight\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.ChamberHeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ChamberLength {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.ChamberLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChamberLength\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.ChamberLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ChamberWidth {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.ChamberWidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChamberWidth\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.ChamberWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DamMeasureComments {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.DamMeasureCommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DamMeasureComments\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.DamMeasureCommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LaserToTopOfDam {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.LaserToTopOfDamColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LaserToTopOfDam\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.LaserToTopOfDamColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DamLength {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.DamLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DamLength\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.DamLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DamFaceShape {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.DamFaceShapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DamFaceShape\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.DamFaceShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DamPosition {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.DamPositionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DamPosition\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.DamPositionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DamMaterial {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.DamMaterialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DamMaterial\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.DamMaterialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Freeboard {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.FreeboardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Freeboard\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.FreeboardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiversionType {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.DiversionTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DiversionType\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.DiversionTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiversionOtherType {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.DiversionOtherTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DiversionOtherType\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.DiversionOtherTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FollowUp {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.FollowUpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FollowUp\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.FollowUpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PhotoLink {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.PhotoLinkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PhotoLink\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.PhotoLinkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DistanceToUpsInflowInvertFlowMeasure {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.DistanceToUpsInflowInvertFlowMeasureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceToUpsInflowInvertFlowMeasure\' in table \'Surveys\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.DistanceToUpsInflowInvertFlowMeasureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DistanceToDwnOutflowInvertFlowMeasure {
                get {
                    try {
                        return ((decimal)(this[this.tableSurveys.DistanceToDwnOutflowInvertFlowMeasureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceToDwnOutflowInvertFlowMeasure\' in table \'Surveys\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.DistanceToDwnOutflowInvertFlowMeasureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SpecialNeeds {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.SpecialNeedsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpecialNeeds\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.SpecialNeedsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LidColor {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.LidColorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LidColor\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.LidColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableSurveys.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'Surveys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveys.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdateTimeNull() {
                return this.IsNull(this.tableSurveys.UpdateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdateTimeNull() {
                this[this.tableSurveys.UpdateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurveyDateNull() {
                return this.IsNull(this.tableSurveys.SurveyDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurveyDateNull() {
                this[this.tableSurveys.SurveyDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurveyTimeNull() {
                return this.IsNull(this.tableSurveys.SurveyTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurveyTimeNull() {
                this[this.tableSurveys.SurveyTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCrewNull() {
                return this.IsNull(this.tableSurveys.CrewColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCrewNull() {
                this[this.tableSurveys.CrewColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeatherNull() {
                return this.IsNull(this.tableSurveys.WeatherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeatherNull() {
                this[this.tableSurveys.WeatherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStructureNumNull() {
                return this.IsNull(this.tableSurveys.StructureNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStructureNumNull() {
                this[this.tableSurveys.StructureNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNull() {
                return this.IsNull(this.tableSurveys.LocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNull() {
                this[this.tableSurveys.LocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHansenOrificeElevationNull() {
                return this.IsNull(this.tableSurveys.HansenOrificeElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHansenOrificeElevationNull() {
                this[this.tableSurveys.HansenOrificeElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLaserToRimNull() {
                return this.IsNull(this.tableSurveys.LaserToRimColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLaserToRimNull() {
                this[this.tableSurveys.LaserToRimColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeirNull() {
                return this.IsNull(this.tableSurveys.WeirColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeirNull() {
                this[this.tableSurveys.WeirColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLaserToTopOfWeirNull() {
                return this.IsNull(this.tableSurveys.LaserToTopOfWeirColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLaserToTopOfWeirNull() {
                this[this.tableSurveys.LaserToTopOfWeirColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrificePlateOrBaffleNull() {
                return this.IsNull(this.tableSurveys.OrificePlateOrBaffleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrificePlateOrBaffleNull() {
                this[this.tableSurveys.OrificePlateOrBaffleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrificePlateOrBaffleTypeNull() {
                return this.IsNull(this.tableSurveys.OrificePlateOrBaffleTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrificePlateOrBaffleTypeNull() {
                this[this.tableSurveys.OrificePlateOrBaffleTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrificeBaffleDiameterNull() {
                return this.IsNull(this.tableSurveys.OrificeBaffleDiameterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrificeBaffleDiameterNull() {
                this[this.tableSurveys.OrificeBaffleDiameterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLaserToOrificeNull() {
                return this.IsNull(this.tableSurveys.LaserToOrificeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLaserToOrificeNull() {
                this[this.tableSurveys.LaserToOrificeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnderflowPipeTypeNull() {
                return this.IsNull(this.tableSurveys.UnderflowPipeTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnderflowPipeTypeNull() {
                this[this.tableSurveys.UnderflowPipeTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnderflowPIpeHeightNull() {
                return this.IsNull(this.tableSurveys.UnderflowPIpeHeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnderflowPIpeHeightNull() {
                this[this.tableSurveys.UnderflowPIpeHeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnderflowPIpeWidthNull() {
                return this.IsNull(this.tableSurveys.UnderflowPIpeWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnderflowPIpeWidthNull() {
                this[this.tableSurveys.UnderflowPIpeWidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInflowPipeInvertNull() {
                return this.IsNull(this.tableSurveys.InflowPipeInvertColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInflowPipeInvertNull() {
                this[this.tableSurveys.InflowPipeInvertColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInflowPipeTypeNull() {
                return this.IsNull(this.tableSurveys.InflowPipeTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInflowPipeTypeNull() {
                this[this.tableSurveys.InflowPipeTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInflowPipeShapeNull() {
                return this.IsNull(this.tableSurveys.InflowPipeShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInflowPipeShapeNull() {
                this[this.tableSurveys.InflowPipeShapeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInflowMeasureNull() {
                return this.IsNull(this.tableSurveys.InflowMeasureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInflowMeasureNull() {
                this[this.tableSurveys.InflowMeasureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInflowDiamWidthNull() {
                return this.IsNull(this.tableSurveys.InflowDiamWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInflowDiamWidthNull() {
                this[this.tableSurveys.InflowDiamWidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInflowDiamHeightNull() {
                return this.IsNull(this.tableSurveys.InflowDiamHeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInflowDiamHeightNull() {
                this[this.tableSurveys.InflowDiamHeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInflowNotesNull() {
                return this.IsNull(this.tableSurveys.InflowNotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInflowNotesNull() {
                this[this.tableSurveys.InflowNotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInflow2PipeInvertNull() {
                return this.IsNull(this.tableSurveys.Inflow2PipeInvertColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInflow2PipeInvertNull() {
                this[this.tableSurveys.Inflow2PipeInvertColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInflow2PipeTypeNull() {
                return this.IsNull(this.tableSurveys.Inflow2PipeTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInflow2PipeTypeNull() {
                this[this.tableSurveys.Inflow2PipeTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInflow2PipeShapeNull() {
                return this.IsNull(this.tableSurveys.Inflow2PipeShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInflow2PipeShapeNull() {
                this[this.tableSurveys.Inflow2PipeShapeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInflow2DiamWidthNull() {
                return this.IsNull(this.tableSurveys.Inflow2DiamWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInflow2DiamWidthNull() {
                this[this.tableSurveys.Inflow2DiamWidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInflow2DiamHeightNull() {
                return this.IsNull(this.tableSurveys.Inflow2DiamHeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInflow2DiamHeightNull() {
                this[this.tableSurveys.Inflow2DiamHeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStormOutflowMeasureNull() {
                return this.IsNull(this.tableSurveys.StormOutflowMeasureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStormOutflowMeasureNull() {
                this[this.tableSurveys.StormOutflowMeasureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStormOutflowPipeTypeNull() {
                return this.IsNull(this.tableSurveys.StormOutflowPipeTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStormOutflowPipeTypeNull() {
                this[this.tableSurveys.StormOutflowPipeTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStormOutflowPipeShapeNull() {
                return this.IsNull(this.tableSurveys.StormOutflowPipeShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStormOutflowPipeShapeNull() {
                this[this.tableSurveys.StormOutflowPipeShapeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStormOutflowDiamWidthNull() {
                return this.IsNull(this.tableSurveys.StormOutflowDiamWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStormOutflowDiamWidthNull() {
                this[this.tableSurveys.StormOutflowDiamWidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStormOutflowDiamHeightNull() {
                return this.IsNull(this.tableSurveys.StormOutflowDiamHeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStormOutflowDiamHeightNull() {
                this[this.tableSurveys.StormOutflowDiamHeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStormOutflowNotesNull() {
                return this.IsNull(this.tableSurveys.StormOutflowNotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStormOutflowNotesNull() {
                this[this.tableSurveys.StormOutflowNotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChamberShapeNull() {
                return this.IsNull(this.tableSurveys.ChamberShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChamberShapeNull() {
                this[this.tableSurveys.ChamberShapeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChamberHeightNull() {
                return this.IsNull(this.tableSurveys.ChamberHeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChamberHeightNull() {
                this[this.tableSurveys.ChamberHeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChamberLengthNull() {
                return this.IsNull(this.tableSurveys.ChamberLengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChamberLengthNull() {
                this[this.tableSurveys.ChamberLengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChamberWidthNull() {
                return this.IsNull(this.tableSurveys.ChamberWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChamberWidthNull() {
                this[this.tableSurveys.ChamberWidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDamMeasureCommentsNull() {
                return this.IsNull(this.tableSurveys.DamMeasureCommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDamMeasureCommentsNull() {
                this[this.tableSurveys.DamMeasureCommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLaserToTopOfDamNull() {
                return this.IsNull(this.tableSurveys.LaserToTopOfDamColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLaserToTopOfDamNull() {
                this[this.tableSurveys.LaserToTopOfDamColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDamLengthNull() {
                return this.IsNull(this.tableSurveys.DamLengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDamLengthNull() {
                this[this.tableSurveys.DamLengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDamFaceShapeNull() {
                return this.IsNull(this.tableSurveys.DamFaceShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDamFaceShapeNull() {
                this[this.tableSurveys.DamFaceShapeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDamPositionNull() {
                return this.IsNull(this.tableSurveys.DamPositionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDamPositionNull() {
                this[this.tableSurveys.DamPositionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDamMaterialNull() {
                return this.IsNull(this.tableSurveys.DamMaterialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDamMaterialNull() {
                this[this.tableSurveys.DamMaterialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFreeboardNull() {
                return this.IsNull(this.tableSurveys.FreeboardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFreeboardNull() {
                this[this.tableSurveys.FreeboardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiversionTypeNull() {
                return this.IsNull(this.tableSurveys.DiversionTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiversionTypeNull() {
                this[this.tableSurveys.DiversionTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiversionOtherTypeNull() {
                return this.IsNull(this.tableSurveys.DiversionOtherTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiversionOtherTypeNull() {
                this[this.tableSurveys.DiversionOtherTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFollowUpNull() {
                return this.IsNull(this.tableSurveys.FollowUpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFollowUpNull() {
                this[this.tableSurveys.FollowUpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhotoLinkNull() {
                return this.IsNull(this.tableSurveys.PhotoLinkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhotoLinkNull() {
                this[this.tableSurveys.PhotoLinkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceToUpsInflowInvertFlowMeasureNull() {
                return this.IsNull(this.tableSurveys.DistanceToUpsInflowInvertFlowMeasureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceToUpsInflowInvertFlowMeasureNull() {
                this[this.tableSurveys.DistanceToUpsInflowInvertFlowMeasureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceToDwnOutflowInvertFlowMeasureNull() {
                return this.IsNull(this.tableSurveys.DistanceToDwnOutflowInvertFlowMeasureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceToDwnOutflowInvertFlowMeasureNull() {
                this[this.tableSurveys.DistanceToDwnOutflowInvertFlowMeasureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpecialNeedsNull() {
                return this.IsNull(this.tableSurveys.SpecialNeedsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpecialNeedsNull() {
                this[this.tableSurveys.SpecialNeedsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLidColorNull() {
                return this.IsNull(this.tableSurveys.LidColorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLidColorNull() {
                this[this.tableSurveys.LidColorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableSurveys.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableSurveys.CommentsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StructuresRowChangeEvent : global::System.EventArgs {
            
            private StructuresRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StructuresRowChangeEvent(StructuresRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StructuresRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SurveysRowChangeEvent : global::System.EventArgs {
            
            private SurveysRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveysRowChangeEvent(SurveysRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveysRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace SystemsAnalysis.DataAccess.DiversionStructureDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class StructuresTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StructuresTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Structures";
            tableMapping.ColumnMappings.Add("structure_num", "StructureNum");
            tableMapping.ColumnMappings.Add("compkey", "CompKey");
            tableMapping.ColumnMappings.Add("hansen_unitid", "HansenUnitID");
            tableMapping.ColumnMappings.Add("location", "Location");
            tableMapping.ColumnMappings.Add("basedir", "BaseDir");
            tableMapping.ColumnMappings.Add("cadfilename", "CadFileName");
            tableMapping.ColumnMappings.Add("status", "Status");
            tableMapping.ColumnMappings.Add("basin_id", "BasinID");
            tableMapping.ColumnMappings.Add("inspection_frequency", "InspectionFrequency");
            tableMapping.ColumnMappings.Add("outfall_id", "OutfallID");
            tableMapping.ColumnMappings.Add("other_diversions", "OtherDiversions");
            tableMapping.ColumnMappings.Add("order_num", "OrderNum");
            tableMapping.ColumnMappings.Add("flood_order_num", "FloodOrderNum");
            tableMapping.ColumnMappings.Add("year_flood_inps_order_num", "YearFloodInpsOrderNum");
            tableMapping.ColumnMappings.Add("area", "Area");
            tableMapping.ColumnMappings.Add("wcms_id", "WCMSID");
            tableMapping.ColumnMappings.Add("check_method", "CheckMethod");
            tableMapping.ColumnMappings.Add("inspection_comments", "InspectionComments");
            tableMapping.ColumnMappings.Add("flood_control_alts", "FloodControlAlts");
            tableMapping.ColumnMappings.Add("orifice_el", "OrificeElevation");
            tableMapping.ColumnMappings.Add("special_needs", "SpecialNeeds");
            tableMapping.ColumnMappings.Add("river_el", "RiverElevation");
            tableMapping.ColumnMappings.Add("plug_dia", "PlugDiameter");
            tableMapping.ColumnMappings.Add("lid_color", "LidColor");
            tableMapping.ColumnMappings.Add("pdot_rim_el", "PDOTRimElevation");
            tableMapping.ColumnMappings.Add("survey_date", "SurveyDate");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[STRUCTURES] ([structure_num], [compkey], [hansen_unitid], [location], [basedir], [cadfilename], [status], [basin_id], [inspection_frequency], [outfall_id], [other_diversions], [order_num], [flood_order_num], [year_flood_inps_order_num], [area], [wcms_id], [check_method], [inspection_comments], [flood_control_alts], [orifice_el], [special_needs], [river_el], [plug_dia], [lid_color], [pdot_rim_el], [survey_date]) VALUES (@structure_num, @compkey, @hansen_unitid, @location, @basedir, @cadfilename, @status, @basin_id, @inspection_frequency, @outfall_id, @other_diversions, @order_num, @flood_order_num, @year_flood_inps_order_num, @area, @wcms_id, @check_method, @inspection_comments, @flood_control_alts, @orifice_el, @special_needs, @river_el, @plug_dia, @lid_color, @pdot_rim_el, @survey_date)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@structure_num", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "structure_num", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@compkey", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "compkey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@hansen_unitid", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "hansen_unitid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@basedir", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "basedir", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cadfilename", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cadfilename", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@status", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@basin_id", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "basin_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inspection_frequency", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inspection_frequency", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@outfall_id", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "outfall_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@other_diversions", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "other_diversions", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@order_num", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "order_num", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@flood_order_num", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "flood_order_num", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@year_flood_inps_order_num", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "year_flood_inps_order_num", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@area", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "area", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@wcms_id", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "wcms_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@check_method", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "check_method", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inspection_comments", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inspection_comments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@flood_control_alts", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "flood_control_alts", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@orifice_el", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "orifice_el", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@special_needs", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "special_needs", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@river_el", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "river_el", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@plug_dia", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "plug_dia", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lid_color", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lid_color", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pdot_rim_el", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pdot_rim_el", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@survey_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "survey_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.DIVERSIONConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT structure_num, compkey, hansen_unitid, location, basedir, cadfilename, status, basin_id, inspection_frequency, outfall_id, other_diversions, order_num, flood_order_num, year_flood_inps_order_num, area, wcms_id, check_method, inspection_comments, flood_control_alts, orifice_el, special_needs, river_el, plug_dia, lid_color, pdot_rim_el, survey_date FROM dbo.STRUCTURES";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DiversionStructureDataSet.StructuresDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DiversionStructureDataSet.StructuresDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DiversionStructureDataSet.StructuresDataTable dataTable = new DiversionStructureDataSet.StructuresDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DiversionStructureDataSet.StructuresDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DiversionStructureDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Structures");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string structure_num, 
                    string compkey, 
                    string hansen_unitid, 
                    string location, 
                    string basedir, 
                    string cadfilename, 
                    string status, 
                    string basin_id, 
                    string inspection_frequency, 
                    string outfall_id, 
                    string other_diversions, 
                    global::System.Nullable<decimal> order_num, 
                    global::System.Nullable<decimal> flood_order_num, 
                    global::System.Nullable<decimal> year_flood_inps_order_num, 
                    string area, 
                    string wcms_id, 
                    string check_method, 
                    string inspection_comments, 
                    string flood_control_alts, 
                    global::System.Nullable<float> orifice_el, 
                    string special_needs, 
                    global::System.Nullable<float> river_el, 
                    global::System.Nullable<float> plug_dia, 
                    string lid_color, 
                    global::System.Nullable<float> pdot_rim_el, 
                    global::System.Nullable<global::System.DateTime> survey_date) {
            if ((structure_num == null)) {
                throw new global::System.ArgumentNullException("structure_num");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(structure_num));
            }
            if ((compkey == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(compkey));
            }
            if ((hansen_unitid == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(hansen_unitid));
            }
            if ((location == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(location));
            }
            if ((basedir == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(basedir));
            }
            if ((cadfilename == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(cadfilename));
            }
            if ((status == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(status));
            }
            if ((basin_id == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(basin_id));
            }
            if ((inspection_frequency == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(inspection_frequency));
            }
            if ((outfall_id == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(outfall_id));
            }
            if ((other_diversions == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(other_diversions));
            }
            if ((order_num.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((decimal)(order_num.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((flood_order_num.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(flood_order_num.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((year_flood_inps_order_num.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((decimal)(year_flood_inps_order_num.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((area == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(area));
            }
            if ((wcms_id == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(wcms_id));
            }
            if ((check_method == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(check_method));
            }
            if ((inspection_comments == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(inspection_comments));
            }
            if ((flood_control_alts == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(flood_control_alts));
            }
            if ((orifice_el.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((float)(orifice_el.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((special_needs == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(special_needs));
            }
            if ((river_el.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((float)(river_el.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((plug_dia.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((float)(plug_dia.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((lid_color == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(lid_color));
            }
            if ((pdot_rim_el.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((float)(pdot_rim_el.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((survey_date.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((System.DateTime)(survey_date.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SurveysTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SurveysTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Surveys";
            tableMapping.ColumnMappings.Add("survey_id", "SurveyID");
            tableMapping.ColumnMappings.Add("update_time", "UpdateTime");
            tableMapping.ColumnMappings.Add("survey_date", "SurveyDate");
            tableMapping.ColumnMappings.Add("survey_time", "SurveyTime");
            tableMapping.ColumnMappings.Add("crew", "Crew");
            tableMapping.ColumnMappings.Add("weather", "Weather");
            tableMapping.ColumnMappings.Add("structure_num", "StructureNum");
            tableMapping.ColumnMappings.Add("location", "Location");
            tableMapping.ColumnMappings.Add("hansen_orifice_el", "HansenOrificeElevation");
            tableMapping.ColumnMappings.Add("laser_to_rim_measure", "LaserToRim");
            tableMapping.ColumnMappings.Add("weir", "Weir");
            tableMapping.ColumnMappings.Add("laser_to_top_of_weir", "LaserToTopOfWeir");
            tableMapping.ColumnMappings.Add("orifice_plate_or_baffle", "OrificePlateOrBaffle");
            tableMapping.ColumnMappings.Add("orifice_plate_or_baffle_type_and_measure", "OrificePlateOrBaffleType");
            tableMapping.ColumnMappings.Add("orifice_baffle_dia", "OrificeBaffleDiameter");
            tableMapping.ColumnMappings.Add("laser_to_orifice", "LaserToOrifice");
            tableMapping.ColumnMappings.Add("underflow_pipe_type", "UnderflowPipeType");
            tableMapping.ColumnMappings.Add("underflow_pipe_height", "UnderflowPIpeHeight");
            tableMapping.ColumnMappings.Add("underflow_pipe_width", "UnderflowPIpeWidth");
            tableMapping.ColumnMappings.Add("inflow_pipe_invert_measure", "InflowPipeInvert");
            tableMapping.ColumnMappings.Add("inflow_pipe_type", "InflowPipeType");
            tableMapping.ColumnMappings.Add("inflow_shape", "InflowPipeShape");
            tableMapping.ColumnMappings.Add("inflow_measure", "InflowMeasure");
            tableMapping.ColumnMappings.Add("inflow_dia_width", "InflowDiamWidth");
            tableMapping.ColumnMappings.Add("inflow_dia_height", "InflowDiamHeight");
            tableMapping.ColumnMappings.Add("inflow_notes", "InflowNotes");
            tableMapping.ColumnMappings.Add("2nd_inflow_pipe_invert_measure", "Inflow2PipeInvert");
            tableMapping.ColumnMappings.Add("2nd_inflow_pipe_type", "Inflow2PipeType");
            tableMapping.ColumnMappings.Add("2nd_inflow_shape", "Inflow2PipeShape");
            tableMapping.ColumnMappings.Add("2nd_inflow_dia_width", "Inflow2DiamWidth");
            tableMapping.ColumnMappings.Add("2nd_inflow_dia_height", "Inflow2DiamHeight");
            tableMapping.ColumnMappings.Add("storm_outflow_measure", "StormOutflowMeasure");
            tableMapping.ColumnMappings.Add("storm_outflow_pipe_type", "StormOutflowPipeType");
            tableMapping.ColumnMappings.Add("storm_outflow_shape", "StormOutflowPipeShape");
            tableMapping.ColumnMappings.Add("storm_outflow_dia_width", "StormOutflowDiamWidth");
            tableMapping.ColumnMappings.Add("storm_outflow_dia_height", "StormOutflowDiamHeight");
            tableMapping.ColumnMappings.Add("storm_outflow_notes", "StormOutflowNotes");
            tableMapping.ColumnMappings.Add("chamber_shape", "ChamberShape");
            tableMapping.ColumnMappings.Add("chamber_height", "ChamberHeight");
            tableMapping.ColumnMappings.Add("chamber_length", "ChamberLength");
            tableMapping.ColumnMappings.Add("chamber_width", "ChamberWidth");
            tableMapping.ColumnMappings.Add("dam_measure_comments", "DamMeasureComments");
            tableMapping.ColumnMappings.Add("laser_to_top_of_dam", "LaserToTopOfDam");
            tableMapping.ColumnMappings.Add("dam_length", "DamLength");
            tableMapping.ColumnMappings.Add("dam_face_shape", "DamFaceShape");
            tableMapping.ColumnMappings.Add("dam_position", "DamPosition");
            tableMapping.ColumnMappings.Add("dam_material", "DamMaterial");
            tableMapping.ColumnMappings.Add("freeboard", "Freeboard");
            tableMapping.ColumnMappings.Add("diversion_type", "DiversionType");
            tableMapping.ColumnMappings.Add("diversion_other_type", "DiversionOtherType");
            tableMapping.ColumnMappings.Add("followup", "FollowUp");
            tableMapping.ColumnMappings.Add("Photolink", "PhotoLink");
            tableMapping.ColumnMappings.Add("dist_ups_inflow_invert_ measure", "DistanceToUpsInflowInvertFlowMeasure");
            tableMapping.ColumnMappings.Add("dist_dwn_outflow_ measure", "DistanceToDwnOutflowInvertFlowMeasure");
            tableMapping.ColumnMappings.Add("special_needs", "SpecialNeeds");
            tableMapping.ColumnMappings.Add("lid_color", "LidColor");
            tableMapping.ColumnMappings.Add("comments", "Comments");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SURVEYS] ([survey_id], [update_time], [survey_date], [survey_t" +
                "ime], [crew], [weather], [structure_num], [location], [hansen_orifice_el], [lase" +
                "r_to_rim_measure], [weir], [laser_to_top_of_weir], [orifice_plate_or_baffle], [o" +
                "rifice_plate_or_baffle_type_and_measure], [orifice_baffle_dia], [laser_to_orific" +
                "e], [underflow_pipe_type], [underflow_pipe_height], [underflow_pipe_width], [inf" +
                "low_pipe_invert_measure], [inflow_pipe_type], [inflow_shape], [inflow_measure], " +
                "[inflow_dia_width], [inflow_dia_height], [inflow_notes], [2nd_inflow_pipe_invert" +
                "_measure], [2nd_inflow_pipe_type], [2nd_inflow_shape], [2nd_inflow_dia_width], [" +
                "2nd_inflow_dia_height], [storm_outflow_measure], [storm_outflow_pipe_type], [sto" +
                "rm_outflow_shape], [storm_outflow_dia_width], [storm_outflow_dia_height], [storm" +
                "_outflow_notes], [chamber_shape], [chamber_height], [chamber_length], [chamber_w" +
                "idth], [dam_measure_comments], [laser_to_top_of_dam], [dam_length], [dam_face_sh" +
                "ape], [dam_position], [dam_material], [freeboard], [diversion_type], [diversion_" +
                "other_type], [followup], [Photolink], [dist_ups_inflow_invert_ measure], [dist_d" +
                "wn_outflow_ measure], [special_needs], [lid_color], [comments]) VALUES (@survey_" +
                "id, @update_time, @survey_date, @survey_time, @crew, @weather, @structure_num, @" +
                "location, @hansen_orifice_el, @laser_to_rim_measure, @weir, @laser_to_top_of_wei" +
                "r, @orifice_plate_or_baffle, @orifice_plate_or_baffle_type_and_measure, @orifice" +
                "_baffle_dia, @laser_to_orifice, @underflow_pipe_type, @underflow_pipe_height, @u" +
                "nderflow_pipe_width, @inflow_pipe_invert_measure, @inflow_pipe_type, @inflow_sha" +
                "pe, @inflow_measure, @inflow_dia_width, @inflow_dia_height, @inflow_notes, @p1, " +
                "@p4, @p7, @p10, @p13, @storm_outflow_measure, @storm_outflow_pipe_type, @storm_o" +
                "utflow_shape, @storm_outflow_dia_width, @storm_outflow_dia_height, @storm_outflo" +
                "w_notes, @chamber_shape, @chamber_height, @chamber_length, @chamber_width, @dam_" +
                "measure_comments, @laser_to_top_of_dam, @dam_length, @dam_face_shape, @dam_posit" +
                "ion, @dam_material, @freeboard, @diversion_type, @diversion_other_type, @followu" +
                "p, @Photolink, @dist_ups_inflow_invert__measure, @dist_dwn_outflow__measure, @sp" +
                "ecial_needs, @lid_color, @comments)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@survey_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "survey_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@update_time", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "update_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@survey_date", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "survey_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@survey_time", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "survey_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@crew", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "crew", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@weather", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "weather", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@structure_num", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "structure_num", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "location", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@hansen_orifice_el", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "hansen_orifice_el", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@laser_to_rim_measure", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "laser_to_rim_measure", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@weir", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "weir", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@laser_to_top_of_weir", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "laser_to_top_of_weir", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@orifice_plate_or_baffle", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "orifice_plate_or_baffle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@orifice_plate_or_baffle_type_and_measure", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "orifice_plate_or_baffle_type_and_measure", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@orifice_baffle_dia", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "orifice_baffle_dia", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@laser_to_orifice", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "laser_to_orifice", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@underflow_pipe_type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "underflow_pipe_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@underflow_pipe_height", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "underflow_pipe_height", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@underflow_pipe_width", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "underflow_pipe_width", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inflow_pipe_invert_measure", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "inflow_pipe_invert_measure", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inflow_pipe_type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inflow_pipe_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inflow_shape", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inflow_shape", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inflow_measure", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "inflow_measure", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inflow_dia_width", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "inflow_dia_width", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inflow_dia_height", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "inflow_dia_height", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inflow_notes", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inflow_notes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "2nd_inflow_pipe_invert_measure", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "2nd_inflow_pipe_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "2nd_inflow_shape", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p10", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "2nd_inflow_dia_width", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p13", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "2nd_inflow_dia_height", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@storm_outflow_measure", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "storm_outflow_measure", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@storm_outflow_pipe_type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "storm_outflow_pipe_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@storm_outflow_shape", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "storm_outflow_shape", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@storm_outflow_dia_width", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "storm_outflow_dia_width", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@storm_outflow_dia_height", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "storm_outflow_dia_height", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@storm_outflow_notes", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "storm_outflow_notes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chamber_shape", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "chamber_shape", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chamber_height", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "chamber_height", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chamber_length", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "chamber_length", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@chamber_width", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "chamber_width", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dam_measure_comments", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dam_measure_comments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@laser_to_top_of_dam", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "laser_to_top_of_dam", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dam_length", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "dam_length", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dam_face_shape", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dam_face_shape", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dam_position", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dam_position", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dam_material", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dam_material", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@freeboard", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "freeboard", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@diversion_type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "diversion_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@diversion_other_type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "diversion_other_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@followup", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "followup", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Photolink", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Photolink", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dist_ups_inflow_invert__measure", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "dist_ups_inflow_invert_ measure", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dist_dwn_outflow__measure", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 24, 2, "dist_dwn_outflow_ measure", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@special_needs", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "special_needs", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lid_color", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lid_color", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@comments", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "comments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.DataAccess.Properties.Settings.Default.DIVERSIONConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT survey_id, update_time, survey_date, survey_time, crew, weather, structure_num, location, hansen_orifice_el, laser_to_rim_measure, weir, laser_to_top_of_weir, orifice_plate_or_baffle, orifice_plate_or_baffle_type_and_measure, orifice_baffle_dia, laser_to_orifice, underflow_pipe_type, underflow_pipe_height, underflow_pipe_width, inflow_pipe_invert_measure, inflow_pipe_type, inflow_shape, inflow_measure, inflow_dia_width, inflow_dia_height, inflow_notes, [2nd_inflow_pipe_invert_measure], [2nd_inflow_pipe_type], [2nd_inflow_shape], [2nd_inflow_dia_width], [2nd_inflow_dia_height], storm_outflow_measure, storm_outflow_pipe_type, storm_outflow_shape, storm_outflow_dia_width, storm_outflow_dia_height, storm_outflow_notes, chamber_shape, chamber_height, chamber_length, chamber_width, dam_measure_comments, laser_to_top_of_dam, dam_length, dam_face_shape, dam_position, dam_material, freeboard, diversion_type, diversion_other_type, followup, Photolink, [dist_ups_inflow_invert_ measure], [dist_dwn_outflow_ measure], special_needs, lid_color, comments FROM dbo.SURVEYS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DiversionStructureDataSet.SurveysDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DiversionStructureDataSet.SurveysDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DiversionStructureDataSet.SurveysDataTable dataTable = new DiversionStructureDataSet.SurveysDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DiversionStructureDataSet.SurveysDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DiversionStructureDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Surveys");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int survey_id, 
                    global::System.Nullable<global::System.DateTime> update_time, 
                    global::System.Nullable<global::System.DateTime> survey_date, 
                    string survey_time, 
                    string crew, 
                    string weather, 
                    string structure_num, 
                    string location, 
                    global::System.Nullable<float> hansen_orifice_el, 
                    global::System.Nullable<decimal> laser_to_rim_measure, 
                    global::System.Nullable<bool> weir, 
                    global::System.Nullable<decimal> laser_to_top_of_weir, 
                    global::System.Nullable<bool> orifice_plate_or_baffle, 
                    string orifice_plate_or_baffle_type_and_measure, 
                    global::System.Nullable<decimal> orifice_baffle_dia, 
                    global::System.Nullable<decimal> laser_to_orifice, 
                    string underflow_pipe_type, 
                    global::System.Nullable<decimal> underflow_pipe_height, 
                    global::System.Nullable<decimal> underflow_pipe_width, 
                    global::System.Nullable<decimal> inflow_pipe_invert_measure, 
                    string inflow_pipe_type, 
                    string inflow_shape, 
                    global::System.Nullable<decimal> inflow_measure, 
                    global::System.Nullable<decimal> inflow_dia_width, 
                    global::System.Nullable<decimal> inflow_dia_height, 
                    string inflow_notes, 
                    global::System.Nullable<decimal> p1, 
                    string p4, 
                    string p7, 
                    global::System.Nullable<decimal> p10, 
                    global::System.Nullable<decimal> p13, 
                    global::System.Nullable<decimal> storm_outflow_measure, 
                    string storm_outflow_pipe_type, 
                    string storm_outflow_shape, 
                    global::System.Nullable<decimal> storm_outflow_dia_width, 
                    global::System.Nullable<decimal> storm_outflow_dia_height, 
                    string storm_outflow_notes, 
                    string chamber_shape, 
                    global::System.Nullable<decimal> chamber_height, 
                    global::System.Nullable<decimal> chamber_length, 
                    global::System.Nullable<decimal> chamber_width, 
                    string dam_measure_comments, 
                    global::System.Nullable<decimal> laser_to_top_of_dam, 
                    global::System.Nullable<decimal> dam_length, 
                    string dam_face_shape, 
                    string dam_position, 
                    string dam_material, 
                    global::System.Nullable<decimal> freeboard, 
                    string diversion_type, 
                    string diversion_other_type, 
                    string followup, 
                    string Photolink, 
                    global::System.Nullable<decimal> dist_ups_inflow_invert__measure, 
                    global::System.Nullable<decimal> dist_dwn_outflow__measure, 
                    string special_needs, 
                    string lid_color, 
                    string comments) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(survey_id));
            if ((update_time.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(update_time.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((survey_date.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(survey_date.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((survey_time == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(survey_time));
            }
            if ((crew == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(crew));
            }
            if ((weather == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(weather));
            }
            if ((structure_num == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(structure_num));
            }
            if ((location == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(location));
            }
            if ((hansen_orifice_el.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((float)(hansen_orifice_el.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((laser_to_rim_measure.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(laser_to_rim_measure.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((weir.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(weir.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((laser_to_top_of_weir.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((decimal)(laser_to_top_of_weir.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((orifice_plate_or_baffle.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((bool)(orifice_plate_or_baffle.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((orifice_plate_or_baffle_type_and_measure == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(orifice_plate_or_baffle_type_and_measure));
            }
            if ((orifice_baffle_dia.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((decimal)(orifice_baffle_dia.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((laser_to_orifice.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((decimal)(laser_to_orifice.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((underflow_pipe_type == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(underflow_pipe_type));
            }
            if ((underflow_pipe_height.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((decimal)(underflow_pipe_height.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((underflow_pipe_width.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((decimal)(underflow_pipe_width.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((inflow_pipe_invert_measure.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((decimal)(inflow_pipe_invert_measure.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((inflow_pipe_type == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(inflow_pipe_type));
            }
            if ((inflow_shape == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(inflow_shape));
            }
            if ((inflow_measure.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((decimal)(inflow_measure.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((inflow_dia_width.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((decimal)(inflow_dia_width.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((inflow_dia_height.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((decimal)(inflow_dia_height.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((inflow_notes == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(inflow_notes));
            }
            if ((p1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((decimal)(p1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((p4 == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(p4));
            }
            if ((p7 == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(p7));
            }
            if ((p10.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[29].Value = ((decimal)(p10.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((p13.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((decimal)(p13.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((storm_outflow_measure.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((decimal)(storm_outflow_measure.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((storm_outflow_pipe_type == null)) {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = ((string)(storm_outflow_pipe_type));
            }
            if ((storm_outflow_shape == null)) {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = ((string)(storm_outflow_shape));
            }
            if ((storm_outflow_dia_width.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[34].Value = ((decimal)(storm_outflow_dia_width.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((storm_outflow_dia_height.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[35].Value = ((decimal)(storm_outflow_dia_height.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((storm_outflow_notes == null)) {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = ((string)(storm_outflow_notes));
            }
            if ((chamber_shape == null)) {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = ((string)(chamber_shape));
            }
            if ((chamber_height.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[38].Value = ((decimal)(chamber_height.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((chamber_length.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[39].Value = ((decimal)(chamber_length.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((chamber_width.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[40].Value = ((decimal)(chamber_width.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((dam_measure_comments == null)) {
                this.Adapter.InsertCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[41].Value = ((string)(dam_measure_comments));
            }
            if ((laser_to_top_of_dam.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[42].Value = ((decimal)(laser_to_top_of_dam.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((dam_length.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[43].Value = ((decimal)(dam_length.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((dam_face_shape == null)) {
                this.Adapter.InsertCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[44].Value = ((string)(dam_face_shape));
            }
            if ((dam_position == null)) {
                this.Adapter.InsertCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[45].Value = ((string)(dam_position));
            }
            if ((dam_material == null)) {
                this.Adapter.InsertCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[46].Value = ((string)(dam_material));
            }
            if ((freeboard.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[47].Value = ((decimal)(freeboard.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            if ((diversion_type == null)) {
                this.Adapter.InsertCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[48].Value = ((string)(diversion_type));
            }
            if ((diversion_other_type == null)) {
                this.Adapter.InsertCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[49].Value = ((string)(diversion_other_type));
            }
            if ((followup == null)) {
                this.Adapter.InsertCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[50].Value = ((string)(followup));
            }
            if ((Photolink == null)) {
                this.Adapter.InsertCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[51].Value = ((string)(Photolink));
            }
            if ((dist_ups_inflow_invert__measure.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[52].Value = ((decimal)(dist_ups_inflow_invert__measure.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((dist_dwn_outflow__measure.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[53].Value = ((decimal)(dist_dwn_outflow__measure.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            if ((special_needs == null)) {
                this.Adapter.InsertCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[54].Value = ((string)(special_needs));
            }
            if ((lid_color == null)) {
                this.Adapter.InsertCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[55].Value = ((string)(lid_color));
            }
            if ((comments == null)) {
                this.Adapter.InsertCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[56].Value = ((string)(comments));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591